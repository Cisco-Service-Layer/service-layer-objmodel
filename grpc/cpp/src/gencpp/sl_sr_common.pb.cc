// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_sr_common.proto

#include "sl_sr_common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace service_layer {
constexpr SLSrPolicyFlags::SLSrPolicyFlags(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flags_(0u){}
struct SLSrPolicyFlagsDefaultTypeInternal {
  constexpr SLSrPolicyFlagsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrPolicyFlagsDefaultTypeInternal() {}
  union {
    SLSrPolicyFlags _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrPolicyFlagsDefaultTypeInternal _SLSrPolicyFlags_default_instance_;
constexpr SLSrBsid::SLSrBsid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SLSrBsidDefaultTypeInternal {
  constexpr SLSrBsidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrBsidDefaultTypeInternal() {}
  union {
    SLSrBsid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrBsidDefaultTypeInternal _SLSrBsid_default_instance_;
constexpr SLSrCpName::SLSrCpName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SLSrCpNameDefaultTypeInternal {
  constexpr SLSrCpNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrCpNameDefaultTypeInternal() {}
  union {
    SLSrCpName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrCpNameDefaultTypeInternal _SLSrCpName_default_instance_;
constexpr SLSrSegmentDesc::SLSrSegmentDesc(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ipv6localnodeglobaladdr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ipv6remotenodeglobaladdr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , localnode_(nullptr)
  , remotenode_(nullptr)
  , algorithm_(0u)
  , localnodeintfid_(0u)
  , remotenodeintfid_(0u){}
struct SLSrSegmentDescDefaultTypeInternal {
  constexpr SLSrSegmentDescDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrSegmentDescDefaultTypeInternal() {}
  union {
    SLSrSegmentDesc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrSegmentDescDefaultTypeInternal _SLSrSegmentDesc_default_instance_;
constexpr SLSrSegment::SLSrSegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : segmentdesc_(nullptr)
  , endpointbehaviour_(nullptr)
  , sidstruct_(nullptr)
  , type_(0)

  , flags_(0u)
  , _oneof_case_{}{}
struct SLSrSegmentDefaultTypeInternal {
  constexpr SLSrSegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrSegmentDefaultTypeInternal() {}
  union {
    SLSrSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrSegmentDefaultTypeInternal _SLSrSegment_default_instance_;
constexpr SLSrv6BindingSid::SLSrv6BindingSid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bsid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , specifiedbsid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , endpointbehaviour_(nullptr)
  , sidstruct_(nullptr)
  , flags_(0u){}
struct SLSrv6BindingSidDefaultTypeInternal {
  constexpr SLSrv6BindingSidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrv6BindingSidDefaultTypeInternal() {}
  union {
    SLSrv6BindingSid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrv6BindingSidDefaultTypeInternal _SLSrv6BindingSid_default_instance_;
constexpr SLSrv6EndPointBehavior::SLSrv6EndPointBehavior(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : endpointbehavior_(0u)
  , flags_(0u)
  , algorithm_(0u){}
struct SLSrv6EndPointBehaviorDefaultTypeInternal {
  constexpr SLSrv6EndPointBehaviorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrv6EndPointBehaviorDefaultTypeInternal() {}
  union {
    SLSrv6EndPointBehavior _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrv6EndPointBehaviorDefaultTypeInternal _SLSrv6EndPointBehavior_default_instance_;
constexpr SLSrv6SidStruct::SLSrv6SidStruct(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : locatorblocklen_(0u)
  , locatornodelen_(0u)
  , functionlen_(0u)
  , arglen_(0u){}
struct SLSrv6SidStructDefaultTypeInternal {
  constexpr SLSrv6SidStructDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrv6SidStructDefaultTypeInternal() {}
  union {
    SLSrv6SidStruct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrv6SidStructDefaultTypeInternal _SLSrv6SidStruct_default_instance_;
}  // namespace service_layer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sl_5fsr_5fcommon_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sl_5fsr_5fcommon_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sl_5fsr_5fcommon_2eproto = nullptr;

const uint32_t TableStruct_sl_5fsr_5fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyFlags, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrBsid, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrBsid, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrBsid, BindingSid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrCpName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrCpName, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrSegmentDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrSegmentDesc, algorithm_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrSegmentDesc, localnode_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrSegmentDesc, remotenode_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrSegmentDesc, ipv6localnodeglobaladdr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrSegmentDesc, ipv6remotenodeglobaladdr_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrSegmentDesc, localnodeintfid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrSegmentDesc, remotenodeintfid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrSegment, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrSegment, type_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrSegment, flags_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrSegment, segmentdesc_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrSegment, endpointbehaviour_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrSegment, sidstruct_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrSegment, Sid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrv6BindingSid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrv6BindingSid, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrv6BindingSid, bsid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrv6BindingSid, specifiedbsid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrv6BindingSid, endpointbehaviour_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrv6BindingSid, sidstruct_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrv6EndPointBehavior, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrv6EndPointBehavior, endpointbehavior_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrv6EndPointBehavior, flags_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrv6EndPointBehavior, algorithm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrv6SidStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrv6SidStruct, locatorblocklen_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrv6SidStruct, locatornodelen_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrv6SidStruct, functionlen_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrv6SidStruct, arglen_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::service_layer::SLSrPolicyFlags)},
  { 7, -1, -1, sizeof(::service_layer::SLSrBsid)},
  { 16, -1, -1, sizeof(::service_layer::SLSrCpName)},
  { 23, -1, -1, sizeof(::service_layer::SLSrSegmentDesc)},
  { 36, -1, -1, sizeof(::service_layer::SLSrSegment)},
  { 50, -1, -1, sizeof(::service_layer::SLSrv6BindingSid)},
  { 61, -1, -1, sizeof(::service_layer::SLSrv6EndPointBehavior)},
  { 70, -1, -1, sizeof(::service_layer::SLSrv6SidStruct)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrPolicyFlags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrBsid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrCpName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrSegmentDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrv6BindingSid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrv6EndPointBehavior_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrv6SidStruct_default_instance_),
};

const char descriptor_table_protodef_sl_5fsr_5fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022sl_sr_common.proto\022\rservice_layer\032\025sl_"
  "common_types.proto\" \n\017SLSrPolicyFlags\022\r\n"
  "\005Flags\030\001 \001(\r\"@\n\010SLSrBsid\022\022\n\010MplsBsid\030\001 \001"
  "(\rH\000\022\022\n\010Srv6Bsid\030\002 \001(\014H\000B\014\n\nBindingSid\"\032"
  "\n\nSLSrCpName\022\014\n\004Name\030\001 \001(\t\"\371\001\n\017SLSrSegme"
  "ntDesc\022\021\n\tAlgorithm\030\001 \001(\r\022-\n\tLocalNode\030\002"
  " \001(\0132\032.service_layer.SLIpAddress\022.\n\nRemo"
  "teNode\030\003 \001(\0132\032.service_layer.SLIpAddress"
  "\022\037\n\027Ipv6LocalNodeGlobalAddr\030\004 \001(\014\022 \n\030Ipv"
  "6RemoteNodeGlobalAddr\030\005 \001(\014\022\027\n\017LocalNode"
  "IntfId\030\006 \001(\r\022\030\n\020RemoteNodeIntfId\030\007 \001(\r\"\243"
  "\002\n\013SLSrSegment\022,\n\004Type\030\001 \001(\0162\036.service_l"
  "ayer.SLSrSegmentType\022\r\n\005Flags\030\002 \001(\r\022\023\n\tM"
  "plsLabel\030\003 \001(\rH\000\022\021\n\007Srv6Sid\030\004 \001(\014H\000\0223\n\013S"
  "egmentDesc\030\005 \001(\0132\036.service_layer.SLSrSeg"
  "mentDesc\022@\n\021EndPointBehaviour\030\006 \001(\0132%.se"
  "rvice_layer.SLSrv6EndPointBehavior\0221\n\tSi"
  "dStruct\030\007 \001(\0132\036.service_layer.SLSrv6SidS"
  "tructB\005\n\003Sid\"\273\001\n\020SLSrv6BindingSid\022\r\n\005Fla"
  "gs\030\001 \001(\r\022\014\n\004Bsid\030\002 \001(\014\022\025\n\rSpecifiedBsid\030"
  "\003 \001(\014\022@\n\021EndPointBehaviour\030\004 \001(\0132%.servi"
  "ce_layer.SLSrv6EndPointBehavior\0221\n\tSidSt"
  "ruct\030\005 \001(\0132\036.service_layer.SLSrv6SidStru"
  "ct\"T\n\026SLSrv6EndPointBehavior\022\030\n\020EndPoint"
  "Behavior\030\001 \001(\r\022\r\n\005Flags\030\002 \001(\r\022\021\n\tAlgorit"
  "hm\030\003 \001(\r\"g\n\017SLSrv6SidStruct\022\027\n\017LocatorBl"
  "ockLen\030\001 \001(\r\022\026\n\016LocatorNodeLen\030\002 \001(\r\022\023\n\013"
  "FunctionLen\030\003 \001(\r\022\016\n\006ArgLen\030\004 \001(\r*\217\003\n\030SL"
  "SrPolicyProtocolOrigin\022)\n%SL_SR_POLICY_P"
  "ROTOCOL_ORIGIN_RESERVED\020\000\022%\n!SL_SR_POLIC"
  "Y_PROTOCOL_ORIGIN_PCEP\020\001\022.\n*SL_SR_POLICY"
  "_PROTOCOL_ORIGIN_BGP_SR_POLICY\020\002\022\'\n#SL_S"
  "R_POLICY_PROTOCOL_ORIGIN_CONFIG\020\003\022-\n)SL_"
  "SR_POLICY_PROTOCOL_ORIGIN_PCEP_VIA_PCE\020\n"
  "\0226\n2SL_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_"
  "POLICY_VIA_PCE\020\024\022/\n+SL_SR_POLICY_PROTOCO"
  "L_ORIGIN_CONFIG_VIA_PCE\020\036\0220\n,SL_SR_POLIC"
  "Y_PROTOCOL_ORIGIN_CONFIG_VIA_GRPC\020(*}\n\022S"
  "LSrPolicyFlagsDef\022\036\n\032SL_SR_POLICY_FLAG_R"
  "ESERVED\020\000\022\"\n\035SL_SR_POLICY_FLAG_ENDPOINT_"
  "V6\020\200\001\022#\n\037SL_SR_POLICY_FLAG_ORIGINATOR_V6"
  "\020@*\233\004\n\017SLSrSegmentType\022\033\n\027SL_SR_SEG_TYPE"
  "_RESERVED\020\000\022\035\n\031SL_SR_SEG_TYPE_MPLS_LABEL"
  "\020\001\022\036\n\032SL_SR_SEG_TYPE_SRV6_SID_V6\020\002\022\"\n\036SL"
  "_SR_SEG_TYPE_MPLS_PFX_SID_V4\020\003\022\"\n\036SL_SR_"
  "SEG_TYPE_MPLS_PFX_SID_V6\020\004\0223\n/SL_SR_SEG_"
  "TYPE_MPLS_ADJ_SID_V4_NODE_ADDR_LOC_ID\020\005\022"
  "/\n+SL_SR_SEG_TYPE_MPLS_ADJ_SID_V4_LOC_RE"
  "M_ADDR\020\006\0226\n2SL_SR_SEG_TYPE_MPLS_ADJ_SID_"
  "V6_LOC_REM_ADDR_AND_ID\020\007\022/\n+SL_SR_SEG_TY"
  "PE_MPLS_ADJ_SID_V6_LOC_REM_ADDR\020\010\022,\n(SL_"
  "SR_SEG_TYPE_SRV6_END_SID_V6_NODE_ADDR\020\t\022"
  "6\n2SL_SR_SEG_TYPE_SRV6_END_SID_V6_LOC_RE"
  "M_ADDR_AND_ID\020\n\022/\n+SL_SR_SEG_TYPE_SRV6_E"
  "ND_SID_V6_LOC_REM_ADDR\020\013*\200\002\n\020SLSrSegment"
  "Flags\022\037\n\033SL_SR_SEGMENT_FLAG_RESERVED\020\000\022$"
  "\n\036SL_SR_SEGMENT_FLAG_SID_PRESENT\020\200\200\002\0221\n+"
  "SL_SR_SEGMENT_FLAG_SID_EXPLICIT_PROVISIO"
  "NED\020\200\200\001\022$\n\037SL_SR_SEGMENT_FLAG_SID_VERIFI"
  "ED\020\200@\022$\n\037SL_SR_SEGMENT_FLAG_SID_RESOLVED"
  "\020\200 \022&\n!SL_SR_SEGMENT_FLAG_SID_ALGO_VALID"
  "\020\200\020*\233\001\n\025SLSrv6BindingSidFlags\022\036\n\032SL_SRV6"
  "_BSID_FLAG_RESERVED\020\000\022!\n\033SL_SRV6_BSID_FL"
  "AG_ALLOCATED\020\200\200\002\022\037\n\031SL_SRV6_BSID_FLAG_UN"
  "AVAIL\020\200\200\001\022\036\n\031SL_SRV6_BSID_FLAG_DYNAMIC\020\200"
  "@BQZOgithub.com/Cisco-service-layer/serv"
  "ice-layer-objmodel/grpc/protos;service_l"
  "ayerb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sl_5fsr_5fcommon_2eproto_deps[1] = {
  &::descriptor_table_sl_5fcommon_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sl_5fsr_5fcommon_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fsr_5fcommon_2eproto = {
  false, false, 2692, descriptor_table_protodef_sl_5fsr_5fcommon_2eproto, "sl_sr_common.proto", 
  &descriptor_table_sl_5fsr_5fcommon_2eproto_once, descriptor_table_sl_5fsr_5fcommon_2eproto_deps, 1, 8,
  schemas, file_default_instances, TableStruct_sl_5fsr_5fcommon_2eproto::offsets,
  file_level_metadata_sl_5fsr_5fcommon_2eproto, file_level_enum_descriptors_sl_5fsr_5fcommon_2eproto, file_level_service_descriptors_sl_5fsr_5fcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sl_5fsr_5fcommon_2eproto_getter() {
  return &descriptor_table_sl_5fsr_5fcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sl_5fsr_5fcommon_2eproto(&descriptor_table_sl_5fsr_5fcommon_2eproto);
namespace service_layer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrPolicyProtocolOrigin_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fsr_5fcommon_2eproto);
  return file_level_enum_descriptors_sl_5fsr_5fcommon_2eproto[0];
}
bool SLSrPolicyProtocolOrigin_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
    case 20:
    case 30:
    case 40:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrPolicyFlagsDef_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fsr_5fcommon_2eproto);
  return file_level_enum_descriptors_sl_5fsr_5fcommon_2eproto[1];
}
bool SLSrPolicyFlagsDef_IsValid(int value) {
  switch (value) {
    case 0:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrSegmentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fsr_5fcommon_2eproto);
  return file_level_enum_descriptors_sl_5fsr_5fcommon_2eproto[2];
}
bool SLSrSegmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrSegmentFlags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fsr_5fcommon_2eproto);
  return file_level_enum_descriptors_sl_5fsr_5fcommon_2eproto[3];
}
bool SLSrSegmentFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrv6BindingSidFlags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fsr_5fcommon_2eproto);
  return file_level_enum_descriptors_sl_5fsr_5fcommon_2eproto[4];
}
bool SLSrv6BindingSidFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 8192:
    case 16384:
    case 32768:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SLSrPolicyFlags::_Internal {
 public:
};

SLSrPolicyFlags::SLSrPolicyFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrPolicyFlags)
}
SLSrPolicyFlags::SLSrPolicyFlags(const SLSrPolicyFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_ = from.flags_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrPolicyFlags)
}

inline void SLSrPolicyFlags::SharedCtor() {
flags_ = 0u;
}

SLSrPolicyFlags::~SLSrPolicyFlags() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrPolicyFlags)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrPolicyFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLSrPolicyFlags::ArenaDtor(void* object) {
  SLSrPolicyFlags* _this = reinterpret_cast< SLSrPolicyFlags* >(object);
  (void)_this;
}
void SLSrPolicyFlags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrPolicyFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrPolicyFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrPolicyFlags)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrPolicyFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrPolicyFlags::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrPolicyFlags)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Flags = 1;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrPolicyFlags)
  return target;
}

size_t SLSrPolicyFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrPolicyFlags)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Flags = 1;
  if (this->_internal_flags() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrPolicyFlags::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrPolicyFlags::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrPolicyFlags::GetClassData() const { return &_class_data_; }

void SLSrPolicyFlags::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrPolicyFlags *>(to)->MergeFrom(
      static_cast<const SLSrPolicyFlags &>(from));
}


void SLSrPolicyFlags::MergeFrom(const SLSrPolicyFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrPolicyFlags)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrPolicyFlags::CopyFrom(const SLSrPolicyFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrPolicyFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrPolicyFlags::IsInitialized() const {
  return true;
}

void SLSrPolicyFlags::InternalSwap(SLSrPolicyFlags* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(flags_, other->flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrPolicyFlags::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsr_5fcommon_2eproto_getter, &descriptor_table_sl_5fsr_5fcommon_2eproto_once,
      file_level_metadata_sl_5fsr_5fcommon_2eproto[0]);
}

// ===================================================================

class SLSrBsid::_Internal {
 public:
};

SLSrBsid::SLSrBsid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrBsid)
}
SLSrBsid::SLSrBsid(const SLSrBsid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_BindingSid();
  switch (from.BindingSid_case()) {
    case kMplsBsid: {
      _internal_set_mplsbsid(from._internal_mplsbsid());
      break;
    }
    case kSrv6Bsid: {
      _internal_set_srv6bsid(from._internal_srv6bsid());
      break;
    }
    case BINDINGSID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrBsid)
}

inline void SLSrBsid::SharedCtor() {
clear_has_BindingSid();
}

SLSrBsid::~SLSrBsid() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrBsid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrBsid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_BindingSid()) {
    clear_BindingSid();
  }
}

void SLSrBsid::ArenaDtor(void* object) {
  SLSrBsid* _this = reinterpret_cast< SLSrBsid* >(object);
  (void)_this;
}
void SLSrBsid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrBsid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrBsid::clear_BindingSid() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLSrBsid)
  switch (BindingSid_case()) {
    case kMplsBsid: {
      // No need to clear
      break;
    }
    case kSrv6Bsid: {
      BindingSid_.srv6bsid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case BINDINGSID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BINDINGSID_NOT_SET;
}


void SLSrBsid::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrBsid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_BindingSid();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrBsid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 MplsBsid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_mplsbsid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Srv6Bsid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_srv6bsid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrBsid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrBsid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 MplsBsid = 1;
  if (_internal_has_mplsbsid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mplsbsid(), target);
  }

  // bytes Srv6Bsid = 2;
  if (_internal_has_srv6bsid()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_srv6bsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrBsid)
  return target;
}

size_t SLSrBsid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrBsid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (BindingSid_case()) {
    // uint32 MplsBsid = 1;
    case kMplsBsid: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mplsbsid());
      break;
    }
    // bytes Srv6Bsid = 2;
    case kSrv6Bsid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_srv6bsid());
      break;
    }
    case BINDINGSID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrBsid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrBsid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrBsid::GetClassData() const { return &_class_data_; }

void SLSrBsid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrBsid *>(to)->MergeFrom(
      static_cast<const SLSrBsid &>(from));
}


void SLSrBsid::MergeFrom(const SLSrBsid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrBsid)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.BindingSid_case()) {
    case kMplsBsid: {
      _internal_set_mplsbsid(from._internal_mplsbsid());
      break;
    }
    case kSrv6Bsid: {
      _internal_set_srv6bsid(from._internal_srv6bsid());
      break;
    }
    case BINDINGSID_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrBsid::CopyFrom(const SLSrBsid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrBsid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrBsid::IsInitialized() const {
  return true;
}

void SLSrBsid::InternalSwap(SLSrBsid* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(BindingSid_, other->BindingSid_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrBsid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsr_5fcommon_2eproto_getter, &descriptor_table_sl_5fsr_5fcommon_2eproto_once,
      file_level_metadata_sl_5fsr_5fcommon_2eproto[1]);
}

// ===================================================================

class SLSrCpName::_Internal {
 public:
};

SLSrCpName::SLSrCpName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrCpName)
}
SLSrCpName::SLSrCpName(const SLSrCpName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrCpName)
}

inline void SLSrCpName::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLSrCpName::~SLSrCpName() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrCpName)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrCpName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLSrCpName::ArenaDtor(void* object) {
  SLSrCpName* _this = reinterpret_cast< SLSrCpName* >(object);
  (void)_this;
}
void SLSrCpName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrCpName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrCpName::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrCpName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrCpName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLSrCpName.Name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrCpName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrCpName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLSrCpName.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrCpName)
  return target;
}

size_t SLSrCpName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrCpName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrCpName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrCpName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrCpName::GetClassData() const { return &_class_data_; }

void SLSrCpName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrCpName *>(to)->MergeFrom(
      static_cast<const SLSrCpName &>(from));
}


void SLSrCpName::MergeFrom(const SLSrCpName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrCpName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrCpName::CopyFrom(const SLSrCpName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrCpName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrCpName::IsInitialized() const {
  return true;
}

void SLSrCpName::InternalSwap(SLSrCpName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrCpName::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsr_5fcommon_2eproto_getter, &descriptor_table_sl_5fsr_5fcommon_2eproto_once,
      file_level_metadata_sl_5fsr_5fcommon_2eproto[2]);
}

// ===================================================================

class SLSrSegmentDesc::_Internal {
 public:
  static const ::service_layer::SLIpAddress& localnode(const SLSrSegmentDesc* msg);
  static const ::service_layer::SLIpAddress& remotenode(const SLSrSegmentDesc* msg);
};

const ::service_layer::SLIpAddress&
SLSrSegmentDesc::_Internal::localnode(const SLSrSegmentDesc* msg) {
  return *msg->localnode_;
}
const ::service_layer::SLIpAddress&
SLSrSegmentDesc::_Internal::remotenode(const SLSrSegmentDesc* msg) {
  return *msg->remotenode_;
}
void SLSrSegmentDesc::clear_localnode() {
  if (GetArenaForAllocation() == nullptr && localnode_ != nullptr) {
    delete localnode_;
  }
  localnode_ = nullptr;
}
void SLSrSegmentDesc::clear_remotenode() {
  if (GetArenaForAllocation() == nullptr && remotenode_ != nullptr) {
    delete remotenode_;
  }
  remotenode_ = nullptr;
}
SLSrSegmentDesc::SLSrSegmentDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrSegmentDesc)
}
SLSrSegmentDesc::SLSrSegmentDesc(const SLSrSegmentDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ipv6localnodeglobaladdr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ipv6localnodeglobaladdr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ipv6localnodeglobaladdr().empty()) {
    ipv6localnodeglobaladdr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipv6localnodeglobaladdr(), 
      GetArenaForAllocation());
  }
  ipv6remotenodeglobaladdr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ipv6remotenodeglobaladdr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ipv6remotenodeglobaladdr().empty()) {
    ipv6remotenodeglobaladdr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipv6remotenodeglobaladdr(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_localnode()) {
    localnode_ = new ::service_layer::SLIpAddress(*from.localnode_);
  } else {
    localnode_ = nullptr;
  }
  if (from._internal_has_remotenode()) {
    remotenode_ = new ::service_layer::SLIpAddress(*from.remotenode_);
  } else {
    remotenode_ = nullptr;
  }
  ::memcpy(&algorithm_, &from.algorithm_,
    static_cast<size_t>(reinterpret_cast<char*>(&remotenodeintfid_) -
    reinterpret_cast<char*>(&algorithm_)) + sizeof(remotenodeintfid_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrSegmentDesc)
}

inline void SLSrSegmentDesc::SharedCtor() {
ipv6localnodeglobaladdr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ipv6localnodeglobaladdr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ipv6remotenodeglobaladdr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ipv6remotenodeglobaladdr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&localnode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remotenodeintfid_) -
    reinterpret_cast<char*>(&localnode_)) + sizeof(remotenodeintfid_));
}

SLSrSegmentDesc::~SLSrSegmentDesc() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrSegmentDesc)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrSegmentDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ipv6localnodeglobaladdr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6remotenodeglobaladdr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete localnode_;
  if (this != internal_default_instance()) delete remotenode_;
}

void SLSrSegmentDesc::ArenaDtor(void* object) {
  SLSrSegmentDesc* _this = reinterpret_cast< SLSrSegmentDesc* >(object);
  (void)_this;
}
void SLSrSegmentDesc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrSegmentDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrSegmentDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrSegmentDesc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ipv6localnodeglobaladdr_.ClearToEmpty();
  ipv6remotenodeglobaladdr_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && localnode_ != nullptr) {
    delete localnode_;
  }
  localnode_ = nullptr;
  if (GetArenaForAllocation() == nullptr && remotenode_ != nullptr) {
    delete remotenode_;
  }
  remotenode_ = nullptr;
  ::memset(&algorithm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remotenodeintfid_) -
      reinterpret_cast<char*>(&algorithm_)) + sizeof(remotenodeintfid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrSegmentDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Algorithm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          algorithm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLIpAddress LocalNode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_localnode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLIpAddress RemoteNode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_remotenode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Ipv6LocalNodeGlobalAddr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ipv6localnodeglobaladdr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Ipv6RemoteNodeGlobalAddr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_ipv6remotenodeglobaladdr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 LocalNodeIntfId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          localnodeintfid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 RemoteNodeIntfId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          remotenodeintfid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrSegmentDesc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrSegmentDesc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Algorithm = 1;
  if (this->_internal_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_algorithm(), target);
  }

  // .service_layer.SLIpAddress LocalNode = 2;
  if (this->_internal_has_localnode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::localnode(this), target, stream);
  }

  // .service_layer.SLIpAddress RemoteNode = 3;
  if (this->_internal_has_remotenode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::remotenode(this), target, stream);
  }

  // bytes Ipv6LocalNodeGlobalAddr = 4;
  if (!this->_internal_ipv6localnodeglobaladdr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_ipv6localnodeglobaladdr(), target);
  }

  // bytes Ipv6RemoteNodeGlobalAddr = 5;
  if (!this->_internal_ipv6remotenodeglobaladdr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_ipv6remotenodeglobaladdr(), target);
  }

  // uint32 LocalNodeIntfId = 6;
  if (this->_internal_localnodeintfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_localnodeintfid(), target);
  }

  // uint32 RemoteNodeIntfId = 7;
  if (this->_internal_remotenodeintfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_remotenodeintfid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrSegmentDesc)
  return target;
}

size_t SLSrSegmentDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrSegmentDesc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Ipv6LocalNodeGlobalAddr = 4;
  if (!this->_internal_ipv6localnodeglobaladdr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ipv6localnodeglobaladdr());
  }

  // bytes Ipv6RemoteNodeGlobalAddr = 5;
  if (!this->_internal_ipv6remotenodeglobaladdr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ipv6remotenodeglobaladdr());
  }

  // .service_layer.SLIpAddress LocalNode = 2;
  if (this->_internal_has_localnode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *localnode_);
  }

  // .service_layer.SLIpAddress RemoteNode = 3;
  if (this->_internal_has_remotenode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remotenode_);
  }

  // uint32 Algorithm = 1;
  if (this->_internal_algorithm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_algorithm());
  }

  // uint32 LocalNodeIntfId = 6;
  if (this->_internal_localnodeintfid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_localnodeintfid());
  }

  // uint32 RemoteNodeIntfId = 7;
  if (this->_internal_remotenodeintfid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_remotenodeintfid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrSegmentDesc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrSegmentDesc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrSegmentDesc::GetClassData() const { return &_class_data_; }

void SLSrSegmentDesc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrSegmentDesc *>(to)->MergeFrom(
      static_cast<const SLSrSegmentDesc &>(from));
}


void SLSrSegmentDesc::MergeFrom(const SLSrSegmentDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrSegmentDesc)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ipv6localnodeglobaladdr().empty()) {
    _internal_set_ipv6localnodeglobaladdr(from._internal_ipv6localnodeglobaladdr());
  }
  if (!from._internal_ipv6remotenodeglobaladdr().empty()) {
    _internal_set_ipv6remotenodeglobaladdr(from._internal_ipv6remotenodeglobaladdr());
  }
  if (from._internal_has_localnode()) {
    _internal_mutable_localnode()->::service_layer::SLIpAddress::MergeFrom(from._internal_localnode());
  }
  if (from._internal_has_remotenode()) {
    _internal_mutable_remotenode()->::service_layer::SLIpAddress::MergeFrom(from._internal_remotenode());
  }
  if (from._internal_algorithm() != 0) {
    _internal_set_algorithm(from._internal_algorithm());
  }
  if (from._internal_localnodeintfid() != 0) {
    _internal_set_localnodeintfid(from._internal_localnodeintfid());
  }
  if (from._internal_remotenodeintfid() != 0) {
    _internal_set_remotenodeintfid(from._internal_remotenodeintfid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrSegmentDesc::CopyFrom(const SLSrSegmentDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrSegmentDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrSegmentDesc::IsInitialized() const {
  return true;
}

void SLSrSegmentDesc::InternalSwap(SLSrSegmentDesc* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ipv6localnodeglobaladdr_, lhs_arena,
      &other->ipv6localnodeglobaladdr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ipv6remotenodeglobaladdr_, lhs_arena,
      &other->ipv6remotenodeglobaladdr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLSrSegmentDesc, remotenodeintfid_)
      + sizeof(SLSrSegmentDesc::remotenodeintfid_)
      - PROTOBUF_FIELD_OFFSET(SLSrSegmentDesc, localnode_)>(
          reinterpret_cast<char*>(&localnode_),
          reinterpret_cast<char*>(&other->localnode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrSegmentDesc::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsr_5fcommon_2eproto_getter, &descriptor_table_sl_5fsr_5fcommon_2eproto_once,
      file_level_metadata_sl_5fsr_5fcommon_2eproto[3]);
}

// ===================================================================

class SLSrSegment::_Internal {
 public:
  static const ::service_layer::SLSrSegmentDesc& segmentdesc(const SLSrSegment* msg);
  static const ::service_layer::SLSrv6EndPointBehavior& endpointbehaviour(const SLSrSegment* msg);
  static const ::service_layer::SLSrv6SidStruct& sidstruct(const SLSrSegment* msg);
};

const ::service_layer::SLSrSegmentDesc&
SLSrSegment::_Internal::segmentdesc(const SLSrSegment* msg) {
  return *msg->segmentdesc_;
}
const ::service_layer::SLSrv6EndPointBehavior&
SLSrSegment::_Internal::endpointbehaviour(const SLSrSegment* msg) {
  return *msg->endpointbehaviour_;
}
const ::service_layer::SLSrv6SidStruct&
SLSrSegment::_Internal::sidstruct(const SLSrSegment* msg) {
  return *msg->sidstruct_;
}
SLSrSegment::SLSrSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrSegment)
}
SLSrSegment::SLSrSegment(const SLSrSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_segmentdesc()) {
    segmentdesc_ = new ::service_layer::SLSrSegmentDesc(*from.segmentdesc_);
  } else {
    segmentdesc_ = nullptr;
  }
  if (from._internal_has_endpointbehaviour()) {
    endpointbehaviour_ = new ::service_layer::SLSrv6EndPointBehavior(*from.endpointbehaviour_);
  } else {
    endpointbehaviour_ = nullptr;
  }
  if (from._internal_has_sidstruct()) {
    sidstruct_ = new ::service_layer::SLSrv6SidStruct(*from.sidstruct_);
  } else {
    sidstruct_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&type_)) + sizeof(flags_));
  clear_has_Sid();
  switch (from.Sid_case()) {
    case kMplsLabel: {
      _internal_set_mplslabel(from._internal_mplslabel());
      break;
    }
    case kSrv6Sid: {
      _internal_set_srv6sid(from._internal_srv6sid());
      break;
    }
    case SID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrSegment)
}

inline void SLSrSegment::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&segmentdesc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&segmentdesc_)) + sizeof(flags_));
clear_has_Sid();
}

SLSrSegment::~SLSrSegment() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrSegment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete segmentdesc_;
  if (this != internal_default_instance()) delete endpointbehaviour_;
  if (this != internal_default_instance()) delete sidstruct_;
  if (has_Sid()) {
    clear_Sid();
  }
}

void SLSrSegment::ArenaDtor(void* object) {
  SLSrSegment* _this = reinterpret_cast< SLSrSegment* >(object);
  (void)_this;
}
void SLSrSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrSegment::clear_Sid() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLSrSegment)
  switch (Sid_case()) {
    case kMplsLabel: {
      // No need to clear
      break;
    }
    case kSrv6Sid: {
      Sid_.srv6sid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case SID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SID_NOT_SET;
}


void SLSrSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrSegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && segmentdesc_ != nullptr) {
    delete segmentdesc_;
  }
  segmentdesc_ = nullptr;
  if (GetArenaForAllocation() == nullptr && endpointbehaviour_ != nullptr) {
    delete endpointbehaviour_;
  }
  endpointbehaviour_ = nullptr;
  if (GetArenaForAllocation() == nullptr && sidstruct_ != nullptr) {
    delete sidstruct_;
  }
  sidstruct_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&type_)) + sizeof(flags_));
  clear_Sid();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLSrSegmentType Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::service_layer::SLSrSegmentType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 Flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MplsLabel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_mplslabel(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Srv6Sid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_srv6sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrSegmentDesc SegmentDesc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_segmentdesc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrv6EndPointBehavior EndPointBehaviour = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpointbehaviour(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrv6SidStruct SidStruct = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sidstruct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrSegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrSegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLSrSegmentType Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 Flags = 2;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flags(), target);
  }

  // uint32 MplsLabel = 3;
  if (_internal_has_mplslabel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mplslabel(), target);
  }

  // bytes Srv6Sid = 4;
  if (_internal_has_srv6sid()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_srv6sid(), target);
  }

  // .service_layer.SLSrSegmentDesc SegmentDesc = 5;
  if (this->_internal_has_segmentdesc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::segmentdesc(this), target, stream);
  }

  // .service_layer.SLSrv6EndPointBehavior EndPointBehaviour = 6;
  if (this->_internal_has_endpointbehaviour()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::endpointbehaviour(this), target, stream);
  }

  // .service_layer.SLSrv6SidStruct SidStruct = 7;
  if (this->_internal_has_sidstruct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::sidstruct(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrSegment)
  return target;
}

size_t SLSrSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrSegment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLSrSegmentDesc SegmentDesc = 5;
  if (this->_internal_has_segmentdesc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *segmentdesc_);
  }

  // .service_layer.SLSrv6EndPointBehavior EndPointBehaviour = 6;
  if (this->_internal_has_endpointbehaviour()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endpointbehaviour_);
  }

  // .service_layer.SLSrv6SidStruct SidStruct = 7;
  if (this->_internal_has_sidstruct()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sidstruct_);
  }

  // .service_layer.SLSrSegmentType Type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 Flags = 2;
  if (this->_internal_flags() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  switch (Sid_case()) {
    // uint32 MplsLabel = 3;
    case kMplsLabel: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mplslabel());
      break;
    }
    // bytes Srv6Sid = 4;
    case kSrv6Sid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_srv6sid());
      break;
    }
    case SID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrSegment::GetClassData() const { return &_class_data_; }

void SLSrSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrSegment *>(to)->MergeFrom(
      static_cast<const SLSrSegment &>(from));
}


void SLSrSegment::MergeFrom(const SLSrSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrSegment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_segmentdesc()) {
    _internal_mutable_segmentdesc()->::service_layer::SLSrSegmentDesc::MergeFrom(from._internal_segmentdesc());
  }
  if (from._internal_has_endpointbehaviour()) {
    _internal_mutable_endpointbehaviour()->::service_layer::SLSrv6EndPointBehavior::MergeFrom(from._internal_endpointbehaviour());
  }
  if (from._internal_has_sidstruct()) {
    _internal_mutable_sidstruct()->::service_layer::SLSrv6SidStruct::MergeFrom(from._internal_sidstruct());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  switch (from.Sid_case()) {
    case kMplsLabel: {
      _internal_set_mplslabel(from._internal_mplslabel());
      break;
    }
    case kSrv6Sid: {
      _internal_set_srv6sid(from._internal_srv6sid());
      break;
    }
    case SID_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrSegment::CopyFrom(const SLSrSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrSegment::IsInitialized() const {
  return true;
}

void SLSrSegment::InternalSwap(SLSrSegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLSrSegment, flags_)
      + sizeof(SLSrSegment::flags_)
      - PROTOBUF_FIELD_OFFSET(SLSrSegment, segmentdesc_)>(
          reinterpret_cast<char*>(&segmentdesc_),
          reinterpret_cast<char*>(&other->segmentdesc_));
  swap(Sid_, other->Sid_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrSegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsr_5fcommon_2eproto_getter, &descriptor_table_sl_5fsr_5fcommon_2eproto_once,
      file_level_metadata_sl_5fsr_5fcommon_2eproto[4]);
}

// ===================================================================

class SLSrv6BindingSid::_Internal {
 public:
  static const ::service_layer::SLSrv6EndPointBehavior& endpointbehaviour(const SLSrv6BindingSid* msg);
  static const ::service_layer::SLSrv6SidStruct& sidstruct(const SLSrv6BindingSid* msg);
};

const ::service_layer::SLSrv6EndPointBehavior&
SLSrv6BindingSid::_Internal::endpointbehaviour(const SLSrv6BindingSid* msg) {
  return *msg->endpointbehaviour_;
}
const ::service_layer::SLSrv6SidStruct&
SLSrv6BindingSid::_Internal::sidstruct(const SLSrv6BindingSid* msg) {
  return *msg->sidstruct_;
}
SLSrv6BindingSid::SLSrv6BindingSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrv6BindingSid)
}
SLSrv6BindingSid::SLSrv6BindingSid(const SLSrv6BindingSid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bsid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bsid().empty()) {
    bsid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bsid(), 
      GetArenaForAllocation());
  }
  specifiedbsid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    specifiedbsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_specifiedbsid().empty()) {
    specifiedbsid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_specifiedbsid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_endpointbehaviour()) {
    endpointbehaviour_ = new ::service_layer::SLSrv6EndPointBehavior(*from.endpointbehaviour_);
  } else {
    endpointbehaviour_ = nullptr;
  }
  if (from._internal_has_sidstruct()) {
    sidstruct_ = new ::service_layer::SLSrv6SidStruct(*from.sidstruct_);
  } else {
    sidstruct_ = nullptr;
  }
  flags_ = from.flags_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrv6BindingSid)
}

inline void SLSrv6BindingSid::SharedCtor() {
bsid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
specifiedbsid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  specifiedbsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&endpointbehaviour_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&endpointbehaviour_)) + sizeof(flags_));
}

SLSrv6BindingSid::~SLSrv6BindingSid() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrv6BindingSid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrv6BindingSid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bsid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  specifiedbsid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete endpointbehaviour_;
  if (this != internal_default_instance()) delete sidstruct_;
}

void SLSrv6BindingSid::ArenaDtor(void* object) {
  SLSrv6BindingSid* _this = reinterpret_cast< SLSrv6BindingSid* >(object);
  (void)_this;
}
void SLSrv6BindingSid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrv6BindingSid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrv6BindingSid::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrv6BindingSid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bsid_.ClearToEmpty();
  specifiedbsid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && endpointbehaviour_ != nullptr) {
    delete endpointbehaviour_;
  }
  endpointbehaviour_ = nullptr;
  if (GetArenaForAllocation() == nullptr && sidstruct_ != nullptr) {
    delete sidstruct_;
  }
  sidstruct_ = nullptr;
  flags_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrv6BindingSid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Bsid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bsid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes SpecifiedBsid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_specifiedbsid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrv6EndPointBehavior EndPointBehaviour = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpointbehaviour(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrv6SidStruct SidStruct = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sidstruct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrv6BindingSid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrv6BindingSid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Flags = 1;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flags(), target);
  }

  // bytes Bsid = 2;
  if (!this->_internal_bsid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_bsid(), target);
  }

  // bytes SpecifiedBsid = 3;
  if (!this->_internal_specifiedbsid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_specifiedbsid(), target);
  }

  // .service_layer.SLSrv6EndPointBehavior EndPointBehaviour = 4;
  if (this->_internal_has_endpointbehaviour()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::endpointbehaviour(this), target, stream);
  }

  // .service_layer.SLSrv6SidStruct SidStruct = 5;
  if (this->_internal_has_sidstruct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sidstruct(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrv6BindingSid)
  return target;
}

size_t SLSrv6BindingSid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrv6BindingSid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Bsid = 2;
  if (!this->_internal_bsid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bsid());
  }

  // bytes SpecifiedBsid = 3;
  if (!this->_internal_specifiedbsid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_specifiedbsid());
  }

  // .service_layer.SLSrv6EndPointBehavior EndPointBehaviour = 4;
  if (this->_internal_has_endpointbehaviour()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endpointbehaviour_);
  }

  // .service_layer.SLSrv6SidStruct SidStruct = 5;
  if (this->_internal_has_sidstruct()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sidstruct_);
  }

  // uint32 Flags = 1;
  if (this->_internal_flags() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrv6BindingSid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrv6BindingSid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrv6BindingSid::GetClassData() const { return &_class_data_; }

void SLSrv6BindingSid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrv6BindingSid *>(to)->MergeFrom(
      static_cast<const SLSrv6BindingSid &>(from));
}


void SLSrv6BindingSid::MergeFrom(const SLSrv6BindingSid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrv6BindingSid)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bsid().empty()) {
    _internal_set_bsid(from._internal_bsid());
  }
  if (!from._internal_specifiedbsid().empty()) {
    _internal_set_specifiedbsid(from._internal_specifiedbsid());
  }
  if (from._internal_has_endpointbehaviour()) {
    _internal_mutable_endpointbehaviour()->::service_layer::SLSrv6EndPointBehavior::MergeFrom(from._internal_endpointbehaviour());
  }
  if (from._internal_has_sidstruct()) {
    _internal_mutable_sidstruct()->::service_layer::SLSrv6SidStruct::MergeFrom(from._internal_sidstruct());
  }
  if (from._internal_flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrv6BindingSid::CopyFrom(const SLSrv6BindingSid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrv6BindingSid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrv6BindingSid::IsInitialized() const {
  return true;
}

void SLSrv6BindingSid::InternalSwap(SLSrv6BindingSid* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bsid_, lhs_arena,
      &other->bsid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &specifiedbsid_, lhs_arena,
      &other->specifiedbsid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLSrv6BindingSid, flags_)
      + sizeof(SLSrv6BindingSid::flags_)
      - PROTOBUF_FIELD_OFFSET(SLSrv6BindingSid, endpointbehaviour_)>(
          reinterpret_cast<char*>(&endpointbehaviour_),
          reinterpret_cast<char*>(&other->endpointbehaviour_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrv6BindingSid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsr_5fcommon_2eproto_getter, &descriptor_table_sl_5fsr_5fcommon_2eproto_once,
      file_level_metadata_sl_5fsr_5fcommon_2eproto[5]);
}

// ===================================================================

class SLSrv6EndPointBehavior::_Internal {
 public:
};

SLSrv6EndPointBehavior::SLSrv6EndPointBehavior(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrv6EndPointBehavior)
}
SLSrv6EndPointBehavior::SLSrv6EndPointBehavior(const SLSrv6EndPointBehavior& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&endpointbehavior_, &from.endpointbehavior_,
    static_cast<size_t>(reinterpret_cast<char*>(&algorithm_) -
    reinterpret_cast<char*>(&endpointbehavior_)) + sizeof(algorithm_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrv6EndPointBehavior)
}

inline void SLSrv6EndPointBehavior::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&endpointbehavior_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&algorithm_) -
    reinterpret_cast<char*>(&endpointbehavior_)) + sizeof(algorithm_));
}

SLSrv6EndPointBehavior::~SLSrv6EndPointBehavior() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrv6EndPointBehavior)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrv6EndPointBehavior::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLSrv6EndPointBehavior::ArenaDtor(void* object) {
  SLSrv6EndPointBehavior* _this = reinterpret_cast< SLSrv6EndPointBehavior* >(object);
  (void)_this;
}
void SLSrv6EndPointBehavior::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrv6EndPointBehavior::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrv6EndPointBehavior::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrv6EndPointBehavior)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&endpointbehavior_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&algorithm_) -
      reinterpret_cast<char*>(&endpointbehavior_)) + sizeof(algorithm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrv6EndPointBehavior::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 EndPointBehavior = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          endpointbehavior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Algorithm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          algorithm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrv6EndPointBehavior::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrv6EndPointBehavior)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 EndPointBehavior = 1;
  if (this->_internal_endpointbehavior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_endpointbehavior(), target);
  }

  // uint32 Flags = 2;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flags(), target);
  }

  // uint32 Algorithm = 3;
  if (this->_internal_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_algorithm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrv6EndPointBehavior)
  return target;
}

size_t SLSrv6EndPointBehavior::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrv6EndPointBehavior)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 EndPointBehavior = 1;
  if (this->_internal_endpointbehavior() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_endpointbehavior());
  }

  // uint32 Flags = 2;
  if (this->_internal_flags() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  // uint32 Algorithm = 3;
  if (this->_internal_algorithm() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_algorithm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrv6EndPointBehavior::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrv6EndPointBehavior::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrv6EndPointBehavior::GetClassData() const { return &_class_data_; }

void SLSrv6EndPointBehavior::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrv6EndPointBehavior *>(to)->MergeFrom(
      static_cast<const SLSrv6EndPointBehavior &>(from));
}


void SLSrv6EndPointBehavior::MergeFrom(const SLSrv6EndPointBehavior& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrv6EndPointBehavior)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_endpointbehavior() != 0) {
    _internal_set_endpointbehavior(from._internal_endpointbehavior());
  }
  if (from._internal_flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_algorithm() != 0) {
    _internal_set_algorithm(from._internal_algorithm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrv6EndPointBehavior::CopyFrom(const SLSrv6EndPointBehavior& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrv6EndPointBehavior)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrv6EndPointBehavior::IsInitialized() const {
  return true;
}

void SLSrv6EndPointBehavior::InternalSwap(SLSrv6EndPointBehavior* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLSrv6EndPointBehavior, algorithm_)
      + sizeof(SLSrv6EndPointBehavior::algorithm_)
      - PROTOBUF_FIELD_OFFSET(SLSrv6EndPointBehavior, endpointbehavior_)>(
          reinterpret_cast<char*>(&endpointbehavior_),
          reinterpret_cast<char*>(&other->endpointbehavior_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrv6EndPointBehavior::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsr_5fcommon_2eproto_getter, &descriptor_table_sl_5fsr_5fcommon_2eproto_once,
      file_level_metadata_sl_5fsr_5fcommon_2eproto[6]);
}

// ===================================================================

class SLSrv6SidStruct::_Internal {
 public:
};

SLSrv6SidStruct::SLSrv6SidStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrv6SidStruct)
}
SLSrv6SidStruct::SLSrv6SidStruct(const SLSrv6SidStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&locatorblocklen_, &from.locatorblocklen_,
    static_cast<size_t>(reinterpret_cast<char*>(&arglen_) -
    reinterpret_cast<char*>(&locatorblocklen_)) + sizeof(arglen_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrv6SidStruct)
}

inline void SLSrv6SidStruct::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&locatorblocklen_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&arglen_) -
    reinterpret_cast<char*>(&locatorblocklen_)) + sizeof(arglen_));
}

SLSrv6SidStruct::~SLSrv6SidStruct() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrv6SidStruct)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrv6SidStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLSrv6SidStruct::ArenaDtor(void* object) {
  SLSrv6SidStruct* _this = reinterpret_cast< SLSrv6SidStruct* >(object);
  (void)_this;
}
void SLSrv6SidStruct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrv6SidStruct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrv6SidStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrv6SidStruct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&locatorblocklen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&arglen_) -
      reinterpret_cast<char*>(&locatorblocklen_)) + sizeof(arglen_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrv6SidStruct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 LocatorBlockLen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          locatorblocklen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 LocatorNodeLen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          locatornodelen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 FunctionLen = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          functionlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ArgLen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          arglen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrv6SidStruct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrv6SidStruct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 LocatorBlockLen = 1;
  if (this->_internal_locatorblocklen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_locatorblocklen(), target);
  }

  // uint32 LocatorNodeLen = 2;
  if (this->_internal_locatornodelen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_locatornodelen(), target);
  }

  // uint32 FunctionLen = 3;
  if (this->_internal_functionlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_functionlen(), target);
  }

  // uint32 ArgLen = 4;
  if (this->_internal_arglen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_arglen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrv6SidStruct)
  return target;
}

size_t SLSrv6SidStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrv6SidStruct)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 LocatorBlockLen = 1;
  if (this->_internal_locatorblocklen() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_locatorblocklen());
  }

  // uint32 LocatorNodeLen = 2;
  if (this->_internal_locatornodelen() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_locatornodelen());
  }

  // uint32 FunctionLen = 3;
  if (this->_internal_functionlen() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_functionlen());
  }

  // uint32 ArgLen = 4;
  if (this->_internal_arglen() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_arglen());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrv6SidStruct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrv6SidStruct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrv6SidStruct::GetClassData() const { return &_class_data_; }

void SLSrv6SidStruct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrv6SidStruct *>(to)->MergeFrom(
      static_cast<const SLSrv6SidStruct &>(from));
}


void SLSrv6SidStruct::MergeFrom(const SLSrv6SidStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrv6SidStruct)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_locatorblocklen() != 0) {
    _internal_set_locatorblocklen(from._internal_locatorblocklen());
  }
  if (from._internal_locatornodelen() != 0) {
    _internal_set_locatornodelen(from._internal_locatornodelen());
  }
  if (from._internal_functionlen() != 0) {
    _internal_set_functionlen(from._internal_functionlen());
  }
  if (from._internal_arglen() != 0) {
    _internal_set_arglen(from._internal_arglen());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrv6SidStruct::CopyFrom(const SLSrv6SidStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrv6SidStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrv6SidStruct::IsInitialized() const {
  return true;
}

void SLSrv6SidStruct::InternalSwap(SLSrv6SidStruct* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLSrv6SidStruct, arglen_)
      + sizeof(SLSrv6SidStruct::arglen_)
      - PROTOBUF_FIELD_OFFSET(SLSrv6SidStruct, locatorblocklen_)>(
          reinterpret_cast<char*>(&locatorblocklen_),
          reinterpret_cast<char*>(&other->locatorblocklen_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrv6SidStruct::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsr_5fcommon_2eproto_getter, &descriptor_table_sl_5fsr_5fcommon_2eproto_once,
      file_level_metadata_sl_5fsr_5fcommon_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service_layer::SLSrPolicyFlags* Arena::CreateMaybeMessage< ::service_layer::SLSrPolicyFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrPolicyFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrBsid* Arena::CreateMaybeMessage< ::service_layer::SLSrBsid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrBsid >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrCpName* Arena::CreateMaybeMessage< ::service_layer::SLSrCpName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrCpName >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrSegmentDesc* Arena::CreateMaybeMessage< ::service_layer::SLSrSegmentDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrSegmentDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrSegment* Arena::CreateMaybeMessage< ::service_layer::SLSrSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrv6BindingSid* Arena::CreateMaybeMessage< ::service_layer::SLSrv6BindingSid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrv6BindingSid >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrv6EndPointBehavior* Arena::CreateMaybeMessage< ::service_layer::SLSrv6EndPointBehavior >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrv6EndPointBehavior >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrv6SidStruct* Arena::CreateMaybeMessage< ::service_layer::SLSrv6SidStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrv6SidStruct >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
