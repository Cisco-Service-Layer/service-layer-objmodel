// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_sr_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sl_5fsr_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sl_5fsr_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sl_5fsr_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sl_5fsr_5fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fsr_5fcommon_2eproto;
namespace service_layer {
class SLSrBsid;
struct SLSrBsidDefaultTypeInternal;
extern SLSrBsidDefaultTypeInternal _SLSrBsid_default_instance_;
class SLSrCpName;
struct SLSrCpNameDefaultTypeInternal;
extern SLSrCpNameDefaultTypeInternal _SLSrCpName_default_instance_;
class SLSrPolicyFlags;
struct SLSrPolicyFlagsDefaultTypeInternal;
extern SLSrPolicyFlagsDefaultTypeInternal _SLSrPolicyFlags_default_instance_;
class SLSrSegment;
struct SLSrSegmentDefaultTypeInternal;
extern SLSrSegmentDefaultTypeInternal _SLSrSegment_default_instance_;
class SLSrSegmentDesc;
struct SLSrSegmentDescDefaultTypeInternal;
extern SLSrSegmentDescDefaultTypeInternal _SLSrSegmentDesc_default_instance_;
class SLSrv6BindingSid;
struct SLSrv6BindingSidDefaultTypeInternal;
extern SLSrv6BindingSidDefaultTypeInternal _SLSrv6BindingSid_default_instance_;
class SLSrv6EndPointBehavior;
struct SLSrv6EndPointBehaviorDefaultTypeInternal;
extern SLSrv6EndPointBehaviorDefaultTypeInternal _SLSrv6EndPointBehavior_default_instance_;
class SLSrv6SidStruct;
struct SLSrv6SidStructDefaultTypeInternal;
extern SLSrv6SidStructDefaultTypeInternal _SLSrv6SidStruct_default_instance_;
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> ::service_layer::SLSrBsid* Arena::CreateMaybeMessage<::service_layer::SLSrBsid>(Arena*);
template<> ::service_layer::SLSrCpName* Arena::CreateMaybeMessage<::service_layer::SLSrCpName>(Arena*);
template<> ::service_layer::SLSrPolicyFlags* Arena::CreateMaybeMessage<::service_layer::SLSrPolicyFlags>(Arena*);
template<> ::service_layer::SLSrSegment* Arena::CreateMaybeMessage<::service_layer::SLSrSegment>(Arena*);
template<> ::service_layer::SLSrSegmentDesc* Arena::CreateMaybeMessage<::service_layer::SLSrSegmentDesc>(Arena*);
template<> ::service_layer::SLSrv6BindingSid* Arena::CreateMaybeMessage<::service_layer::SLSrv6BindingSid>(Arena*);
template<> ::service_layer::SLSrv6EndPointBehavior* Arena::CreateMaybeMessage<::service_layer::SLSrv6EndPointBehavior>(Arena*);
template<> ::service_layer::SLSrv6SidStruct* Arena::CreateMaybeMessage<::service_layer::SLSrv6SidStruct>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service_layer {

enum SLSrPolicyProtocolOrigin : int {
  SL_SR_POLICY_PROTOCOL_ORIGIN_RESERVED = 0,
  SL_SR_POLICY_PROTOCOL_ORIGIN_PCEP = 1,
  SL_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY = 2,
  SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG = 3,
  SL_SR_POLICY_PROTOCOL_ORIGIN_PCEP_VIA_PCE = 10,
  SL_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY_VIA_PCE = 20,
  SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_PCE = 30,
  SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_GRPC = 40,
  SLSrPolicyProtocolOrigin_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLSrPolicyProtocolOrigin_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLSrPolicyProtocolOrigin_IsValid(int value);
constexpr SLSrPolicyProtocolOrigin SLSrPolicyProtocolOrigin_MIN = SL_SR_POLICY_PROTOCOL_ORIGIN_RESERVED;
constexpr SLSrPolicyProtocolOrigin SLSrPolicyProtocolOrigin_MAX = SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_GRPC;
constexpr int SLSrPolicyProtocolOrigin_ARRAYSIZE = SLSrPolicyProtocolOrigin_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrPolicyProtocolOrigin_descriptor();
template<typename T>
inline const std::string& SLSrPolicyProtocolOrigin_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLSrPolicyProtocolOrigin>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLSrPolicyProtocolOrigin_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLSrPolicyProtocolOrigin_descriptor(), enum_t_value);
}
inline bool SLSrPolicyProtocolOrigin_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLSrPolicyProtocolOrigin* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLSrPolicyProtocolOrigin>(
    SLSrPolicyProtocolOrigin_descriptor(), name, value);
}
enum SLSrPolicyFlagsDef : int {
  SL_SR_POLICY_FLAG_RESERVED = 0,
  SL_SR_POLICY_FLAG_ENDPOINT_V6 = 128,
  SL_SR_POLICY_FLAG_ORIGINATOR_V6 = 64,
  SLSrPolicyFlagsDef_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLSrPolicyFlagsDef_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLSrPolicyFlagsDef_IsValid(int value);
constexpr SLSrPolicyFlagsDef SLSrPolicyFlagsDef_MIN = SL_SR_POLICY_FLAG_RESERVED;
constexpr SLSrPolicyFlagsDef SLSrPolicyFlagsDef_MAX = SL_SR_POLICY_FLAG_ENDPOINT_V6;
constexpr int SLSrPolicyFlagsDef_ARRAYSIZE = SLSrPolicyFlagsDef_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrPolicyFlagsDef_descriptor();
template<typename T>
inline const std::string& SLSrPolicyFlagsDef_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLSrPolicyFlagsDef>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLSrPolicyFlagsDef_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLSrPolicyFlagsDef_descriptor(), enum_t_value);
}
inline bool SLSrPolicyFlagsDef_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLSrPolicyFlagsDef* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLSrPolicyFlagsDef>(
    SLSrPolicyFlagsDef_descriptor(), name, value);
}
enum SLSrSegmentType : int {
  SL_SR_SEG_TYPE_RESERVED = 0,
  SL_SR_SEG_TYPE_MPLS_LABEL = 1,
  SL_SR_SEG_TYPE_SRV6_SID_V6 = 2,
  SL_SR_SEG_TYPE_MPLS_PFX_SID_V4 = 3,
  SL_SR_SEG_TYPE_MPLS_PFX_SID_V6 = 4,
  SL_SR_SEG_TYPE_MPLS_ADJ_SID_V4_NODE_ADDR_LOC_ID = 5,
  SL_SR_SEG_TYPE_MPLS_ADJ_SID_V4_LOC_REM_ADDR = 6,
  SL_SR_SEG_TYPE_MPLS_ADJ_SID_V6_LOC_REM_ADDR_AND_ID = 7,
  SL_SR_SEG_TYPE_MPLS_ADJ_SID_V6_LOC_REM_ADDR = 8,
  SL_SR_SEG_TYPE_SRV6_END_SID_V6_NODE_ADDR = 9,
  SL_SR_SEG_TYPE_SRV6_END_SID_V6_LOC_REM_ADDR_AND_ID = 10,
  SL_SR_SEG_TYPE_SRV6_END_SID_V6_LOC_REM_ADDR = 11,
  SLSrSegmentType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLSrSegmentType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLSrSegmentType_IsValid(int value);
constexpr SLSrSegmentType SLSrSegmentType_MIN = SL_SR_SEG_TYPE_RESERVED;
constexpr SLSrSegmentType SLSrSegmentType_MAX = SL_SR_SEG_TYPE_SRV6_END_SID_V6_LOC_REM_ADDR;
constexpr int SLSrSegmentType_ARRAYSIZE = SLSrSegmentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrSegmentType_descriptor();
template<typename T>
inline const std::string& SLSrSegmentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLSrSegmentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLSrSegmentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLSrSegmentType_descriptor(), enum_t_value);
}
inline bool SLSrSegmentType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLSrSegmentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLSrSegmentType>(
    SLSrSegmentType_descriptor(), name, value);
}
enum SLSrSegmentFlags : int {
  SL_SR_SEGMENT_FLAG_RESERVED = 0,
  SL_SR_SEGMENT_FLAG_SID_PRESENT = 32768,
  SL_SR_SEGMENT_FLAG_SID_EXPLICIT_PROVISIONED = 16384,
  SL_SR_SEGMENT_FLAG_SID_VERIFIED = 8192,
  SL_SR_SEGMENT_FLAG_SID_RESOLVED = 4096,
  SL_SR_SEGMENT_FLAG_SID_ALGO_VALID = 2048,
  SLSrSegmentFlags_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLSrSegmentFlags_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLSrSegmentFlags_IsValid(int value);
constexpr SLSrSegmentFlags SLSrSegmentFlags_MIN = SL_SR_SEGMENT_FLAG_RESERVED;
constexpr SLSrSegmentFlags SLSrSegmentFlags_MAX = SL_SR_SEGMENT_FLAG_SID_PRESENT;
constexpr int SLSrSegmentFlags_ARRAYSIZE = SLSrSegmentFlags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrSegmentFlags_descriptor();
template<typename T>
inline const std::string& SLSrSegmentFlags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLSrSegmentFlags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLSrSegmentFlags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLSrSegmentFlags_descriptor(), enum_t_value);
}
inline bool SLSrSegmentFlags_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLSrSegmentFlags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLSrSegmentFlags>(
    SLSrSegmentFlags_descriptor(), name, value);
}
enum SLSrv6BindingSidFlags : int {
  SL_SRV6_BSID_FLAG_RESERVED = 0,
  SL_SRV6_BSID_FLAG_ALLOCATED = 32768,
  SL_SRV6_BSID_FLAG_UNAVAIL = 16384,
  SL_SRV6_BSID_FLAG_DYNAMIC = 8192,
  SLSrv6BindingSidFlags_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLSrv6BindingSidFlags_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLSrv6BindingSidFlags_IsValid(int value);
constexpr SLSrv6BindingSidFlags SLSrv6BindingSidFlags_MIN = SL_SRV6_BSID_FLAG_RESERVED;
constexpr SLSrv6BindingSidFlags SLSrv6BindingSidFlags_MAX = SL_SRV6_BSID_FLAG_ALLOCATED;
constexpr int SLSrv6BindingSidFlags_ARRAYSIZE = SLSrv6BindingSidFlags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrv6BindingSidFlags_descriptor();
template<typename T>
inline const std::string& SLSrv6BindingSidFlags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLSrv6BindingSidFlags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLSrv6BindingSidFlags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLSrv6BindingSidFlags_descriptor(), enum_t_value);
}
inline bool SLSrv6BindingSidFlags_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLSrv6BindingSidFlags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLSrv6BindingSidFlags>(
    SLSrv6BindingSidFlags_descriptor(), name, value);
}
// ===================================================================

class SLSrPolicyFlags final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrPolicyFlags) */ {
 public:
  inline SLSrPolicyFlags() : SLSrPolicyFlags(nullptr) {}
  ~SLSrPolicyFlags() override;
  explicit constexpr SLSrPolicyFlags(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrPolicyFlags(const SLSrPolicyFlags& from);
  SLSrPolicyFlags(SLSrPolicyFlags&& from) noexcept
    : SLSrPolicyFlags() {
    *this = ::std::move(from);
  }

  inline SLSrPolicyFlags& operator=(const SLSrPolicyFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrPolicyFlags& operator=(SLSrPolicyFlags&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrPolicyFlags& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrPolicyFlags* internal_default_instance() {
    return reinterpret_cast<const SLSrPolicyFlags*>(
               &_SLSrPolicyFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SLSrPolicyFlags& a, SLSrPolicyFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrPolicyFlags* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrPolicyFlags* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrPolicyFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrPolicyFlags>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrPolicyFlags& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrPolicyFlags& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrPolicyFlags* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrPolicyFlags";
  }
  protected:
  explicit SLSrPolicyFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
  };
  // uint32 Flags = 1;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrPolicyFlags)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrBsid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrBsid) */ {
 public:
  inline SLSrBsid() : SLSrBsid(nullptr) {}
  ~SLSrBsid() override;
  explicit constexpr SLSrBsid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrBsid(const SLSrBsid& from);
  SLSrBsid(SLSrBsid&& from) noexcept
    : SLSrBsid() {
    *this = ::std::move(from);
  }

  inline SLSrBsid& operator=(const SLSrBsid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrBsid& operator=(SLSrBsid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrBsid& default_instance() {
    return *internal_default_instance();
  }
  enum BindingSidCase {
    kMplsBsid = 1,
    kSrv6Bsid = 2,
    BINDINGSID_NOT_SET = 0,
  };

  static inline const SLSrBsid* internal_default_instance() {
    return reinterpret_cast<const SLSrBsid*>(
               &_SLSrBsid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SLSrBsid& a, SLSrBsid& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrBsid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrBsid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrBsid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrBsid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrBsid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrBsid& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrBsid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrBsid";
  }
  protected:
  explicit SLSrBsid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMplsBsidFieldNumber = 1,
    kSrv6BsidFieldNumber = 2,
  };
  // uint32 MplsBsid = 1;
  bool has_mplsbsid() const;
  private:
  bool _internal_has_mplsbsid() const;
  public:
  void clear_mplsbsid();
  uint32_t mplsbsid() const;
  void set_mplsbsid(uint32_t value);
  private:
  uint32_t _internal_mplsbsid() const;
  void _internal_set_mplsbsid(uint32_t value);
  public:

  // bytes Srv6Bsid = 2;
  bool has_srv6bsid() const;
  private:
  bool _internal_has_srv6bsid() const;
  public:
  void clear_srv6bsid();
  const std::string& srv6bsid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srv6bsid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srv6bsid();
  PROTOBUF_NODISCARD std::string* release_srv6bsid();
  void set_allocated_srv6bsid(std::string* srv6bsid);
  private:
  const std::string& _internal_srv6bsid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srv6bsid(const std::string& value);
  std::string* _internal_mutable_srv6bsid();
  public:

  void clear_BindingSid();
  BindingSidCase BindingSid_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLSrBsid)
 private:
  class _Internal;
  void set_has_mplsbsid();
  void set_has_srv6bsid();

  inline bool has_BindingSid() const;
  inline void clear_has_BindingSid();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union BindingSidUnion {
    constexpr BindingSidUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    uint32_t mplsbsid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srv6bsid_;
  } BindingSid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrCpName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrCpName) */ {
 public:
  inline SLSrCpName() : SLSrCpName(nullptr) {}
  ~SLSrCpName() override;
  explicit constexpr SLSrCpName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrCpName(const SLSrCpName& from);
  SLSrCpName(SLSrCpName&& from) noexcept
    : SLSrCpName() {
    *this = ::std::move(from);
  }

  inline SLSrCpName& operator=(const SLSrCpName& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrCpName& operator=(SLSrCpName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrCpName& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrCpName* internal_default_instance() {
    return reinterpret_cast<const SLSrCpName*>(
               &_SLSrCpName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SLSrCpName& a, SLSrCpName& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrCpName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrCpName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrCpName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrCpName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrCpName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrCpName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrCpName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrCpName";
  }
  protected:
  explicit SLSrCpName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrCpName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrSegmentDesc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrSegmentDesc) */ {
 public:
  inline SLSrSegmentDesc() : SLSrSegmentDesc(nullptr) {}
  ~SLSrSegmentDesc() override;
  explicit constexpr SLSrSegmentDesc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrSegmentDesc(const SLSrSegmentDesc& from);
  SLSrSegmentDesc(SLSrSegmentDesc&& from) noexcept
    : SLSrSegmentDesc() {
    *this = ::std::move(from);
  }

  inline SLSrSegmentDesc& operator=(const SLSrSegmentDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrSegmentDesc& operator=(SLSrSegmentDesc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrSegmentDesc& default_instance() {
    return *internal_default_instance();
  }
  enum LocalNodeCase {
    kIpv4LocalAddr = 2,
    kIpv6LocalAddr = 3,
    LOCALNODE_NOT_SET = 0,
  };

  enum RemoteNodeCase {
    kIpv4RemoteAddr = 4,
    kIpv6RemoteAddr = 5,
    REMOTENODE_NOT_SET = 0,
  };

  static inline const SLSrSegmentDesc* internal_default_instance() {
    return reinterpret_cast<const SLSrSegmentDesc*>(
               &_SLSrSegmentDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SLSrSegmentDesc& a, SLSrSegmentDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrSegmentDesc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrSegmentDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrSegmentDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrSegmentDesc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrSegmentDesc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrSegmentDesc& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrSegmentDesc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrSegmentDesc";
  }
  protected:
  explicit SLSrSegmentDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpv6LocalNodeGlobalAddrFieldNumber = 6,
    kIpv6RemoteNodeGlobalAddrFieldNumber = 7,
    kAlgorithmFieldNumber = 1,
    kLocalNodeIntfIdFieldNumber = 8,
    kRemoteNodeIntfIdFieldNumber = 9,
    kIpv4LocalAddrFieldNumber = 2,
    kIpv6LocalAddrFieldNumber = 3,
    kIpv4RemoteAddrFieldNumber = 4,
    kIpv6RemoteAddrFieldNumber = 5,
  };
  // bytes Ipv6LocalNodeGlobalAddr = 6;
  void clear_ipv6localnodeglobaladdr();
  const std::string& ipv6localnodeglobaladdr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv6localnodeglobaladdr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv6localnodeglobaladdr();
  PROTOBUF_NODISCARD std::string* release_ipv6localnodeglobaladdr();
  void set_allocated_ipv6localnodeglobaladdr(std::string* ipv6localnodeglobaladdr);
  private:
  const std::string& _internal_ipv6localnodeglobaladdr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv6localnodeglobaladdr(const std::string& value);
  std::string* _internal_mutable_ipv6localnodeglobaladdr();
  public:

  // bytes Ipv6RemoteNodeGlobalAddr = 7;
  void clear_ipv6remotenodeglobaladdr();
  const std::string& ipv6remotenodeglobaladdr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv6remotenodeglobaladdr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv6remotenodeglobaladdr();
  PROTOBUF_NODISCARD std::string* release_ipv6remotenodeglobaladdr();
  void set_allocated_ipv6remotenodeglobaladdr(std::string* ipv6remotenodeglobaladdr);
  private:
  const std::string& _internal_ipv6remotenodeglobaladdr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv6remotenodeglobaladdr(const std::string& value);
  std::string* _internal_mutable_ipv6remotenodeglobaladdr();
  public:

  // uint32 Algorithm = 1;
  void clear_algorithm();
  uint32_t algorithm() const;
  void set_algorithm(uint32_t value);
  private:
  uint32_t _internal_algorithm() const;
  void _internal_set_algorithm(uint32_t value);
  public:

  // uint32 LocalNodeIntfId = 8;
  void clear_localnodeintfid();
  uint32_t localnodeintfid() const;
  void set_localnodeintfid(uint32_t value);
  private:
  uint32_t _internal_localnodeintfid() const;
  void _internal_set_localnodeintfid(uint32_t value);
  public:

  // uint32 RemoteNodeIntfId = 9;
  void clear_remotenodeintfid();
  uint32_t remotenodeintfid() const;
  void set_remotenodeintfid(uint32_t value);
  private:
  uint32_t _internal_remotenodeintfid() const;
  void _internal_set_remotenodeintfid(uint32_t value);
  public:

  // bytes Ipv4LocalAddr = 2;
  bool has_ipv4localaddr() const;
  private:
  bool _internal_has_ipv4localaddr() const;
  public:
  void clear_ipv4localaddr();
  const std::string& ipv4localaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv4localaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv4localaddr();
  PROTOBUF_NODISCARD std::string* release_ipv4localaddr();
  void set_allocated_ipv4localaddr(std::string* ipv4localaddr);
  private:
  const std::string& _internal_ipv4localaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv4localaddr(const std::string& value);
  std::string* _internal_mutable_ipv4localaddr();
  public:

  // bytes Ipv6LocalAddr = 3;
  bool has_ipv6localaddr() const;
  private:
  bool _internal_has_ipv6localaddr() const;
  public:
  void clear_ipv6localaddr();
  const std::string& ipv6localaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv6localaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv6localaddr();
  PROTOBUF_NODISCARD std::string* release_ipv6localaddr();
  void set_allocated_ipv6localaddr(std::string* ipv6localaddr);
  private:
  const std::string& _internal_ipv6localaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv6localaddr(const std::string& value);
  std::string* _internal_mutable_ipv6localaddr();
  public:

  // bytes Ipv4RemoteAddr = 4;
  bool has_ipv4remoteaddr() const;
  private:
  bool _internal_has_ipv4remoteaddr() const;
  public:
  void clear_ipv4remoteaddr();
  const std::string& ipv4remoteaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv4remoteaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv4remoteaddr();
  PROTOBUF_NODISCARD std::string* release_ipv4remoteaddr();
  void set_allocated_ipv4remoteaddr(std::string* ipv4remoteaddr);
  private:
  const std::string& _internal_ipv4remoteaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv4remoteaddr(const std::string& value);
  std::string* _internal_mutable_ipv4remoteaddr();
  public:

  // bytes Ipv6RemoteAddr = 5;
  bool has_ipv6remoteaddr() const;
  private:
  bool _internal_has_ipv6remoteaddr() const;
  public:
  void clear_ipv6remoteaddr();
  const std::string& ipv6remoteaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv6remoteaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv6remoteaddr();
  PROTOBUF_NODISCARD std::string* release_ipv6remoteaddr();
  void set_allocated_ipv6remoteaddr(std::string* ipv6remoteaddr);
  private:
  const std::string& _internal_ipv6remoteaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv6remoteaddr(const std::string& value);
  std::string* _internal_mutable_ipv6remoteaddr();
  public:

  void clear_LocalNode();
  LocalNodeCase LocalNode_case() const;
  void clear_RemoteNode();
  RemoteNodeCase RemoteNode_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLSrSegmentDesc)
 private:
  class _Internal;
  void set_has_ipv4localaddr();
  void set_has_ipv6localaddr();
  void set_has_ipv4remoteaddr();
  void set_has_ipv6remoteaddr();

  inline bool has_LocalNode() const;
  inline void clear_has_LocalNode();

  inline bool has_RemoteNode() const;
  inline void clear_has_RemoteNode();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6localnodeglobaladdr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6remotenodeglobaladdr_;
  uint32_t algorithm_;
  uint32_t localnodeintfid_;
  uint32_t remotenodeintfid_;
  union LocalNodeUnion {
    constexpr LocalNodeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4localaddr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6localaddr_;
  } LocalNode_;
  union RemoteNodeUnion {
    constexpr RemoteNodeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4remoteaddr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6remoteaddr_;
  } RemoteNode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[2];

  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrSegment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrSegment) */ {
 public:
  inline SLSrSegment() : SLSrSegment(nullptr) {}
  ~SLSrSegment() override;
  explicit constexpr SLSrSegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrSegment(const SLSrSegment& from);
  SLSrSegment(SLSrSegment&& from) noexcept
    : SLSrSegment() {
    *this = ::std::move(from);
  }

  inline SLSrSegment& operator=(const SLSrSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrSegment& operator=(SLSrSegment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrSegment& default_instance() {
    return *internal_default_instance();
  }
  enum SidCase {
    kMplsLabel = 3,
    kSrv6Sid = 4,
    SID_NOT_SET = 0,
  };

  static inline const SLSrSegment* internal_default_instance() {
    return reinterpret_cast<const SLSrSegment*>(
               &_SLSrSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SLSrSegment& a, SLSrSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrSegment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrSegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrSegment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrSegment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrSegment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrSegment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrSegment";
  }
  protected:
  explicit SLSrSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentDescFieldNumber = 5,
    kEndPointBehaviourFieldNumber = 6,
    kSidStructFieldNumber = 7,
    kTypeFieldNumber = 1,
    kFlagsFieldNumber = 2,
    kMplsLabelFieldNumber = 3,
    kSrv6SidFieldNumber = 4,
  };
  // .service_layer.SLSrSegmentDesc SegmentDesc = 5;
  bool has_segmentdesc() const;
  private:
  bool _internal_has_segmentdesc() const;
  public:
  void clear_segmentdesc();
  const ::service_layer::SLSrSegmentDesc& segmentdesc() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrSegmentDesc* release_segmentdesc();
  ::service_layer::SLSrSegmentDesc* mutable_segmentdesc();
  void set_allocated_segmentdesc(::service_layer::SLSrSegmentDesc* segmentdesc);
  private:
  const ::service_layer::SLSrSegmentDesc& _internal_segmentdesc() const;
  ::service_layer::SLSrSegmentDesc* _internal_mutable_segmentdesc();
  public:
  void unsafe_arena_set_allocated_segmentdesc(
      ::service_layer::SLSrSegmentDesc* segmentdesc);
  ::service_layer::SLSrSegmentDesc* unsafe_arena_release_segmentdesc();

  // .service_layer.SLSrv6EndPointBehavior EndPointBehaviour = 6;
  bool has_endpointbehaviour() const;
  private:
  bool _internal_has_endpointbehaviour() const;
  public:
  void clear_endpointbehaviour();
  const ::service_layer::SLSrv6EndPointBehavior& endpointbehaviour() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrv6EndPointBehavior* release_endpointbehaviour();
  ::service_layer::SLSrv6EndPointBehavior* mutable_endpointbehaviour();
  void set_allocated_endpointbehaviour(::service_layer::SLSrv6EndPointBehavior* endpointbehaviour);
  private:
  const ::service_layer::SLSrv6EndPointBehavior& _internal_endpointbehaviour() const;
  ::service_layer::SLSrv6EndPointBehavior* _internal_mutable_endpointbehaviour();
  public:
  void unsafe_arena_set_allocated_endpointbehaviour(
      ::service_layer::SLSrv6EndPointBehavior* endpointbehaviour);
  ::service_layer::SLSrv6EndPointBehavior* unsafe_arena_release_endpointbehaviour();

  // .service_layer.SLSrv6SidStruct SidStruct = 7;
  bool has_sidstruct() const;
  private:
  bool _internal_has_sidstruct() const;
  public:
  void clear_sidstruct();
  const ::service_layer::SLSrv6SidStruct& sidstruct() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrv6SidStruct* release_sidstruct();
  ::service_layer::SLSrv6SidStruct* mutable_sidstruct();
  void set_allocated_sidstruct(::service_layer::SLSrv6SidStruct* sidstruct);
  private:
  const ::service_layer::SLSrv6SidStruct& _internal_sidstruct() const;
  ::service_layer::SLSrv6SidStruct* _internal_mutable_sidstruct();
  public:
  void unsafe_arena_set_allocated_sidstruct(
      ::service_layer::SLSrv6SidStruct* sidstruct);
  ::service_layer::SLSrv6SidStruct* unsafe_arena_release_sidstruct();

  // .service_layer.SLSrSegmentType Type = 1;
  void clear_type();
  ::service_layer::SLSrSegmentType type() const;
  void set_type(::service_layer::SLSrSegmentType value);
  private:
  ::service_layer::SLSrSegmentType _internal_type() const;
  void _internal_set_type(::service_layer::SLSrSegmentType value);
  public:

  // uint32 Flags = 2;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // uint32 MplsLabel = 3;
  bool has_mplslabel() const;
  private:
  bool _internal_has_mplslabel() const;
  public:
  void clear_mplslabel();
  uint32_t mplslabel() const;
  void set_mplslabel(uint32_t value);
  private:
  uint32_t _internal_mplslabel() const;
  void _internal_set_mplslabel(uint32_t value);
  public:

  // bytes Srv6Sid = 4;
  bool has_srv6sid() const;
  private:
  bool _internal_has_srv6sid() const;
  public:
  void clear_srv6sid();
  const std::string& srv6sid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srv6sid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srv6sid();
  PROTOBUF_NODISCARD std::string* release_srv6sid();
  void set_allocated_srv6sid(std::string* srv6sid);
  private:
  const std::string& _internal_srv6sid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srv6sid(const std::string& value);
  std::string* _internal_mutable_srv6sid();
  public:

  void clear_Sid();
  SidCase Sid_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLSrSegment)
 private:
  class _Internal;
  void set_has_mplslabel();
  void set_has_srv6sid();

  inline bool has_Sid() const;
  inline void clear_has_Sid();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLSrSegmentDesc* segmentdesc_;
  ::service_layer::SLSrv6EndPointBehavior* endpointbehaviour_;
  ::service_layer::SLSrv6SidStruct* sidstruct_;
  int type_;
  uint32_t flags_;
  union SidUnion {
    constexpr SidUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    uint32_t mplslabel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srv6sid_;
  } Sid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrv6BindingSid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrv6BindingSid) */ {
 public:
  inline SLSrv6BindingSid() : SLSrv6BindingSid(nullptr) {}
  ~SLSrv6BindingSid() override;
  explicit constexpr SLSrv6BindingSid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrv6BindingSid(const SLSrv6BindingSid& from);
  SLSrv6BindingSid(SLSrv6BindingSid&& from) noexcept
    : SLSrv6BindingSid() {
    *this = ::std::move(from);
  }

  inline SLSrv6BindingSid& operator=(const SLSrv6BindingSid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrv6BindingSid& operator=(SLSrv6BindingSid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrv6BindingSid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrv6BindingSid* internal_default_instance() {
    return reinterpret_cast<const SLSrv6BindingSid*>(
               &_SLSrv6BindingSid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SLSrv6BindingSid& a, SLSrv6BindingSid& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrv6BindingSid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrv6BindingSid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrv6BindingSid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrv6BindingSid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrv6BindingSid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrv6BindingSid& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrv6BindingSid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrv6BindingSid";
  }
  protected:
  explicit SLSrv6BindingSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBsidFieldNumber = 2,
    kSpecifiedBsidFieldNumber = 3,
    kEndPointBehaviorFieldNumber = 4,
    kSidStructFieldNumber = 5,
    kFlagsFieldNumber = 1,
  };
  // bytes Bsid = 2;
  void clear_bsid();
  const std::string& bsid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bsid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bsid();
  PROTOBUF_NODISCARD std::string* release_bsid();
  void set_allocated_bsid(std::string* bsid);
  private:
  const std::string& _internal_bsid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bsid(const std::string& value);
  std::string* _internal_mutable_bsid();
  public:

  // bytes SpecifiedBsid = 3;
  void clear_specifiedbsid();
  const std::string& specifiedbsid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_specifiedbsid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_specifiedbsid();
  PROTOBUF_NODISCARD std::string* release_specifiedbsid();
  void set_allocated_specifiedbsid(std::string* specifiedbsid);
  private:
  const std::string& _internal_specifiedbsid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_specifiedbsid(const std::string& value);
  std::string* _internal_mutable_specifiedbsid();
  public:

  // .service_layer.SLSrv6EndPointBehavior EndPointBehavior = 4;
  bool has_endpointbehavior() const;
  private:
  bool _internal_has_endpointbehavior() const;
  public:
  void clear_endpointbehavior();
  const ::service_layer::SLSrv6EndPointBehavior& endpointbehavior() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrv6EndPointBehavior* release_endpointbehavior();
  ::service_layer::SLSrv6EndPointBehavior* mutable_endpointbehavior();
  void set_allocated_endpointbehavior(::service_layer::SLSrv6EndPointBehavior* endpointbehavior);
  private:
  const ::service_layer::SLSrv6EndPointBehavior& _internal_endpointbehavior() const;
  ::service_layer::SLSrv6EndPointBehavior* _internal_mutable_endpointbehavior();
  public:
  void unsafe_arena_set_allocated_endpointbehavior(
      ::service_layer::SLSrv6EndPointBehavior* endpointbehavior);
  ::service_layer::SLSrv6EndPointBehavior* unsafe_arena_release_endpointbehavior();

  // .service_layer.SLSrv6SidStruct SidStruct = 5;
  bool has_sidstruct() const;
  private:
  bool _internal_has_sidstruct() const;
  public:
  void clear_sidstruct();
  const ::service_layer::SLSrv6SidStruct& sidstruct() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrv6SidStruct* release_sidstruct();
  ::service_layer::SLSrv6SidStruct* mutable_sidstruct();
  void set_allocated_sidstruct(::service_layer::SLSrv6SidStruct* sidstruct);
  private:
  const ::service_layer::SLSrv6SidStruct& _internal_sidstruct() const;
  ::service_layer::SLSrv6SidStruct* _internal_mutable_sidstruct();
  public:
  void unsafe_arena_set_allocated_sidstruct(
      ::service_layer::SLSrv6SidStruct* sidstruct);
  ::service_layer::SLSrv6SidStruct* unsafe_arena_release_sidstruct();

  // uint32 Flags = 1;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrv6BindingSid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bsid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr specifiedbsid_;
  ::service_layer::SLSrv6EndPointBehavior* endpointbehavior_;
  ::service_layer::SLSrv6SidStruct* sidstruct_;
  uint32_t flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrv6EndPointBehavior final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrv6EndPointBehavior) */ {
 public:
  inline SLSrv6EndPointBehavior() : SLSrv6EndPointBehavior(nullptr) {}
  ~SLSrv6EndPointBehavior() override;
  explicit constexpr SLSrv6EndPointBehavior(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrv6EndPointBehavior(const SLSrv6EndPointBehavior& from);
  SLSrv6EndPointBehavior(SLSrv6EndPointBehavior&& from) noexcept
    : SLSrv6EndPointBehavior() {
    *this = ::std::move(from);
  }

  inline SLSrv6EndPointBehavior& operator=(const SLSrv6EndPointBehavior& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrv6EndPointBehavior& operator=(SLSrv6EndPointBehavior&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrv6EndPointBehavior& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrv6EndPointBehavior* internal_default_instance() {
    return reinterpret_cast<const SLSrv6EndPointBehavior*>(
               &_SLSrv6EndPointBehavior_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SLSrv6EndPointBehavior& a, SLSrv6EndPointBehavior& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrv6EndPointBehavior* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrv6EndPointBehavior* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrv6EndPointBehavior* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrv6EndPointBehavior>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrv6EndPointBehavior& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrv6EndPointBehavior& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrv6EndPointBehavior* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrv6EndPointBehavior";
  }
  protected:
  explicit SLSrv6EndPointBehavior(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndPointBehaviorFieldNumber = 1,
    kFlagsFieldNumber = 2,
    kAlgorithmFieldNumber = 3,
  };
  // uint32 EndPointBehavior = 1;
  void clear_endpointbehavior();
  uint32_t endpointbehavior() const;
  void set_endpointbehavior(uint32_t value);
  private:
  uint32_t _internal_endpointbehavior() const;
  void _internal_set_endpointbehavior(uint32_t value);
  public:

  // uint32 Flags = 2;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // uint32 Algorithm = 3;
  void clear_algorithm();
  uint32_t algorithm() const;
  void set_algorithm(uint32_t value);
  private:
  uint32_t _internal_algorithm() const;
  void _internal_set_algorithm(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrv6EndPointBehavior)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t endpointbehavior_;
  uint32_t flags_;
  uint32_t algorithm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrv6SidStruct final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrv6SidStruct) */ {
 public:
  inline SLSrv6SidStruct() : SLSrv6SidStruct(nullptr) {}
  ~SLSrv6SidStruct() override;
  explicit constexpr SLSrv6SidStruct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrv6SidStruct(const SLSrv6SidStruct& from);
  SLSrv6SidStruct(SLSrv6SidStruct&& from) noexcept
    : SLSrv6SidStruct() {
    *this = ::std::move(from);
  }

  inline SLSrv6SidStruct& operator=(const SLSrv6SidStruct& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrv6SidStruct& operator=(SLSrv6SidStruct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrv6SidStruct& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrv6SidStruct* internal_default_instance() {
    return reinterpret_cast<const SLSrv6SidStruct*>(
               &_SLSrv6SidStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SLSrv6SidStruct& a, SLSrv6SidStruct& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrv6SidStruct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrv6SidStruct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrv6SidStruct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrv6SidStruct>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrv6SidStruct& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrv6SidStruct& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrv6SidStruct* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrv6SidStruct";
  }
  protected:
  explicit SLSrv6SidStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocatorBlockLenFieldNumber = 1,
    kLocatorNodeLenFieldNumber = 2,
    kFunctionLenFieldNumber = 3,
    kArgLenFieldNumber = 4,
  };
  // uint32 LocatorBlockLen = 1;
  void clear_locatorblocklen();
  uint32_t locatorblocklen() const;
  void set_locatorblocklen(uint32_t value);
  private:
  uint32_t _internal_locatorblocklen() const;
  void _internal_set_locatorblocklen(uint32_t value);
  public:

  // uint32 LocatorNodeLen = 2;
  void clear_locatornodelen();
  uint32_t locatornodelen() const;
  void set_locatornodelen(uint32_t value);
  private:
  uint32_t _internal_locatornodelen() const;
  void _internal_set_locatornodelen(uint32_t value);
  public:

  // uint32 FunctionLen = 3;
  void clear_functionlen();
  uint32_t functionlen() const;
  void set_functionlen(uint32_t value);
  private:
  uint32_t _internal_functionlen() const;
  void _internal_set_functionlen(uint32_t value);
  public:

  // uint32 ArgLen = 4;
  void clear_arglen();
  uint32_t arglen() const;
  void set_arglen(uint32_t value);
  private:
  uint32_t _internal_arglen() const;
  void _internal_set_arglen(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrv6SidStruct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t locatorblocklen_;
  uint32_t locatornodelen_;
  uint32_t functionlen_;
  uint32_t arglen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SLSrPolicyFlags

// uint32 Flags = 1;
inline void SLSrPolicyFlags::clear_flags() {
  flags_ = 0u;
}
inline uint32_t SLSrPolicyFlags::_internal_flags() const {
  return flags_;
}
inline uint32_t SLSrPolicyFlags::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyFlags.Flags)
  return _internal_flags();
}
inline void SLSrPolicyFlags::_internal_set_flags(uint32_t value) {
  
  flags_ = value;
}
inline void SLSrPolicyFlags::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrPolicyFlags.Flags)
}

// -------------------------------------------------------------------

// SLSrBsid

// uint32 MplsBsid = 1;
inline bool SLSrBsid::_internal_has_mplsbsid() const {
  return BindingSid_case() == kMplsBsid;
}
inline bool SLSrBsid::has_mplsbsid() const {
  return _internal_has_mplsbsid();
}
inline void SLSrBsid::set_has_mplsbsid() {
  _oneof_case_[0] = kMplsBsid;
}
inline void SLSrBsid::clear_mplsbsid() {
  if (_internal_has_mplsbsid()) {
    BindingSid_.mplsbsid_ = 0u;
    clear_has_BindingSid();
  }
}
inline uint32_t SLSrBsid::_internal_mplsbsid() const {
  if (_internal_has_mplsbsid()) {
    return BindingSid_.mplsbsid_;
  }
  return 0u;
}
inline void SLSrBsid::_internal_set_mplsbsid(uint32_t value) {
  if (!_internal_has_mplsbsid()) {
    clear_BindingSid();
    set_has_mplsbsid();
  }
  BindingSid_.mplsbsid_ = value;
}
inline uint32_t SLSrBsid::mplsbsid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrBsid.MplsBsid)
  return _internal_mplsbsid();
}
inline void SLSrBsid::set_mplsbsid(uint32_t value) {
  _internal_set_mplsbsid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrBsid.MplsBsid)
}

// bytes Srv6Bsid = 2;
inline bool SLSrBsid::_internal_has_srv6bsid() const {
  return BindingSid_case() == kSrv6Bsid;
}
inline bool SLSrBsid::has_srv6bsid() const {
  return _internal_has_srv6bsid();
}
inline void SLSrBsid::set_has_srv6bsid() {
  _oneof_case_[0] = kSrv6Bsid;
}
inline void SLSrBsid::clear_srv6bsid() {
  if (_internal_has_srv6bsid()) {
    BindingSid_.srv6bsid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_BindingSid();
  }
}
inline const std::string& SLSrBsid::srv6bsid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrBsid.Srv6Bsid)
  return _internal_srv6bsid();
}
template <typename ArgT0, typename... ArgT>
inline void SLSrBsid::set_srv6bsid(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_srv6bsid()) {
    clear_BindingSid();
    set_has_srv6bsid();
    BindingSid_.srv6bsid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  BindingSid_.srv6bsid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrBsid.Srv6Bsid)
}
inline std::string* SLSrBsid::mutable_srv6bsid() {
  std::string* _s = _internal_mutable_srv6bsid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrBsid.Srv6Bsid)
  return _s;
}
inline const std::string& SLSrBsid::_internal_srv6bsid() const {
  if (_internal_has_srv6bsid()) {
    return BindingSid_.srv6bsid_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLSrBsid::_internal_set_srv6bsid(const std::string& value) {
  if (!_internal_has_srv6bsid()) {
    clear_BindingSid();
    set_has_srv6bsid();
    BindingSid_.srv6bsid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  BindingSid_.srv6bsid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrBsid::_internal_mutable_srv6bsid() {
  if (!_internal_has_srv6bsid()) {
    clear_BindingSid();
    set_has_srv6bsid();
    BindingSid_.srv6bsid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return BindingSid_.srv6bsid_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrBsid::release_srv6bsid() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrBsid.Srv6Bsid)
  if (_internal_has_srv6bsid()) {
    clear_has_BindingSid();
    return BindingSid_.srv6bsid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLSrBsid::set_allocated_srv6bsid(std::string* srv6bsid) {
  if (has_BindingSid()) {
    clear_BindingSid();
  }
  if (srv6bsid != nullptr) {
    set_has_srv6bsid();
    BindingSid_.srv6bsid_.UnsafeSetDefault(srv6bsid);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(srv6bsid);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrBsid.Srv6Bsid)
}

inline bool SLSrBsid::has_BindingSid() const {
  return BindingSid_case() != BINDINGSID_NOT_SET;
}
inline void SLSrBsid::clear_has_BindingSid() {
  _oneof_case_[0] = BINDINGSID_NOT_SET;
}
inline SLSrBsid::BindingSidCase SLSrBsid::BindingSid_case() const {
  return SLSrBsid::BindingSidCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLSrCpName

// string Name = 1;
inline void SLSrCpName::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SLSrCpName::name() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrCpName.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLSrCpName::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrCpName.Name)
}
inline std::string* SLSrCpName::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrCpName.Name)
  return _s;
}
inline const std::string& SLSrCpName::_internal_name() const {
  return name_.Get();
}
inline void SLSrCpName::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrCpName::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrCpName::release_name() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrCpName.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLSrCpName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrCpName.Name)
}

// -------------------------------------------------------------------

// SLSrSegmentDesc

// uint32 Algorithm = 1;
inline void SLSrSegmentDesc::clear_algorithm() {
  algorithm_ = 0u;
}
inline uint32_t SLSrSegmentDesc::_internal_algorithm() const {
  return algorithm_;
}
inline uint32_t SLSrSegmentDesc::algorithm() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegmentDesc.Algorithm)
  return _internal_algorithm();
}
inline void SLSrSegmentDesc::_internal_set_algorithm(uint32_t value) {
  
  algorithm_ = value;
}
inline void SLSrSegmentDesc::set_algorithm(uint32_t value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegmentDesc.Algorithm)
}

// bytes Ipv4LocalAddr = 2;
inline bool SLSrSegmentDesc::_internal_has_ipv4localaddr() const {
  return LocalNode_case() == kIpv4LocalAddr;
}
inline bool SLSrSegmentDesc::has_ipv4localaddr() const {
  return _internal_has_ipv4localaddr();
}
inline void SLSrSegmentDesc::set_has_ipv4localaddr() {
  _oneof_case_[0] = kIpv4LocalAddr;
}
inline void SLSrSegmentDesc::clear_ipv4localaddr() {
  if (_internal_has_ipv4localaddr()) {
    LocalNode_.ipv4localaddr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_LocalNode();
  }
}
inline const std::string& SLSrSegmentDesc::ipv4localaddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegmentDesc.Ipv4LocalAddr)
  return _internal_ipv4localaddr();
}
template <typename ArgT0, typename... ArgT>
inline void SLSrSegmentDesc::set_ipv4localaddr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ipv4localaddr()) {
    clear_LocalNode();
    set_has_ipv4localaddr();
    LocalNode_.ipv4localaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  LocalNode_.ipv4localaddr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegmentDesc.Ipv4LocalAddr)
}
inline std::string* SLSrSegmentDesc::mutable_ipv4localaddr() {
  std::string* _s = _internal_mutable_ipv4localaddr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrSegmentDesc.Ipv4LocalAddr)
  return _s;
}
inline const std::string& SLSrSegmentDesc::_internal_ipv4localaddr() const {
  if (_internal_has_ipv4localaddr()) {
    return LocalNode_.ipv4localaddr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLSrSegmentDesc::_internal_set_ipv4localaddr(const std::string& value) {
  if (!_internal_has_ipv4localaddr()) {
    clear_LocalNode();
    set_has_ipv4localaddr();
    LocalNode_.ipv4localaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  LocalNode_.ipv4localaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrSegmentDesc::_internal_mutable_ipv4localaddr() {
  if (!_internal_has_ipv4localaddr()) {
    clear_LocalNode();
    set_has_ipv4localaddr();
    LocalNode_.ipv4localaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return LocalNode_.ipv4localaddr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrSegmentDesc::release_ipv4localaddr() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrSegmentDesc.Ipv4LocalAddr)
  if (_internal_has_ipv4localaddr()) {
    clear_has_LocalNode();
    return LocalNode_.ipv4localaddr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLSrSegmentDesc::set_allocated_ipv4localaddr(std::string* ipv4localaddr) {
  if (has_LocalNode()) {
    clear_LocalNode();
  }
  if (ipv4localaddr != nullptr) {
    set_has_ipv4localaddr();
    LocalNode_.ipv4localaddr_.UnsafeSetDefault(ipv4localaddr);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(ipv4localaddr);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrSegmentDesc.Ipv4LocalAddr)
}

// bytes Ipv6LocalAddr = 3;
inline bool SLSrSegmentDesc::_internal_has_ipv6localaddr() const {
  return LocalNode_case() == kIpv6LocalAddr;
}
inline bool SLSrSegmentDesc::has_ipv6localaddr() const {
  return _internal_has_ipv6localaddr();
}
inline void SLSrSegmentDesc::set_has_ipv6localaddr() {
  _oneof_case_[0] = kIpv6LocalAddr;
}
inline void SLSrSegmentDesc::clear_ipv6localaddr() {
  if (_internal_has_ipv6localaddr()) {
    LocalNode_.ipv6localaddr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_LocalNode();
  }
}
inline const std::string& SLSrSegmentDesc::ipv6localaddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegmentDesc.Ipv6LocalAddr)
  return _internal_ipv6localaddr();
}
template <typename ArgT0, typename... ArgT>
inline void SLSrSegmentDesc::set_ipv6localaddr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ipv6localaddr()) {
    clear_LocalNode();
    set_has_ipv6localaddr();
    LocalNode_.ipv6localaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  LocalNode_.ipv6localaddr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegmentDesc.Ipv6LocalAddr)
}
inline std::string* SLSrSegmentDesc::mutable_ipv6localaddr() {
  std::string* _s = _internal_mutable_ipv6localaddr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrSegmentDesc.Ipv6LocalAddr)
  return _s;
}
inline const std::string& SLSrSegmentDesc::_internal_ipv6localaddr() const {
  if (_internal_has_ipv6localaddr()) {
    return LocalNode_.ipv6localaddr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLSrSegmentDesc::_internal_set_ipv6localaddr(const std::string& value) {
  if (!_internal_has_ipv6localaddr()) {
    clear_LocalNode();
    set_has_ipv6localaddr();
    LocalNode_.ipv6localaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  LocalNode_.ipv6localaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrSegmentDesc::_internal_mutable_ipv6localaddr() {
  if (!_internal_has_ipv6localaddr()) {
    clear_LocalNode();
    set_has_ipv6localaddr();
    LocalNode_.ipv6localaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return LocalNode_.ipv6localaddr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrSegmentDesc::release_ipv6localaddr() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrSegmentDesc.Ipv6LocalAddr)
  if (_internal_has_ipv6localaddr()) {
    clear_has_LocalNode();
    return LocalNode_.ipv6localaddr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLSrSegmentDesc::set_allocated_ipv6localaddr(std::string* ipv6localaddr) {
  if (has_LocalNode()) {
    clear_LocalNode();
  }
  if (ipv6localaddr != nullptr) {
    set_has_ipv6localaddr();
    LocalNode_.ipv6localaddr_.UnsafeSetDefault(ipv6localaddr);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(ipv6localaddr);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrSegmentDesc.Ipv6LocalAddr)
}

// bytes Ipv4RemoteAddr = 4;
inline bool SLSrSegmentDesc::_internal_has_ipv4remoteaddr() const {
  return RemoteNode_case() == kIpv4RemoteAddr;
}
inline bool SLSrSegmentDesc::has_ipv4remoteaddr() const {
  return _internal_has_ipv4remoteaddr();
}
inline void SLSrSegmentDesc::set_has_ipv4remoteaddr() {
  _oneof_case_[1] = kIpv4RemoteAddr;
}
inline void SLSrSegmentDesc::clear_ipv4remoteaddr() {
  if (_internal_has_ipv4remoteaddr()) {
    RemoteNode_.ipv4remoteaddr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_RemoteNode();
  }
}
inline const std::string& SLSrSegmentDesc::ipv4remoteaddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegmentDesc.Ipv4RemoteAddr)
  return _internal_ipv4remoteaddr();
}
template <typename ArgT0, typename... ArgT>
inline void SLSrSegmentDesc::set_ipv4remoteaddr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ipv4remoteaddr()) {
    clear_RemoteNode();
    set_has_ipv4remoteaddr();
    RemoteNode_.ipv4remoteaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  RemoteNode_.ipv4remoteaddr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegmentDesc.Ipv4RemoteAddr)
}
inline std::string* SLSrSegmentDesc::mutable_ipv4remoteaddr() {
  std::string* _s = _internal_mutable_ipv4remoteaddr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrSegmentDesc.Ipv4RemoteAddr)
  return _s;
}
inline const std::string& SLSrSegmentDesc::_internal_ipv4remoteaddr() const {
  if (_internal_has_ipv4remoteaddr()) {
    return RemoteNode_.ipv4remoteaddr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLSrSegmentDesc::_internal_set_ipv4remoteaddr(const std::string& value) {
  if (!_internal_has_ipv4remoteaddr()) {
    clear_RemoteNode();
    set_has_ipv4remoteaddr();
    RemoteNode_.ipv4remoteaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  RemoteNode_.ipv4remoteaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrSegmentDesc::_internal_mutable_ipv4remoteaddr() {
  if (!_internal_has_ipv4remoteaddr()) {
    clear_RemoteNode();
    set_has_ipv4remoteaddr();
    RemoteNode_.ipv4remoteaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return RemoteNode_.ipv4remoteaddr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrSegmentDesc::release_ipv4remoteaddr() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrSegmentDesc.Ipv4RemoteAddr)
  if (_internal_has_ipv4remoteaddr()) {
    clear_has_RemoteNode();
    return RemoteNode_.ipv4remoteaddr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLSrSegmentDesc::set_allocated_ipv4remoteaddr(std::string* ipv4remoteaddr) {
  if (has_RemoteNode()) {
    clear_RemoteNode();
  }
  if (ipv4remoteaddr != nullptr) {
    set_has_ipv4remoteaddr();
    RemoteNode_.ipv4remoteaddr_.UnsafeSetDefault(ipv4remoteaddr);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(ipv4remoteaddr);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrSegmentDesc.Ipv4RemoteAddr)
}

// bytes Ipv6RemoteAddr = 5;
inline bool SLSrSegmentDesc::_internal_has_ipv6remoteaddr() const {
  return RemoteNode_case() == kIpv6RemoteAddr;
}
inline bool SLSrSegmentDesc::has_ipv6remoteaddr() const {
  return _internal_has_ipv6remoteaddr();
}
inline void SLSrSegmentDesc::set_has_ipv6remoteaddr() {
  _oneof_case_[1] = kIpv6RemoteAddr;
}
inline void SLSrSegmentDesc::clear_ipv6remoteaddr() {
  if (_internal_has_ipv6remoteaddr()) {
    RemoteNode_.ipv6remoteaddr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_RemoteNode();
  }
}
inline const std::string& SLSrSegmentDesc::ipv6remoteaddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegmentDesc.Ipv6RemoteAddr)
  return _internal_ipv6remoteaddr();
}
template <typename ArgT0, typename... ArgT>
inline void SLSrSegmentDesc::set_ipv6remoteaddr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ipv6remoteaddr()) {
    clear_RemoteNode();
    set_has_ipv6remoteaddr();
    RemoteNode_.ipv6remoteaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  RemoteNode_.ipv6remoteaddr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegmentDesc.Ipv6RemoteAddr)
}
inline std::string* SLSrSegmentDesc::mutable_ipv6remoteaddr() {
  std::string* _s = _internal_mutable_ipv6remoteaddr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrSegmentDesc.Ipv6RemoteAddr)
  return _s;
}
inline const std::string& SLSrSegmentDesc::_internal_ipv6remoteaddr() const {
  if (_internal_has_ipv6remoteaddr()) {
    return RemoteNode_.ipv6remoteaddr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLSrSegmentDesc::_internal_set_ipv6remoteaddr(const std::string& value) {
  if (!_internal_has_ipv6remoteaddr()) {
    clear_RemoteNode();
    set_has_ipv6remoteaddr();
    RemoteNode_.ipv6remoteaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  RemoteNode_.ipv6remoteaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrSegmentDesc::_internal_mutable_ipv6remoteaddr() {
  if (!_internal_has_ipv6remoteaddr()) {
    clear_RemoteNode();
    set_has_ipv6remoteaddr();
    RemoteNode_.ipv6remoteaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return RemoteNode_.ipv6remoteaddr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrSegmentDesc::release_ipv6remoteaddr() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrSegmentDesc.Ipv6RemoteAddr)
  if (_internal_has_ipv6remoteaddr()) {
    clear_has_RemoteNode();
    return RemoteNode_.ipv6remoteaddr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLSrSegmentDesc::set_allocated_ipv6remoteaddr(std::string* ipv6remoteaddr) {
  if (has_RemoteNode()) {
    clear_RemoteNode();
  }
  if (ipv6remoteaddr != nullptr) {
    set_has_ipv6remoteaddr();
    RemoteNode_.ipv6remoteaddr_.UnsafeSetDefault(ipv6remoteaddr);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(ipv6remoteaddr);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrSegmentDesc.Ipv6RemoteAddr)
}

// bytes Ipv6LocalNodeGlobalAddr = 6;
inline void SLSrSegmentDesc::clear_ipv6localnodeglobaladdr() {
  ipv6localnodeglobaladdr_.ClearToEmpty();
}
inline const std::string& SLSrSegmentDesc::ipv6localnodeglobaladdr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegmentDesc.Ipv6LocalNodeGlobalAddr)
  return _internal_ipv6localnodeglobaladdr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLSrSegmentDesc::set_ipv6localnodeglobaladdr(ArgT0&& arg0, ArgT... args) {
 
 ipv6localnodeglobaladdr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegmentDesc.Ipv6LocalNodeGlobalAddr)
}
inline std::string* SLSrSegmentDesc::mutable_ipv6localnodeglobaladdr() {
  std::string* _s = _internal_mutable_ipv6localnodeglobaladdr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrSegmentDesc.Ipv6LocalNodeGlobalAddr)
  return _s;
}
inline const std::string& SLSrSegmentDesc::_internal_ipv6localnodeglobaladdr() const {
  return ipv6localnodeglobaladdr_.Get();
}
inline void SLSrSegmentDesc::_internal_set_ipv6localnodeglobaladdr(const std::string& value) {
  
  ipv6localnodeglobaladdr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrSegmentDesc::_internal_mutable_ipv6localnodeglobaladdr() {
  
  return ipv6localnodeglobaladdr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrSegmentDesc::release_ipv6localnodeglobaladdr() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrSegmentDesc.Ipv6LocalNodeGlobalAddr)
  return ipv6localnodeglobaladdr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLSrSegmentDesc::set_allocated_ipv6localnodeglobaladdr(std::string* ipv6localnodeglobaladdr) {
  if (ipv6localnodeglobaladdr != nullptr) {
    
  } else {
    
  }
  ipv6localnodeglobaladdr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv6localnodeglobaladdr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ipv6localnodeglobaladdr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ipv6localnodeglobaladdr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrSegmentDesc.Ipv6LocalNodeGlobalAddr)
}

// bytes Ipv6RemoteNodeGlobalAddr = 7;
inline void SLSrSegmentDesc::clear_ipv6remotenodeglobaladdr() {
  ipv6remotenodeglobaladdr_.ClearToEmpty();
}
inline const std::string& SLSrSegmentDesc::ipv6remotenodeglobaladdr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegmentDesc.Ipv6RemoteNodeGlobalAddr)
  return _internal_ipv6remotenodeglobaladdr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLSrSegmentDesc::set_ipv6remotenodeglobaladdr(ArgT0&& arg0, ArgT... args) {
 
 ipv6remotenodeglobaladdr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegmentDesc.Ipv6RemoteNodeGlobalAddr)
}
inline std::string* SLSrSegmentDesc::mutable_ipv6remotenodeglobaladdr() {
  std::string* _s = _internal_mutable_ipv6remotenodeglobaladdr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrSegmentDesc.Ipv6RemoteNodeGlobalAddr)
  return _s;
}
inline const std::string& SLSrSegmentDesc::_internal_ipv6remotenodeglobaladdr() const {
  return ipv6remotenodeglobaladdr_.Get();
}
inline void SLSrSegmentDesc::_internal_set_ipv6remotenodeglobaladdr(const std::string& value) {
  
  ipv6remotenodeglobaladdr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrSegmentDesc::_internal_mutable_ipv6remotenodeglobaladdr() {
  
  return ipv6remotenodeglobaladdr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrSegmentDesc::release_ipv6remotenodeglobaladdr() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrSegmentDesc.Ipv6RemoteNodeGlobalAddr)
  return ipv6remotenodeglobaladdr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLSrSegmentDesc::set_allocated_ipv6remotenodeglobaladdr(std::string* ipv6remotenodeglobaladdr) {
  if (ipv6remotenodeglobaladdr != nullptr) {
    
  } else {
    
  }
  ipv6remotenodeglobaladdr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv6remotenodeglobaladdr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ipv6remotenodeglobaladdr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ipv6remotenodeglobaladdr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrSegmentDesc.Ipv6RemoteNodeGlobalAddr)
}

// uint32 LocalNodeIntfId = 8;
inline void SLSrSegmentDesc::clear_localnodeintfid() {
  localnodeintfid_ = 0u;
}
inline uint32_t SLSrSegmentDesc::_internal_localnodeintfid() const {
  return localnodeintfid_;
}
inline uint32_t SLSrSegmentDesc::localnodeintfid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegmentDesc.LocalNodeIntfId)
  return _internal_localnodeintfid();
}
inline void SLSrSegmentDesc::_internal_set_localnodeintfid(uint32_t value) {
  
  localnodeintfid_ = value;
}
inline void SLSrSegmentDesc::set_localnodeintfid(uint32_t value) {
  _internal_set_localnodeintfid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegmentDesc.LocalNodeIntfId)
}

// uint32 RemoteNodeIntfId = 9;
inline void SLSrSegmentDesc::clear_remotenodeintfid() {
  remotenodeintfid_ = 0u;
}
inline uint32_t SLSrSegmentDesc::_internal_remotenodeintfid() const {
  return remotenodeintfid_;
}
inline uint32_t SLSrSegmentDesc::remotenodeintfid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegmentDesc.RemoteNodeIntfId)
  return _internal_remotenodeintfid();
}
inline void SLSrSegmentDesc::_internal_set_remotenodeintfid(uint32_t value) {
  
  remotenodeintfid_ = value;
}
inline void SLSrSegmentDesc::set_remotenodeintfid(uint32_t value) {
  _internal_set_remotenodeintfid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegmentDesc.RemoteNodeIntfId)
}

inline bool SLSrSegmentDesc::has_LocalNode() const {
  return LocalNode_case() != LOCALNODE_NOT_SET;
}
inline void SLSrSegmentDesc::clear_has_LocalNode() {
  _oneof_case_[0] = LOCALNODE_NOT_SET;
}
inline bool SLSrSegmentDesc::has_RemoteNode() const {
  return RemoteNode_case() != REMOTENODE_NOT_SET;
}
inline void SLSrSegmentDesc::clear_has_RemoteNode() {
  _oneof_case_[1] = REMOTENODE_NOT_SET;
}
inline SLSrSegmentDesc::LocalNodeCase SLSrSegmentDesc::LocalNode_case() const {
  return SLSrSegmentDesc::LocalNodeCase(_oneof_case_[0]);
}
inline SLSrSegmentDesc::RemoteNodeCase SLSrSegmentDesc::RemoteNode_case() const {
  return SLSrSegmentDesc::RemoteNodeCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// SLSrSegment

// .service_layer.SLSrSegmentType Type = 1;
inline void SLSrSegment::clear_type() {
  type_ = 0;
}
inline ::service_layer::SLSrSegmentType SLSrSegment::_internal_type() const {
  return static_cast< ::service_layer::SLSrSegmentType >(type_);
}
inline ::service_layer::SLSrSegmentType SLSrSegment::type() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegment.Type)
  return _internal_type();
}
inline void SLSrSegment::_internal_set_type(::service_layer::SLSrSegmentType value) {
  
  type_ = value;
}
inline void SLSrSegment::set_type(::service_layer::SLSrSegmentType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegment.Type)
}

// uint32 Flags = 2;
inline void SLSrSegment::clear_flags() {
  flags_ = 0u;
}
inline uint32_t SLSrSegment::_internal_flags() const {
  return flags_;
}
inline uint32_t SLSrSegment::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegment.Flags)
  return _internal_flags();
}
inline void SLSrSegment::_internal_set_flags(uint32_t value) {
  
  flags_ = value;
}
inline void SLSrSegment::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegment.Flags)
}

// uint32 MplsLabel = 3;
inline bool SLSrSegment::_internal_has_mplslabel() const {
  return Sid_case() == kMplsLabel;
}
inline bool SLSrSegment::has_mplslabel() const {
  return _internal_has_mplslabel();
}
inline void SLSrSegment::set_has_mplslabel() {
  _oneof_case_[0] = kMplsLabel;
}
inline void SLSrSegment::clear_mplslabel() {
  if (_internal_has_mplslabel()) {
    Sid_.mplslabel_ = 0u;
    clear_has_Sid();
  }
}
inline uint32_t SLSrSegment::_internal_mplslabel() const {
  if (_internal_has_mplslabel()) {
    return Sid_.mplslabel_;
  }
  return 0u;
}
inline void SLSrSegment::_internal_set_mplslabel(uint32_t value) {
  if (!_internal_has_mplslabel()) {
    clear_Sid();
    set_has_mplslabel();
  }
  Sid_.mplslabel_ = value;
}
inline uint32_t SLSrSegment::mplslabel() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegment.MplsLabel)
  return _internal_mplslabel();
}
inline void SLSrSegment::set_mplslabel(uint32_t value) {
  _internal_set_mplslabel(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegment.MplsLabel)
}

// bytes Srv6Sid = 4;
inline bool SLSrSegment::_internal_has_srv6sid() const {
  return Sid_case() == kSrv6Sid;
}
inline bool SLSrSegment::has_srv6sid() const {
  return _internal_has_srv6sid();
}
inline void SLSrSegment::set_has_srv6sid() {
  _oneof_case_[0] = kSrv6Sid;
}
inline void SLSrSegment::clear_srv6sid() {
  if (_internal_has_srv6sid()) {
    Sid_.srv6sid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_Sid();
  }
}
inline const std::string& SLSrSegment::srv6sid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegment.Srv6Sid)
  return _internal_srv6sid();
}
template <typename ArgT0, typename... ArgT>
inline void SLSrSegment::set_srv6sid(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_srv6sid()) {
    clear_Sid();
    set_has_srv6sid();
    Sid_.srv6sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Sid_.srv6sid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegment.Srv6Sid)
}
inline std::string* SLSrSegment::mutable_srv6sid() {
  std::string* _s = _internal_mutable_srv6sid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrSegment.Srv6Sid)
  return _s;
}
inline const std::string& SLSrSegment::_internal_srv6sid() const {
  if (_internal_has_srv6sid()) {
    return Sid_.srv6sid_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLSrSegment::_internal_set_srv6sid(const std::string& value) {
  if (!_internal_has_srv6sid()) {
    clear_Sid();
    set_has_srv6sid();
    Sid_.srv6sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Sid_.srv6sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrSegment::_internal_mutable_srv6sid() {
  if (!_internal_has_srv6sid()) {
    clear_Sid();
    set_has_srv6sid();
    Sid_.srv6sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return Sid_.srv6sid_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrSegment::release_srv6sid() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrSegment.Srv6Sid)
  if (_internal_has_srv6sid()) {
    clear_has_Sid();
    return Sid_.srv6sid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLSrSegment::set_allocated_srv6sid(std::string* srv6sid) {
  if (has_Sid()) {
    clear_Sid();
  }
  if (srv6sid != nullptr) {
    set_has_srv6sid();
    Sid_.srv6sid_.UnsafeSetDefault(srv6sid);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(srv6sid);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrSegment.Srv6Sid)
}

// .service_layer.SLSrSegmentDesc SegmentDesc = 5;
inline bool SLSrSegment::_internal_has_segmentdesc() const {
  return this != internal_default_instance() && segmentdesc_ != nullptr;
}
inline bool SLSrSegment::has_segmentdesc() const {
  return _internal_has_segmentdesc();
}
inline void SLSrSegment::clear_segmentdesc() {
  if (GetArenaForAllocation() == nullptr && segmentdesc_ != nullptr) {
    delete segmentdesc_;
  }
  segmentdesc_ = nullptr;
}
inline const ::service_layer::SLSrSegmentDesc& SLSrSegment::_internal_segmentdesc() const {
  const ::service_layer::SLSrSegmentDesc* p = segmentdesc_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrSegmentDesc&>(
      ::service_layer::_SLSrSegmentDesc_default_instance_);
}
inline const ::service_layer::SLSrSegmentDesc& SLSrSegment::segmentdesc() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegment.SegmentDesc)
  return _internal_segmentdesc();
}
inline void SLSrSegment::unsafe_arena_set_allocated_segmentdesc(
    ::service_layer::SLSrSegmentDesc* segmentdesc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(segmentdesc_);
  }
  segmentdesc_ = segmentdesc;
  if (segmentdesc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrSegment.SegmentDesc)
}
inline ::service_layer::SLSrSegmentDesc* SLSrSegment::release_segmentdesc() {
  
  ::service_layer::SLSrSegmentDesc* temp = segmentdesc_;
  segmentdesc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrSegmentDesc* SLSrSegment::unsafe_arena_release_segmentdesc() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrSegment.SegmentDesc)
  
  ::service_layer::SLSrSegmentDesc* temp = segmentdesc_;
  segmentdesc_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrSegmentDesc* SLSrSegment::_internal_mutable_segmentdesc() {
  
  if (segmentdesc_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrSegmentDesc>(GetArenaForAllocation());
    segmentdesc_ = p;
  }
  return segmentdesc_;
}
inline ::service_layer::SLSrSegmentDesc* SLSrSegment::mutable_segmentdesc() {
  ::service_layer::SLSrSegmentDesc* _msg = _internal_mutable_segmentdesc();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrSegment.SegmentDesc)
  return _msg;
}
inline void SLSrSegment::set_allocated_segmentdesc(::service_layer::SLSrSegmentDesc* segmentdesc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete segmentdesc_;
  }
  if (segmentdesc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrSegmentDesc>::GetOwningArena(segmentdesc);
    if (message_arena != submessage_arena) {
      segmentdesc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, segmentdesc, submessage_arena);
    }
    
  } else {
    
  }
  segmentdesc_ = segmentdesc;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrSegment.SegmentDesc)
}

// .service_layer.SLSrv6EndPointBehavior EndPointBehaviour = 6;
inline bool SLSrSegment::_internal_has_endpointbehaviour() const {
  return this != internal_default_instance() && endpointbehaviour_ != nullptr;
}
inline bool SLSrSegment::has_endpointbehaviour() const {
  return _internal_has_endpointbehaviour();
}
inline void SLSrSegment::clear_endpointbehaviour() {
  if (GetArenaForAllocation() == nullptr && endpointbehaviour_ != nullptr) {
    delete endpointbehaviour_;
  }
  endpointbehaviour_ = nullptr;
}
inline const ::service_layer::SLSrv6EndPointBehavior& SLSrSegment::_internal_endpointbehaviour() const {
  const ::service_layer::SLSrv6EndPointBehavior* p = endpointbehaviour_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrv6EndPointBehavior&>(
      ::service_layer::_SLSrv6EndPointBehavior_default_instance_);
}
inline const ::service_layer::SLSrv6EndPointBehavior& SLSrSegment::endpointbehaviour() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegment.EndPointBehaviour)
  return _internal_endpointbehaviour();
}
inline void SLSrSegment::unsafe_arena_set_allocated_endpointbehaviour(
    ::service_layer::SLSrv6EndPointBehavior* endpointbehaviour) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endpointbehaviour_);
  }
  endpointbehaviour_ = endpointbehaviour;
  if (endpointbehaviour) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrSegment.EndPointBehaviour)
}
inline ::service_layer::SLSrv6EndPointBehavior* SLSrSegment::release_endpointbehaviour() {
  
  ::service_layer::SLSrv6EndPointBehavior* temp = endpointbehaviour_;
  endpointbehaviour_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrv6EndPointBehavior* SLSrSegment::unsafe_arena_release_endpointbehaviour() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrSegment.EndPointBehaviour)
  
  ::service_layer::SLSrv6EndPointBehavior* temp = endpointbehaviour_;
  endpointbehaviour_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrv6EndPointBehavior* SLSrSegment::_internal_mutable_endpointbehaviour() {
  
  if (endpointbehaviour_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrv6EndPointBehavior>(GetArenaForAllocation());
    endpointbehaviour_ = p;
  }
  return endpointbehaviour_;
}
inline ::service_layer::SLSrv6EndPointBehavior* SLSrSegment::mutable_endpointbehaviour() {
  ::service_layer::SLSrv6EndPointBehavior* _msg = _internal_mutable_endpointbehaviour();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrSegment.EndPointBehaviour)
  return _msg;
}
inline void SLSrSegment::set_allocated_endpointbehaviour(::service_layer::SLSrv6EndPointBehavior* endpointbehaviour) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete endpointbehaviour_;
  }
  if (endpointbehaviour) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrv6EndPointBehavior>::GetOwningArena(endpointbehaviour);
    if (message_arena != submessage_arena) {
      endpointbehaviour = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endpointbehaviour, submessage_arena);
    }
    
  } else {
    
  }
  endpointbehaviour_ = endpointbehaviour;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrSegment.EndPointBehaviour)
}

// .service_layer.SLSrv6SidStruct SidStruct = 7;
inline bool SLSrSegment::_internal_has_sidstruct() const {
  return this != internal_default_instance() && sidstruct_ != nullptr;
}
inline bool SLSrSegment::has_sidstruct() const {
  return _internal_has_sidstruct();
}
inline void SLSrSegment::clear_sidstruct() {
  if (GetArenaForAllocation() == nullptr && sidstruct_ != nullptr) {
    delete sidstruct_;
  }
  sidstruct_ = nullptr;
}
inline const ::service_layer::SLSrv6SidStruct& SLSrSegment::_internal_sidstruct() const {
  const ::service_layer::SLSrv6SidStruct* p = sidstruct_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrv6SidStruct&>(
      ::service_layer::_SLSrv6SidStruct_default_instance_);
}
inline const ::service_layer::SLSrv6SidStruct& SLSrSegment::sidstruct() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegment.SidStruct)
  return _internal_sidstruct();
}
inline void SLSrSegment::unsafe_arena_set_allocated_sidstruct(
    ::service_layer::SLSrv6SidStruct* sidstruct) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sidstruct_);
  }
  sidstruct_ = sidstruct;
  if (sidstruct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrSegment.SidStruct)
}
inline ::service_layer::SLSrv6SidStruct* SLSrSegment::release_sidstruct() {
  
  ::service_layer::SLSrv6SidStruct* temp = sidstruct_;
  sidstruct_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrv6SidStruct* SLSrSegment::unsafe_arena_release_sidstruct() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrSegment.SidStruct)
  
  ::service_layer::SLSrv6SidStruct* temp = sidstruct_;
  sidstruct_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrv6SidStruct* SLSrSegment::_internal_mutable_sidstruct() {
  
  if (sidstruct_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrv6SidStruct>(GetArenaForAllocation());
    sidstruct_ = p;
  }
  return sidstruct_;
}
inline ::service_layer::SLSrv6SidStruct* SLSrSegment::mutable_sidstruct() {
  ::service_layer::SLSrv6SidStruct* _msg = _internal_mutable_sidstruct();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrSegment.SidStruct)
  return _msg;
}
inline void SLSrSegment::set_allocated_sidstruct(::service_layer::SLSrv6SidStruct* sidstruct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sidstruct_;
  }
  if (sidstruct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrv6SidStruct>::GetOwningArena(sidstruct);
    if (message_arena != submessage_arena) {
      sidstruct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sidstruct, submessage_arena);
    }
    
  } else {
    
  }
  sidstruct_ = sidstruct;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrSegment.SidStruct)
}

inline bool SLSrSegment::has_Sid() const {
  return Sid_case() != SID_NOT_SET;
}
inline void SLSrSegment::clear_has_Sid() {
  _oneof_case_[0] = SID_NOT_SET;
}
inline SLSrSegment::SidCase SLSrSegment::Sid_case() const {
  return SLSrSegment::SidCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLSrv6BindingSid

// uint32 Flags = 1;
inline void SLSrv6BindingSid::clear_flags() {
  flags_ = 0u;
}
inline uint32_t SLSrv6BindingSid::_internal_flags() const {
  return flags_;
}
inline uint32_t SLSrv6BindingSid::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6BindingSid.Flags)
  return _internal_flags();
}
inline void SLSrv6BindingSid::_internal_set_flags(uint32_t value) {
  
  flags_ = value;
}
inline void SLSrv6BindingSid::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrv6BindingSid.Flags)
}

// bytes Bsid = 2;
inline void SLSrv6BindingSid::clear_bsid() {
  bsid_.ClearToEmpty();
}
inline const std::string& SLSrv6BindingSid::bsid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6BindingSid.Bsid)
  return _internal_bsid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLSrv6BindingSid::set_bsid(ArgT0&& arg0, ArgT... args) {
 
 bsid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrv6BindingSid.Bsid)
}
inline std::string* SLSrv6BindingSid::mutable_bsid() {
  std::string* _s = _internal_mutable_bsid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrv6BindingSid.Bsid)
  return _s;
}
inline const std::string& SLSrv6BindingSid::_internal_bsid() const {
  return bsid_.Get();
}
inline void SLSrv6BindingSid::_internal_set_bsid(const std::string& value) {
  
  bsid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrv6BindingSid::_internal_mutable_bsid() {
  
  return bsid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrv6BindingSid::release_bsid() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrv6BindingSid.Bsid)
  return bsid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLSrv6BindingSid::set_allocated_bsid(std::string* bsid) {
  if (bsid != nullptr) {
    
  } else {
    
  }
  bsid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bsid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bsid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrv6BindingSid.Bsid)
}

// bytes SpecifiedBsid = 3;
inline void SLSrv6BindingSid::clear_specifiedbsid() {
  specifiedbsid_.ClearToEmpty();
}
inline const std::string& SLSrv6BindingSid::specifiedbsid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6BindingSid.SpecifiedBsid)
  return _internal_specifiedbsid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLSrv6BindingSid::set_specifiedbsid(ArgT0&& arg0, ArgT... args) {
 
 specifiedbsid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrv6BindingSid.SpecifiedBsid)
}
inline std::string* SLSrv6BindingSid::mutable_specifiedbsid() {
  std::string* _s = _internal_mutable_specifiedbsid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrv6BindingSid.SpecifiedBsid)
  return _s;
}
inline const std::string& SLSrv6BindingSid::_internal_specifiedbsid() const {
  return specifiedbsid_.Get();
}
inline void SLSrv6BindingSid::_internal_set_specifiedbsid(const std::string& value) {
  
  specifiedbsid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrv6BindingSid::_internal_mutable_specifiedbsid() {
  
  return specifiedbsid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrv6BindingSid::release_specifiedbsid() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrv6BindingSid.SpecifiedBsid)
  return specifiedbsid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLSrv6BindingSid::set_allocated_specifiedbsid(std::string* specifiedbsid) {
  if (specifiedbsid != nullptr) {
    
  } else {
    
  }
  specifiedbsid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), specifiedbsid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (specifiedbsid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    specifiedbsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrv6BindingSid.SpecifiedBsid)
}

// .service_layer.SLSrv6EndPointBehavior EndPointBehavior = 4;
inline bool SLSrv6BindingSid::_internal_has_endpointbehavior() const {
  return this != internal_default_instance() && endpointbehavior_ != nullptr;
}
inline bool SLSrv6BindingSid::has_endpointbehavior() const {
  return _internal_has_endpointbehavior();
}
inline void SLSrv6BindingSid::clear_endpointbehavior() {
  if (GetArenaForAllocation() == nullptr && endpointbehavior_ != nullptr) {
    delete endpointbehavior_;
  }
  endpointbehavior_ = nullptr;
}
inline const ::service_layer::SLSrv6EndPointBehavior& SLSrv6BindingSid::_internal_endpointbehavior() const {
  const ::service_layer::SLSrv6EndPointBehavior* p = endpointbehavior_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrv6EndPointBehavior&>(
      ::service_layer::_SLSrv6EndPointBehavior_default_instance_);
}
inline const ::service_layer::SLSrv6EndPointBehavior& SLSrv6BindingSid::endpointbehavior() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6BindingSid.EndPointBehavior)
  return _internal_endpointbehavior();
}
inline void SLSrv6BindingSid::unsafe_arena_set_allocated_endpointbehavior(
    ::service_layer::SLSrv6EndPointBehavior* endpointbehavior) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endpointbehavior_);
  }
  endpointbehavior_ = endpointbehavior;
  if (endpointbehavior) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrv6BindingSid.EndPointBehavior)
}
inline ::service_layer::SLSrv6EndPointBehavior* SLSrv6BindingSid::release_endpointbehavior() {
  
  ::service_layer::SLSrv6EndPointBehavior* temp = endpointbehavior_;
  endpointbehavior_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrv6EndPointBehavior* SLSrv6BindingSid::unsafe_arena_release_endpointbehavior() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrv6BindingSid.EndPointBehavior)
  
  ::service_layer::SLSrv6EndPointBehavior* temp = endpointbehavior_;
  endpointbehavior_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrv6EndPointBehavior* SLSrv6BindingSid::_internal_mutable_endpointbehavior() {
  
  if (endpointbehavior_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrv6EndPointBehavior>(GetArenaForAllocation());
    endpointbehavior_ = p;
  }
  return endpointbehavior_;
}
inline ::service_layer::SLSrv6EndPointBehavior* SLSrv6BindingSid::mutable_endpointbehavior() {
  ::service_layer::SLSrv6EndPointBehavior* _msg = _internal_mutable_endpointbehavior();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrv6BindingSid.EndPointBehavior)
  return _msg;
}
inline void SLSrv6BindingSid::set_allocated_endpointbehavior(::service_layer::SLSrv6EndPointBehavior* endpointbehavior) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete endpointbehavior_;
  }
  if (endpointbehavior) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrv6EndPointBehavior>::GetOwningArena(endpointbehavior);
    if (message_arena != submessage_arena) {
      endpointbehavior = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endpointbehavior, submessage_arena);
    }
    
  } else {
    
  }
  endpointbehavior_ = endpointbehavior;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrv6BindingSid.EndPointBehavior)
}

// .service_layer.SLSrv6SidStruct SidStruct = 5;
inline bool SLSrv6BindingSid::_internal_has_sidstruct() const {
  return this != internal_default_instance() && sidstruct_ != nullptr;
}
inline bool SLSrv6BindingSid::has_sidstruct() const {
  return _internal_has_sidstruct();
}
inline void SLSrv6BindingSid::clear_sidstruct() {
  if (GetArenaForAllocation() == nullptr && sidstruct_ != nullptr) {
    delete sidstruct_;
  }
  sidstruct_ = nullptr;
}
inline const ::service_layer::SLSrv6SidStruct& SLSrv6BindingSid::_internal_sidstruct() const {
  const ::service_layer::SLSrv6SidStruct* p = sidstruct_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrv6SidStruct&>(
      ::service_layer::_SLSrv6SidStruct_default_instance_);
}
inline const ::service_layer::SLSrv6SidStruct& SLSrv6BindingSid::sidstruct() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6BindingSid.SidStruct)
  return _internal_sidstruct();
}
inline void SLSrv6BindingSid::unsafe_arena_set_allocated_sidstruct(
    ::service_layer::SLSrv6SidStruct* sidstruct) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sidstruct_);
  }
  sidstruct_ = sidstruct;
  if (sidstruct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrv6BindingSid.SidStruct)
}
inline ::service_layer::SLSrv6SidStruct* SLSrv6BindingSid::release_sidstruct() {
  
  ::service_layer::SLSrv6SidStruct* temp = sidstruct_;
  sidstruct_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrv6SidStruct* SLSrv6BindingSid::unsafe_arena_release_sidstruct() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrv6BindingSid.SidStruct)
  
  ::service_layer::SLSrv6SidStruct* temp = sidstruct_;
  sidstruct_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrv6SidStruct* SLSrv6BindingSid::_internal_mutable_sidstruct() {
  
  if (sidstruct_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrv6SidStruct>(GetArenaForAllocation());
    sidstruct_ = p;
  }
  return sidstruct_;
}
inline ::service_layer::SLSrv6SidStruct* SLSrv6BindingSid::mutable_sidstruct() {
  ::service_layer::SLSrv6SidStruct* _msg = _internal_mutable_sidstruct();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrv6BindingSid.SidStruct)
  return _msg;
}
inline void SLSrv6BindingSid::set_allocated_sidstruct(::service_layer::SLSrv6SidStruct* sidstruct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sidstruct_;
  }
  if (sidstruct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrv6SidStruct>::GetOwningArena(sidstruct);
    if (message_arena != submessage_arena) {
      sidstruct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sidstruct, submessage_arena);
    }
    
  } else {
    
  }
  sidstruct_ = sidstruct;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrv6BindingSid.SidStruct)
}

// -------------------------------------------------------------------

// SLSrv6EndPointBehavior

// uint32 EndPointBehavior = 1;
inline void SLSrv6EndPointBehavior::clear_endpointbehavior() {
  endpointbehavior_ = 0u;
}
inline uint32_t SLSrv6EndPointBehavior::_internal_endpointbehavior() const {
  return endpointbehavior_;
}
inline uint32_t SLSrv6EndPointBehavior::endpointbehavior() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6EndPointBehavior.EndPointBehavior)
  return _internal_endpointbehavior();
}
inline void SLSrv6EndPointBehavior::_internal_set_endpointbehavior(uint32_t value) {
  
  endpointbehavior_ = value;
}
inline void SLSrv6EndPointBehavior::set_endpointbehavior(uint32_t value) {
  _internal_set_endpointbehavior(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrv6EndPointBehavior.EndPointBehavior)
}

// uint32 Flags = 2;
inline void SLSrv6EndPointBehavior::clear_flags() {
  flags_ = 0u;
}
inline uint32_t SLSrv6EndPointBehavior::_internal_flags() const {
  return flags_;
}
inline uint32_t SLSrv6EndPointBehavior::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6EndPointBehavior.Flags)
  return _internal_flags();
}
inline void SLSrv6EndPointBehavior::_internal_set_flags(uint32_t value) {
  
  flags_ = value;
}
inline void SLSrv6EndPointBehavior::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrv6EndPointBehavior.Flags)
}

// uint32 Algorithm = 3;
inline void SLSrv6EndPointBehavior::clear_algorithm() {
  algorithm_ = 0u;
}
inline uint32_t SLSrv6EndPointBehavior::_internal_algorithm() const {
  return algorithm_;
}
inline uint32_t SLSrv6EndPointBehavior::algorithm() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6EndPointBehavior.Algorithm)
  return _internal_algorithm();
}
inline void SLSrv6EndPointBehavior::_internal_set_algorithm(uint32_t value) {
  
  algorithm_ = value;
}
inline void SLSrv6EndPointBehavior::set_algorithm(uint32_t value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrv6EndPointBehavior.Algorithm)
}

// -------------------------------------------------------------------

// SLSrv6SidStruct

// uint32 LocatorBlockLen = 1;
inline void SLSrv6SidStruct::clear_locatorblocklen() {
  locatorblocklen_ = 0u;
}
inline uint32_t SLSrv6SidStruct::_internal_locatorblocklen() const {
  return locatorblocklen_;
}
inline uint32_t SLSrv6SidStruct::locatorblocklen() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6SidStruct.LocatorBlockLen)
  return _internal_locatorblocklen();
}
inline void SLSrv6SidStruct::_internal_set_locatorblocklen(uint32_t value) {
  
  locatorblocklen_ = value;
}
inline void SLSrv6SidStruct::set_locatorblocklen(uint32_t value) {
  _internal_set_locatorblocklen(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrv6SidStruct.LocatorBlockLen)
}

// uint32 LocatorNodeLen = 2;
inline void SLSrv6SidStruct::clear_locatornodelen() {
  locatornodelen_ = 0u;
}
inline uint32_t SLSrv6SidStruct::_internal_locatornodelen() const {
  return locatornodelen_;
}
inline uint32_t SLSrv6SidStruct::locatornodelen() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6SidStruct.LocatorNodeLen)
  return _internal_locatornodelen();
}
inline void SLSrv6SidStruct::_internal_set_locatornodelen(uint32_t value) {
  
  locatornodelen_ = value;
}
inline void SLSrv6SidStruct::set_locatornodelen(uint32_t value) {
  _internal_set_locatornodelen(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrv6SidStruct.LocatorNodeLen)
}

// uint32 FunctionLen = 3;
inline void SLSrv6SidStruct::clear_functionlen() {
  functionlen_ = 0u;
}
inline uint32_t SLSrv6SidStruct::_internal_functionlen() const {
  return functionlen_;
}
inline uint32_t SLSrv6SidStruct::functionlen() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6SidStruct.FunctionLen)
  return _internal_functionlen();
}
inline void SLSrv6SidStruct::_internal_set_functionlen(uint32_t value) {
  
  functionlen_ = value;
}
inline void SLSrv6SidStruct::set_functionlen(uint32_t value) {
  _internal_set_functionlen(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrv6SidStruct.FunctionLen)
}

// uint32 ArgLen = 4;
inline void SLSrv6SidStruct::clear_arglen() {
  arglen_ = 0u;
}
inline uint32_t SLSrv6SidStruct::_internal_arglen() const {
  return arglen_;
}
inline uint32_t SLSrv6SidStruct::arglen() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6SidStruct.ArgLen)
  return _internal_arglen();
}
inline void SLSrv6SidStruct::_internal_set_arglen(uint32_t value) {
  
  arglen_ = value;
}
inline void SLSrv6SidStruct::set_arglen(uint32_t value) {
  _internal_set_arglen(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrv6SidStruct.ArgLen)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::service_layer::SLSrPolicyProtocolOrigin> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLSrPolicyProtocolOrigin>() {
  return ::service_layer::SLSrPolicyProtocolOrigin_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLSrPolicyFlagsDef> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLSrPolicyFlagsDef>() {
  return ::service_layer::SLSrPolicyFlagsDef_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLSrSegmentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLSrSegmentType>() {
  return ::service_layer::SLSrSegmentType_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLSrSegmentFlags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLSrSegmentFlags>() {
  return ::service_layer::SLSrSegmentFlags_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLSrv6BindingSidFlags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLSrv6BindingSidFlags>() {
  return ::service_layer::SLSrv6BindingSidFlags_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sl_5fsr_5fcommon_2eproto
