// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_sr_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sl_5fsr_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sl_5fsr_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "sl_common_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sl_5fsr_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sl_5fsr_5fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fsr_5fcommon_2eproto;
namespace service_layer {
class SLSrAffinities;
struct SLSrAffinitiesDefaultTypeInternal;
extern SLSrAffinitiesDefaultTypeInternal _SLSrAffinities_default_instance_;
class SLSrBsid;
struct SLSrBsidDefaultTypeInternal;
extern SLSrBsidDefaultTypeInternal _SLSrBsid_default_instance_;
class SLSrCandidatePathKey;
struct SLSrCandidatePathKeyDefaultTypeInternal;
extern SLSrCandidatePathKeyDefaultTypeInternal _SLSrCandidatePathKey_default_instance_;
class SLSrCandidatePathKey_Originator;
struct SLSrCandidatePathKey_OriginatorDefaultTypeInternal;
extern SLSrCandidatePathKey_OriginatorDefaultTypeInternal _SLSrCandidatePathKey_Originator_default_instance_;
class SLSrCpName;
struct SLSrCpNameDefaultTypeInternal;
extern SLSrCpNameDefaultTypeInternal _SLSrCpName_default_instance_;
class SLSrMetricBounds;
struct SLSrMetricBoundsDefaultTypeInternal;
extern SLSrMetricBoundsDefaultTypeInternal _SLSrMetricBounds_default_instance_;
class SLSrMetricMargin;
struct SLSrMetricMarginDefaultTypeInternal;
extern SLSrMetricMarginDefaultTypeInternal _SLSrMetricMargin_default_instance_;
class SLSrPolicyFlags;
struct SLSrPolicyFlagsDefaultTypeInternal;
extern SLSrPolicyFlagsDefaultTypeInternal _SLSrPolicyFlags_default_instance_;
class SLSrPolicyKey;
struct SLSrPolicyKeyDefaultTypeInternal;
extern SLSrPolicyKeyDefaultTypeInternal _SLSrPolicyKey_default_instance_;
class SLSrSegment;
struct SLSrSegmentDefaultTypeInternal;
extern SLSrSegmentDefaultTypeInternal _SLSrSegment_default_instance_;
class SLSrSegmentDesc;
struct SLSrSegmentDescDefaultTypeInternal;
extern SLSrSegmentDescDefaultTypeInternal _SLSrSegmentDesc_default_instance_;
class SLSrSegmentList;
struct SLSrSegmentListDefaultTypeInternal;
extern SLSrSegmentListDefaultTypeInternal _SLSrSegmentList_default_instance_;
class SLSrteSegment;
struct SLSrteSegmentDefaultTypeInternal;
extern SLSrteSegmentDefaultTypeInternal _SLSrteSegment_default_instance_;
class SLSrteSegment_TypeA;
struct SLSrteSegment_TypeADefaultTypeInternal;
extern SLSrteSegment_TypeADefaultTypeInternal _SLSrteSegment_TypeA_default_instance_;
class SLSrteSegment_TypeB;
struct SLSrteSegment_TypeBDefaultTypeInternal;
extern SLSrteSegment_TypeBDefaultTypeInternal _SLSrteSegment_TypeB_default_instance_;
class SLSrv6BindingSid;
struct SLSrv6BindingSidDefaultTypeInternal;
extern SLSrv6BindingSidDefaultTypeInternal _SLSrv6BindingSid_default_instance_;
class SLSrv6EndPointBehavior;
struct SLSrv6EndPointBehaviorDefaultTypeInternal;
extern SLSrv6EndPointBehaviorDefaultTypeInternal _SLSrv6EndPointBehavior_default_instance_;
class SLSrv6SidStruct;
struct SLSrv6SidStructDefaultTypeInternal;
extern SLSrv6SidStructDefaultTypeInternal _SLSrv6SidStruct_default_instance_;
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> ::service_layer::SLSrAffinities* Arena::CreateMaybeMessage<::service_layer::SLSrAffinities>(Arena*);
template<> ::service_layer::SLSrBsid* Arena::CreateMaybeMessage<::service_layer::SLSrBsid>(Arena*);
template<> ::service_layer::SLSrCandidatePathKey* Arena::CreateMaybeMessage<::service_layer::SLSrCandidatePathKey>(Arena*);
template<> ::service_layer::SLSrCandidatePathKey_Originator* Arena::CreateMaybeMessage<::service_layer::SLSrCandidatePathKey_Originator>(Arena*);
template<> ::service_layer::SLSrCpName* Arena::CreateMaybeMessage<::service_layer::SLSrCpName>(Arena*);
template<> ::service_layer::SLSrMetricBounds* Arena::CreateMaybeMessage<::service_layer::SLSrMetricBounds>(Arena*);
template<> ::service_layer::SLSrMetricMargin* Arena::CreateMaybeMessage<::service_layer::SLSrMetricMargin>(Arena*);
template<> ::service_layer::SLSrPolicyFlags* Arena::CreateMaybeMessage<::service_layer::SLSrPolicyFlags>(Arena*);
template<> ::service_layer::SLSrPolicyKey* Arena::CreateMaybeMessage<::service_layer::SLSrPolicyKey>(Arena*);
template<> ::service_layer::SLSrSegment* Arena::CreateMaybeMessage<::service_layer::SLSrSegment>(Arena*);
template<> ::service_layer::SLSrSegmentDesc* Arena::CreateMaybeMessage<::service_layer::SLSrSegmentDesc>(Arena*);
template<> ::service_layer::SLSrSegmentList* Arena::CreateMaybeMessage<::service_layer::SLSrSegmentList>(Arena*);
template<> ::service_layer::SLSrteSegment* Arena::CreateMaybeMessage<::service_layer::SLSrteSegment>(Arena*);
template<> ::service_layer::SLSrteSegment_TypeA* Arena::CreateMaybeMessage<::service_layer::SLSrteSegment_TypeA>(Arena*);
template<> ::service_layer::SLSrteSegment_TypeB* Arena::CreateMaybeMessage<::service_layer::SLSrteSegment_TypeB>(Arena*);
template<> ::service_layer::SLSrv6BindingSid* Arena::CreateMaybeMessage<::service_layer::SLSrv6BindingSid>(Arena*);
template<> ::service_layer::SLSrv6EndPointBehavior* Arena::CreateMaybeMessage<::service_layer::SLSrv6EndPointBehavior>(Arena*);
template<> ::service_layer::SLSrv6SidStruct* Arena::CreateMaybeMessage<::service_layer::SLSrv6SidStruct>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service_layer {

enum SLSrMetricMargin_MarginType : int {
  SLSrMetricMargin_MarginType_SL_RELATIVE = 0,
  SLSrMetricMargin_MarginType_SL_ABSOLUTE = 1,
  SLSrMetricMargin_MarginType_SLSrMetricMargin_MarginType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLSrMetricMargin_MarginType_SLSrMetricMargin_MarginType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLSrMetricMargin_MarginType_IsValid(int value);
constexpr SLSrMetricMargin_MarginType SLSrMetricMargin_MarginType_MarginType_MIN = SLSrMetricMargin_MarginType_SL_RELATIVE;
constexpr SLSrMetricMargin_MarginType SLSrMetricMargin_MarginType_MarginType_MAX = SLSrMetricMargin_MarginType_SL_ABSOLUTE;
constexpr int SLSrMetricMargin_MarginType_MarginType_ARRAYSIZE = SLSrMetricMargin_MarginType_MarginType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrMetricMargin_MarginType_descriptor();
template<typename T>
inline const std::string& SLSrMetricMargin_MarginType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLSrMetricMargin_MarginType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLSrMetricMargin_MarginType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLSrMetricMargin_MarginType_descriptor(), enum_t_value);
}
inline bool SLSrMetricMargin_MarginType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLSrMetricMargin_MarginType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLSrMetricMargin_MarginType>(
    SLSrMetricMargin_MarginType_descriptor(), name, value);
}
enum SLSrPolicyProtocolOrigin : int {
  SL_SR_POLICY_PROTOCOL_ORIGIN_RESERVED = 0,
  SL_SR_POLICY_PROTOCOL_ORIGIN_PCEP = 1,
  SL_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY = 2,
  SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG = 3,
  SL_SR_POLICY_PROTOCOL_ORIGIN_PCEP_VIA_PCE = 10,
  SL_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY_VIA_PCE = 20,
  SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_PCE = 30,
  SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_GRPC = 251,
  SLSrPolicyProtocolOrigin_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLSrPolicyProtocolOrigin_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLSrPolicyProtocolOrigin_IsValid(int value);
constexpr SLSrPolicyProtocolOrigin SLSrPolicyProtocolOrigin_MIN = SL_SR_POLICY_PROTOCOL_ORIGIN_RESERVED;
constexpr SLSrPolicyProtocolOrigin SLSrPolicyProtocolOrigin_MAX = SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_GRPC;
constexpr int SLSrPolicyProtocolOrigin_ARRAYSIZE = SLSrPolicyProtocolOrigin_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrPolicyProtocolOrigin_descriptor();
template<typename T>
inline const std::string& SLSrPolicyProtocolOrigin_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLSrPolicyProtocolOrigin>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLSrPolicyProtocolOrigin_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLSrPolicyProtocolOrigin_descriptor(), enum_t_value);
}
inline bool SLSrPolicyProtocolOrigin_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLSrPolicyProtocolOrigin* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLSrPolicyProtocolOrigin>(
    SLSrPolicyProtocolOrigin_descriptor(), name, value);
}
enum SLSrPolicyFlagsDef : int {
  SL_SR_POLICY_FLAG_RESERVED = 0,
  SL_SR_POLICY_FLAG_ENDPOINT_V6 = 128,
  SL_SR_POLICY_FLAG_ORIGINATOR_V6 = 64,
  SLSrPolicyFlagsDef_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLSrPolicyFlagsDef_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLSrPolicyFlagsDef_IsValid(int value);
constexpr SLSrPolicyFlagsDef SLSrPolicyFlagsDef_MIN = SL_SR_POLICY_FLAG_RESERVED;
constexpr SLSrPolicyFlagsDef SLSrPolicyFlagsDef_MAX = SL_SR_POLICY_FLAG_ENDPOINT_V6;
constexpr int SLSrPolicyFlagsDef_ARRAYSIZE = SLSrPolicyFlagsDef_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrPolicyFlagsDef_descriptor();
template<typename T>
inline const std::string& SLSrPolicyFlagsDef_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLSrPolicyFlagsDef>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLSrPolicyFlagsDef_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLSrPolicyFlagsDef_descriptor(), enum_t_value);
}
inline bool SLSrPolicyFlagsDef_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLSrPolicyFlagsDef* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLSrPolicyFlagsDef>(
    SLSrPolicyFlagsDef_descriptor(), name, value);
}
enum SLSrSegmentType : int {
  SL_SR_SEG_TYPE_RESERVED = 0,
  SL_SR_SEG_TYPE_MPLS_LABEL = 1,
  SL_SR_SEG_TYPE_SRV6_SID_V6 = 2,
  SL_SR_SEG_TYPE_MPLS_PFX_SID_V4 = 3,
  SL_SR_SEG_TYPE_MPLS_PFX_SID_V6 = 4,
  SL_SR_SEG_TYPE_MPLS_ADJ_SID_V4_NODE_ADDR_LOC_ID = 5,
  SL_SR_SEG_TYPE_MPLS_ADJ_SID_V4_LOC_REM_ADDR = 6,
  SL_SR_SEG_TYPE_MPLS_ADJ_SID_V6_LOC_REM_ADDR_AND_ID = 7,
  SL_SR_SEG_TYPE_MPLS_ADJ_SID_V6_LOC_REM_ADDR = 8,
  SL_SR_SEG_TYPE_SRV6_END_SID_V6_NODE_ADDR = 9,
  SL_SR_SEG_TYPE_SRV6_END_SID_V6_LOC_REM_ADDR_AND_ID = 10,
  SL_SR_SEG_TYPE_SRV6_END_SID_V6_LOC_REM_ADDR = 11,
  SLSrSegmentType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLSrSegmentType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLSrSegmentType_IsValid(int value);
constexpr SLSrSegmentType SLSrSegmentType_MIN = SL_SR_SEG_TYPE_RESERVED;
constexpr SLSrSegmentType SLSrSegmentType_MAX = SL_SR_SEG_TYPE_SRV6_END_SID_V6_LOC_REM_ADDR;
constexpr int SLSrSegmentType_ARRAYSIZE = SLSrSegmentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrSegmentType_descriptor();
template<typename T>
inline const std::string& SLSrSegmentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLSrSegmentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLSrSegmentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLSrSegmentType_descriptor(), enum_t_value);
}
inline bool SLSrSegmentType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLSrSegmentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLSrSegmentType>(
    SLSrSegmentType_descriptor(), name, value);
}
enum SLSrSegmentFlags : int {
  SL_SR_SEGMENT_FLAG_RESERVED = 0,
  SL_SR_SEGMENT_FLAG_SID_PRESENT = 32768,
  SL_SR_SEGMENT_FLAG_SID_EXPLICIT_PROVISIONED = 16384,
  SL_SR_SEGMENT_FLAG_SID_VERIFIED = 8192,
  SL_SR_SEGMENT_FLAG_SID_RESOLVED = 4096,
  SL_SR_SEGMENT_FLAG_SID_ALGO_VALID = 2048,
  SLSrSegmentFlags_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLSrSegmentFlags_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLSrSegmentFlags_IsValid(int value);
constexpr SLSrSegmentFlags SLSrSegmentFlags_MIN = SL_SR_SEGMENT_FLAG_RESERVED;
constexpr SLSrSegmentFlags SLSrSegmentFlags_MAX = SL_SR_SEGMENT_FLAG_SID_PRESENT;
constexpr int SLSrSegmentFlags_ARRAYSIZE = SLSrSegmentFlags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrSegmentFlags_descriptor();
template<typename T>
inline const std::string& SLSrSegmentFlags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLSrSegmentFlags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLSrSegmentFlags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLSrSegmentFlags_descriptor(), enum_t_value);
}
inline bool SLSrSegmentFlags_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLSrSegmentFlags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLSrSegmentFlags>(
    SLSrSegmentFlags_descriptor(), name, value);
}
enum SLSrv6BindingSidFlags : int {
  SL_SRV6_BSID_FLAG_RESERVED = 0,
  SL_SRV6_BSID_FLAG_ALLOCATED = 32768,
  SL_SRV6_BSID_FLAG_UNAVAIL = 16384,
  SL_SRV6_BSID_FLAG_DYNAMIC = 8192,
  SLSrv6BindingSidFlags_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLSrv6BindingSidFlags_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLSrv6BindingSidFlags_IsValid(int value);
constexpr SLSrv6BindingSidFlags SLSrv6BindingSidFlags_MIN = SL_SRV6_BSID_FLAG_RESERVED;
constexpr SLSrv6BindingSidFlags SLSrv6BindingSidFlags_MAX = SL_SRV6_BSID_FLAG_ALLOCATED;
constexpr int SLSrv6BindingSidFlags_ARRAYSIZE = SLSrv6BindingSidFlags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrv6BindingSidFlags_descriptor();
template<typename T>
inline const std::string& SLSrv6BindingSidFlags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLSrv6BindingSidFlags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLSrv6BindingSidFlags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLSrv6BindingSidFlags_descriptor(), enum_t_value);
}
inline bool SLSrv6BindingSidFlags_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLSrv6BindingSidFlags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLSrv6BindingSidFlags>(
    SLSrv6BindingSidFlags_descriptor(), name, value);
}
enum SLSrDataplane : int {
  SL_SR_DATAPLANE_UNSPECIFIED = 0,
  SL_SR_DATAPLANE_MPLS = 1,
  SL_SR_DATAPLANE_SRV6 = 2,
  SLSrDataplane_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLSrDataplane_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLSrDataplane_IsValid(int value);
constexpr SLSrDataplane SLSrDataplane_MIN = SL_SR_DATAPLANE_UNSPECIFIED;
constexpr SLSrDataplane SLSrDataplane_MAX = SL_SR_DATAPLANE_SRV6;
constexpr int SLSrDataplane_ARRAYSIZE = SLSrDataplane_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrDataplane_descriptor();
template<typename T>
inline const std::string& SLSrDataplane_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLSrDataplane>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLSrDataplane_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLSrDataplane_descriptor(), enum_t_value);
}
inline bool SLSrDataplane_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLSrDataplane* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLSrDataplane>(
    SLSrDataplane_descriptor(), name, value);
}
enum SLSrMetricType : int {
  SL_METRIC_TYPE_UNSPECIFIED = 0,
  SL_METRIC_TYPE_IGP = 0,
  SL_METRIC_TYPE_DELAY = 1,
  SL_METRIC_TYPE_TE = 2,
  SL_METRIC_TYPE_HOP = 3,
  SL_METRIC_TYPE_SID_LIST_LENGTH = 4,
  SL_METRIC_TYPE_BANDWIDTH = 5,
  SLSrMetricType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLSrMetricType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLSrMetricType_IsValid(int value);
constexpr SLSrMetricType SLSrMetricType_MIN = SL_METRIC_TYPE_UNSPECIFIED;
constexpr SLSrMetricType SLSrMetricType_MAX = SL_METRIC_TYPE_BANDWIDTH;
constexpr int SLSrMetricType_ARRAYSIZE = SLSrMetricType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrMetricType_descriptor();
template<typename T>
inline const std::string& SLSrMetricType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLSrMetricType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLSrMetricType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLSrMetricType_descriptor(), enum_t_value);
}
inline bool SLSrMetricType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLSrMetricType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLSrMetricType>(
    SLSrMetricType_descriptor(), name, value);
}
enum SLSrDiversityLevel : int {
  SL_DIVERSITY_LEVEL_NONE = 0,
  SL_DIVERSITY_LEVEL_LINK = 1,
  SL_DIVERSITY_LEVEL_NODE = 2,
  SL_DIVERSITY_LEVEL_SRLG = 3,
  SL_DIVERSITY_LEVEL_SRLG_NODE = 4,
  SLSrDiversityLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLSrDiversityLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLSrDiversityLevel_IsValid(int value);
constexpr SLSrDiversityLevel SLSrDiversityLevel_MIN = SL_DIVERSITY_LEVEL_NONE;
constexpr SLSrDiversityLevel SLSrDiversityLevel_MAX = SL_DIVERSITY_LEVEL_SRLG_NODE;
constexpr int SLSrDiversityLevel_ARRAYSIZE = SLSrDiversityLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrDiversityLevel_descriptor();
template<typename T>
inline const std::string& SLSrDiversityLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLSrDiversityLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLSrDiversityLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLSrDiversityLevel_descriptor(), enum_t_value);
}
inline bool SLSrDiversityLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLSrDiversityLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLSrDiversityLevel>(
    SLSrDiversityLevel_descriptor(), name, value);
}
// ===================================================================

class SLSrPolicyFlags final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrPolicyFlags) */ {
 public:
  inline SLSrPolicyFlags() : SLSrPolicyFlags(nullptr) {}
  ~SLSrPolicyFlags() override;
  explicit constexpr SLSrPolicyFlags(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrPolicyFlags(const SLSrPolicyFlags& from);
  SLSrPolicyFlags(SLSrPolicyFlags&& from) noexcept
    : SLSrPolicyFlags() {
    *this = ::std::move(from);
  }

  inline SLSrPolicyFlags& operator=(const SLSrPolicyFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrPolicyFlags& operator=(SLSrPolicyFlags&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrPolicyFlags& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrPolicyFlags* internal_default_instance() {
    return reinterpret_cast<const SLSrPolicyFlags*>(
               &_SLSrPolicyFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SLSrPolicyFlags& a, SLSrPolicyFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrPolicyFlags* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrPolicyFlags* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrPolicyFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrPolicyFlags>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrPolicyFlags& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrPolicyFlags& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrPolicyFlags* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrPolicyFlags";
  }
  protected:
  explicit SLSrPolicyFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
  };
  // uint32 Flags = 1;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrPolicyFlags)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrBsid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrBsid) */ {
 public:
  inline SLSrBsid() : SLSrBsid(nullptr) {}
  ~SLSrBsid() override;
  explicit constexpr SLSrBsid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrBsid(const SLSrBsid& from);
  SLSrBsid(SLSrBsid&& from) noexcept
    : SLSrBsid() {
    *this = ::std::move(from);
  }

  inline SLSrBsid& operator=(const SLSrBsid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrBsid& operator=(SLSrBsid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrBsid& default_instance() {
    return *internal_default_instance();
  }
  enum BindingSidCase {
    kMplsBsid = 1,
    kSrv6Bsid = 2,
    BINDINGSID_NOT_SET = 0,
  };

  static inline const SLSrBsid* internal_default_instance() {
    return reinterpret_cast<const SLSrBsid*>(
               &_SLSrBsid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SLSrBsid& a, SLSrBsid& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrBsid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrBsid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrBsid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrBsid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrBsid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrBsid& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrBsid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrBsid";
  }
  protected:
  explicit SLSrBsid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMplsBsidFieldNumber = 1,
    kSrv6BsidFieldNumber = 2,
  };
  // uint32 MplsBsid = 1;
  bool has_mplsbsid() const;
  private:
  bool _internal_has_mplsbsid() const;
  public:
  void clear_mplsbsid();
  uint32_t mplsbsid() const;
  void set_mplsbsid(uint32_t value);
  private:
  uint32_t _internal_mplsbsid() const;
  void _internal_set_mplsbsid(uint32_t value);
  public:

  // bytes Srv6Bsid = 2;
  bool has_srv6bsid() const;
  private:
  bool _internal_has_srv6bsid() const;
  public:
  void clear_srv6bsid();
  const std::string& srv6bsid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srv6bsid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srv6bsid();
  PROTOBUF_NODISCARD std::string* release_srv6bsid();
  void set_allocated_srv6bsid(std::string* srv6bsid);
  private:
  const std::string& _internal_srv6bsid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srv6bsid(const std::string& value);
  std::string* _internal_mutable_srv6bsid();
  public:

  void clear_BindingSid();
  BindingSidCase BindingSid_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLSrBsid)
 private:
  class _Internal;
  void set_has_mplsbsid();
  void set_has_srv6bsid();

  inline bool has_BindingSid() const;
  inline void clear_has_BindingSid();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union BindingSidUnion {
    constexpr BindingSidUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    uint32_t mplsbsid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srv6bsid_;
  } BindingSid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrCpName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrCpName) */ {
 public:
  inline SLSrCpName() : SLSrCpName(nullptr) {}
  ~SLSrCpName() override;
  explicit constexpr SLSrCpName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrCpName(const SLSrCpName& from);
  SLSrCpName(SLSrCpName&& from) noexcept
    : SLSrCpName() {
    *this = ::std::move(from);
  }

  inline SLSrCpName& operator=(const SLSrCpName& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrCpName& operator=(SLSrCpName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrCpName& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrCpName* internal_default_instance() {
    return reinterpret_cast<const SLSrCpName*>(
               &_SLSrCpName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SLSrCpName& a, SLSrCpName& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrCpName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrCpName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrCpName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrCpName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrCpName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrCpName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrCpName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrCpName";
  }
  protected:
  explicit SLSrCpName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrCpName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrSegmentDesc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrSegmentDesc) */ {
 public:
  inline SLSrSegmentDesc() : SLSrSegmentDesc(nullptr) {}
  ~SLSrSegmentDesc() override;
  explicit constexpr SLSrSegmentDesc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrSegmentDesc(const SLSrSegmentDesc& from);
  SLSrSegmentDesc(SLSrSegmentDesc&& from) noexcept
    : SLSrSegmentDesc() {
    *this = ::std::move(from);
  }

  inline SLSrSegmentDesc& operator=(const SLSrSegmentDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrSegmentDesc& operator=(SLSrSegmentDesc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrSegmentDesc& default_instance() {
    return *internal_default_instance();
  }
  enum LocalNodeCase {
    kIpv4LocalAddr = 2,
    kIpv6LocalAddr = 3,
    LOCALNODE_NOT_SET = 0,
  };

  enum RemoteNodeCase {
    kIpv4RemoteAddr = 4,
    kIpv6RemoteAddr = 5,
    REMOTENODE_NOT_SET = 0,
  };

  static inline const SLSrSegmentDesc* internal_default_instance() {
    return reinterpret_cast<const SLSrSegmentDesc*>(
               &_SLSrSegmentDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SLSrSegmentDesc& a, SLSrSegmentDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrSegmentDesc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrSegmentDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrSegmentDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrSegmentDesc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrSegmentDesc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrSegmentDesc& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrSegmentDesc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrSegmentDesc";
  }
  protected:
  explicit SLSrSegmentDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlgorithmFieldNumber = 1,
    kLocalNodeIntfIdFieldNumber = 6,
    kRemoteNodeIntfIdFieldNumber = 7,
    kIpv4LocalAddrFieldNumber = 2,
    kIpv6LocalAddrFieldNumber = 3,
    kIpv4RemoteAddrFieldNumber = 4,
    kIpv6RemoteAddrFieldNumber = 5,
  };
  // uint32 Algorithm = 1;
  void clear_algorithm();
  uint32_t algorithm() const;
  void set_algorithm(uint32_t value);
  private:
  uint32_t _internal_algorithm() const;
  void _internal_set_algorithm(uint32_t value);
  public:

  // uint32 LocalNodeIntfId = 6;
  void clear_localnodeintfid();
  uint32_t localnodeintfid() const;
  void set_localnodeintfid(uint32_t value);
  private:
  uint32_t _internal_localnodeintfid() const;
  void _internal_set_localnodeintfid(uint32_t value);
  public:

  // uint32 RemoteNodeIntfId = 7;
  void clear_remotenodeintfid();
  uint32_t remotenodeintfid() const;
  void set_remotenodeintfid(uint32_t value);
  private:
  uint32_t _internal_remotenodeintfid() const;
  void _internal_set_remotenodeintfid(uint32_t value);
  public:

  // bytes Ipv4LocalAddr = 2;
  bool has_ipv4localaddr() const;
  private:
  bool _internal_has_ipv4localaddr() const;
  public:
  void clear_ipv4localaddr();
  const std::string& ipv4localaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv4localaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv4localaddr();
  PROTOBUF_NODISCARD std::string* release_ipv4localaddr();
  void set_allocated_ipv4localaddr(std::string* ipv4localaddr);
  private:
  const std::string& _internal_ipv4localaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv4localaddr(const std::string& value);
  std::string* _internal_mutable_ipv4localaddr();
  public:

  // bytes Ipv6LocalAddr = 3;
  bool has_ipv6localaddr() const;
  private:
  bool _internal_has_ipv6localaddr() const;
  public:
  void clear_ipv6localaddr();
  const std::string& ipv6localaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv6localaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv6localaddr();
  PROTOBUF_NODISCARD std::string* release_ipv6localaddr();
  void set_allocated_ipv6localaddr(std::string* ipv6localaddr);
  private:
  const std::string& _internal_ipv6localaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv6localaddr(const std::string& value);
  std::string* _internal_mutable_ipv6localaddr();
  public:

  // bytes Ipv4RemoteAddr = 4;
  bool has_ipv4remoteaddr() const;
  private:
  bool _internal_has_ipv4remoteaddr() const;
  public:
  void clear_ipv4remoteaddr();
  const std::string& ipv4remoteaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv4remoteaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv4remoteaddr();
  PROTOBUF_NODISCARD std::string* release_ipv4remoteaddr();
  void set_allocated_ipv4remoteaddr(std::string* ipv4remoteaddr);
  private:
  const std::string& _internal_ipv4remoteaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv4remoteaddr(const std::string& value);
  std::string* _internal_mutable_ipv4remoteaddr();
  public:

  // bytes Ipv6RemoteAddr = 5;
  bool has_ipv6remoteaddr() const;
  private:
  bool _internal_has_ipv6remoteaddr() const;
  public:
  void clear_ipv6remoteaddr();
  const std::string& ipv6remoteaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv6remoteaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv6remoteaddr();
  PROTOBUF_NODISCARD std::string* release_ipv6remoteaddr();
  void set_allocated_ipv6remoteaddr(std::string* ipv6remoteaddr);
  private:
  const std::string& _internal_ipv6remoteaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv6remoteaddr(const std::string& value);
  std::string* _internal_mutable_ipv6remoteaddr();
  public:

  void clear_LocalNode();
  LocalNodeCase LocalNode_case() const;
  void clear_RemoteNode();
  RemoteNodeCase RemoteNode_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLSrSegmentDesc)
 private:
  class _Internal;
  void set_has_ipv4localaddr();
  void set_has_ipv6localaddr();
  void set_has_ipv4remoteaddr();
  void set_has_ipv6remoteaddr();

  inline bool has_LocalNode() const;
  inline void clear_has_LocalNode();

  inline bool has_RemoteNode() const;
  inline void clear_has_RemoteNode();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t algorithm_;
  uint32_t localnodeintfid_;
  uint32_t remotenodeintfid_;
  union LocalNodeUnion {
    constexpr LocalNodeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4localaddr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6localaddr_;
  } LocalNode_;
  union RemoteNodeUnion {
    constexpr RemoteNodeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4remoteaddr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6remoteaddr_;
  } RemoteNode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[2];

  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrSegment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrSegment) */ {
 public:
  inline SLSrSegment() : SLSrSegment(nullptr) {}
  ~SLSrSegment() override;
  explicit constexpr SLSrSegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrSegment(const SLSrSegment& from);
  SLSrSegment(SLSrSegment&& from) noexcept
    : SLSrSegment() {
    *this = ::std::move(from);
  }

  inline SLSrSegment& operator=(const SLSrSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrSegment& operator=(SLSrSegment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrSegment& default_instance() {
    return *internal_default_instance();
  }
  enum SidCase {
    kMplsLabel = 3,
    kSrv6Sid = 4,
    SID_NOT_SET = 0,
  };

  static inline const SLSrSegment* internal_default_instance() {
    return reinterpret_cast<const SLSrSegment*>(
               &_SLSrSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SLSrSegment& a, SLSrSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrSegment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrSegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrSegment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrSegment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrSegment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrSegment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrSegment";
  }
  protected:
  explicit SLSrSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentDescFieldNumber = 5,
    kEndPointBehaviorFieldNumber = 6,
    kSidStructFieldNumber = 7,
    kTypeFieldNumber = 1,
    kFlagsFieldNumber = 2,
    kMplsLabelFieldNumber = 3,
    kSrv6SidFieldNumber = 4,
  };
  // .service_layer.SLSrSegmentDesc SegmentDesc = 5;
  bool has_segmentdesc() const;
  private:
  bool _internal_has_segmentdesc() const;
  public:
  void clear_segmentdesc();
  const ::service_layer::SLSrSegmentDesc& segmentdesc() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrSegmentDesc* release_segmentdesc();
  ::service_layer::SLSrSegmentDesc* mutable_segmentdesc();
  void set_allocated_segmentdesc(::service_layer::SLSrSegmentDesc* segmentdesc);
  private:
  const ::service_layer::SLSrSegmentDesc& _internal_segmentdesc() const;
  ::service_layer::SLSrSegmentDesc* _internal_mutable_segmentdesc();
  public:
  void unsafe_arena_set_allocated_segmentdesc(
      ::service_layer::SLSrSegmentDesc* segmentdesc);
  ::service_layer::SLSrSegmentDesc* unsafe_arena_release_segmentdesc();

  // .service_layer.SLSrv6EndPointBehavior EndPointBehavior = 6;
  bool has_endpointbehavior() const;
  private:
  bool _internal_has_endpointbehavior() const;
  public:
  void clear_endpointbehavior();
  const ::service_layer::SLSrv6EndPointBehavior& endpointbehavior() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrv6EndPointBehavior* release_endpointbehavior();
  ::service_layer::SLSrv6EndPointBehavior* mutable_endpointbehavior();
  void set_allocated_endpointbehavior(::service_layer::SLSrv6EndPointBehavior* endpointbehavior);
  private:
  const ::service_layer::SLSrv6EndPointBehavior& _internal_endpointbehavior() const;
  ::service_layer::SLSrv6EndPointBehavior* _internal_mutable_endpointbehavior();
  public:
  void unsafe_arena_set_allocated_endpointbehavior(
      ::service_layer::SLSrv6EndPointBehavior* endpointbehavior);
  ::service_layer::SLSrv6EndPointBehavior* unsafe_arena_release_endpointbehavior();

  // .service_layer.SLSrv6SidStruct SidStruct = 7;
  bool has_sidstruct() const;
  private:
  bool _internal_has_sidstruct() const;
  public:
  void clear_sidstruct();
  const ::service_layer::SLSrv6SidStruct& sidstruct() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrv6SidStruct* release_sidstruct();
  ::service_layer::SLSrv6SidStruct* mutable_sidstruct();
  void set_allocated_sidstruct(::service_layer::SLSrv6SidStruct* sidstruct);
  private:
  const ::service_layer::SLSrv6SidStruct& _internal_sidstruct() const;
  ::service_layer::SLSrv6SidStruct* _internal_mutable_sidstruct();
  public:
  void unsafe_arena_set_allocated_sidstruct(
      ::service_layer::SLSrv6SidStruct* sidstruct);
  ::service_layer::SLSrv6SidStruct* unsafe_arena_release_sidstruct();

  // .service_layer.SLSrSegmentType Type = 1;
  void clear_type();
  ::service_layer::SLSrSegmentType type() const;
  void set_type(::service_layer::SLSrSegmentType value);
  private:
  ::service_layer::SLSrSegmentType _internal_type() const;
  void _internal_set_type(::service_layer::SLSrSegmentType value);
  public:

  // uint32 Flags = 2;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // uint32 MplsLabel = 3;
  bool has_mplslabel() const;
  private:
  bool _internal_has_mplslabel() const;
  public:
  void clear_mplslabel();
  uint32_t mplslabel() const;
  void set_mplslabel(uint32_t value);
  private:
  uint32_t _internal_mplslabel() const;
  void _internal_set_mplslabel(uint32_t value);
  public:

  // bytes Srv6Sid = 4;
  bool has_srv6sid() const;
  private:
  bool _internal_has_srv6sid() const;
  public:
  void clear_srv6sid();
  const std::string& srv6sid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srv6sid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srv6sid();
  PROTOBUF_NODISCARD std::string* release_srv6sid();
  void set_allocated_srv6sid(std::string* srv6sid);
  private:
  const std::string& _internal_srv6sid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srv6sid(const std::string& value);
  std::string* _internal_mutable_srv6sid();
  public:

  void clear_Sid();
  SidCase Sid_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLSrSegment)
 private:
  class _Internal;
  void set_has_mplslabel();
  void set_has_srv6sid();

  inline bool has_Sid() const;
  inline void clear_has_Sid();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLSrSegmentDesc* segmentdesc_;
  ::service_layer::SLSrv6EndPointBehavior* endpointbehavior_;
  ::service_layer::SLSrv6SidStruct* sidstruct_;
  int type_;
  uint32_t flags_;
  union SidUnion {
    constexpr SidUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    uint32_t mplslabel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srv6sid_;
  } Sid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrv6BindingSid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrv6BindingSid) */ {
 public:
  inline SLSrv6BindingSid() : SLSrv6BindingSid(nullptr) {}
  ~SLSrv6BindingSid() override;
  explicit constexpr SLSrv6BindingSid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrv6BindingSid(const SLSrv6BindingSid& from);
  SLSrv6BindingSid(SLSrv6BindingSid&& from) noexcept
    : SLSrv6BindingSid() {
    *this = ::std::move(from);
  }

  inline SLSrv6BindingSid& operator=(const SLSrv6BindingSid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrv6BindingSid& operator=(SLSrv6BindingSid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrv6BindingSid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrv6BindingSid* internal_default_instance() {
    return reinterpret_cast<const SLSrv6BindingSid*>(
               &_SLSrv6BindingSid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SLSrv6BindingSid& a, SLSrv6BindingSid& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrv6BindingSid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrv6BindingSid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrv6BindingSid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrv6BindingSid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrv6BindingSid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrv6BindingSid& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrv6BindingSid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrv6BindingSid";
  }
  protected:
  explicit SLSrv6BindingSid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBsidFieldNumber = 2,
    kSpecifiedBsidFieldNumber = 3,
    kEndPointBehaviorFieldNumber = 4,
    kSidStructFieldNumber = 5,
    kFlagsFieldNumber = 1,
  };
  // bytes Bsid = 2;
  void clear_bsid();
  const std::string& bsid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bsid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bsid();
  PROTOBUF_NODISCARD std::string* release_bsid();
  void set_allocated_bsid(std::string* bsid);
  private:
  const std::string& _internal_bsid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bsid(const std::string& value);
  std::string* _internal_mutable_bsid();
  public:

  // bytes SpecifiedBsid = 3;
  void clear_specifiedbsid();
  const std::string& specifiedbsid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_specifiedbsid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_specifiedbsid();
  PROTOBUF_NODISCARD std::string* release_specifiedbsid();
  void set_allocated_specifiedbsid(std::string* specifiedbsid);
  private:
  const std::string& _internal_specifiedbsid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_specifiedbsid(const std::string& value);
  std::string* _internal_mutable_specifiedbsid();
  public:

  // .service_layer.SLSrv6EndPointBehavior EndPointBehavior = 4;
  bool has_endpointbehavior() const;
  private:
  bool _internal_has_endpointbehavior() const;
  public:
  void clear_endpointbehavior();
  const ::service_layer::SLSrv6EndPointBehavior& endpointbehavior() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrv6EndPointBehavior* release_endpointbehavior();
  ::service_layer::SLSrv6EndPointBehavior* mutable_endpointbehavior();
  void set_allocated_endpointbehavior(::service_layer::SLSrv6EndPointBehavior* endpointbehavior);
  private:
  const ::service_layer::SLSrv6EndPointBehavior& _internal_endpointbehavior() const;
  ::service_layer::SLSrv6EndPointBehavior* _internal_mutable_endpointbehavior();
  public:
  void unsafe_arena_set_allocated_endpointbehavior(
      ::service_layer::SLSrv6EndPointBehavior* endpointbehavior);
  ::service_layer::SLSrv6EndPointBehavior* unsafe_arena_release_endpointbehavior();

  // .service_layer.SLSrv6SidStruct SidStruct = 5;
  bool has_sidstruct() const;
  private:
  bool _internal_has_sidstruct() const;
  public:
  void clear_sidstruct();
  const ::service_layer::SLSrv6SidStruct& sidstruct() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrv6SidStruct* release_sidstruct();
  ::service_layer::SLSrv6SidStruct* mutable_sidstruct();
  void set_allocated_sidstruct(::service_layer::SLSrv6SidStruct* sidstruct);
  private:
  const ::service_layer::SLSrv6SidStruct& _internal_sidstruct() const;
  ::service_layer::SLSrv6SidStruct* _internal_mutable_sidstruct();
  public:
  void unsafe_arena_set_allocated_sidstruct(
      ::service_layer::SLSrv6SidStruct* sidstruct);
  ::service_layer::SLSrv6SidStruct* unsafe_arena_release_sidstruct();

  // uint32 Flags = 1;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrv6BindingSid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bsid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr specifiedbsid_;
  ::service_layer::SLSrv6EndPointBehavior* endpointbehavior_;
  ::service_layer::SLSrv6SidStruct* sidstruct_;
  uint32_t flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrv6EndPointBehavior final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrv6EndPointBehavior) */ {
 public:
  inline SLSrv6EndPointBehavior() : SLSrv6EndPointBehavior(nullptr) {}
  ~SLSrv6EndPointBehavior() override;
  explicit constexpr SLSrv6EndPointBehavior(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrv6EndPointBehavior(const SLSrv6EndPointBehavior& from);
  SLSrv6EndPointBehavior(SLSrv6EndPointBehavior&& from) noexcept
    : SLSrv6EndPointBehavior() {
    *this = ::std::move(from);
  }

  inline SLSrv6EndPointBehavior& operator=(const SLSrv6EndPointBehavior& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrv6EndPointBehavior& operator=(SLSrv6EndPointBehavior&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrv6EndPointBehavior& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrv6EndPointBehavior* internal_default_instance() {
    return reinterpret_cast<const SLSrv6EndPointBehavior*>(
               &_SLSrv6EndPointBehavior_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SLSrv6EndPointBehavior& a, SLSrv6EndPointBehavior& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrv6EndPointBehavior* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrv6EndPointBehavior* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrv6EndPointBehavior* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrv6EndPointBehavior>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrv6EndPointBehavior& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrv6EndPointBehavior& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrv6EndPointBehavior* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrv6EndPointBehavior";
  }
  protected:
  explicit SLSrv6EndPointBehavior(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndPointBehaviorFieldNumber = 1,
    kFlagsFieldNumber = 2,
    kAlgorithmFieldNumber = 3,
  };
  // uint32 EndPointBehavior = 1;
  void clear_endpointbehavior();
  uint32_t endpointbehavior() const;
  void set_endpointbehavior(uint32_t value);
  private:
  uint32_t _internal_endpointbehavior() const;
  void _internal_set_endpointbehavior(uint32_t value);
  public:

  // uint32 Flags = 2;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // uint32 Algorithm = 3;
  void clear_algorithm();
  uint32_t algorithm() const;
  void set_algorithm(uint32_t value);
  private:
  uint32_t _internal_algorithm() const;
  void _internal_set_algorithm(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrv6EndPointBehavior)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t endpointbehavior_;
  uint32_t flags_;
  uint32_t algorithm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrv6SidStruct final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrv6SidStruct) */ {
 public:
  inline SLSrv6SidStruct() : SLSrv6SidStruct(nullptr) {}
  ~SLSrv6SidStruct() override;
  explicit constexpr SLSrv6SidStruct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrv6SidStruct(const SLSrv6SidStruct& from);
  SLSrv6SidStruct(SLSrv6SidStruct&& from) noexcept
    : SLSrv6SidStruct() {
    *this = ::std::move(from);
  }

  inline SLSrv6SidStruct& operator=(const SLSrv6SidStruct& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrv6SidStruct& operator=(SLSrv6SidStruct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrv6SidStruct& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrv6SidStruct* internal_default_instance() {
    return reinterpret_cast<const SLSrv6SidStruct*>(
               &_SLSrv6SidStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SLSrv6SidStruct& a, SLSrv6SidStruct& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrv6SidStruct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrv6SidStruct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrv6SidStruct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrv6SidStruct>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrv6SidStruct& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrv6SidStruct& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrv6SidStruct* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrv6SidStruct";
  }
  protected:
  explicit SLSrv6SidStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocatorBlockLenFieldNumber = 1,
    kLocatorNodeLenFieldNumber = 2,
    kFunctionLenFieldNumber = 3,
    kArgLenFieldNumber = 4,
  };
  // uint32 LocatorBlockLen = 1;
  void clear_locatorblocklen();
  uint32_t locatorblocklen() const;
  void set_locatorblocklen(uint32_t value);
  private:
  uint32_t _internal_locatorblocklen() const;
  void _internal_set_locatorblocklen(uint32_t value);
  public:

  // uint32 LocatorNodeLen = 2;
  void clear_locatornodelen();
  uint32_t locatornodelen() const;
  void set_locatornodelen(uint32_t value);
  private:
  uint32_t _internal_locatornodelen() const;
  void _internal_set_locatornodelen(uint32_t value);
  public:

  // uint32 FunctionLen = 3;
  void clear_functionlen();
  uint32_t functionlen() const;
  void set_functionlen(uint32_t value);
  private:
  uint32_t _internal_functionlen() const;
  void _internal_set_functionlen(uint32_t value);
  public:

  // uint32 ArgLen = 4;
  void clear_arglen();
  uint32_t arglen() const;
  void set_arglen(uint32_t value);
  private:
  uint32_t _internal_arglen() const;
  void _internal_set_arglen(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrv6SidStruct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t locatorblocklen_;
  uint32_t locatornodelen_;
  uint32_t functionlen_;
  uint32_t arglen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrMetricBounds final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrMetricBounds) */ {
 public:
  inline SLSrMetricBounds() : SLSrMetricBounds(nullptr) {}
  ~SLSrMetricBounds() override;
  explicit constexpr SLSrMetricBounds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrMetricBounds(const SLSrMetricBounds& from);
  SLSrMetricBounds(SLSrMetricBounds&& from) noexcept
    : SLSrMetricBounds() {
    *this = ::std::move(from);
  }

  inline SLSrMetricBounds& operator=(const SLSrMetricBounds& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrMetricBounds& operator=(SLSrMetricBounds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrMetricBounds& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrMetricBounds* internal_default_instance() {
    return reinterpret_cast<const SLSrMetricBounds*>(
               &_SLSrMetricBounds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SLSrMetricBounds& a, SLSrMetricBounds& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrMetricBounds* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrMetricBounds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrMetricBounds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrMetricBounds>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrMetricBounds& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrMetricBounds& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrMetricBounds* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrMetricBounds";
  }
  protected:
  explicit SLSrMetricBounds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIgpFieldNumber = 1,
    kTeFieldNumber = 2,
    kLatencyFieldNumber = 3,
  };
  // uint32 igp = 1;
  void clear_igp();
  uint32_t igp() const;
  void set_igp(uint32_t value);
  private:
  uint32_t _internal_igp() const;
  void _internal_set_igp(uint32_t value);
  public:

  // uint32 te = 2;
  void clear_te();
  uint32_t te() const;
  void set_te(uint32_t value);
  private:
  uint32_t _internal_te() const;
  void _internal_set_te(uint32_t value);
  public:

  // uint32 latency = 3;
  void clear_latency();
  uint32_t latency() const;
  void set_latency(uint32_t value);
  private:
  uint32_t _internal_latency() const;
  void _internal_set_latency(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrMetricBounds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t igp_;
  uint32_t te_;
  uint32_t latency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrMetricMargin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrMetricMargin) */ {
 public:
  inline SLSrMetricMargin() : SLSrMetricMargin(nullptr) {}
  ~SLSrMetricMargin() override;
  explicit constexpr SLSrMetricMargin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrMetricMargin(const SLSrMetricMargin& from);
  SLSrMetricMargin(SLSrMetricMargin&& from) noexcept
    : SLSrMetricMargin() {
    *this = ::std::move(from);
  }

  inline SLSrMetricMargin& operator=(const SLSrMetricMargin& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrMetricMargin& operator=(SLSrMetricMargin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrMetricMargin& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrMetricMargin* internal_default_instance() {
    return reinterpret_cast<const SLSrMetricMargin*>(
               &_SLSrMetricMargin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SLSrMetricMargin& a, SLSrMetricMargin& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrMetricMargin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrMetricMargin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrMetricMargin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrMetricMargin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrMetricMargin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrMetricMargin& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrMetricMargin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrMetricMargin";
  }
  protected:
  explicit SLSrMetricMargin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SLSrMetricMargin_MarginType MarginType;
  static constexpr MarginType SL_RELATIVE =
    SLSrMetricMargin_MarginType_SL_RELATIVE;
  static constexpr MarginType SL_ABSOLUTE =
    SLSrMetricMargin_MarginType_SL_ABSOLUTE;
  static inline bool MarginType_IsValid(int value) {
    return SLSrMetricMargin_MarginType_IsValid(value);
  }
  static constexpr MarginType MarginType_MIN =
    SLSrMetricMargin_MarginType_MarginType_MIN;
  static constexpr MarginType MarginType_MAX =
    SLSrMetricMargin_MarginType_MarginType_MAX;
  static constexpr int MarginType_ARRAYSIZE =
    SLSrMetricMargin_MarginType_MarginType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MarginType_descriptor() {
    return SLSrMetricMargin_MarginType_descriptor();
  }
  template<typename T>
  static inline const std::string& MarginType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MarginType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MarginType_Name.");
    return SLSrMetricMargin_MarginType_Name(enum_t_value);
  }
  static inline bool MarginType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MarginType* value) {
    return SLSrMetricMargin_MarginType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .service_layer.SLSrMetricMargin.MarginType type = 1;
  void clear_type();
  ::service_layer::SLSrMetricMargin_MarginType type() const;
  void set_type(::service_layer::SLSrMetricMargin_MarginType value);
  private:
  ::service_layer::SLSrMetricMargin_MarginType _internal_type() const;
  void _internal_set_type(::service_layer::SLSrMetricMargin_MarginType value);
  public:

  // uint32 value = 2;
  void clear_value();
  uint32_t value() const;
  void set_value(uint32_t value);
  private:
  uint32_t _internal_value() const;
  void _internal_set_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrMetricMargin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  uint32_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrAffinities final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrAffinities) */ {
 public:
  inline SLSrAffinities() : SLSrAffinities(nullptr) {}
  ~SLSrAffinities() override;
  explicit constexpr SLSrAffinities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrAffinities(const SLSrAffinities& from);
  SLSrAffinities(SLSrAffinities&& from) noexcept
    : SLSrAffinities() {
    *this = ::std::move(from);
  }

  inline SLSrAffinities& operator=(const SLSrAffinities& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrAffinities& operator=(SLSrAffinities&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrAffinities& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrAffinities* internal_default_instance() {
    return reinterpret_cast<const SLSrAffinities*>(
               &_SLSrAffinities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SLSrAffinities& a, SLSrAffinities& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrAffinities* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrAffinities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrAffinities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrAffinities>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrAffinities& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrAffinities& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrAffinities* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrAffinities";
  }
  protected:
  explicit SLSrAffinities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncludeAnyFieldNumber = 1,
    kIncludeAllFieldNumber = 2,
    kExcludeAnyFieldNumber = 3,
  };
  // repeated uint32 includeAny = 1;
  int includeany_size() const;
  private:
  int _internal_includeany_size() const;
  public:
  void clear_includeany();
  private:
  uint32_t _internal_includeany(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_includeany() const;
  void _internal_add_includeany(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_includeany();
  public:
  uint32_t includeany(int index) const;
  void set_includeany(int index, uint32_t value);
  void add_includeany(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      includeany() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_includeany();

  // repeated uint32 includeAll = 2;
  int includeall_size() const;
  private:
  int _internal_includeall_size() const;
  public:
  void clear_includeall();
  private:
  uint32_t _internal_includeall(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_includeall() const;
  void _internal_add_includeall(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_includeall();
  public:
  uint32_t includeall(int index) const;
  void set_includeall(int index, uint32_t value);
  void add_includeall(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      includeall() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_includeall();

  // repeated uint32 excludeAny = 3;
  int excludeany_size() const;
  private:
  int _internal_excludeany_size() const;
  public:
  void clear_excludeany();
  private:
  uint32_t _internal_excludeany(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_excludeany() const;
  void _internal_add_excludeany(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_excludeany();
  public:
  uint32_t excludeany(int index) const;
  void set_excludeany(int index, uint32_t value);
  void add_excludeany(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      excludeany() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_excludeany();

  // @@protoc_insertion_point(class_scope:service_layer.SLSrAffinities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > includeany_;
  mutable std::atomic<int> _includeany_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > includeall_;
  mutable std::atomic<int> _includeall_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > excludeany_;
  mutable std::atomic<int> _excludeany_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrteSegment_TypeA final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrteSegment.TypeA) */ {
 public:
  inline SLSrteSegment_TypeA() : SLSrteSegment_TypeA(nullptr) {}
  ~SLSrteSegment_TypeA() override;
  explicit constexpr SLSrteSegment_TypeA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrteSegment_TypeA(const SLSrteSegment_TypeA& from);
  SLSrteSegment_TypeA(SLSrteSegment_TypeA&& from) noexcept
    : SLSrteSegment_TypeA() {
    *this = ::std::move(from);
  }

  inline SLSrteSegment_TypeA& operator=(const SLSrteSegment_TypeA& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrteSegment_TypeA& operator=(SLSrteSegment_TypeA&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrteSegment_TypeA& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrteSegment_TypeA* internal_default_instance() {
    return reinterpret_cast<const SLSrteSegment_TypeA*>(
               &_SLSrteSegment_TypeA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SLSrteSegment_TypeA& a, SLSrteSegment_TypeA& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrteSegment_TypeA* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrteSegment_TypeA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrteSegment_TypeA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrteSegment_TypeA>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrteSegment_TypeA& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrteSegment_TypeA& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrteSegment_TypeA* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrteSegment.TypeA";
  }
  protected:
  explicit SLSrteSegment_TypeA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
  };
  // uint32 label = 1;
  void clear_label();
  uint32_t label() const;
  void set_label(uint32_t value);
  private:
  uint32_t _internal_label() const;
  void _internal_set_label(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrteSegment.TypeA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t label_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrteSegment_TypeB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrteSegment.TypeB) */ {
 public:
  inline SLSrteSegment_TypeB() : SLSrteSegment_TypeB(nullptr) {}
  ~SLSrteSegment_TypeB() override;
  explicit constexpr SLSrteSegment_TypeB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrteSegment_TypeB(const SLSrteSegment_TypeB& from);
  SLSrteSegment_TypeB(SLSrteSegment_TypeB&& from) noexcept
    : SLSrteSegment_TypeB() {
    *this = ::std::move(from);
  }

  inline SLSrteSegment_TypeB& operator=(const SLSrteSegment_TypeB& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrteSegment_TypeB& operator=(SLSrteSegment_TypeB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrteSegment_TypeB& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrteSegment_TypeB* internal_default_instance() {
    return reinterpret_cast<const SLSrteSegment_TypeB*>(
               &_SLSrteSegment_TypeB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SLSrteSegment_TypeB& a, SLSrteSegment_TypeB& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrteSegment_TypeB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrteSegment_TypeB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrteSegment_TypeB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrteSegment_TypeB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrteSegment_TypeB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrteSegment_TypeB& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrteSegment_TypeB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrteSegment.TypeB";
  }
  protected:
  explicit SLSrteSegment_TypeB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpv6SidAddressFieldNumber = 1,
    kStructureFieldNumber = 3,
    kBehaviorFieldNumber = 2,
  };
  // .service_layer.SLIpAddress ipv6_sid_address = 1;
  bool has_ipv6_sid_address() const;
  private:
  bool _internal_has_ipv6_sid_address() const;
  public:
  void clear_ipv6_sid_address();
  const ::service_layer::SLIpAddress& ipv6_sid_address() const;
  PROTOBUF_NODISCARD ::service_layer::SLIpAddress* release_ipv6_sid_address();
  ::service_layer::SLIpAddress* mutable_ipv6_sid_address();
  void set_allocated_ipv6_sid_address(::service_layer::SLIpAddress* ipv6_sid_address);
  private:
  const ::service_layer::SLIpAddress& _internal_ipv6_sid_address() const;
  ::service_layer::SLIpAddress* _internal_mutable_ipv6_sid_address();
  public:
  void unsafe_arena_set_allocated_ipv6_sid_address(
      ::service_layer::SLIpAddress* ipv6_sid_address);
  ::service_layer::SLIpAddress* unsafe_arena_release_ipv6_sid_address();

  // .service_layer.SLSrv6SidStruct structure = 3;
  bool has_structure() const;
  private:
  bool _internal_has_structure() const;
  public:
  void clear_structure();
  const ::service_layer::SLSrv6SidStruct& structure() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrv6SidStruct* release_structure();
  ::service_layer::SLSrv6SidStruct* mutable_structure();
  void set_allocated_structure(::service_layer::SLSrv6SidStruct* structure);
  private:
  const ::service_layer::SLSrv6SidStruct& _internal_structure() const;
  ::service_layer::SLSrv6SidStruct* _internal_mutable_structure();
  public:
  void unsafe_arena_set_allocated_structure(
      ::service_layer::SLSrv6SidStruct* structure);
  ::service_layer::SLSrv6SidStruct* unsafe_arena_release_structure();

  // uint32 behavior = 2;
  void clear_behavior();
  uint32_t behavior() const;
  void set_behavior(uint32_t value);
  private:
  uint32_t _internal_behavior() const;
  void _internal_set_behavior(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrteSegment.TypeB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLIpAddress* ipv6_sid_address_;
  ::service_layer::SLSrv6SidStruct* structure_;
  uint32_t behavior_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrteSegment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrteSegment) */ {
 public:
  inline SLSrteSegment() : SLSrteSegment(nullptr) {}
  ~SLSrteSegment() override;
  explicit constexpr SLSrteSegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrteSegment(const SLSrteSegment& from);
  SLSrteSegment(SLSrteSegment&& from) noexcept
    : SLSrteSegment() {
    *this = ::std::move(from);
  }

  inline SLSrteSegment& operator=(const SLSrteSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrteSegment& operator=(SLSrteSegment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrteSegment& default_instance() {
    return *internal_default_instance();
  }
  enum SegmentCase {
    kTypeA = 1,
    kTypeB = 2,
    SEGMENT_NOT_SET = 0,
  };

  static inline const SLSrteSegment* internal_default_instance() {
    return reinterpret_cast<const SLSrteSegment*>(
               &_SLSrteSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SLSrteSegment& a, SLSrteSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrteSegment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrteSegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrteSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrteSegment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrteSegment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrteSegment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrteSegment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrteSegment";
  }
  protected:
  explicit SLSrteSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SLSrteSegment_TypeA TypeA;
  typedef SLSrteSegment_TypeB TypeB;

  // accessors -------------------------------------------------------

  enum : int {
    kTypeAFieldNumber = 1,
    kTypeBFieldNumber = 2,
  };
  // .service_layer.SLSrteSegment.TypeA type_a = 1;
  bool has_type_a() const;
  private:
  bool _internal_has_type_a() const;
  public:
  void clear_type_a();
  const ::service_layer::SLSrteSegment_TypeA& type_a() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrteSegment_TypeA* release_type_a();
  ::service_layer::SLSrteSegment_TypeA* mutable_type_a();
  void set_allocated_type_a(::service_layer::SLSrteSegment_TypeA* type_a);
  private:
  const ::service_layer::SLSrteSegment_TypeA& _internal_type_a() const;
  ::service_layer::SLSrteSegment_TypeA* _internal_mutable_type_a();
  public:
  void unsafe_arena_set_allocated_type_a(
      ::service_layer::SLSrteSegment_TypeA* type_a);
  ::service_layer::SLSrteSegment_TypeA* unsafe_arena_release_type_a();

  // .service_layer.SLSrteSegment.TypeB type_b = 2;
  bool has_type_b() const;
  private:
  bool _internal_has_type_b() const;
  public:
  void clear_type_b();
  const ::service_layer::SLSrteSegment_TypeB& type_b() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrteSegment_TypeB* release_type_b();
  ::service_layer::SLSrteSegment_TypeB* mutable_type_b();
  void set_allocated_type_b(::service_layer::SLSrteSegment_TypeB* type_b);
  private:
  const ::service_layer::SLSrteSegment_TypeB& _internal_type_b() const;
  ::service_layer::SLSrteSegment_TypeB* _internal_mutable_type_b();
  public:
  void unsafe_arena_set_allocated_type_b(
      ::service_layer::SLSrteSegment_TypeB* type_b);
  ::service_layer::SLSrteSegment_TypeB* unsafe_arena_release_type_b();

  void clear_segment();
  SegmentCase segment_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLSrteSegment)
 private:
  class _Internal;
  void set_has_type_a();
  void set_has_type_b();

  inline bool has_segment() const;
  inline void clear_has_segment();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union SegmentUnion {
    constexpr SegmentUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::service_layer::SLSrteSegment_TypeA* type_a_;
    ::service_layer::SLSrteSegment_TypeB* type_b_;
  } segment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrSegmentList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrSegmentList) */ {
 public:
  inline SLSrSegmentList() : SLSrSegmentList(nullptr) {}
  ~SLSrSegmentList() override;
  explicit constexpr SLSrSegmentList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrSegmentList(const SLSrSegmentList& from);
  SLSrSegmentList(SLSrSegmentList&& from) noexcept
    : SLSrSegmentList() {
    *this = ::std::move(from);
  }

  inline SLSrSegmentList& operator=(const SLSrSegmentList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrSegmentList& operator=(SLSrSegmentList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrSegmentList& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrSegmentList* internal_default_instance() {
    return reinterpret_cast<const SLSrSegmentList*>(
               &_SLSrSegmentList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SLSrSegmentList& a, SLSrSegmentList& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrSegmentList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrSegmentList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrSegmentList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrSegmentList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrSegmentList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrSegmentList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrSegmentList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrSegmentList";
  }
  protected:
  explicit SLSrSegmentList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsFieldNumber = 1,
    kWeightFieldNumber = 2,
    kPathCostFieldNumber = 3,
  };
  // repeated .service_layer.SLSrteSegment segments = 1;
  int segments_size() const;
  private:
  int _internal_segments_size() const;
  public:
  void clear_segments();
  ::service_layer::SLSrteSegment* mutable_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrteSegment >*
      mutable_segments();
  private:
  const ::service_layer::SLSrteSegment& _internal_segments(int index) const;
  ::service_layer::SLSrteSegment* _internal_add_segments();
  public:
  const ::service_layer::SLSrteSegment& segments(int index) const;
  ::service_layer::SLSrteSegment* add_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrteSegment >&
      segments() const;

  // optional uint32 weight = 2;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  uint32_t weight() const;
  void set_weight(uint32_t value);
  private:
  uint32_t _internal_weight() const;
  void _internal_set_weight(uint32_t value);
  public:

  // uint32 path_cost = 3;
  void clear_path_cost();
  uint32_t path_cost() const;
  void set_path_cost(uint32_t value);
  private:
  uint32_t _internal_path_cost() const;
  void _internal_set_path_cost(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrSegmentList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrteSegment > segments_;
  uint32_t weight_;
  uint32_t path_cost_;
  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrPolicyKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrPolicyKey) */ {
 public:
  inline SLSrPolicyKey() : SLSrPolicyKey(nullptr) {}
  ~SLSrPolicyKey() override;
  explicit constexpr SLSrPolicyKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrPolicyKey(const SLSrPolicyKey& from);
  SLSrPolicyKey(SLSrPolicyKey&& from) noexcept
    : SLSrPolicyKey() {
    *this = ::std::move(from);
  }

  inline SLSrPolicyKey& operator=(const SLSrPolicyKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrPolicyKey& operator=(SLSrPolicyKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrPolicyKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrPolicyKey* internal_default_instance() {
    return reinterpret_cast<const SLSrPolicyKey*>(
               &_SLSrPolicyKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SLSrPolicyKey& a, SLSrPolicyKey& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrPolicyKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrPolicyKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrPolicyKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrPolicyKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrPolicyKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrPolicyKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrPolicyKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrPolicyKey";
  }
  protected:
  explicit SLSrPolicyKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadendFieldNumber = 1,
    kEndpointFieldNumber = 3,
    kColorFieldNumber = 2,
  };
  // .service_layer.SLIpAddress headend = 1;
  bool has_headend() const;
  private:
  bool _internal_has_headend() const;
  public:
  void clear_headend();
  const ::service_layer::SLIpAddress& headend() const;
  PROTOBUF_NODISCARD ::service_layer::SLIpAddress* release_headend();
  ::service_layer::SLIpAddress* mutable_headend();
  void set_allocated_headend(::service_layer::SLIpAddress* headend);
  private:
  const ::service_layer::SLIpAddress& _internal_headend() const;
  ::service_layer::SLIpAddress* _internal_mutable_headend();
  public:
  void unsafe_arena_set_allocated_headend(
      ::service_layer::SLIpAddress* headend);
  ::service_layer::SLIpAddress* unsafe_arena_release_headend();

  // .service_layer.SLIpAddress endpoint = 3;
  bool has_endpoint() const;
  private:
  bool _internal_has_endpoint() const;
  public:
  void clear_endpoint();
  const ::service_layer::SLIpAddress& endpoint() const;
  PROTOBUF_NODISCARD ::service_layer::SLIpAddress* release_endpoint();
  ::service_layer::SLIpAddress* mutable_endpoint();
  void set_allocated_endpoint(::service_layer::SLIpAddress* endpoint);
  private:
  const ::service_layer::SLIpAddress& _internal_endpoint() const;
  ::service_layer::SLIpAddress* _internal_mutable_endpoint();
  public:
  void unsafe_arena_set_allocated_endpoint(
      ::service_layer::SLIpAddress* endpoint);
  ::service_layer::SLIpAddress* unsafe_arena_release_endpoint();

  // uint32 color = 2;
  void clear_color();
  uint32_t color() const;
  void set_color(uint32_t value);
  private:
  uint32_t _internal_color() const;
  void _internal_set_color(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrPolicyKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLIpAddress* headend_;
  ::service_layer::SLIpAddress* endpoint_;
  uint32_t color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrCandidatePathKey_Originator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrCandidatePathKey.Originator) */ {
 public:
  inline SLSrCandidatePathKey_Originator() : SLSrCandidatePathKey_Originator(nullptr) {}
  ~SLSrCandidatePathKey_Originator() override;
  explicit constexpr SLSrCandidatePathKey_Originator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrCandidatePathKey_Originator(const SLSrCandidatePathKey_Originator& from);
  SLSrCandidatePathKey_Originator(SLSrCandidatePathKey_Originator&& from) noexcept
    : SLSrCandidatePathKey_Originator() {
    *this = ::std::move(from);
  }

  inline SLSrCandidatePathKey_Originator& operator=(const SLSrCandidatePathKey_Originator& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrCandidatePathKey_Originator& operator=(SLSrCandidatePathKey_Originator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrCandidatePathKey_Originator& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrCandidatePathKey_Originator* internal_default_instance() {
    return reinterpret_cast<const SLSrCandidatePathKey_Originator*>(
               &_SLSrCandidatePathKey_Originator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SLSrCandidatePathKey_Originator& a, SLSrCandidatePathKey_Originator& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrCandidatePathKey_Originator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrCandidatePathKey_Originator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrCandidatePathKey_Originator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrCandidatePathKey_Originator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrCandidatePathKey_Originator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrCandidatePathKey_Originator& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrCandidatePathKey_Originator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrCandidatePathKey.Originator";
  }
  protected:
  explicit SLSrCandidatePathKey_Originator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIDFieldNumber = 2,
    kAsnFieldNumber = 1,
  };
  // .service_layer.SLIpAddress nodeID = 2;
  bool has_nodeid() const;
  private:
  bool _internal_has_nodeid() const;
  public:
  void clear_nodeid();
  const ::service_layer::SLIpAddress& nodeid() const;
  PROTOBUF_NODISCARD ::service_layer::SLIpAddress* release_nodeid();
  ::service_layer::SLIpAddress* mutable_nodeid();
  void set_allocated_nodeid(::service_layer::SLIpAddress* nodeid);
  private:
  const ::service_layer::SLIpAddress& _internal_nodeid() const;
  ::service_layer::SLIpAddress* _internal_mutable_nodeid();
  public:
  void unsafe_arena_set_allocated_nodeid(
      ::service_layer::SLIpAddress* nodeid);
  ::service_layer::SLIpAddress* unsafe_arena_release_nodeid();

  // uint32 asn = 1;
  void clear_asn();
  uint32_t asn() const;
  void set_asn(uint32_t value);
  private:
  uint32_t _internal_asn() const;
  void _internal_set_asn(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrCandidatePathKey.Originator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLIpAddress* nodeid_;
  uint32_t asn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SLSrCandidatePathKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrCandidatePathKey) */ {
 public:
  inline SLSrCandidatePathKey() : SLSrCandidatePathKey(nullptr) {}
  ~SLSrCandidatePathKey() override;
  explicit constexpr SLSrCandidatePathKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrCandidatePathKey(const SLSrCandidatePathKey& from);
  SLSrCandidatePathKey(SLSrCandidatePathKey&& from) noexcept
    : SLSrCandidatePathKey() {
    *this = ::std::move(from);
  }

  inline SLSrCandidatePathKey& operator=(const SLSrCandidatePathKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrCandidatePathKey& operator=(SLSrCandidatePathKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrCandidatePathKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrCandidatePathKey* internal_default_instance() {
    return reinterpret_cast<const SLSrCandidatePathKey*>(
               &_SLSrCandidatePathKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SLSrCandidatePathKey& a, SLSrCandidatePathKey& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrCandidatePathKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrCandidatePathKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrCandidatePathKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrCandidatePathKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrCandidatePathKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrCandidatePathKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrCandidatePathKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrCandidatePathKey";
  }
  protected:
  explicit SLSrCandidatePathKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SLSrCandidatePathKey_Originator Originator;

  // accessors -------------------------------------------------------

  enum : int {
    kOriginatorFieldNumber = 1,
    kDiscriminatorFieldNumber = 3,
  };
  // .service_layer.SLSrCandidatePathKey.Originator originator = 1;
  bool has_originator() const;
  private:
  bool _internal_has_originator() const;
  public:
  void clear_originator();
  const ::service_layer::SLSrCandidatePathKey_Originator& originator() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrCandidatePathKey_Originator* release_originator();
  ::service_layer::SLSrCandidatePathKey_Originator* mutable_originator();
  void set_allocated_originator(::service_layer::SLSrCandidatePathKey_Originator* originator);
  private:
  const ::service_layer::SLSrCandidatePathKey_Originator& _internal_originator() const;
  ::service_layer::SLSrCandidatePathKey_Originator* _internal_mutable_originator();
  public:
  void unsafe_arena_set_allocated_originator(
      ::service_layer::SLSrCandidatePathKey_Originator* originator);
  ::service_layer::SLSrCandidatePathKey_Originator* unsafe_arena_release_originator();

  // uint32 discriminator = 3;
  void clear_discriminator();
  uint32_t discriminator() const;
  void set_discriminator(uint32_t value);
  private:
  uint32_t _internal_discriminator() const;
  void _internal_set_discriminator(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrCandidatePathKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLSrCandidatePathKey_Originator* originator_;
  uint32_t discriminator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsr_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SLSrPolicyFlags

// uint32 Flags = 1;
inline void SLSrPolicyFlags::clear_flags() {
  flags_ = 0u;
}
inline uint32_t SLSrPolicyFlags::_internal_flags() const {
  return flags_;
}
inline uint32_t SLSrPolicyFlags::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyFlags.Flags)
  return _internal_flags();
}
inline void SLSrPolicyFlags::_internal_set_flags(uint32_t value) {
  
  flags_ = value;
}
inline void SLSrPolicyFlags::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrPolicyFlags.Flags)
}

// -------------------------------------------------------------------

// SLSrBsid

// uint32 MplsBsid = 1;
inline bool SLSrBsid::_internal_has_mplsbsid() const {
  return BindingSid_case() == kMplsBsid;
}
inline bool SLSrBsid::has_mplsbsid() const {
  return _internal_has_mplsbsid();
}
inline void SLSrBsid::set_has_mplsbsid() {
  _oneof_case_[0] = kMplsBsid;
}
inline void SLSrBsid::clear_mplsbsid() {
  if (_internal_has_mplsbsid()) {
    BindingSid_.mplsbsid_ = 0u;
    clear_has_BindingSid();
  }
}
inline uint32_t SLSrBsid::_internal_mplsbsid() const {
  if (_internal_has_mplsbsid()) {
    return BindingSid_.mplsbsid_;
  }
  return 0u;
}
inline void SLSrBsid::_internal_set_mplsbsid(uint32_t value) {
  if (!_internal_has_mplsbsid()) {
    clear_BindingSid();
    set_has_mplsbsid();
  }
  BindingSid_.mplsbsid_ = value;
}
inline uint32_t SLSrBsid::mplsbsid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrBsid.MplsBsid)
  return _internal_mplsbsid();
}
inline void SLSrBsid::set_mplsbsid(uint32_t value) {
  _internal_set_mplsbsid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrBsid.MplsBsid)
}

// bytes Srv6Bsid = 2;
inline bool SLSrBsid::_internal_has_srv6bsid() const {
  return BindingSid_case() == kSrv6Bsid;
}
inline bool SLSrBsid::has_srv6bsid() const {
  return _internal_has_srv6bsid();
}
inline void SLSrBsid::set_has_srv6bsid() {
  _oneof_case_[0] = kSrv6Bsid;
}
inline void SLSrBsid::clear_srv6bsid() {
  if (_internal_has_srv6bsid()) {
    BindingSid_.srv6bsid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_BindingSid();
  }
}
inline const std::string& SLSrBsid::srv6bsid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrBsid.Srv6Bsid)
  return _internal_srv6bsid();
}
template <typename ArgT0, typename... ArgT>
inline void SLSrBsid::set_srv6bsid(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_srv6bsid()) {
    clear_BindingSid();
    set_has_srv6bsid();
    BindingSid_.srv6bsid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  BindingSid_.srv6bsid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrBsid.Srv6Bsid)
}
inline std::string* SLSrBsid::mutable_srv6bsid() {
  std::string* _s = _internal_mutable_srv6bsid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrBsid.Srv6Bsid)
  return _s;
}
inline const std::string& SLSrBsid::_internal_srv6bsid() const {
  if (_internal_has_srv6bsid()) {
    return BindingSid_.srv6bsid_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLSrBsid::_internal_set_srv6bsid(const std::string& value) {
  if (!_internal_has_srv6bsid()) {
    clear_BindingSid();
    set_has_srv6bsid();
    BindingSid_.srv6bsid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  BindingSid_.srv6bsid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrBsid::_internal_mutable_srv6bsid() {
  if (!_internal_has_srv6bsid()) {
    clear_BindingSid();
    set_has_srv6bsid();
    BindingSid_.srv6bsid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return BindingSid_.srv6bsid_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrBsid::release_srv6bsid() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrBsid.Srv6Bsid)
  if (_internal_has_srv6bsid()) {
    clear_has_BindingSid();
    return BindingSid_.srv6bsid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLSrBsid::set_allocated_srv6bsid(std::string* srv6bsid) {
  if (has_BindingSid()) {
    clear_BindingSid();
  }
  if (srv6bsid != nullptr) {
    set_has_srv6bsid();
    BindingSid_.srv6bsid_.UnsafeSetDefault(srv6bsid);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(srv6bsid);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrBsid.Srv6Bsid)
}

inline bool SLSrBsid::has_BindingSid() const {
  return BindingSid_case() != BINDINGSID_NOT_SET;
}
inline void SLSrBsid::clear_has_BindingSid() {
  _oneof_case_[0] = BINDINGSID_NOT_SET;
}
inline SLSrBsid::BindingSidCase SLSrBsid::BindingSid_case() const {
  return SLSrBsid::BindingSidCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLSrCpName

// string Name = 1;
inline void SLSrCpName::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SLSrCpName::name() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrCpName.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLSrCpName::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrCpName.Name)
}
inline std::string* SLSrCpName::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrCpName.Name)
  return _s;
}
inline const std::string& SLSrCpName::_internal_name() const {
  return name_.Get();
}
inline void SLSrCpName::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrCpName::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrCpName::release_name() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrCpName.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLSrCpName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrCpName.Name)
}

// -------------------------------------------------------------------

// SLSrSegmentDesc

// uint32 Algorithm = 1;
inline void SLSrSegmentDesc::clear_algorithm() {
  algorithm_ = 0u;
}
inline uint32_t SLSrSegmentDesc::_internal_algorithm() const {
  return algorithm_;
}
inline uint32_t SLSrSegmentDesc::algorithm() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegmentDesc.Algorithm)
  return _internal_algorithm();
}
inline void SLSrSegmentDesc::_internal_set_algorithm(uint32_t value) {
  
  algorithm_ = value;
}
inline void SLSrSegmentDesc::set_algorithm(uint32_t value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegmentDesc.Algorithm)
}

// bytes Ipv4LocalAddr = 2;
inline bool SLSrSegmentDesc::_internal_has_ipv4localaddr() const {
  return LocalNode_case() == kIpv4LocalAddr;
}
inline bool SLSrSegmentDesc::has_ipv4localaddr() const {
  return _internal_has_ipv4localaddr();
}
inline void SLSrSegmentDesc::set_has_ipv4localaddr() {
  _oneof_case_[0] = kIpv4LocalAddr;
}
inline void SLSrSegmentDesc::clear_ipv4localaddr() {
  if (_internal_has_ipv4localaddr()) {
    LocalNode_.ipv4localaddr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_LocalNode();
  }
}
inline const std::string& SLSrSegmentDesc::ipv4localaddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegmentDesc.Ipv4LocalAddr)
  return _internal_ipv4localaddr();
}
template <typename ArgT0, typename... ArgT>
inline void SLSrSegmentDesc::set_ipv4localaddr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ipv4localaddr()) {
    clear_LocalNode();
    set_has_ipv4localaddr();
    LocalNode_.ipv4localaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  LocalNode_.ipv4localaddr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegmentDesc.Ipv4LocalAddr)
}
inline std::string* SLSrSegmentDesc::mutable_ipv4localaddr() {
  std::string* _s = _internal_mutable_ipv4localaddr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrSegmentDesc.Ipv4LocalAddr)
  return _s;
}
inline const std::string& SLSrSegmentDesc::_internal_ipv4localaddr() const {
  if (_internal_has_ipv4localaddr()) {
    return LocalNode_.ipv4localaddr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLSrSegmentDesc::_internal_set_ipv4localaddr(const std::string& value) {
  if (!_internal_has_ipv4localaddr()) {
    clear_LocalNode();
    set_has_ipv4localaddr();
    LocalNode_.ipv4localaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  LocalNode_.ipv4localaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrSegmentDesc::_internal_mutable_ipv4localaddr() {
  if (!_internal_has_ipv4localaddr()) {
    clear_LocalNode();
    set_has_ipv4localaddr();
    LocalNode_.ipv4localaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return LocalNode_.ipv4localaddr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrSegmentDesc::release_ipv4localaddr() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrSegmentDesc.Ipv4LocalAddr)
  if (_internal_has_ipv4localaddr()) {
    clear_has_LocalNode();
    return LocalNode_.ipv4localaddr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLSrSegmentDesc::set_allocated_ipv4localaddr(std::string* ipv4localaddr) {
  if (has_LocalNode()) {
    clear_LocalNode();
  }
  if (ipv4localaddr != nullptr) {
    set_has_ipv4localaddr();
    LocalNode_.ipv4localaddr_.UnsafeSetDefault(ipv4localaddr);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(ipv4localaddr);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrSegmentDesc.Ipv4LocalAddr)
}

// bytes Ipv6LocalAddr = 3;
inline bool SLSrSegmentDesc::_internal_has_ipv6localaddr() const {
  return LocalNode_case() == kIpv6LocalAddr;
}
inline bool SLSrSegmentDesc::has_ipv6localaddr() const {
  return _internal_has_ipv6localaddr();
}
inline void SLSrSegmentDesc::set_has_ipv6localaddr() {
  _oneof_case_[0] = kIpv6LocalAddr;
}
inline void SLSrSegmentDesc::clear_ipv6localaddr() {
  if (_internal_has_ipv6localaddr()) {
    LocalNode_.ipv6localaddr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_LocalNode();
  }
}
inline const std::string& SLSrSegmentDesc::ipv6localaddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegmentDesc.Ipv6LocalAddr)
  return _internal_ipv6localaddr();
}
template <typename ArgT0, typename... ArgT>
inline void SLSrSegmentDesc::set_ipv6localaddr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ipv6localaddr()) {
    clear_LocalNode();
    set_has_ipv6localaddr();
    LocalNode_.ipv6localaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  LocalNode_.ipv6localaddr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegmentDesc.Ipv6LocalAddr)
}
inline std::string* SLSrSegmentDesc::mutable_ipv6localaddr() {
  std::string* _s = _internal_mutable_ipv6localaddr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrSegmentDesc.Ipv6LocalAddr)
  return _s;
}
inline const std::string& SLSrSegmentDesc::_internal_ipv6localaddr() const {
  if (_internal_has_ipv6localaddr()) {
    return LocalNode_.ipv6localaddr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLSrSegmentDesc::_internal_set_ipv6localaddr(const std::string& value) {
  if (!_internal_has_ipv6localaddr()) {
    clear_LocalNode();
    set_has_ipv6localaddr();
    LocalNode_.ipv6localaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  LocalNode_.ipv6localaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrSegmentDesc::_internal_mutable_ipv6localaddr() {
  if (!_internal_has_ipv6localaddr()) {
    clear_LocalNode();
    set_has_ipv6localaddr();
    LocalNode_.ipv6localaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return LocalNode_.ipv6localaddr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrSegmentDesc::release_ipv6localaddr() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrSegmentDesc.Ipv6LocalAddr)
  if (_internal_has_ipv6localaddr()) {
    clear_has_LocalNode();
    return LocalNode_.ipv6localaddr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLSrSegmentDesc::set_allocated_ipv6localaddr(std::string* ipv6localaddr) {
  if (has_LocalNode()) {
    clear_LocalNode();
  }
  if (ipv6localaddr != nullptr) {
    set_has_ipv6localaddr();
    LocalNode_.ipv6localaddr_.UnsafeSetDefault(ipv6localaddr);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(ipv6localaddr);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrSegmentDesc.Ipv6LocalAddr)
}

// bytes Ipv4RemoteAddr = 4;
inline bool SLSrSegmentDesc::_internal_has_ipv4remoteaddr() const {
  return RemoteNode_case() == kIpv4RemoteAddr;
}
inline bool SLSrSegmentDesc::has_ipv4remoteaddr() const {
  return _internal_has_ipv4remoteaddr();
}
inline void SLSrSegmentDesc::set_has_ipv4remoteaddr() {
  _oneof_case_[1] = kIpv4RemoteAddr;
}
inline void SLSrSegmentDesc::clear_ipv4remoteaddr() {
  if (_internal_has_ipv4remoteaddr()) {
    RemoteNode_.ipv4remoteaddr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_RemoteNode();
  }
}
inline const std::string& SLSrSegmentDesc::ipv4remoteaddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegmentDesc.Ipv4RemoteAddr)
  return _internal_ipv4remoteaddr();
}
template <typename ArgT0, typename... ArgT>
inline void SLSrSegmentDesc::set_ipv4remoteaddr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ipv4remoteaddr()) {
    clear_RemoteNode();
    set_has_ipv4remoteaddr();
    RemoteNode_.ipv4remoteaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  RemoteNode_.ipv4remoteaddr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegmentDesc.Ipv4RemoteAddr)
}
inline std::string* SLSrSegmentDesc::mutable_ipv4remoteaddr() {
  std::string* _s = _internal_mutable_ipv4remoteaddr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrSegmentDesc.Ipv4RemoteAddr)
  return _s;
}
inline const std::string& SLSrSegmentDesc::_internal_ipv4remoteaddr() const {
  if (_internal_has_ipv4remoteaddr()) {
    return RemoteNode_.ipv4remoteaddr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLSrSegmentDesc::_internal_set_ipv4remoteaddr(const std::string& value) {
  if (!_internal_has_ipv4remoteaddr()) {
    clear_RemoteNode();
    set_has_ipv4remoteaddr();
    RemoteNode_.ipv4remoteaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  RemoteNode_.ipv4remoteaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrSegmentDesc::_internal_mutable_ipv4remoteaddr() {
  if (!_internal_has_ipv4remoteaddr()) {
    clear_RemoteNode();
    set_has_ipv4remoteaddr();
    RemoteNode_.ipv4remoteaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return RemoteNode_.ipv4remoteaddr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrSegmentDesc::release_ipv4remoteaddr() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrSegmentDesc.Ipv4RemoteAddr)
  if (_internal_has_ipv4remoteaddr()) {
    clear_has_RemoteNode();
    return RemoteNode_.ipv4remoteaddr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLSrSegmentDesc::set_allocated_ipv4remoteaddr(std::string* ipv4remoteaddr) {
  if (has_RemoteNode()) {
    clear_RemoteNode();
  }
  if (ipv4remoteaddr != nullptr) {
    set_has_ipv4remoteaddr();
    RemoteNode_.ipv4remoteaddr_.UnsafeSetDefault(ipv4remoteaddr);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(ipv4remoteaddr);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrSegmentDesc.Ipv4RemoteAddr)
}

// bytes Ipv6RemoteAddr = 5;
inline bool SLSrSegmentDesc::_internal_has_ipv6remoteaddr() const {
  return RemoteNode_case() == kIpv6RemoteAddr;
}
inline bool SLSrSegmentDesc::has_ipv6remoteaddr() const {
  return _internal_has_ipv6remoteaddr();
}
inline void SLSrSegmentDesc::set_has_ipv6remoteaddr() {
  _oneof_case_[1] = kIpv6RemoteAddr;
}
inline void SLSrSegmentDesc::clear_ipv6remoteaddr() {
  if (_internal_has_ipv6remoteaddr()) {
    RemoteNode_.ipv6remoteaddr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_RemoteNode();
  }
}
inline const std::string& SLSrSegmentDesc::ipv6remoteaddr() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegmentDesc.Ipv6RemoteAddr)
  return _internal_ipv6remoteaddr();
}
template <typename ArgT0, typename... ArgT>
inline void SLSrSegmentDesc::set_ipv6remoteaddr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ipv6remoteaddr()) {
    clear_RemoteNode();
    set_has_ipv6remoteaddr();
    RemoteNode_.ipv6remoteaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  RemoteNode_.ipv6remoteaddr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegmentDesc.Ipv6RemoteAddr)
}
inline std::string* SLSrSegmentDesc::mutable_ipv6remoteaddr() {
  std::string* _s = _internal_mutable_ipv6remoteaddr();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrSegmentDesc.Ipv6RemoteAddr)
  return _s;
}
inline const std::string& SLSrSegmentDesc::_internal_ipv6remoteaddr() const {
  if (_internal_has_ipv6remoteaddr()) {
    return RemoteNode_.ipv6remoteaddr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLSrSegmentDesc::_internal_set_ipv6remoteaddr(const std::string& value) {
  if (!_internal_has_ipv6remoteaddr()) {
    clear_RemoteNode();
    set_has_ipv6remoteaddr();
    RemoteNode_.ipv6remoteaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  RemoteNode_.ipv6remoteaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrSegmentDesc::_internal_mutable_ipv6remoteaddr() {
  if (!_internal_has_ipv6remoteaddr()) {
    clear_RemoteNode();
    set_has_ipv6remoteaddr();
    RemoteNode_.ipv6remoteaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return RemoteNode_.ipv6remoteaddr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrSegmentDesc::release_ipv6remoteaddr() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrSegmentDesc.Ipv6RemoteAddr)
  if (_internal_has_ipv6remoteaddr()) {
    clear_has_RemoteNode();
    return RemoteNode_.ipv6remoteaddr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLSrSegmentDesc::set_allocated_ipv6remoteaddr(std::string* ipv6remoteaddr) {
  if (has_RemoteNode()) {
    clear_RemoteNode();
  }
  if (ipv6remoteaddr != nullptr) {
    set_has_ipv6remoteaddr();
    RemoteNode_.ipv6remoteaddr_.UnsafeSetDefault(ipv6remoteaddr);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(ipv6remoteaddr);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrSegmentDesc.Ipv6RemoteAddr)
}

// uint32 LocalNodeIntfId = 6;
inline void SLSrSegmentDesc::clear_localnodeintfid() {
  localnodeintfid_ = 0u;
}
inline uint32_t SLSrSegmentDesc::_internal_localnodeintfid() const {
  return localnodeintfid_;
}
inline uint32_t SLSrSegmentDesc::localnodeintfid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegmentDesc.LocalNodeIntfId)
  return _internal_localnodeintfid();
}
inline void SLSrSegmentDesc::_internal_set_localnodeintfid(uint32_t value) {
  
  localnodeintfid_ = value;
}
inline void SLSrSegmentDesc::set_localnodeintfid(uint32_t value) {
  _internal_set_localnodeintfid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegmentDesc.LocalNodeIntfId)
}

// uint32 RemoteNodeIntfId = 7;
inline void SLSrSegmentDesc::clear_remotenodeintfid() {
  remotenodeintfid_ = 0u;
}
inline uint32_t SLSrSegmentDesc::_internal_remotenodeintfid() const {
  return remotenodeintfid_;
}
inline uint32_t SLSrSegmentDesc::remotenodeintfid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegmentDesc.RemoteNodeIntfId)
  return _internal_remotenodeintfid();
}
inline void SLSrSegmentDesc::_internal_set_remotenodeintfid(uint32_t value) {
  
  remotenodeintfid_ = value;
}
inline void SLSrSegmentDesc::set_remotenodeintfid(uint32_t value) {
  _internal_set_remotenodeintfid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegmentDesc.RemoteNodeIntfId)
}

inline bool SLSrSegmentDesc::has_LocalNode() const {
  return LocalNode_case() != LOCALNODE_NOT_SET;
}
inline void SLSrSegmentDesc::clear_has_LocalNode() {
  _oneof_case_[0] = LOCALNODE_NOT_SET;
}
inline bool SLSrSegmentDesc::has_RemoteNode() const {
  return RemoteNode_case() != REMOTENODE_NOT_SET;
}
inline void SLSrSegmentDesc::clear_has_RemoteNode() {
  _oneof_case_[1] = REMOTENODE_NOT_SET;
}
inline SLSrSegmentDesc::LocalNodeCase SLSrSegmentDesc::LocalNode_case() const {
  return SLSrSegmentDesc::LocalNodeCase(_oneof_case_[0]);
}
inline SLSrSegmentDesc::RemoteNodeCase SLSrSegmentDesc::RemoteNode_case() const {
  return SLSrSegmentDesc::RemoteNodeCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// SLSrSegment

// .service_layer.SLSrSegmentType Type = 1;
inline void SLSrSegment::clear_type() {
  type_ = 0;
}
inline ::service_layer::SLSrSegmentType SLSrSegment::_internal_type() const {
  return static_cast< ::service_layer::SLSrSegmentType >(type_);
}
inline ::service_layer::SLSrSegmentType SLSrSegment::type() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegment.Type)
  return _internal_type();
}
inline void SLSrSegment::_internal_set_type(::service_layer::SLSrSegmentType value) {
  
  type_ = value;
}
inline void SLSrSegment::set_type(::service_layer::SLSrSegmentType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegment.Type)
}

// uint32 Flags = 2;
inline void SLSrSegment::clear_flags() {
  flags_ = 0u;
}
inline uint32_t SLSrSegment::_internal_flags() const {
  return flags_;
}
inline uint32_t SLSrSegment::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegment.Flags)
  return _internal_flags();
}
inline void SLSrSegment::_internal_set_flags(uint32_t value) {
  
  flags_ = value;
}
inline void SLSrSegment::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegment.Flags)
}

// uint32 MplsLabel = 3;
inline bool SLSrSegment::_internal_has_mplslabel() const {
  return Sid_case() == kMplsLabel;
}
inline bool SLSrSegment::has_mplslabel() const {
  return _internal_has_mplslabel();
}
inline void SLSrSegment::set_has_mplslabel() {
  _oneof_case_[0] = kMplsLabel;
}
inline void SLSrSegment::clear_mplslabel() {
  if (_internal_has_mplslabel()) {
    Sid_.mplslabel_ = 0u;
    clear_has_Sid();
  }
}
inline uint32_t SLSrSegment::_internal_mplslabel() const {
  if (_internal_has_mplslabel()) {
    return Sid_.mplslabel_;
  }
  return 0u;
}
inline void SLSrSegment::_internal_set_mplslabel(uint32_t value) {
  if (!_internal_has_mplslabel()) {
    clear_Sid();
    set_has_mplslabel();
  }
  Sid_.mplslabel_ = value;
}
inline uint32_t SLSrSegment::mplslabel() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegment.MplsLabel)
  return _internal_mplslabel();
}
inline void SLSrSegment::set_mplslabel(uint32_t value) {
  _internal_set_mplslabel(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegment.MplsLabel)
}

// bytes Srv6Sid = 4;
inline bool SLSrSegment::_internal_has_srv6sid() const {
  return Sid_case() == kSrv6Sid;
}
inline bool SLSrSegment::has_srv6sid() const {
  return _internal_has_srv6sid();
}
inline void SLSrSegment::set_has_srv6sid() {
  _oneof_case_[0] = kSrv6Sid;
}
inline void SLSrSegment::clear_srv6sid() {
  if (_internal_has_srv6sid()) {
    Sid_.srv6sid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_Sid();
  }
}
inline const std::string& SLSrSegment::srv6sid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegment.Srv6Sid)
  return _internal_srv6sid();
}
template <typename ArgT0, typename... ArgT>
inline void SLSrSegment::set_srv6sid(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_srv6sid()) {
    clear_Sid();
    set_has_srv6sid();
    Sid_.srv6sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Sid_.srv6sid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegment.Srv6Sid)
}
inline std::string* SLSrSegment::mutable_srv6sid() {
  std::string* _s = _internal_mutable_srv6sid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrSegment.Srv6Sid)
  return _s;
}
inline const std::string& SLSrSegment::_internal_srv6sid() const {
  if (_internal_has_srv6sid()) {
    return Sid_.srv6sid_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SLSrSegment::_internal_set_srv6sid(const std::string& value) {
  if (!_internal_has_srv6sid()) {
    clear_Sid();
    set_has_srv6sid();
    Sid_.srv6sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Sid_.srv6sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrSegment::_internal_mutable_srv6sid() {
  if (!_internal_has_srv6sid()) {
    clear_Sid();
    set_has_srv6sid();
    Sid_.srv6sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return Sid_.srv6sid_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrSegment::release_srv6sid() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrSegment.Srv6Sid)
  if (_internal_has_srv6sid()) {
    clear_has_Sid();
    return Sid_.srv6sid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SLSrSegment::set_allocated_srv6sid(std::string* srv6sid) {
  if (has_Sid()) {
    clear_Sid();
  }
  if (srv6sid != nullptr) {
    set_has_srv6sid();
    Sid_.srv6sid_.UnsafeSetDefault(srv6sid);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(srv6sid);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrSegment.Srv6Sid)
}

// .service_layer.SLSrSegmentDesc SegmentDesc = 5;
inline bool SLSrSegment::_internal_has_segmentdesc() const {
  return this != internal_default_instance() && segmentdesc_ != nullptr;
}
inline bool SLSrSegment::has_segmentdesc() const {
  return _internal_has_segmentdesc();
}
inline void SLSrSegment::clear_segmentdesc() {
  if (GetArenaForAllocation() == nullptr && segmentdesc_ != nullptr) {
    delete segmentdesc_;
  }
  segmentdesc_ = nullptr;
}
inline const ::service_layer::SLSrSegmentDesc& SLSrSegment::_internal_segmentdesc() const {
  const ::service_layer::SLSrSegmentDesc* p = segmentdesc_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrSegmentDesc&>(
      ::service_layer::_SLSrSegmentDesc_default_instance_);
}
inline const ::service_layer::SLSrSegmentDesc& SLSrSegment::segmentdesc() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegment.SegmentDesc)
  return _internal_segmentdesc();
}
inline void SLSrSegment::unsafe_arena_set_allocated_segmentdesc(
    ::service_layer::SLSrSegmentDesc* segmentdesc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(segmentdesc_);
  }
  segmentdesc_ = segmentdesc;
  if (segmentdesc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrSegment.SegmentDesc)
}
inline ::service_layer::SLSrSegmentDesc* SLSrSegment::release_segmentdesc() {
  
  ::service_layer::SLSrSegmentDesc* temp = segmentdesc_;
  segmentdesc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrSegmentDesc* SLSrSegment::unsafe_arena_release_segmentdesc() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrSegment.SegmentDesc)
  
  ::service_layer::SLSrSegmentDesc* temp = segmentdesc_;
  segmentdesc_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrSegmentDesc* SLSrSegment::_internal_mutable_segmentdesc() {
  
  if (segmentdesc_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrSegmentDesc>(GetArenaForAllocation());
    segmentdesc_ = p;
  }
  return segmentdesc_;
}
inline ::service_layer::SLSrSegmentDesc* SLSrSegment::mutable_segmentdesc() {
  ::service_layer::SLSrSegmentDesc* _msg = _internal_mutable_segmentdesc();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrSegment.SegmentDesc)
  return _msg;
}
inline void SLSrSegment::set_allocated_segmentdesc(::service_layer::SLSrSegmentDesc* segmentdesc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete segmentdesc_;
  }
  if (segmentdesc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrSegmentDesc>::GetOwningArena(segmentdesc);
    if (message_arena != submessage_arena) {
      segmentdesc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, segmentdesc, submessage_arena);
    }
    
  } else {
    
  }
  segmentdesc_ = segmentdesc;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrSegment.SegmentDesc)
}

// .service_layer.SLSrv6EndPointBehavior EndPointBehavior = 6;
inline bool SLSrSegment::_internal_has_endpointbehavior() const {
  return this != internal_default_instance() && endpointbehavior_ != nullptr;
}
inline bool SLSrSegment::has_endpointbehavior() const {
  return _internal_has_endpointbehavior();
}
inline void SLSrSegment::clear_endpointbehavior() {
  if (GetArenaForAllocation() == nullptr && endpointbehavior_ != nullptr) {
    delete endpointbehavior_;
  }
  endpointbehavior_ = nullptr;
}
inline const ::service_layer::SLSrv6EndPointBehavior& SLSrSegment::_internal_endpointbehavior() const {
  const ::service_layer::SLSrv6EndPointBehavior* p = endpointbehavior_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrv6EndPointBehavior&>(
      ::service_layer::_SLSrv6EndPointBehavior_default_instance_);
}
inline const ::service_layer::SLSrv6EndPointBehavior& SLSrSegment::endpointbehavior() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegment.EndPointBehavior)
  return _internal_endpointbehavior();
}
inline void SLSrSegment::unsafe_arena_set_allocated_endpointbehavior(
    ::service_layer::SLSrv6EndPointBehavior* endpointbehavior) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endpointbehavior_);
  }
  endpointbehavior_ = endpointbehavior;
  if (endpointbehavior) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrSegment.EndPointBehavior)
}
inline ::service_layer::SLSrv6EndPointBehavior* SLSrSegment::release_endpointbehavior() {
  
  ::service_layer::SLSrv6EndPointBehavior* temp = endpointbehavior_;
  endpointbehavior_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrv6EndPointBehavior* SLSrSegment::unsafe_arena_release_endpointbehavior() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrSegment.EndPointBehavior)
  
  ::service_layer::SLSrv6EndPointBehavior* temp = endpointbehavior_;
  endpointbehavior_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrv6EndPointBehavior* SLSrSegment::_internal_mutable_endpointbehavior() {
  
  if (endpointbehavior_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrv6EndPointBehavior>(GetArenaForAllocation());
    endpointbehavior_ = p;
  }
  return endpointbehavior_;
}
inline ::service_layer::SLSrv6EndPointBehavior* SLSrSegment::mutable_endpointbehavior() {
  ::service_layer::SLSrv6EndPointBehavior* _msg = _internal_mutable_endpointbehavior();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrSegment.EndPointBehavior)
  return _msg;
}
inline void SLSrSegment::set_allocated_endpointbehavior(::service_layer::SLSrv6EndPointBehavior* endpointbehavior) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete endpointbehavior_;
  }
  if (endpointbehavior) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrv6EndPointBehavior>::GetOwningArena(endpointbehavior);
    if (message_arena != submessage_arena) {
      endpointbehavior = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endpointbehavior, submessage_arena);
    }
    
  } else {
    
  }
  endpointbehavior_ = endpointbehavior;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrSegment.EndPointBehavior)
}

// .service_layer.SLSrv6SidStruct SidStruct = 7;
inline bool SLSrSegment::_internal_has_sidstruct() const {
  return this != internal_default_instance() && sidstruct_ != nullptr;
}
inline bool SLSrSegment::has_sidstruct() const {
  return _internal_has_sidstruct();
}
inline void SLSrSegment::clear_sidstruct() {
  if (GetArenaForAllocation() == nullptr && sidstruct_ != nullptr) {
    delete sidstruct_;
  }
  sidstruct_ = nullptr;
}
inline const ::service_layer::SLSrv6SidStruct& SLSrSegment::_internal_sidstruct() const {
  const ::service_layer::SLSrv6SidStruct* p = sidstruct_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrv6SidStruct&>(
      ::service_layer::_SLSrv6SidStruct_default_instance_);
}
inline const ::service_layer::SLSrv6SidStruct& SLSrSegment::sidstruct() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegment.SidStruct)
  return _internal_sidstruct();
}
inline void SLSrSegment::unsafe_arena_set_allocated_sidstruct(
    ::service_layer::SLSrv6SidStruct* sidstruct) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sidstruct_);
  }
  sidstruct_ = sidstruct;
  if (sidstruct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrSegment.SidStruct)
}
inline ::service_layer::SLSrv6SidStruct* SLSrSegment::release_sidstruct() {
  
  ::service_layer::SLSrv6SidStruct* temp = sidstruct_;
  sidstruct_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrv6SidStruct* SLSrSegment::unsafe_arena_release_sidstruct() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrSegment.SidStruct)
  
  ::service_layer::SLSrv6SidStruct* temp = sidstruct_;
  sidstruct_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrv6SidStruct* SLSrSegment::_internal_mutable_sidstruct() {
  
  if (sidstruct_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrv6SidStruct>(GetArenaForAllocation());
    sidstruct_ = p;
  }
  return sidstruct_;
}
inline ::service_layer::SLSrv6SidStruct* SLSrSegment::mutable_sidstruct() {
  ::service_layer::SLSrv6SidStruct* _msg = _internal_mutable_sidstruct();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrSegment.SidStruct)
  return _msg;
}
inline void SLSrSegment::set_allocated_sidstruct(::service_layer::SLSrv6SidStruct* sidstruct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sidstruct_;
  }
  if (sidstruct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrv6SidStruct>::GetOwningArena(sidstruct);
    if (message_arena != submessage_arena) {
      sidstruct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sidstruct, submessage_arena);
    }
    
  } else {
    
  }
  sidstruct_ = sidstruct;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrSegment.SidStruct)
}

inline bool SLSrSegment::has_Sid() const {
  return Sid_case() != SID_NOT_SET;
}
inline void SLSrSegment::clear_has_Sid() {
  _oneof_case_[0] = SID_NOT_SET;
}
inline SLSrSegment::SidCase SLSrSegment::Sid_case() const {
  return SLSrSegment::SidCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLSrv6BindingSid

// uint32 Flags = 1;
inline void SLSrv6BindingSid::clear_flags() {
  flags_ = 0u;
}
inline uint32_t SLSrv6BindingSid::_internal_flags() const {
  return flags_;
}
inline uint32_t SLSrv6BindingSid::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6BindingSid.Flags)
  return _internal_flags();
}
inline void SLSrv6BindingSid::_internal_set_flags(uint32_t value) {
  
  flags_ = value;
}
inline void SLSrv6BindingSid::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrv6BindingSid.Flags)
}

// bytes Bsid = 2;
inline void SLSrv6BindingSid::clear_bsid() {
  bsid_.ClearToEmpty();
}
inline const std::string& SLSrv6BindingSid::bsid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6BindingSid.Bsid)
  return _internal_bsid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLSrv6BindingSid::set_bsid(ArgT0&& arg0, ArgT... args) {
 
 bsid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrv6BindingSid.Bsid)
}
inline std::string* SLSrv6BindingSid::mutable_bsid() {
  std::string* _s = _internal_mutable_bsid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrv6BindingSid.Bsid)
  return _s;
}
inline const std::string& SLSrv6BindingSid::_internal_bsid() const {
  return bsid_.Get();
}
inline void SLSrv6BindingSid::_internal_set_bsid(const std::string& value) {
  
  bsid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrv6BindingSid::_internal_mutable_bsid() {
  
  return bsid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrv6BindingSid::release_bsid() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrv6BindingSid.Bsid)
  return bsid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLSrv6BindingSid::set_allocated_bsid(std::string* bsid) {
  if (bsid != nullptr) {
    
  } else {
    
  }
  bsid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bsid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bsid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrv6BindingSid.Bsid)
}

// bytes SpecifiedBsid = 3;
inline void SLSrv6BindingSid::clear_specifiedbsid() {
  specifiedbsid_.ClearToEmpty();
}
inline const std::string& SLSrv6BindingSid::specifiedbsid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6BindingSid.SpecifiedBsid)
  return _internal_specifiedbsid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLSrv6BindingSid::set_specifiedbsid(ArgT0&& arg0, ArgT... args) {
 
 specifiedbsid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrv6BindingSid.SpecifiedBsid)
}
inline std::string* SLSrv6BindingSid::mutable_specifiedbsid() {
  std::string* _s = _internal_mutable_specifiedbsid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrv6BindingSid.SpecifiedBsid)
  return _s;
}
inline const std::string& SLSrv6BindingSid::_internal_specifiedbsid() const {
  return specifiedbsid_.Get();
}
inline void SLSrv6BindingSid::_internal_set_specifiedbsid(const std::string& value) {
  
  specifiedbsid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrv6BindingSid::_internal_mutable_specifiedbsid() {
  
  return specifiedbsid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrv6BindingSid::release_specifiedbsid() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrv6BindingSid.SpecifiedBsid)
  return specifiedbsid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLSrv6BindingSid::set_allocated_specifiedbsid(std::string* specifiedbsid) {
  if (specifiedbsid != nullptr) {
    
  } else {
    
  }
  specifiedbsid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), specifiedbsid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (specifiedbsid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    specifiedbsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrv6BindingSid.SpecifiedBsid)
}

// .service_layer.SLSrv6EndPointBehavior EndPointBehavior = 4;
inline bool SLSrv6BindingSid::_internal_has_endpointbehavior() const {
  return this != internal_default_instance() && endpointbehavior_ != nullptr;
}
inline bool SLSrv6BindingSid::has_endpointbehavior() const {
  return _internal_has_endpointbehavior();
}
inline void SLSrv6BindingSid::clear_endpointbehavior() {
  if (GetArenaForAllocation() == nullptr && endpointbehavior_ != nullptr) {
    delete endpointbehavior_;
  }
  endpointbehavior_ = nullptr;
}
inline const ::service_layer::SLSrv6EndPointBehavior& SLSrv6BindingSid::_internal_endpointbehavior() const {
  const ::service_layer::SLSrv6EndPointBehavior* p = endpointbehavior_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrv6EndPointBehavior&>(
      ::service_layer::_SLSrv6EndPointBehavior_default_instance_);
}
inline const ::service_layer::SLSrv6EndPointBehavior& SLSrv6BindingSid::endpointbehavior() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6BindingSid.EndPointBehavior)
  return _internal_endpointbehavior();
}
inline void SLSrv6BindingSid::unsafe_arena_set_allocated_endpointbehavior(
    ::service_layer::SLSrv6EndPointBehavior* endpointbehavior) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endpointbehavior_);
  }
  endpointbehavior_ = endpointbehavior;
  if (endpointbehavior) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrv6BindingSid.EndPointBehavior)
}
inline ::service_layer::SLSrv6EndPointBehavior* SLSrv6BindingSid::release_endpointbehavior() {
  
  ::service_layer::SLSrv6EndPointBehavior* temp = endpointbehavior_;
  endpointbehavior_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrv6EndPointBehavior* SLSrv6BindingSid::unsafe_arena_release_endpointbehavior() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrv6BindingSid.EndPointBehavior)
  
  ::service_layer::SLSrv6EndPointBehavior* temp = endpointbehavior_;
  endpointbehavior_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrv6EndPointBehavior* SLSrv6BindingSid::_internal_mutable_endpointbehavior() {
  
  if (endpointbehavior_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrv6EndPointBehavior>(GetArenaForAllocation());
    endpointbehavior_ = p;
  }
  return endpointbehavior_;
}
inline ::service_layer::SLSrv6EndPointBehavior* SLSrv6BindingSid::mutable_endpointbehavior() {
  ::service_layer::SLSrv6EndPointBehavior* _msg = _internal_mutable_endpointbehavior();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrv6BindingSid.EndPointBehavior)
  return _msg;
}
inline void SLSrv6BindingSid::set_allocated_endpointbehavior(::service_layer::SLSrv6EndPointBehavior* endpointbehavior) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete endpointbehavior_;
  }
  if (endpointbehavior) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrv6EndPointBehavior>::GetOwningArena(endpointbehavior);
    if (message_arena != submessage_arena) {
      endpointbehavior = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endpointbehavior, submessage_arena);
    }
    
  } else {
    
  }
  endpointbehavior_ = endpointbehavior;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrv6BindingSid.EndPointBehavior)
}

// .service_layer.SLSrv6SidStruct SidStruct = 5;
inline bool SLSrv6BindingSid::_internal_has_sidstruct() const {
  return this != internal_default_instance() && sidstruct_ != nullptr;
}
inline bool SLSrv6BindingSid::has_sidstruct() const {
  return _internal_has_sidstruct();
}
inline void SLSrv6BindingSid::clear_sidstruct() {
  if (GetArenaForAllocation() == nullptr && sidstruct_ != nullptr) {
    delete sidstruct_;
  }
  sidstruct_ = nullptr;
}
inline const ::service_layer::SLSrv6SidStruct& SLSrv6BindingSid::_internal_sidstruct() const {
  const ::service_layer::SLSrv6SidStruct* p = sidstruct_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrv6SidStruct&>(
      ::service_layer::_SLSrv6SidStruct_default_instance_);
}
inline const ::service_layer::SLSrv6SidStruct& SLSrv6BindingSid::sidstruct() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6BindingSid.SidStruct)
  return _internal_sidstruct();
}
inline void SLSrv6BindingSid::unsafe_arena_set_allocated_sidstruct(
    ::service_layer::SLSrv6SidStruct* sidstruct) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sidstruct_);
  }
  sidstruct_ = sidstruct;
  if (sidstruct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrv6BindingSid.SidStruct)
}
inline ::service_layer::SLSrv6SidStruct* SLSrv6BindingSid::release_sidstruct() {
  
  ::service_layer::SLSrv6SidStruct* temp = sidstruct_;
  sidstruct_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrv6SidStruct* SLSrv6BindingSid::unsafe_arena_release_sidstruct() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrv6BindingSid.SidStruct)
  
  ::service_layer::SLSrv6SidStruct* temp = sidstruct_;
  sidstruct_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrv6SidStruct* SLSrv6BindingSid::_internal_mutable_sidstruct() {
  
  if (sidstruct_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrv6SidStruct>(GetArenaForAllocation());
    sidstruct_ = p;
  }
  return sidstruct_;
}
inline ::service_layer::SLSrv6SidStruct* SLSrv6BindingSid::mutable_sidstruct() {
  ::service_layer::SLSrv6SidStruct* _msg = _internal_mutable_sidstruct();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrv6BindingSid.SidStruct)
  return _msg;
}
inline void SLSrv6BindingSid::set_allocated_sidstruct(::service_layer::SLSrv6SidStruct* sidstruct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sidstruct_;
  }
  if (sidstruct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrv6SidStruct>::GetOwningArena(sidstruct);
    if (message_arena != submessage_arena) {
      sidstruct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sidstruct, submessage_arena);
    }
    
  } else {
    
  }
  sidstruct_ = sidstruct;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrv6BindingSid.SidStruct)
}

// -------------------------------------------------------------------

// SLSrv6EndPointBehavior

// uint32 EndPointBehavior = 1;
inline void SLSrv6EndPointBehavior::clear_endpointbehavior() {
  endpointbehavior_ = 0u;
}
inline uint32_t SLSrv6EndPointBehavior::_internal_endpointbehavior() const {
  return endpointbehavior_;
}
inline uint32_t SLSrv6EndPointBehavior::endpointbehavior() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6EndPointBehavior.EndPointBehavior)
  return _internal_endpointbehavior();
}
inline void SLSrv6EndPointBehavior::_internal_set_endpointbehavior(uint32_t value) {
  
  endpointbehavior_ = value;
}
inline void SLSrv6EndPointBehavior::set_endpointbehavior(uint32_t value) {
  _internal_set_endpointbehavior(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrv6EndPointBehavior.EndPointBehavior)
}

// uint32 Flags = 2;
inline void SLSrv6EndPointBehavior::clear_flags() {
  flags_ = 0u;
}
inline uint32_t SLSrv6EndPointBehavior::_internal_flags() const {
  return flags_;
}
inline uint32_t SLSrv6EndPointBehavior::flags() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6EndPointBehavior.Flags)
  return _internal_flags();
}
inline void SLSrv6EndPointBehavior::_internal_set_flags(uint32_t value) {
  
  flags_ = value;
}
inline void SLSrv6EndPointBehavior::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrv6EndPointBehavior.Flags)
}

// uint32 Algorithm = 3;
inline void SLSrv6EndPointBehavior::clear_algorithm() {
  algorithm_ = 0u;
}
inline uint32_t SLSrv6EndPointBehavior::_internal_algorithm() const {
  return algorithm_;
}
inline uint32_t SLSrv6EndPointBehavior::algorithm() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6EndPointBehavior.Algorithm)
  return _internal_algorithm();
}
inline void SLSrv6EndPointBehavior::_internal_set_algorithm(uint32_t value) {
  
  algorithm_ = value;
}
inline void SLSrv6EndPointBehavior::set_algorithm(uint32_t value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrv6EndPointBehavior.Algorithm)
}

// -------------------------------------------------------------------

// SLSrv6SidStruct

// uint32 LocatorBlockLen = 1;
inline void SLSrv6SidStruct::clear_locatorblocklen() {
  locatorblocklen_ = 0u;
}
inline uint32_t SLSrv6SidStruct::_internal_locatorblocklen() const {
  return locatorblocklen_;
}
inline uint32_t SLSrv6SidStruct::locatorblocklen() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6SidStruct.LocatorBlockLen)
  return _internal_locatorblocklen();
}
inline void SLSrv6SidStruct::_internal_set_locatorblocklen(uint32_t value) {
  
  locatorblocklen_ = value;
}
inline void SLSrv6SidStruct::set_locatorblocklen(uint32_t value) {
  _internal_set_locatorblocklen(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrv6SidStruct.LocatorBlockLen)
}

// uint32 LocatorNodeLen = 2;
inline void SLSrv6SidStruct::clear_locatornodelen() {
  locatornodelen_ = 0u;
}
inline uint32_t SLSrv6SidStruct::_internal_locatornodelen() const {
  return locatornodelen_;
}
inline uint32_t SLSrv6SidStruct::locatornodelen() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6SidStruct.LocatorNodeLen)
  return _internal_locatornodelen();
}
inline void SLSrv6SidStruct::_internal_set_locatornodelen(uint32_t value) {
  
  locatornodelen_ = value;
}
inline void SLSrv6SidStruct::set_locatornodelen(uint32_t value) {
  _internal_set_locatornodelen(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrv6SidStruct.LocatorNodeLen)
}

// uint32 FunctionLen = 3;
inline void SLSrv6SidStruct::clear_functionlen() {
  functionlen_ = 0u;
}
inline uint32_t SLSrv6SidStruct::_internal_functionlen() const {
  return functionlen_;
}
inline uint32_t SLSrv6SidStruct::functionlen() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6SidStruct.FunctionLen)
  return _internal_functionlen();
}
inline void SLSrv6SidStruct::_internal_set_functionlen(uint32_t value) {
  
  functionlen_ = value;
}
inline void SLSrv6SidStruct::set_functionlen(uint32_t value) {
  _internal_set_functionlen(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrv6SidStruct.FunctionLen)
}

// uint32 ArgLen = 4;
inline void SLSrv6SidStruct::clear_arglen() {
  arglen_ = 0u;
}
inline uint32_t SLSrv6SidStruct::_internal_arglen() const {
  return arglen_;
}
inline uint32_t SLSrv6SidStruct::arglen() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6SidStruct.ArgLen)
  return _internal_arglen();
}
inline void SLSrv6SidStruct::_internal_set_arglen(uint32_t value) {
  
  arglen_ = value;
}
inline void SLSrv6SidStruct::set_arglen(uint32_t value) {
  _internal_set_arglen(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrv6SidStruct.ArgLen)
}

// -------------------------------------------------------------------

// SLSrMetricBounds

// uint32 igp = 1;
inline void SLSrMetricBounds::clear_igp() {
  igp_ = 0u;
}
inline uint32_t SLSrMetricBounds::_internal_igp() const {
  return igp_;
}
inline uint32_t SLSrMetricBounds::igp() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrMetricBounds.igp)
  return _internal_igp();
}
inline void SLSrMetricBounds::_internal_set_igp(uint32_t value) {
  
  igp_ = value;
}
inline void SLSrMetricBounds::set_igp(uint32_t value) {
  _internal_set_igp(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrMetricBounds.igp)
}

// uint32 te = 2;
inline void SLSrMetricBounds::clear_te() {
  te_ = 0u;
}
inline uint32_t SLSrMetricBounds::_internal_te() const {
  return te_;
}
inline uint32_t SLSrMetricBounds::te() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrMetricBounds.te)
  return _internal_te();
}
inline void SLSrMetricBounds::_internal_set_te(uint32_t value) {
  
  te_ = value;
}
inline void SLSrMetricBounds::set_te(uint32_t value) {
  _internal_set_te(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrMetricBounds.te)
}

// uint32 latency = 3;
inline void SLSrMetricBounds::clear_latency() {
  latency_ = 0u;
}
inline uint32_t SLSrMetricBounds::_internal_latency() const {
  return latency_;
}
inline uint32_t SLSrMetricBounds::latency() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrMetricBounds.latency)
  return _internal_latency();
}
inline void SLSrMetricBounds::_internal_set_latency(uint32_t value) {
  
  latency_ = value;
}
inline void SLSrMetricBounds::set_latency(uint32_t value) {
  _internal_set_latency(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrMetricBounds.latency)
}

// -------------------------------------------------------------------

// SLSrMetricMargin

// .service_layer.SLSrMetricMargin.MarginType type = 1;
inline void SLSrMetricMargin::clear_type() {
  type_ = 0;
}
inline ::service_layer::SLSrMetricMargin_MarginType SLSrMetricMargin::_internal_type() const {
  return static_cast< ::service_layer::SLSrMetricMargin_MarginType >(type_);
}
inline ::service_layer::SLSrMetricMargin_MarginType SLSrMetricMargin::type() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrMetricMargin.type)
  return _internal_type();
}
inline void SLSrMetricMargin::_internal_set_type(::service_layer::SLSrMetricMargin_MarginType value) {
  
  type_ = value;
}
inline void SLSrMetricMargin::set_type(::service_layer::SLSrMetricMargin_MarginType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrMetricMargin.type)
}

// uint32 value = 2;
inline void SLSrMetricMargin::clear_value() {
  value_ = 0u;
}
inline uint32_t SLSrMetricMargin::_internal_value() const {
  return value_;
}
inline uint32_t SLSrMetricMargin::value() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrMetricMargin.value)
  return _internal_value();
}
inline void SLSrMetricMargin::_internal_set_value(uint32_t value) {
  
  value_ = value;
}
inline void SLSrMetricMargin::set_value(uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrMetricMargin.value)
}

// -------------------------------------------------------------------

// SLSrAffinities

// repeated uint32 includeAny = 1;
inline int SLSrAffinities::_internal_includeany_size() const {
  return includeany_.size();
}
inline int SLSrAffinities::includeany_size() const {
  return _internal_includeany_size();
}
inline void SLSrAffinities::clear_includeany() {
  includeany_.Clear();
}
inline uint32_t SLSrAffinities::_internal_includeany(int index) const {
  return includeany_.Get(index);
}
inline uint32_t SLSrAffinities::includeany(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrAffinities.includeAny)
  return _internal_includeany(index);
}
inline void SLSrAffinities::set_includeany(int index, uint32_t value) {
  includeany_.Set(index, value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrAffinities.includeAny)
}
inline void SLSrAffinities::_internal_add_includeany(uint32_t value) {
  includeany_.Add(value);
}
inline void SLSrAffinities::add_includeany(uint32_t value) {
  _internal_add_includeany(value);
  // @@protoc_insertion_point(field_add:service_layer.SLSrAffinities.includeAny)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLSrAffinities::_internal_includeany() const {
  return includeany_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLSrAffinities::includeany() const {
  // @@protoc_insertion_point(field_list:service_layer.SLSrAffinities.includeAny)
  return _internal_includeany();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLSrAffinities::_internal_mutable_includeany() {
  return &includeany_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLSrAffinities::mutable_includeany() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLSrAffinities.includeAny)
  return _internal_mutable_includeany();
}

// repeated uint32 includeAll = 2;
inline int SLSrAffinities::_internal_includeall_size() const {
  return includeall_.size();
}
inline int SLSrAffinities::includeall_size() const {
  return _internal_includeall_size();
}
inline void SLSrAffinities::clear_includeall() {
  includeall_.Clear();
}
inline uint32_t SLSrAffinities::_internal_includeall(int index) const {
  return includeall_.Get(index);
}
inline uint32_t SLSrAffinities::includeall(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrAffinities.includeAll)
  return _internal_includeall(index);
}
inline void SLSrAffinities::set_includeall(int index, uint32_t value) {
  includeall_.Set(index, value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrAffinities.includeAll)
}
inline void SLSrAffinities::_internal_add_includeall(uint32_t value) {
  includeall_.Add(value);
}
inline void SLSrAffinities::add_includeall(uint32_t value) {
  _internal_add_includeall(value);
  // @@protoc_insertion_point(field_add:service_layer.SLSrAffinities.includeAll)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLSrAffinities::_internal_includeall() const {
  return includeall_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLSrAffinities::includeall() const {
  // @@protoc_insertion_point(field_list:service_layer.SLSrAffinities.includeAll)
  return _internal_includeall();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLSrAffinities::_internal_mutable_includeall() {
  return &includeall_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLSrAffinities::mutable_includeall() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLSrAffinities.includeAll)
  return _internal_mutable_includeall();
}

// repeated uint32 excludeAny = 3;
inline int SLSrAffinities::_internal_excludeany_size() const {
  return excludeany_.size();
}
inline int SLSrAffinities::excludeany_size() const {
  return _internal_excludeany_size();
}
inline void SLSrAffinities::clear_excludeany() {
  excludeany_.Clear();
}
inline uint32_t SLSrAffinities::_internal_excludeany(int index) const {
  return excludeany_.Get(index);
}
inline uint32_t SLSrAffinities::excludeany(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrAffinities.excludeAny)
  return _internal_excludeany(index);
}
inline void SLSrAffinities::set_excludeany(int index, uint32_t value) {
  excludeany_.Set(index, value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrAffinities.excludeAny)
}
inline void SLSrAffinities::_internal_add_excludeany(uint32_t value) {
  excludeany_.Add(value);
}
inline void SLSrAffinities::add_excludeany(uint32_t value) {
  _internal_add_excludeany(value);
  // @@protoc_insertion_point(field_add:service_layer.SLSrAffinities.excludeAny)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLSrAffinities::_internal_excludeany() const {
  return excludeany_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SLSrAffinities::excludeany() const {
  // @@protoc_insertion_point(field_list:service_layer.SLSrAffinities.excludeAny)
  return _internal_excludeany();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLSrAffinities::_internal_mutable_excludeany() {
  return &excludeany_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SLSrAffinities::mutable_excludeany() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLSrAffinities.excludeAny)
  return _internal_mutable_excludeany();
}

// -------------------------------------------------------------------

// SLSrteSegment_TypeA

// uint32 label = 1;
inline void SLSrteSegment_TypeA::clear_label() {
  label_ = 0u;
}
inline uint32_t SLSrteSegment_TypeA::_internal_label() const {
  return label_;
}
inline uint32_t SLSrteSegment_TypeA::label() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrteSegment.TypeA.label)
  return _internal_label();
}
inline void SLSrteSegment_TypeA::_internal_set_label(uint32_t value) {
  
  label_ = value;
}
inline void SLSrteSegment_TypeA::set_label(uint32_t value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrteSegment.TypeA.label)
}

// -------------------------------------------------------------------

// SLSrteSegment_TypeB

// .service_layer.SLIpAddress ipv6_sid_address = 1;
inline bool SLSrteSegment_TypeB::_internal_has_ipv6_sid_address() const {
  return this != internal_default_instance() && ipv6_sid_address_ != nullptr;
}
inline bool SLSrteSegment_TypeB::has_ipv6_sid_address() const {
  return _internal_has_ipv6_sid_address();
}
inline const ::service_layer::SLIpAddress& SLSrteSegment_TypeB::_internal_ipv6_sid_address() const {
  const ::service_layer::SLIpAddress* p = ipv6_sid_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLIpAddress&>(
      ::service_layer::_SLIpAddress_default_instance_);
}
inline const ::service_layer::SLIpAddress& SLSrteSegment_TypeB::ipv6_sid_address() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrteSegment.TypeB.ipv6_sid_address)
  return _internal_ipv6_sid_address();
}
inline void SLSrteSegment_TypeB::unsafe_arena_set_allocated_ipv6_sid_address(
    ::service_layer::SLIpAddress* ipv6_sid_address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ipv6_sid_address_);
  }
  ipv6_sid_address_ = ipv6_sid_address;
  if (ipv6_sid_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrteSegment.TypeB.ipv6_sid_address)
}
inline ::service_layer::SLIpAddress* SLSrteSegment_TypeB::release_ipv6_sid_address() {
  
  ::service_layer::SLIpAddress* temp = ipv6_sid_address_;
  ipv6_sid_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLIpAddress* SLSrteSegment_TypeB::unsafe_arena_release_ipv6_sid_address() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrteSegment.TypeB.ipv6_sid_address)
  
  ::service_layer::SLIpAddress* temp = ipv6_sid_address_;
  ipv6_sid_address_ = nullptr;
  return temp;
}
inline ::service_layer::SLIpAddress* SLSrteSegment_TypeB::_internal_mutable_ipv6_sid_address() {
  
  if (ipv6_sid_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLIpAddress>(GetArenaForAllocation());
    ipv6_sid_address_ = p;
  }
  return ipv6_sid_address_;
}
inline ::service_layer::SLIpAddress* SLSrteSegment_TypeB::mutable_ipv6_sid_address() {
  ::service_layer::SLIpAddress* _msg = _internal_mutable_ipv6_sid_address();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrteSegment.TypeB.ipv6_sid_address)
  return _msg;
}
inline void SLSrteSegment_TypeB::set_allocated_ipv6_sid_address(::service_layer::SLIpAddress* ipv6_sid_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ipv6_sid_address_);
  }
  if (ipv6_sid_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ipv6_sid_address));
    if (message_arena != submessage_arena) {
      ipv6_sid_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ipv6_sid_address, submessage_arena);
    }
    
  } else {
    
  }
  ipv6_sid_address_ = ipv6_sid_address;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrteSegment.TypeB.ipv6_sid_address)
}

// uint32 behavior = 2;
inline void SLSrteSegment_TypeB::clear_behavior() {
  behavior_ = 0u;
}
inline uint32_t SLSrteSegment_TypeB::_internal_behavior() const {
  return behavior_;
}
inline uint32_t SLSrteSegment_TypeB::behavior() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrteSegment.TypeB.behavior)
  return _internal_behavior();
}
inline void SLSrteSegment_TypeB::_internal_set_behavior(uint32_t value) {
  
  behavior_ = value;
}
inline void SLSrteSegment_TypeB::set_behavior(uint32_t value) {
  _internal_set_behavior(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrteSegment.TypeB.behavior)
}

// .service_layer.SLSrv6SidStruct structure = 3;
inline bool SLSrteSegment_TypeB::_internal_has_structure() const {
  return this != internal_default_instance() && structure_ != nullptr;
}
inline bool SLSrteSegment_TypeB::has_structure() const {
  return _internal_has_structure();
}
inline void SLSrteSegment_TypeB::clear_structure() {
  if (GetArenaForAllocation() == nullptr && structure_ != nullptr) {
    delete structure_;
  }
  structure_ = nullptr;
}
inline const ::service_layer::SLSrv6SidStruct& SLSrteSegment_TypeB::_internal_structure() const {
  const ::service_layer::SLSrv6SidStruct* p = structure_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrv6SidStruct&>(
      ::service_layer::_SLSrv6SidStruct_default_instance_);
}
inline const ::service_layer::SLSrv6SidStruct& SLSrteSegment_TypeB::structure() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrteSegment.TypeB.structure)
  return _internal_structure();
}
inline void SLSrteSegment_TypeB::unsafe_arena_set_allocated_structure(
    ::service_layer::SLSrv6SidStruct* structure) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(structure_);
  }
  structure_ = structure;
  if (structure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrteSegment.TypeB.structure)
}
inline ::service_layer::SLSrv6SidStruct* SLSrteSegment_TypeB::release_structure() {
  
  ::service_layer::SLSrv6SidStruct* temp = structure_;
  structure_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrv6SidStruct* SLSrteSegment_TypeB::unsafe_arena_release_structure() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrteSegment.TypeB.structure)
  
  ::service_layer::SLSrv6SidStruct* temp = structure_;
  structure_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrv6SidStruct* SLSrteSegment_TypeB::_internal_mutable_structure() {
  
  if (structure_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrv6SidStruct>(GetArenaForAllocation());
    structure_ = p;
  }
  return structure_;
}
inline ::service_layer::SLSrv6SidStruct* SLSrteSegment_TypeB::mutable_structure() {
  ::service_layer::SLSrv6SidStruct* _msg = _internal_mutable_structure();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrteSegment.TypeB.structure)
  return _msg;
}
inline void SLSrteSegment_TypeB::set_allocated_structure(::service_layer::SLSrv6SidStruct* structure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete structure_;
  }
  if (structure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrv6SidStruct>::GetOwningArena(structure);
    if (message_arena != submessage_arena) {
      structure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, structure, submessage_arena);
    }
    
  } else {
    
  }
  structure_ = structure;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrteSegment.TypeB.structure)
}

// -------------------------------------------------------------------

// SLSrteSegment

// .service_layer.SLSrteSegment.TypeA type_a = 1;
inline bool SLSrteSegment::_internal_has_type_a() const {
  return segment_case() == kTypeA;
}
inline bool SLSrteSegment::has_type_a() const {
  return _internal_has_type_a();
}
inline void SLSrteSegment::set_has_type_a() {
  _oneof_case_[0] = kTypeA;
}
inline void SLSrteSegment::clear_type_a() {
  if (_internal_has_type_a()) {
    if (GetArenaForAllocation() == nullptr) {
      delete segment_.type_a_;
    }
    clear_has_segment();
  }
}
inline ::service_layer::SLSrteSegment_TypeA* SLSrteSegment::release_type_a() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrteSegment.type_a)
  if (_internal_has_type_a()) {
    clear_has_segment();
      ::service_layer::SLSrteSegment_TypeA* temp = segment_.type_a_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    segment_.type_a_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLSrteSegment_TypeA& SLSrteSegment::_internal_type_a() const {
  return _internal_has_type_a()
      ? *segment_.type_a_
      : reinterpret_cast< ::service_layer::SLSrteSegment_TypeA&>(::service_layer::_SLSrteSegment_TypeA_default_instance_);
}
inline const ::service_layer::SLSrteSegment_TypeA& SLSrteSegment::type_a() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrteSegment.type_a)
  return _internal_type_a();
}
inline ::service_layer::SLSrteSegment_TypeA* SLSrteSegment::unsafe_arena_release_type_a() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLSrteSegment.type_a)
  if (_internal_has_type_a()) {
    clear_has_segment();
    ::service_layer::SLSrteSegment_TypeA* temp = segment_.type_a_;
    segment_.type_a_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLSrteSegment::unsafe_arena_set_allocated_type_a(::service_layer::SLSrteSegment_TypeA* type_a) {
  clear_segment();
  if (type_a) {
    set_has_type_a();
    segment_.type_a_ = type_a;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrteSegment.type_a)
}
inline ::service_layer::SLSrteSegment_TypeA* SLSrteSegment::_internal_mutable_type_a() {
  if (!_internal_has_type_a()) {
    clear_segment();
    set_has_type_a();
    segment_.type_a_ = CreateMaybeMessage< ::service_layer::SLSrteSegment_TypeA >(GetArenaForAllocation());
  }
  return segment_.type_a_;
}
inline ::service_layer::SLSrteSegment_TypeA* SLSrteSegment::mutable_type_a() {
  ::service_layer::SLSrteSegment_TypeA* _msg = _internal_mutable_type_a();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrteSegment.type_a)
  return _msg;
}

// .service_layer.SLSrteSegment.TypeB type_b = 2;
inline bool SLSrteSegment::_internal_has_type_b() const {
  return segment_case() == kTypeB;
}
inline bool SLSrteSegment::has_type_b() const {
  return _internal_has_type_b();
}
inline void SLSrteSegment::set_has_type_b() {
  _oneof_case_[0] = kTypeB;
}
inline void SLSrteSegment::clear_type_b() {
  if (_internal_has_type_b()) {
    if (GetArenaForAllocation() == nullptr) {
      delete segment_.type_b_;
    }
    clear_has_segment();
  }
}
inline ::service_layer::SLSrteSegment_TypeB* SLSrteSegment::release_type_b() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrteSegment.type_b)
  if (_internal_has_type_b()) {
    clear_has_segment();
      ::service_layer::SLSrteSegment_TypeB* temp = segment_.type_b_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    segment_.type_b_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLSrteSegment_TypeB& SLSrteSegment::_internal_type_b() const {
  return _internal_has_type_b()
      ? *segment_.type_b_
      : reinterpret_cast< ::service_layer::SLSrteSegment_TypeB&>(::service_layer::_SLSrteSegment_TypeB_default_instance_);
}
inline const ::service_layer::SLSrteSegment_TypeB& SLSrteSegment::type_b() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrteSegment.type_b)
  return _internal_type_b();
}
inline ::service_layer::SLSrteSegment_TypeB* SLSrteSegment::unsafe_arena_release_type_b() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLSrteSegment.type_b)
  if (_internal_has_type_b()) {
    clear_has_segment();
    ::service_layer::SLSrteSegment_TypeB* temp = segment_.type_b_;
    segment_.type_b_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLSrteSegment::unsafe_arena_set_allocated_type_b(::service_layer::SLSrteSegment_TypeB* type_b) {
  clear_segment();
  if (type_b) {
    set_has_type_b();
    segment_.type_b_ = type_b;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrteSegment.type_b)
}
inline ::service_layer::SLSrteSegment_TypeB* SLSrteSegment::_internal_mutable_type_b() {
  if (!_internal_has_type_b()) {
    clear_segment();
    set_has_type_b();
    segment_.type_b_ = CreateMaybeMessage< ::service_layer::SLSrteSegment_TypeB >(GetArenaForAllocation());
  }
  return segment_.type_b_;
}
inline ::service_layer::SLSrteSegment_TypeB* SLSrteSegment::mutable_type_b() {
  ::service_layer::SLSrteSegment_TypeB* _msg = _internal_mutable_type_b();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrteSegment.type_b)
  return _msg;
}

inline bool SLSrteSegment::has_segment() const {
  return segment_case() != SEGMENT_NOT_SET;
}
inline void SLSrteSegment::clear_has_segment() {
  _oneof_case_[0] = SEGMENT_NOT_SET;
}
inline SLSrteSegment::SegmentCase SLSrteSegment::segment_case() const {
  return SLSrteSegment::SegmentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLSrSegmentList

// repeated .service_layer.SLSrteSegment segments = 1;
inline int SLSrSegmentList::_internal_segments_size() const {
  return segments_.size();
}
inline int SLSrSegmentList::segments_size() const {
  return _internal_segments_size();
}
inline void SLSrSegmentList::clear_segments() {
  segments_.Clear();
}
inline ::service_layer::SLSrteSegment* SLSrSegmentList::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrSegmentList.segments)
  return segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrteSegment >*
SLSrSegmentList::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLSrSegmentList.segments)
  return &segments_;
}
inline const ::service_layer::SLSrteSegment& SLSrSegmentList::_internal_segments(int index) const {
  return segments_.Get(index);
}
inline const ::service_layer::SLSrteSegment& SLSrSegmentList::segments(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegmentList.segments)
  return _internal_segments(index);
}
inline ::service_layer::SLSrteSegment* SLSrSegmentList::_internal_add_segments() {
  return segments_.Add();
}
inline ::service_layer::SLSrteSegment* SLSrSegmentList::add_segments() {
  ::service_layer::SLSrteSegment* _add = _internal_add_segments();
  // @@protoc_insertion_point(field_add:service_layer.SLSrSegmentList.segments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrteSegment >&
SLSrSegmentList::segments() const {
  // @@protoc_insertion_point(field_list:service_layer.SLSrSegmentList.segments)
  return segments_;
}

// optional uint32 weight = 2;
inline bool SLSrSegmentList::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SLSrSegmentList::has_weight() const {
  return _internal_has_weight();
}
inline void SLSrSegmentList::clear_weight() {
  weight_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t SLSrSegmentList::_internal_weight() const {
  return weight_;
}
inline uint32_t SLSrSegmentList::weight() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegmentList.weight)
  return _internal_weight();
}
inline void SLSrSegmentList::_internal_set_weight(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  weight_ = value;
}
inline void SLSrSegmentList::set_weight(uint32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegmentList.weight)
}

// uint32 path_cost = 3;
inline void SLSrSegmentList::clear_path_cost() {
  path_cost_ = 0u;
}
inline uint32_t SLSrSegmentList::_internal_path_cost() const {
  return path_cost_;
}
inline uint32_t SLSrSegmentList::path_cost() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSegmentList.path_cost)
  return _internal_path_cost();
}
inline void SLSrSegmentList::_internal_set_path_cost(uint32_t value) {
  
  path_cost_ = value;
}
inline void SLSrSegmentList::set_path_cost(uint32_t value) {
  _internal_set_path_cost(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrSegmentList.path_cost)
}

// -------------------------------------------------------------------

// SLSrPolicyKey

// .service_layer.SLIpAddress headend = 1;
inline bool SLSrPolicyKey::_internal_has_headend() const {
  return this != internal_default_instance() && headend_ != nullptr;
}
inline bool SLSrPolicyKey::has_headend() const {
  return _internal_has_headend();
}
inline const ::service_layer::SLIpAddress& SLSrPolicyKey::_internal_headend() const {
  const ::service_layer::SLIpAddress* p = headend_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLIpAddress&>(
      ::service_layer::_SLIpAddress_default_instance_);
}
inline const ::service_layer::SLIpAddress& SLSrPolicyKey::headend() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyKey.headend)
  return _internal_headend();
}
inline void SLSrPolicyKey::unsafe_arena_set_allocated_headend(
    ::service_layer::SLIpAddress* headend) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(headend_);
  }
  headend_ = headend;
  if (headend) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrPolicyKey.headend)
}
inline ::service_layer::SLIpAddress* SLSrPolicyKey::release_headend() {
  
  ::service_layer::SLIpAddress* temp = headend_;
  headend_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLIpAddress* SLSrPolicyKey::unsafe_arena_release_headend() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrPolicyKey.headend)
  
  ::service_layer::SLIpAddress* temp = headend_;
  headend_ = nullptr;
  return temp;
}
inline ::service_layer::SLIpAddress* SLSrPolicyKey::_internal_mutable_headend() {
  
  if (headend_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLIpAddress>(GetArenaForAllocation());
    headend_ = p;
  }
  return headend_;
}
inline ::service_layer::SLIpAddress* SLSrPolicyKey::mutable_headend() {
  ::service_layer::SLIpAddress* _msg = _internal_mutable_headend();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrPolicyKey.headend)
  return _msg;
}
inline void SLSrPolicyKey::set_allocated_headend(::service_layer::SLIpAddress* headend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(headend_);
  }
  if (headend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(headend));
    if (message_arena != submessage_arena) {
      headend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, headend, submessage_arena);
    }
    
  } else {
    
  }
  headend_ = headend;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrPolicyKey.headend)
}

// uint32 color = 2;
inline void SLSrPolicyKey::clear_color() {
  color_ = 0u;
}
inline uint32_t SLSrPolicyKey::_internal_color() const {
  return color_;
}
inline uint32_t SLSrPolicyKey::color() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyKey.color)
  return _internal_color();
}
inline void SLSrPolicyKey::_internal_set_color(uint32_t value) {
  
  color_ = value;
}
inline void SLSrPolicyKey::set_color(uint32_t value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrPolicyKey.color)
}

// .service_layer.SLIpAddress endpoint = 3;
inline bool SLSrPolicyKey::_internal_has_endpoint() const {
  return this != internal_default_instance() && endpoint_ != nullptr;
}
inline bool SLSrPolicyKey::has_endpoint() const {
  return _internal_has_endpoint();
}
inline const ::service_layer::SLIpAddress& SLSrPolicyKey::_internal_endpoint() const {
  const ::service_layer::SLIpAddress* p = endpoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLIpAddress&>(
      ::service_layer::_SLIpAddress_default_instance_);
}
inline const ::service_layer::SLIpAddress& SLSrPolicyKey::endpoint() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyKey.endpoint)
  return _internal_endpoint();
}
inline void SLSrPolicyKey::unsafe_arena_set_allocated_endpoint(
    ::service_layer::SLIpAddress* endpoint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endpoint_);
  }
  endpoint_ = endpoint;
  if (endpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrPolicyKey.endpoint)
}
inline ::service_layer::SLIpAddress* SLSrPolicyKey::release_endpoint() {
  
  ::service_layer::SLIpAddress* temp = endpoint_;
  endpoint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLIpAddress* SLSrPolicyKey::unsafe_arena_release_endpoint() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrPolicyKey.endpoint)
  
  ::service_layer::SLIpAddress* temp = endpoint_;
  endpoint_ = nullptr;
  return temp;
}
inline ::service_layer::SLIpAddress* SLSrPolicyKey::_internal_mutable_endpoint() {
  
  if (endpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLIpAddress>(GetArenaForAllocation());
    endpoint_ = p;
  }
  return endpoint_;
}
inline ::service_layer::SLIpAddress* SLSrPolicyKey::mutable_endpoint() {
  ::service_layer::SLIpAddress* _msg = _internal_mutable_endpoint();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrPolicyKey.endpoint)
  return _msg;
}
inline void SLSrPolicyKey::set_allocated_endpoint(::service_layer::SLIpAddress* endpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(endpoint_);
  }
  if (endpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endpoint));
    if (message_arena != submessage_arena) {
      endpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endpoint, submessage_arena);
    }
    
  } else {
    
  }
  endpoint_ = endpoint;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrPolicyKey.endpoint)
}

// -------------------------------------------------------------------

// SLSrCandidatePathKey_Originator

// uint32 asn = 1;
inline void SLSrCandidatePathKey_Originator::clear_asn() {
  asn_ = 0u;
}
inline uint32_t SLSrCandidatePathKey_Originator::_internal_asn() const {
  return asn_;
}
inline uint32_t SLSrCandidatePathKey_Originator::asn() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrCandidatePathKey.Originator.asn)
  return _internal_asn();
}
inline void SLSrCandidatePathKey_Originator::_internal_set_asn(uint32_t value) {
  
  asn_ = value;
}
inline void SLSrCandidatePathKey_Originator::set_asn(uint32_t value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrCandidatePathKey.Originator.asn)
}

// .service_layer.SLIpAddress nodeID = 2;
inline bool SLSrCandidatePathKey_Originator::_internal_has_nodeid() const {
  return this != internal_default_instance() && nodeid_ != nullptr;
}
inline bool SLSrCandidatePathKey_Originator::has_nodeid() const {
  return _internal_has_nodeid();
}
inline const ::service_layer::SLIpAddress& SLSrCandidatePathKey_Originator::_internal_nodeid() const {
  const ::service_layer::SLIpAddress* p = nodeid_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLIpAddress&>(
      ::service_layer::_SLIpAddress_default_instance_);
}
inline const ::service_layer::SLIpAddress& SLSrCandidatePathKey_Originator::nodeid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrCandidatePathKey.Originator.nodeID)
  return _internal_nodeid();
}
inline void SLSrCandidatePathKey_Originator::unsafe_arena_set_allocated_nodeid(
    ::service_layer::SLIpAddress* nodeid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nodeid_);
  }
  nodeid_ = nodeid;
  if (nodeid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrCandidatePathKey.Originator.nodeID)
}
inline ::service_layer::SLIpAddress* SLSrCandidatePathKey_Originator::release_nodeid() {
  
  ::service_layer::SLIpAddress* temp = nodeid_;
  nodeid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLIpAddress* SLSrCandidatePathKey_Originator::unsafe_arena_release_nodeid() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrCandidatePathKey.Originator.nodeID)
  
  ::service_layer::SLIpAddress* temp = nodeid_;
  nodeid_ = nullptr;
  return temp;
}
inline ::service_layer::SLIpAddress* SLSrCandidatePathKey_Originator::_internal_mutable_nodeid() {
  
  if (nodeid_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLIpAddress>(GetArenaForAllocation());
    nodeid_ = p;
  }
  return nodeid_;
}
inline ::service_layer::SLIpAddress* SLSrCandidatePathKey_Originator::mutable_nodeid() {
  ::service_layer::SLIpAddress* _msg = _internal_mutable_nodeid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrCandidatePathKey.Originator.nodeID)
  return _msg;
}
inline void SLSrCandidatePathKey_Originator::set_allocated_nodeid(::service_layer::SLIpAddress* nodeid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(nodeid_);
  }
  if (nodeid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nodeid));
    if (message_arena != submessage_arena) {
      nodeid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nodeid, submessage_arena);
    }
    
  } else {
    
  }
  nodeid_ = nodeid;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrCandidatePathKey.Originator.nodeID)
}

// -------------------------------------------------------------------

// SLSrCandidatePathKey

// .service_layer.SLSrCandidatePathKey.Originator originator = 1;
inline bool SLSrCandidatePathKey::_internal_has_originator() const {
  return this != internal_default_instance() && originator_ != nullptr;
}
inline bool SLSrCandidatePathKey::has_originator() const {
  return _internal_has_originator();
}
inline void SLSrCandidatePathKey::clear_originator() {
  if (GetArenaForAllocation() == nullptr && originator_ != nullptr) {
    delete originator_;
  }
  originator_ = nullptr;
}
inline const ::service_layer::SLSrCandidatePathKey_Originator& SLSrCandidatePathKey::_internal_originator() const {
  const ::service_layer::SLSrCandidatePathKey_Originator* p = originator_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrCandidatePathKey_Originator&>(
      ::service_layer::_SLSrCandidatePathKey_Originator_default_instance_);
}
inline const ::service_layer::SLSrCandidatePathKey_Originator& SLSrCandidatePathKey::originator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrCandidatePathKey.originator)
  return _internal_originator();
}
inline void SLSrCandidatePathKey::unsafe_arena_set_allocated_originator(
    ::service_layer::SLSrCandidatePathKey_Originator* originator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(originator_);
  }
  originator_ = originator;
  if (originator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrCandidatePathKey.originator)
}
inline ::service_layer::SLSrCandidatePathKey_Originator* SLSrCandidatePathKey::release_originator() {
  
  ::service_layer::SLSrCandidatePathKey_Originator* temp = originator_;
  originator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrCandidatePathKey_Originator* SLSrCandidatePathKey::unsafe_arena_release_originator() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrCandidatePathKey.originator)
  
  ::service_layer::SLSrCandidatePathKey_Originator* temp = originator_;
  originator_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrCandidatePathKey_Originator* SLSrCandidatePathKey::_internal_mutable_originator() {
  
  if (originator_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrCandidatePathKey_Originator>(GetArenaForAllocation());
    originator_ = p;
  }
  return originator_;
}
inline ::service_layer::SLSrCandidatePathKey_Originator* SLSrCandidatePathKey::mutable_originator() {
  ::service_layer::SLSrCandidatePathKey_Originator* _msg = _internal_mutable_originator();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrCandidatePathKey.originator)
  return _msg;
}
inline void SLSrCandidatePathKey::set_allocated_originator(::service_layer::SLSrCandidatePathKey_Originator* originator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete originator_;
  }
  if (originator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrCandidatePathKey_Originator>::GetOwningArena(originator);
    if (message_arena != submessage_arena) {
      originator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, originator, submessage_arena);
    }
    
  } else {
    
  }
  originator_ = originator;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrCandidatePathKey.originator)
}

// uint32 discriminator = 3;
inline void SLSrCandidatePathKey::clear_discriminator() {
  discriminator_ = 0u;
}
inline uint32_t SLSrCandidatePathKey::_internal_discriminator() const {
  return discriminator_;
}
inline uint32_t SLSrCandidatePathKey::discriminator() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrCandidatePathKey.discriminator)
  return _internal_discriminator();
}
inline void SLSrCandidatePathKey::_internal_set_discriminator(uint32_t value) {
  
  discriminator_ = value;
}
inline void SLSrCandidatePathKey::set_discriminator(uint32_t value) {
  _internal_set_discriminator(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrCandidatePathKey.discriminator)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::service_layer::SLSrMetricMargin_MarginType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLSrMetricMargin_MarginType>() {
  return ::service_layer::SLSrMetricMargin_MarginType_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLSrPolicyProtocolOrigin> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLSrPolicyProtocolOrigin>() {
  return ::service_layer::SLSrPolicyProtocolOrigin_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLSrPolicyFlagsDef> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLSrPolicyFlagsDef>() {
  return ::service_layer::SLSrPolicyFlagsDef_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLSrSegmentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLSrSegmentType>() {
  return ::service_layer::SLSrSegmentType_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLSrSegmentFlags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLSrSegmentFlags>() {
  return ::service_layer::SLSrSegmentFlags_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLSrv6BindingSidFlags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLSrv6BindingSidFlags>() {
  return ::service_layer::SLSrv6BindingSidFlags_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLSrDataplane> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLSrDataplane>() {
  return ::service_layer::SLSrDataplane_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLSrMetricType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLSrMetricType>() {
  return ::service_layer::SLSrMetricType_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLSrDiversityLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLSrDiversityLevel>() {
  return ::service_layer::SLSrDiversityLevel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sl_5fsr_5fcommon_2eproto
