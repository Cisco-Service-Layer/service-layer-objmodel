// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sl_srte_pcalc_stateful.proto

#include "sl_srte_pcalc_stateful.pb.h"
#include "sl_srte_pcalc_stateful.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace service_layer {

static const char* SLSrteCalcStateful_method_names[] = {
  "/service_layer.SLSrteCalcStateful/SLSrtePathCompute",
};

std::unique_ptr< SLSrteCalcStateful::Stub> SLSrteCalcStateful::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SLSrteCalcStateful::Stub> stub(new SLSrteCalcStateful::Stub(channel, options));
  return stub;
}

SLSrteCalcStateful::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SLSrtePathCompute_(SLSrteCalcStateful_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>* SLSrteCalcStateful::Stub::SLSrtePathComputeRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>::Create(channel_.get(), rpcmethod_SLSrtePathCompute_, context);
}

void SLSrteCalcStateful::Stub::async::SLSrtePathCompute(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service_layer::SLSrtePathComputeRequests,::service_layer::SLSrtePathComputeResponses>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::service_layer::SLSrtePathComputeRequests,::service_layer::SLSrtePathComputeResponses>::Create(stub_->channel_.get(), stub_->rpcmethod_SLSrtePathCompute_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>* SLSrteCalcStateful::Stub::AsyncSLSrtePathComputeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>::Create(channel_.get(), cq, rpcmethod_SLSrtePathCompute_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>* SLSrteCalcStateful::Stub::PrepareAsyncSLSrtePathComputeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>::Create(channel_.get(), cq, rpcmethod_SLSrtePathCompute_, context, false, nullptr);
}

SLSrteCalcStateful::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SLSrteCalcStateful_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< SLSrteCalcStateful::Service, ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>(
          [](SLSrteCalcStateful::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::service_layer::SLSrtePathComputeResponses,
             ::service_layer::SLSrtePathComputeRequests>* stream) {
               return service->SLSrtePathCompute(ctx, stream);
             }, this)));
}

SLSrteCalcStateful::Service::~Service() {
}

::grpc::Status SLSrteCalcStateful::Service::SLSrtePathCompute(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service_layer::SLSrtePathComputeResponses, ::service_layer::SLSrtePathComputeRequests>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace service_layer

