// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sl_srte_pcalc_stateful.proto
// Original file comments:
// SR-TE Stateful Path Calculation API
// @file 
// @brief Proto file for Segment-routing traffic-eng (SRTE) PathCompute RPCs.
// Declares calls for delegating path compute of SRTE policies to a compute server.
// The GPB data model should reflect the model from the SRTE policy
// RFC https://datatracker.ietf.org/doc/rfc9256/.
// 
// ----------------------------------------------------------------
//  Copyright (c) 2024 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//
//
#ifndef GRPC_sl_5fsrte_5fpcalc_5fstateful_2eproto__INCLUDED
#define GRPC_sl_5fsrte_5fpcalc_5fstateful_2eproto__INCLUDED

#include "sl_srte_pcalc_stateful.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace service_layer {

// @defgroup SLSrteCalcStateful
//
// @{ 
//
// This service provides online, stateful SR-TE path calculation capabilities
// in accordance with the Segment Routing Policy Architecture model defined in
// [RFC 9256](https://datatracker.ietf.org/doc/rfc9256/).
class SLSrteCalcStateful final {
 public:
  static constexpr char const* service_full_name() {
    return "service_layer.SLSrteCalcStateful";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Opens a bidirectional streaming channel to initiate, manage, and serve
    // stateful path calculation requests.<br><br>
    //
    //
    // A single `PathCompute` channel can support any number of path requests and
    // it is recommended that a client maintains only one channel per server that
    // it is connected to.<br><br>
    //
    // The client uses this channel to initiate new path calculation requests,
    // update the attributes (e.g., optimization metric or constraints) of an
    // active request, and withdraw obsolete ones. The client must maintain the
    // channel open as long as it requires stateful path calculation service from
    // the server.<br><br>
    //
    // The server uses this channel to respond to the active path calculation
    // requests of the client. The server sends a path response after receiving a
    // new path calculation request from the client, an update to an existing
    // request, or after a routing event in the network required a modification
    // of the path. The server is responsible for monitoring the network topology
    // and providing updated responses to the active path requests such that the
    // response continuously meets the requirements of the path request.<br><br>
    //
    // When the channel is closed, the server marks any active path request (that
    // was managed through this channel) as *stale* and starts a timer. Another
    // client may claim ownership of a stale path request in a new or existing
    // channel. When the timer expires, any stale path request that was not
    // claimed by another client is deleted.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>> SLSrtePathCompute(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>>(SLSrtePathComputeRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>> AsyncSLSrtePathCompute(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>>(AsyncSLSrtePathComputeRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>> PrepareAsyncSLSrtePathCompute(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>>(PrepareAsyncSLSrtePathComputeRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Opens a bidirectional streaming channel to initiate, manage, and serve
      // stateful path calculation requests.<br><br>
      //
      //
      // A single `PathCompute` channel can support any number of path requests and
      // it is recommended that a client maintains only one channel per server that
      // it is connected to.<br><br>
      //
      // The client uses this channel to initiate new path calculation requests,
      // update the attributes (e.g., optimization metric or constraints) of an
      // active request, and withdraw obsolete ones. The client must maintain the
      // channel open as long as it requires stateful path calculation service from
      // the server.<br><br>
      //
      // The server uses this channel to respond to the active path calculation
      // requests of the client. The server sends a path response after receiving a
      // new path calculation request from the client, an update to an existing
      // request, or after a routing event in the network required a modification
      // of the path. The server is responsible for monitoring the network topology
      // and providing updated responses to the active path requests such that the
      // response continuously meets the requirements of the path request.<br><br>
      //
      // When the channel is closed, the server marks any active path request (that
      // was managed through this channel) as *stale* and starts a timer. Another
      // client may claim ownership of a stale path request in a new or existing
      // channel. When the timer expires, any stale path request that was not
      // claimed by another client is deleted.
      virtual void SLSrtePathCompute(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service_layer::SLSrtePathComputeRequests,::service_layer::SLSrtePathComputeResponses>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>* SLSrtePathComputeRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>* AsyncSLSrtePathComputeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>* PrepareAsyncSLSrtePathComputeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>> SLSrtePathCompute(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>>(SLSrtePathComputeRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>> AsyncSLSrtePathCompute(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>>(AsyncSLSrtePathComputeRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>> PrepareAsyncSLSrtePathCompute(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>>(PrepareAsyncSLSrtePathComputeRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SLSrtePathCompute(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::service_layer::SLSrtePathComputeRequests,::service_layer::SLSrtePathComputeResponses>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>* SLSrtePathComputeRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>* AsyncSLSrtePathComputeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>* PrepareAsyncSLSrtePathComputeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SLSrtePathCompute_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Opens a bidirectional streaming channel to initiate, manage, and serve
    // stateful path calculation requests.<br><br>
    //
    //
    // A single `PathCompute` channel can support any number of path requests and
    // it is recommended that a client maintains only one channel per server that
    // it is connected to.<br><br>
    //
    // The client uses this channel to initiate new path calculation requests,
    // update the attributes (e.g., optimization metric or constraints) of an
    // active request, and withdraw obsolete ones. The client must maintain the
    // channel open as long as it requires stateful path calculation service from
    // the server.<br><br>
    //
    // The server uses this channel to respond to the active path calculation
    // requests of the client. The server sends a path response after receiving a
    // new path calculation request from the client, an update to an existing
    // request, or after a routing event in the network required a modification
    // of the path. The server is responsible for monitoring the network topology
    // and providing updated responses to the active path requests such that the
    // response continuously meets the requirements of the path request.<br><br>
    //
    // When the channel is closed, the server marks any active path request (that
    // was managed through this channel) as *stale* and starts a timer. Another
    // client may claim ownership of a stale path request in a new or existing
    // channel. When the timer expires, any stale path request that was not
    // claimed by another client is deleted.
    virtual ::grpc::Status SLSrtePathCompute(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::service_layer::SLSrtePathComputeResponses, ::service_layer::SLSrtePathComputeRequests>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_SLSrtePathCompute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLSrtePathCompute() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SLSrtePathCompute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLSrtePathCompute(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLSrtePathComputeResponses, ::service_layer::SLSrtePathComputeRequests>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLSrtePathCompute(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::service_layer::SLSrtePathComputeResponses, ::service_layer::SLSrtePathComputeRequests>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SLSrtePathCompute<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SLSrtePathCompute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLSrtePathCompute() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SLSrtePathCompute(context); }));
    }
    ~WithCallbackMethod_SLSrtePathCompute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLSrtePathCompute(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLSrtePathComputeResponses, ::service_layer::SLSrtePathComputeRequests>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::service_layer::SLSrtePathComputeRequests, ::service_layer::SLSrtePathComputeResponses>* SLSrtePathCompute(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_SLSrtePathCompute<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SLSrtePathCompute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLSrtePathCompute() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SLSrtePathCompute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLSrtePathCompute(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLSrtePathComputeResponses, ::service_layer::SLSrtePathComputeRequests>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLSrtePathCompute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLSrtePathCompute() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SLSrtePathCompute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLSrtePathCompute(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLSrtePathComputeResponses, ::service_layer::SLSrtePathComputeRequests>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLSrtePathCompute(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLSrtePathCompute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLSrtePathCompute() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->SLSrtePathCompute(context); }));
    }
    ~WithRawCallbackMethod_SLSrtePathCompute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLSrtePathCompute(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::service_layer::SLSrtePathComputeResponses, ::service_layer::SLSrtePathComputeRequests>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SLSrtePathCompute(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace service_layer


#endif  // GRPC_sl_5fsrte_5fpcalc_5fstateful_2eproto__INCLUDED
