// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_srte_pcalc_stateful.proto

#include "sl_srte_pcalc_stateful.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace service_layer {
constexpr SLSrtePathComputeReqs::SLSrtePathComputeReqs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requests_(){}
struct SLSrtePathComputeReqsDefaultTypeInternal {
  constexpr SLSrtePathComputeReqsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrtePathComputeReqsDefaultTypeInternal() {}
  union {
    SLSrtePathComputeReqs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrtePathComputeReqsDefaultTypeInternal _SLSrtePathComputeReqs_default_instance_;
constexpr SLSrtePathComputeRsps::SLSrtePathComputeRsps(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : responses_(){}
struct SLSrtePathComputeRspsDefaultTypeInternal {
  constexpr SLSrtePathComputeRspsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrtePathComputeRspsDefaultTypeInternal() {}
  union {
    SLSrtePathComputeRsps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrtePathComputeRspsDefaultTypeInternal _SLSrtePathComputeRsps_default_instance_;
constexpr SLSrtePathComputeReq_SLSrtePathInit::SLSrtePathComputeReq_SLSrtePathInit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dataplane_(0)

  , _oneof_case_{}{}
struct SLSrtePathComputeReq_SLSrtePathInitDefaultTypeInternal {
  constexpr SLSrtePathComputeReq_SLSrtePathInitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrtePathComputeReq_SLSrtePathInitDefaultTypeInternal() {}
  union {
    SLSrtePathComputeReq_SLSrtePathInit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrtePathComputeReq_SLSrtePathInitDefaultTypeInternal _SLSrtePathComputeReq_SLSrtePathInit_default_instance_;
constexpr SLSrtePathComputeReq_SLSrtePathUpdate::SLSrtePathComputeReq_SLSrtePathUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SLSrtePathComputeReq_SLSrtePathUpdateDefaultTypeInternal {
  constexpr SLSrtePathComputeReq_SLSrtePathUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrtePathComputeReq_SLSrtePathUpdateDefaultTypeInternal() {}
  union {
    SLSrtePathComputeReq_SLSrtePathUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrtePathComputeReq_SLSrtePathUpdateDefaultTypeInternal _SLSrtePathComputeReq_SLSrtePathUpdate_default_instance_;
constexpr SLSrtePathComputeReq_SLSrtePathWithdraw::SLSrtePathComputeReq_SLSrtePathWithdraw(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SLSrtePathComputeReq_SLSrtePathWithdrawDefaultTypeInternal {
  constexpr SLSrtePathComputeReq_SLSrtePathWithdrawDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrtePathComputeReq_SLSrtePathWithdrawDefaultTypeInternal() {}
  union {
    SLSrtePathComputeReq_SLSrtePathWithdraw _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrtePathComputeReq_SLSrtePathWithdrawDefaultTypeInternal _SLSrtePathComputeReq_SLSrtePathWithdraw_default_instance_;
constexpr SLSrtePathComputeReq::SLSrtePathComputeReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : policy_key_(nullptr)
  , candidate_path_key_(nullptr)
  , seq_num_(uint64_t{0u})
  , _oneof_case_{}{}
struct SLSrtePathComputeReqDefaultTypeInternal {
  constexpr SLSrtePathComputeReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrtePathComputeReqDefaultTypeInternal() {}
  union {
    SLSrtePathComputeReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrtePathComputeReqDefaultTypeInternal _SLSrtePathComputeReq_default_instance_;
constexpr SLSrtePathComputeRes_SLSrteDynamicPathResult::SLSrtePathComputeRes_SLSrteDynamicPathResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : segment_lists_()
  , effective_diversity_level_(0)
{}
struct SLSrtePathComputeRes_SLSrteDynamicPathResultDefaultTypeInternal {
  constexpr SLSrtePathComputeRes_SLSrteDynamicPathResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrtePathComputeRes_SLSrteDynamicPathResultDefaultTypeInternal() {}
  union {
    SLSrtePathComputeRes_SLSrteDynamicPathResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrtePathComputeRes_SLSrteDynamicPathResultDefaultTypeInternal _SLSrtePathComputeRes_SLSrteDynamicPathResult_default_instance_;
constexpr SLSrtePathComputeRes_SLSrtePathError::SLSrtePathComputeRes_SLSrtePathError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(nullptr){}
struct SLSrtePathComputeRes_SLSrtePathErrorDefaultTypeInternal {
  constexpr SLSrtePathComputeRes_SLSrtePathErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrtePathComputeRes_SLSrtePathErrorDefaultTypeInternal() {}
  union {
    SLSrtePathComputeRes_SLSrtePathError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrtePathComputeRes_SLSrtePathErrorDefaultTypeInternal _SLSrtePathComputeRes_SLSrtePathError_default_instance_;
constexpr SLSrtePathComputeRes::SLSrtePathComputeRes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : policy_key_(nullptr)
  , candidate_path_key_(nullptr)
  , req_seq_num_(uint64_t{0u})
  , _oneof_case_{}{}
struct SLSrtePathComputeResDefaultTypeInternal {
  constexpr SLSrtePathComputeResDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrtePathComputeResDefaultTypeInternal() {}
  union {
    SLSrtePathComputeRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrtePathComputeResDefaultTypeInternal _SLSrtePathComputeRes_default_instance_;
constexpr SLSrtePathAttrDynamic::SLSrtePathAttrDynamic(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : constraints_(nullptr)
  , o_metric_(0)
{}
struct SLSrtePathAttrDynamicDefaultTypeInternal {
  constexpr SLSrtePathAttrDynamicDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrtePathAttrDynamicDefaultTypeInternal() {}
  union {
    SLSrtePathAttrDynamic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrtePathAttrDynamicDefaultTypeInternal _SLSrtePathAttrDynamic_default_instance_;
constexpr SLSrtePathAttrExplicit::SLSrtePathAttrExplicit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : segment_lists_()
  , constraints_(nullptr){}
struct SLSrtePathAttrExplicitDefaultTypeInternal {
  constexpr SLSrtePathAttrExplicitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrtePathAttrExplicitDefaultTypeInternal() {}
  union {
    SLSrtePathAttrExplicit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrtePathAttrExplicitDefaultTypeInternal _SLSrtePathAttrExplicit_default_instance_;
constexpr ConstraintSet_PathDiversity::ConstraintSet_PathDiversity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : association_(nullptr)
  , diversity_level_(0)

  , min_diversity_level_(0)

  , shortest_path_(false){}
struct ConstraintSet_PathDiversityDefaultTypeInternal {
  constexpr ConstraintSet_PathDiversityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConstraintSet_PathDiversityDefaultTypeInternal() {}
  union {
    ConstraintSet_PathDiversity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConstraintSet_PathDiversityDefaultTypeInternal _ConstraintSet_PathDiversity_default_instance_;
constexpr ConstraintSet::ConstraintSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : srlg_exclude_()
  , _srlg_exclude_cached_byte_size_(0)
  , ip_exclude_()
  , affinities_(nullptr)
  , path_diversity_(nullptr)
  , corouted_association_(nullptr)
  , maximum_sid_depth_(0u)
  , guaranteed_bandwidth_(0u)
  , strict_path_segments_(false)
  , unprotected_segments_(false)
  , persistent_segments_(false){}
struct ConstraintSetDefaultTypeInternal {
  constexpr ConstraintSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConstraintSetDefaultTypeInternal() {}
  union {
    ConstraintSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConstraintSetDefaultTypeInternal _ConstraintSet_default_instance_;
constexpr AssociationGroup::AssociationGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : association_id_(0u){}
struct AssociationGroupDefaultTypeInternal {
  constexpr AssociationGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssociationGroupDefaultTypeInternal() {}
  union {
    AssociationGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssociationGroupDefaultTypeInternal _AssociationGroup_default_instance_;
}  // namespace service_layer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sl_5fsrte_5fpcalc_5fstateful_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sl_5fsrte_5fpcalc_5fstateful_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sl_5fsrte_5fpcalc_5fstateful_2eproto = nullptr;

const uint32_t TableStruct_sl_5fsrte_5fpcalc_5fstateful_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeReqs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeReqs, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeRsps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeRsps, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeReq_SLSrtePathInit, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeReq_SLSrtePathInit, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeReq_SLSrtePathInit, dataplane_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeReq_SLSrtePathInit, path_init_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate, path_update_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeReq, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeReq, policy_key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeReq, candidate_path_key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeReq, seq_num_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeReq, request_type_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult, segment_lists_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult, effective_diversity_level_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeRes_SLSrtePathError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeRes_SLSrtePathError, type_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeRes_SLSrtePathError, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeRes, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeRes, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeRes, policy_key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeRes, candidate_path_key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeRes, req_seq_num_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathComputeRes, response_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathAttrDynamic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathAttrDynamic, o_metric_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathAttrDynamic, constraints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathAttrExplicit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathAttrExplicit, segment_lists_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrtePathAttrExplicit, constraints_),
  PROTOBUF_FIELD_OFFSET(::service_layer::ConstraintSet_PathDiversity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::service_layer::ConstraintSet_PathDiversity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::ConstraintSet_PathDiversity, association_),
  PROTOBUF_FIELD_OFFSET(::service_layer::ConstraintSet_PathDiversity, diversity_level_),
  PROTOBUF_FIELD_OFFSET(::service_layer::ConstraintSet_PathDiversity, min_diversity_level_),
  PROTOBUF_FIELD_OFFSET(::service_layer::ConstraintSet_PathDiversity, shortest_path_),
  ~0u,
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::service_layer::ConstraintSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::service_layer::ConstraintSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::ConstraintSet, affinities_),
  PROTOBUF_FIELD_OFFSET(::service_layer::ConstraintSet, srlg_exclude_),
  PROTOBUF_FIELD_OFFSET(::service_layer::ConstraintSet, ip_exclude_),
  PROTOBUF_FIELD_OFFSET(::service_layer::ConstraintSet, path_diversity_),
  PROTOBUF_FIELD_OFFSET(::service_layer::ConstraintSet, corouted_association_),
  PROTOBUF_FIELD_OFFSET(::service_layer::ConstraintSet, guaranteed_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::service_layer::ConstraintSet, strict_path_segments_),
  PROTOBUF_FIELD_OFFSET(::service_layer::ConstraintSet, unprotected_segments_),
  PROTOBUF_FIELD_OFFSET(::service_layer::ConstraintSet, persistent_segments_),
  PROTOBUF_FIELD_OFFSET(::service_layer::ConstraintSet, maximum_sid_depth_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::AssociationGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::AssociationGroup, association_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::service_layer::SLSrtePathComputeReqs)},
  { 7, -1, -1, sizeof(::service_layer::SLSrtePathComputeRsps)},
  { 14, -1, -1, sizeof(::service_layer::SLSrtePathComputeReq_SLSrtePathInit)},
  { 24, -1, -1, sizeof(::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate)},
  { 33, -1, -1, sizeof(::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw)},
  { 39, -1, -1, sizeof(::service_layer::SLSrtePathComputeReq)},
  { 52, 60, -1, sizeof(::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult)},
  { 62, -1, -1, sizeof(::service_layer::SLSrtePathComputeRes_SLSrtePathError)},
  { 70, -1, -1, sizeof(::service_layer::SLSrtePathComputeRes)},
  { 82, -1, -1, sizeof(::service_layer::SLSrtePathAttrDynamic)},
  { 90, -1, -1, sizeof(::service_layer::SLSrtePathAttrExplicit)},
  { 98, 108, -1, sizeof(::service_layer::ConstraintSet_PathDiversity)},
  { 112, 128, -1, sizeof(::service_layer::ConstraintSet)},
  { 138, -1, -1, sizeof(::service_layer::AssociationGroup)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrtePathComputeReqs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrtePathComputeRsps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrtePathComputeReq_SLSrtePathInit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrtePathComputeReq_SLSrtePathUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrtePathComputeReq_SLSrtePathWithdraw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrtePathComputeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrtePathComputeRes_SLSrteDynamicPathResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrtePathComputeRes_SLSrtePathError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrtePathComputeRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrtePathAttrDynamic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrtePathAttrExplicit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_ConstraintSet_PathDiversity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_ConstraintSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_AssociationGroup_default_instance_),
};

const char descriptor_table_protodef_sl_5fsrte_5fpcalc_5fstateful_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034sl_srte_pcalc_stateful.proto\022\rservice_"
  "layer\032\025sl_common_types.proto\032\022sl_sr_comm"
  "on.proto\"N\n\025SLSrtePathComputeReqs\0225\n\010req"
  "uests\030\001 \003(\0132#.service_layer.SLSrtePathCo"
  "mputeReq\"O\n\025SLSrtePathComputeRsps\0226\n\tres"
  "ponses\030\001 \003(\0132#.service_layer.SLSrtePathC"
  "omputeRes\"\377\005\n\024SLSrtePathComputeReq\0220\n\npo"
  "licy_key\030\001 \001(\0132\034.service_layer.SLSrPolic"
  "yKey\022\?\n\022candidate_path_key\030\002 \001(\0132#.servi"
  "ce_layer.SLSrCandidatePathKey\022\017\n\007seq_num"
  "\030\003 \001(\004\022B\n\004init\030\004 \001(\01322.service_layer.SLS"
  "rtePathComputeReq.SLSrtePathInitH\000\022F\n\006up"
  "date\030\005 \001(\01324.service_layer.SLSrtePathCom"
  "puteReq.SLSrtePathUpdateH\000\022J\n\010withdraw\030\006"
  " \001(\01326.service_layer.SLSrtePathComputeRe"
  "q.SLSrtePathWithdrawH\000\032\307\001\n\016SLSrtePathIni"
  "t\022/\n\tdataplane\030\001 \001(\0162\034.service_layer.SLS"
  "rDataplane\0227\n\007dynamic\030\002 \001(\0132$.service_la"
  "yer.SLSrtePathAttrDynamicH\000\0229\n\010explicit\030"
  "\003 \001(\0132%.service_layer.SLSrtePathAttrExpl"
  "icitH\000B\020\n\016path_init_type\032\232\001\n\020SLSrtePathU"
  "pdate\0227\n\007dynamic\030\001 \001(\0132$.service_layer.S"
  "LSrtePathAttrDynamicH\000\0229\n\010explicit\030\002 \001(\013"
  "2%.service_layer.SLSrtePathAttrExplicitH"
  "\000B\022\n\020path_update_type\032\024\n\022SLSrtePathWithd"
  "rawB\016\n\014request_type\"\331\004\n\024SLSrtePathComput"
  "eRes\0220\n\npolicy_key\030\001 \001(\0132\034.service_layer"
  ".SLSrPolicyKey\022\?\n\022candidate_path_key\030\002 \001"
  "(\0132#.service_layer.SLSrCandidatePathKey\022"
  "\023\n\013req_seq_num\030\003 \001(\004\022R\n\013path_result\030\004 \001("
  "\0132;.service_layer.SLSrtePathComputeRes.S"
  "LSrteDynamicPathResultH\000\022D\n\005error\030\006 \001(\0132"
  "3.service_layer.SLSrtePathComputeRes.SLS"
  "rtePathErrorH\000\032\271\001\n\027SLSrteDynamicPathResu"
  "lt\0225\n\rsegment_lists\030\001 \003(\0132\036.service_laye"
  "r.SLSrSegmentList\022I\n\031effective_diversity"
  "_level\030\003 \001(\0162!.service_layer.SLSrDiversi"
  "tyLevelH\000\210\001\001B\034\n\032_effective_diversity_lev"
  "el\032R\n\017SLSrtePathError\022*\n\004type\030\001 \001(\0132\034.se"
  "rvice_layer.SLErrorStatus\022\023\n\013description"
  "\030\002 \001(\tB\017\n\rresponse_type\"{\n\025SLSrtePathAtt"
  "rDynamic\022/\n\010o_metric\030\001 \001(\0162\035.service_lay"
  "er.SLSrMetricType\0221\n\013constraints\030\002 \001(\0132\034"
  ".service_layer.ConstraintSet\"\202\001\n\026SLSrteP"
  "athAttrExplicit\0225\n\rsegment_lists\030\001 \003(\0132\036"
  ".service_layer.SLSrSegmentList\0221\n\013constr"
  "aints\030\002 \001(\0132\034.service_layer.ConstraintSe"
  "t\"\317\005\n\rConstraintSet\0221\n\naffinities\030\001 \001(\0132"
  "\035.service_layer.SLSrAffinities\022\024\n\014srlg_e"
  "xclude\030\004 \003(\r\022.\n\nip_exclude\030\005 \003(\0132\032.servi"
  "ce_layer.SLIpAddress\022G\n\016path_diversity\030e"
  " \001(\0132*.service_layer.ConstraintSet.PathD"
  "iversityH\000\210\001\001\022B\n\024corouted_association\030f "
  "\001(\0132\037.service_layer.AssociationGroupH\001\210\001"
  "\001\022\034\n\024guaranteed_bandwidth\030g \001(\r\022\035\n\024stric"
  "t_path_segments\030\311\001 \001(\010\022\035\n\024unprotected_se"
  "gments\030\312\001 \001(\010\022\034\n\023persistent_segments\030\313\001 "
  "\001(\010\022\032\n\021maximum_sid_depth\030\314\001 \001(\r\032\365\001\n\rPath"
  "Diversity\0224\n\013association\030\001 \001(\0132\037.service"
  "_layer.AssociationGroup\022:\n\017diversity_lev"
  "el\030\002 \001(\0162!.service_layer.SLSrDiversityLe"
  "vel\022C\n\023min_diversity_level\030\003 \001(\0162!.servi"
  "ce_layer.SLSrDiversityLevelH\000\210\001\001\022\025\n\rshor"
  "test_path\030\004 \001(\010B\026\n\024_min_diversity_levelB"
  "\021\n\017_path_diversityB\027\n\025_corouted_associat"
  "ion\"*\n\020AssociationGroup\022\026\n\016association_i"
  "d\030\001 \001(\r2y\n\022SLSrteCalcStateful\022c\n\021SLSrteP"
  "athCompute\022$.service_layer.SLSrtePathCom"
  "puteReqs\032$.service_layer.SLSrtePathCompu"
  "teRsps(\0010\001BQZOgithub.com/Cisco-service-l"
  "ayer/service-layer-objmodel/grpc/protos;"
  "service_layerb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_deps[2] = {
  &::descriptor_table_sl_5fcommon_5ftypes_2eproto,
  &::descriptor_table_sl_5fsr_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto = {
  false, false, 2861, descriptor_table_protodef_sl_5fsrte_5fpcalc_5fstateful_2eproto, "sl_srte_pcalc_stateful.proto", 
  &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_once, descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_deps, 2, 14,
  schemas, file_default_instances, TableStruct_sl_5fsrte_5fpcalc_5fstateful_2eproto::offsets,
  file_level_metadata_sl_5fsrte_5fpcalc_5fstateful_2eproto, file_level_enum_descriptors_sl_5fsrte_5fpcalc_5fstateful_2eproto, file_level_service_descriptors_sl_5fsrte_5fpcalc_5fstateful_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_getter() {
  return &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sl_5fsrte_5fpcalc_5fstateful_2eproto(&descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto);
namespace service_layer {

// ===================================================================

class SLSrtePathComputeReqs::_Internal {
 public:
};

SLSrtePathComputeReqs::SLSrtePathComputeReqs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  requests_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrtePathComputeReqs)
}
SLSrtePathComputeReqs::SLSrtePathComputeReqs(const SLSrtePathComputeReqs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrtePathComputeReqs)
}

inline void SLSrtePathComputeReqs::SharedCtor() {
}

SLSrtePathComputeReqs::~SLSrtePathComputeReqs() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrtePathComputeReqs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrtePathComputeReqs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLSrtePathComputeReqs::ArenaDtor(void* object) {
  SLSrtePathComputeReqs* _this = reinterpret_cast< SLSrtePathComputeReqs* >(object);
  (void)_this;
}
void SLSrtePathComputeReqs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrtePathComputeReqs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrtePathComputeReqs::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrtePathComputeReqs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrtePathComputeReqs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLSrtePathComputeReq requests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrtePathComputeReqs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrtePathComputeReqs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLSrtePathComputeReq requests = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrtePathComputeReqs)
  return target;
}

size_t SLSrtePathComputeReqs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrtePathComputeReqs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLSrtePathComputeReq requests = 1;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrtePathComputeReqs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrtePathComputeReqs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrtePathComputeReqs::GetClassData() const { return &_class_data_; }

void SLSrtePathComputeReqs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrtePathComputeReqs *>(to)->MergeFrom(
      static_cast<const SLSrtePathComputeReqs &>(from));
}


void SLSrtePathComputeReqs::MergeFrom(const SLSrtePathComputeReqs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrtePathComputeReqs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrtePathComputeReqs::CopyFrom(const SLSrtePathComputeReqs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrtePathComputeReqs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrtePathComputeReqs::IsInitialized() const {
  return true;
}

void SLSrtePathComputeReqs::InternalSwap(SLSrtePathComputeReqs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrtePathComputeReqs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_getter, &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpcalc_5fstateful_2eproto[0]);
}

// ===================================================================

class SLSrtePathComputeRsps::_Internal {
 public:
};

SLSrtePathComputeRsps::SLSrtePathComputeRsps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  responses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrtePathComputeRsps)
}
SLSrtePathComputeRsps::SLSrtePathComputeRsps(const SLSrtePathComputeRsps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrtePathComputeRsps)
}

inline void SLSrtePathComputeRsps::SharedCtor() {
}

SLSrtePathComputeRsps::~SLSrtePathComputeRsps() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrtePathComputeRsps)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrtePathComputeRsps::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLSrtePathComputeRsps::ArenaDtor(void* object) {
  SLSrtePathComputeRsps* _this = reinterpret_cast< SLSrtePathComputeRsps* >(object);
  (void)_this;
}
void SLSrtePathComputeRsps::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrtePathComputeRsps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrtePathComputeRsps::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrtePathComputeRsps)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrtePathComputeRsps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLSrtePathComputeRes responses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrtePathComputeRsps::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrtePathComputeRsps)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLSrtePathComputeRes responses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrtePathComputeRsps)
  return target;
}

size_t SLSrtePathComputeRsps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrtePathComputeRsps)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLSrtePathComputeRes responses = 1;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrtePathComputeRsps::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrtePathComputeRsps::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrtePathComputeRsps::GetClassData() const { return &_class_data_; }

void SLSrtePathComputeRsps::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrtePathComputeRsps *>(to)->MergeFrom(
      static_cast<const SLSrtePathComputeRsps &>(from));
}


void SLSrtePathComputeRsps::MergeFrom(const SLSrtePathComputeRsps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrtePathComputeRsps)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrtePathComputeRsps::CopyFrom(const SLSrtePathComputeRsps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrtePathComputeRsps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrtePathComputeRsps::IsInitialized() const {
  return true;
}

void SLSrtePathComputeRsps::InternalSwap(SLSrtePathComputeRsps* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrtePathComputeRsps::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_getter, &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpcalc_5fstateful_2eproto[1]);
}

// ===================================================================

class SLSrtePathComputeReq_SLSrtePathInit::_Internal {
 public:
  static const ::service_layer::SLSrtePathAttrDynamic& dynamic(const SLSrtePathComputeReq_SLSrtePathInit* msg);
  static const ::service_layer::SLSrtePathAttrExplicit& explicit_(const SLSrtePathComputeReq_SLSrtePathInit* msg);
};

const ::service_layer::SLSrtePathAttrDynamic&
SLSrtePathComputeReq_SLSrtePathInit::_Internal::dynamic(const SLSrtePathComputeReq_SLSrtePathInit* msg) {
  return *msg->path_init_type_.dynamic_;
}
const ::service_layer::SLSrtePathAttrExplicit&
SLSrtePathComputeReq_SLSrtePathInit::_Internal::explicit_(const SLSrtePathComputeReq_SLSrtePathInit* msg) {
  return *msg->path_init_type_.explicit__;
}
void SLSrtePathComputeReq_SLSrtePathInit::set_allocated_dynamic(::service_layer::SLSrtePathAttrDynamic* dynamic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_path_init_type();
  if (dynamic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrtePathAttrDynamic>::GetOwningArena(dynamic);
    if (message_arena != submessage_arena) {
      dynamic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dynamic, submessage_arena);
    }
    set_has_dynamic();
    path_init_type_.dynamic_ = dynamic;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrtePathComputeReq.SLSrtePathInit.dynamic)
}
void SLSrtePathComputeReq_SLSrtePathInit::set_allocated_explicit_(::service_layer::SLSrtePathAttrExplicit* explicit_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_path_init_type();
  if (explicit_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrtePathAttrExplicit>::GetOwningArena(explicit_);
    if (message_arena != submessage_arena) {
      explicit_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, explicit_, submessage_arena);
    }
    set_has_explicit_();
    path_init_type_.explicit__ = explicit_;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrtePathComputeReq.SLSrtePathInit.explicit)
}
SLSrtePathComputeReq_SLSrtePathInit::SLSrtePathComputeReq_SLSrtePathInit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrtePathComputeReq.SLSrtePathInit)
}
SLSrtePathComputeReq_SLSrtePathInit::SLSrtePathComputeReq_SLSrtePathInit(const SLSrtePathComputeReq_SLSrtePathInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dataplane_ = from.dataplane_;
  clear_has_path_init_type();
  switch (from.path_init_type_case()) {
    case kDynamic: {
      _internal_mutable_dynamic()->::service_layer::SLSrtePathAttrDynamic::MergeFrom(from._internal_dynamic());
      break;
    }
    case kExplicit: {
      _internal_mutable_explicit_()->::service_layer::SLSrtePathAttrExplicit::MergeFrom(from._internal_explicit_());
      break;
    }
    case PATH_INIT_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrtePathComputeReq.SLSrtePathInit)
}

inline void SLSrtePathComputeReq_SLSrtePathInit::SharedCtor() {
dataplane_ = 0;
clear_has_path_init_type();
}

SLSrtePathComputeReq_SLSrtePathInit::~SLSrtePathComputeReq_SLSrtePathInit() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrtePathComputeReq.SLSrtePathInit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrtePathComputeReq_SLSrtePathInit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_path_init_type()) {
    clear_path_init_type();
  }
}

void SLSrtePathComputeReq_SLSrtePathInit::ArenaDtor(void* object) {
  SLSrtePathComputeReq_SLSrtePathInit* _this = reinterpret_cast< SLSrtePathComputeReq_SLSrtePathInit* >(object);
  (void)_this;
}
void SLSrtePathComputeReq_SLSrtePathInit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrtePathComputeReq_SLSrtePathInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrtePathComputeReq_SLSrtePathInit::clear_path_init_type() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLSrtePathComputeReq.SLSrtePathInit)
  switch (path_init_type_case()) {
    case kDynamic: {
      if (GetArenaForAllocation() == nullptr) {
        delete path_init_type_.dynamic_;
      }
      break;
    }
    case kExplicit: {
      if (GetArenaForAllocation() == nullptr) {
        delete path_init_type_.explicit__;
      }
      break;
    }
    case PATH_INIT_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PATH_INIT_TYPE_NOT_SET;
}


void SLSrtePathComputeReq_SLSrtePathInit::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrtePathComputeReq.SLSrtePathInit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataplane_ = 0;
  clear_path_init_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrtePathComputeReq_SLSrtePathInit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLSrDataplane dataplane = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dataplane(static_cast<::service_layer::SLSrDataplane>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrtePathAttrDynamic dynamic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrtePathAttrExplicit explicit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_explicit_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrtePathComputeReq_SLSrtePathInit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrtePathComputeReq.SLSrtePathInit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLSrDataplane dataplane = 1;
  if (this->_internal_dataplane() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dataplane(), target);
  }

  // .service_layer.SLSrtePathAttrDynamic dynamic = 2;
  if (_internal_has_dynamic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dynamic(this), target, stream);
  }

  // .service_layer.SLSrtePathAttrExplicit explicit = 3;
  if (_internal_has_explicit_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::explicit_(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrtePathComputeReq.SLSrtePathInit)
  return target;
}

size_t SLSrtePathComputeReq_SLSrtePathInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrtePathComputeReq.SLSrtePathInit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLSrDataplane dataplane = 1;
  if (this->_internal_dataplane() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dataplane());
  }

  switch (path_init_type_case()) {
    // .service_layer.SLSrtePathAttrDynamic dynamic = 2;
    case kDynamic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *path_init_type_.dynamic_);
      break;
    }
    // .service_layer.SLSrtePathAttrExplicit explicit = 3;
    case kExplicit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *path_init_type_.explicit__);
      break;
    }
    case PATH_INIT_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrtePathComputeReq_SLSrtePathInit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrtePathComputeReq_SLSrtePathInit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrtePathComputeReq_SLSrtePathInit::GetClassData() const { return &_class_data_; }

void SLSrtePathComputeReq_SLSrtePathInit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrtePathComputeReq_SLSrtePathInit *>(to)->MergeFrom(
      static_cast<const SLSrtePathComputeReq_SLSrtePathInit &>(from));
}


void SLSrtePathComputeReq_SLSrtePathInit::MergeFrom(const SLSrtePathComputeReq_SLSrtePathInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrtePathComputeReq.SLSrtePathInit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dataplane() != 0) {
    _internal_set_dataplane(from._internal_dataplane());
  }
  switch (from.path_init_type_case()) {
    case kDynamic: {
      _internal_mutable_dynamic()->::service_layer::SLSrtePathAttrDynamic::MergeFrom(from._internal_dynamic());
      break;
    }
    case kExplicit: {
      _internal_mutable_explicit_()->::service_layer::SLSrtePathAttrExplicit::MergeFrom(from._internal_explicit_());
      break;
    }
    case PATH_INIT_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrtePathComputeReq_SLSrtePathInit::CopyFrom(const SLSrtePathComputeReq_SLSrtePathInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrtePathComputeReq.SLSrtePathInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrtePathComputeReq_SLSrtePathInit::IsInitialized() const {
  return true;
}

void SLSrtePathComputeReq_SLSrtePathInit::InternalSwap(SLSrtePathComputeReq_SLSrtePathInit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(dataplane_, other->dataplane_);
  swap(path_init_type_, other->path_init_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrtePathComputeReq_SLSrtePathInit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_getter, &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpcalc_5fstateful_2eproto[2]);
}

// ===================================================================

class SLSrtePathComputeReq_SLSrtePathUpdate::_Internal {
 public:
  static const ::service_layer::SLSrtePathAttrDynamic& dynamic(const SLSrtePathComputeReq_SLSrtePathUpdate* msg);
  static const ::service_layer::SLSrtePathAttrExplicit& explicit_(const SLSrtePathComputeReq_SLSrtePathUpdate* msg);
};

const ::service_layer::SLSrtePathAttrDynamic&
SLSrtePathComputeReq_SLSrtePathUpdate::_Internal::dynamic(const SLSrtePathComputeReq_SLSrtePathUpdate* msg) {
  return *msg->path_update_type_.dynamic_;
}
const ::service_layer::SLSrtePathAttrExplicit&
SLSrtePathComputeReq_SLSrtePathUpdate::_Internal::explicit_(const SLSrtePathComputeReq_SLSrtePathUpdate* msg) {
  return *msg->path_update_type_.explicit__;
}
void SLSrtePathComputeReq_SLSrtePathUpdate::set_allocated_dynamic(::service_layer::SLSrtePathAttrDynamic* dynamic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_path_update_type();
  if (dynamic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrtePathAttrDynamic>::GetOwningArena(dynamic);
    if (message_arena != submessage_arena) {
      dynamic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dynamic, submessage_arena);
    }
    set_has_dynamic();
    path_update_type_.dynamic_ = dynamic;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate.dynamic)
}
void SLSrtePathComputeReq_SLSrtePathUpdate::set_allocated_explicit_(::service_layer::SLSrtePathAttrExplicit* explicit_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_path_update_type();
  if (explicit_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrtePathAttrExplicit>::GetOwningArena(explicit_);
    if (message_arena != submessage_arena) {
      explicit_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, explicit_, submessage_arena);
    }
    set_has_explicit_();
    path_update_type_.explicit__ = explicit_;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate.explicit)
}
SLSrtePathComputeReq_SLSrtePathUpdate::SLSrtePathComputeReq_SLSrtePathUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate)
}
SLSrtePathComputeReq_SLSrtePathUpdate::SLSrtePathComputeReq_SLSrtePathUpdate(const SLSrtePathComputeReq_SLSrtePathUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_path_update_type();
  switch (from.path_update_type_case()) {
    case kDynamic: {
      _internal_mutable_dynamic()->::service_layer::SLSrtePathAttrDynamic::MergeFrom(from._internal_dynamic());
      break;
    }
    case kExplicit: {
      _internal_mutable_explicit_()->::service_layer::SLSrtePathAttrExplicit::MergeFrom(from._internal_explicit_());
      break;
    }
    case PATH_UPDATE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate)
}

inline void SLSrtePathComputeReq_SLSrtePathUpdate::SharedCtor() {
clear_has_path_update_type();
}

SLSrtePathComputeReq_SLSrtePathUpdate::~SLSrtePathComputeReq_SLSrtePathUpdate() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrtePathComputeReq_SLSrtePathUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_path_update_type()) {
    clear_path_update_type();
  }
}

void SLSrtePathComputeReq_SLSrtePathUpdate::ArenaDtor(void* object) {
  SLSrtePathComputeReq_SLSrtePathUpdate* _this = reinterpret_cast< SLSrtePathComputeReq_SLSrtePathUpdate* >(object);
  (void)_this;
}
void SLSrtePathComputeReq_SLSrtePathUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrtePathComputeReq_SLSrtePathUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrtePathComputeReq_SLSrtePathUpdate::clear_path_update_type() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate)
  switch (path_update_type_case()) {
    case kDynamic: {
      if (GetArenaForAllocation() == nullptr) {
        delete path_update_type_.dynamic_;
      }
      break;
    }
    case kExplicit: {
      if (GetArenaForAllocation() == nullptr) {
        delete path_update_type_.explicit__;
      }
      break;
    }
    case PATH_UPDATE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PATH_UPDATE_TYPE_NOT_SET;
}


void SLSrtePathComputeReq_SLSrtePathUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_path_update_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrtePathComputeReq_SLSrtePathUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLSrtePathAttrDynamic dynamic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrtePathAttrExplicit explicit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_explicit_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrtePathComputeReq_SLSrtePathUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLSrtePathAttrDynamic dynamic = 1;
  if (_internal_has_dynamic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dynamic(this), target, stream);
  }

  // .service_layer.SLSrtePathAttrExplicit explicit = 2;
  if (_internal_has_explicit_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::explicit_(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate)
  return target;
}

size_t SLSrtePathComputeReq_SLSrtePathUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (path_update_type_case()) {
    // .service_layer.SLSrtePathAttrDynamic dynamic = 1;
    case kDynamic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *path_update_type_.dynamic_);
      break;
    }
    // .service_layer.SLSrtePathAttrExplicit explicit = 2;
    case kExplicit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *path_update_type_.explicit__);
      break;
    }
    case PATH_UPDATE_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrtePathComputeReq_SLSrtePathUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrtePathComputeReq_SLSrtePathUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrtePathComputeReq_SLSrtePathUpdate::GetClassData() const { return &_class_data_; }

void SLSrtePathComputeReq_SLSrtePathUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrtePathComputeReq_SLSrtePathUpdate *>(to)->MergeFrom(
      static_cast<const SLSrtePathComputeReq_SLSrtePathUpdate &>(from));
}


void SLSrtePathComputeReq_SLSrtePathUpdate::MergeFrom(const SLSrtePathComputeReq_SLSrtePathUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.path_update_type_case()) {
    case kDynamic: {
      _internal_mutable_dynamic()->::service_layer::SLSrtePathAttrDynamic::MergeFrom(from._internal_dynamic());
      break;
    }
    case kExplicit: {
      _internal_mutable_explicit_()->::service_layer::SLSrtePathAttrExplicit::MergeFrom(from._internal_explicit_());
      break;
    }
    case PATH_UPDATE_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrtePathComputeReq_SLSrtePathUpdate::CopyFrom(const SLSrtePathComputeReq_SLSrtePathUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrtePathComputeReq_SLSrtePathUpdate::IsInitialized() const {
  return true;
}

void SLSrtePathComputeReq_SLSrtePathUpdate::InternalSwap(SLSrtePathComputeReq_SLSrtePathUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(path_update_type_, other->path_update_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrtePathComputeReq_SLSrtePathUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_getter, &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpcalc_5fstateful_2eproto[3]);
}

// ===================================================================

class SLSrtePathComputeReq_SLSrtePathWithdraw::_Internal {
 public:
};

SLSrtePathComputeReq_SLSrtePathWithdraw::SLSrtePathComputeReq_SLSrtePathWithdraw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrtePathComputeReq.SLSrtePathWithdraw)
}
SLSrtePathComputeReq_SLSrtePathWithdraw::SLSrtePathComputeReq_SLSrtePathWithdraw(const SLSrtePathComputeReq_SLSrtePathWithdraw& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrtePathComputeReq.SLSrtePathWithdraw)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrtePathComputeReq_SLSrtePathWithdraw::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrtePathComputeReq_SLSrtePathWithdraw::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SLSrtePathComputeReq_SLSrtePathWithdraw::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_getter, &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpcalc_5fstateful_2eproto[4]);
}

// ===================================================================

class SLSrtePathComputeReq::_Internal {
 public:
  static const ::service_layer::SLSrPolicyKey& policy_key(const SLSrtePathComputeReq* msg);
  static const ::service_layer::SLSrCandidatePathKey& candidate_path_key(const SLSrtePathComputeReq* msg);
  static const ::service_layer::SLSrtePathComputeReq_SLSrtePathInit& init(const SLSrtePathComputeReq* msg);
  static const ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate& update(const SLSrtePathComputeReq* msg);
  static const ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw& withdraw(const SLSrtePathComputeReq* msg);
};

const ::service_layer::SLSrPolicyKey&
SLSrtePathComputeReq::_Internal::policy_key(const SLSrtePathComputeReq* msg) {
  return *msg->policy_key_;
}
const ::service_layer::SLSrCandidatePathKey&
SLSrtePathComputeReq::_Internal::candidate_path_key(const SLSrtePathComputeReq* msg) {
  return *msg->candidate_path_key_;
}
const ::service_layer::SLSrtePathComputeReq_SLSrtePathInit&
SLSrtePathComputeReq::_Internal::init(const SLSrtePathComputeReq* msg) {
  return *msg->request_type_.init_;
}
const ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate&
SLSrtePathComputeReq::_Internal::update(const SLSrtePathComputeReq* msg) {
  return *msg->request_type_.update_;
}
const ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw&
SLSrtePathComputeReq::_Internal::withdraw(const SLSrtePathComputeReq* msg) {
  return *msg->request_type_.withdraw_;
}
void SLSrtePathComputeReq::clear_policy_key() {
  if (GetArenaForAllocation() == nullptr && policy_key_ != nullptr) {
    delete policy_key_;
  }
  policy_key_ = nullptr;
}
void SLSrtePathComputeReq::clear_candidate_path_key() {
  if (GetArenaForAllocation() == nullptr && candidate_path_key_ != nullptr) {
    delete candidate_path_key_;
  }
  candidate_path_key_ = nullptr;
}
void SLSrtePathComputeReq::set_allocated_init(::service_layer::SLSrtePathComputeReq_SLSrtePathInit* init) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request_type();
  if (init) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrtePathComputeReq_SLSrtePathInit>::GetOwningArena(init);
    if (message_arena != submessage_arena) {
      init = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init, submessage_arena);
    }
    set_has_init();
    request_type_.init_ = init;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrtePathComputeReq.init)
}
void SLSrtePathComputeReq::set_allocated_update(::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request_type();
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate>::GetOwningArena(update);
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    set_has_update();
    request_type_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrtePathComputeReq.update)
}
void SLSrtePathComputeReq::set_allocated_withdraw(::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw* withdraw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request_type();
  if (withdraw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw>::GetOwningArena(withdraw);
    if (message_arena != submessage_arena) {
      withdraw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdraw, submessage_arena);
    }
    set_has_withdraw();
    request_type_.withdraw_ = withdraw;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrtePathComputeReq.withdraw)
}
SLSrtePathComputeReq::SLSrtePathComputeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrtePathComputeReq)
}
SLSrtePathComputeReq::SLSrtePathComputeReq(const SLSrtePathComputeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_policy_key()) {
    policy_key_ = new ::service_layer::SLSrPolicyKey(*from.policy_key_);
  } else {
    policy_key_ = nullptr;
  }
  if (from._internal_has_candidate_path_key()) {
    candidate_path_key_ = new ::service_layer::SLSrCandidatePathKey(*from.candidate_path_key_);
  } else {
    candidate_path_key_ = nullptr;
  }
  seq_num_ = from.seq_num_;
  clear_has_request_type();
  switch (from.request_type_case()) {
    case kInit: {
      _internal_mutable_init()->::service_layer::SLSrtePathComputeReq_SLSrtePathInit::MergeFrom(from._internal_init());
      break;
    }
    case kUpdate: {
      _internal_mutable_update()->::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate::MergeFrom(from._internal_update());
      break;
    }
    case kWithdraw: {
      _internal_mutable_withdraw()->::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw::MergeFrom(from._internal_withdraw());
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrtePathComputeReq)
}

inline void SLSrtePathComputeReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&policy_key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seq_num_) -
    reinterpret_cast<char*>(&policy_key_)) + sizeof(seq_num_));
clear_has_request_type();
}

SLSrtePathComputeReq::~SLSrtePathComputeReq() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrtePathComputeReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrtePathComputeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete policy_key_;
  if (this != internal_default_instance()) delete candidate_path_key_;
  if (has_request_type()) {
    clear_request_type();
  }
}

void SLSrtePathComputeReq::ArenaDtor(void* object) {
  SLSrtePathComputeReq* _this = reinterpret_cast< SLSrtePathComputeReq* >(object);
  (void)_this;
}
void SLSrtePathComputeReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrtePathComputeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrtePathComputeReq::clear_request_type() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLSrtePathComputeReq)
  switch (request_type_case()) {
    case kInit: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_type_.init_;
      }
      break;
    }
    case kUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_type_.update_;
      }
      break;
    }
    case kWithdraw: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_type_.withdraw_;
      }
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}


void SLSrtePathComputeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrtePathComputeReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && policy_key_ != nullptr) {
    delete policy_key_;
  }
  policy_key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && candidate_path_key_ != nullptr) {
    delete candidate_path_key_;
  }
  candidate_path_key_ = nullptr;
  seq_num_ = uint64_t{0u};
  clear_request_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrtePathComputeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLSrPolicyKey policy_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_policy_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrCandidatePathKey candidate_path_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidate_path_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 seq_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrtePathComputeReq.SLSrtePathInit init = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_init(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrtePathComputeReq.SLSrtePathUpdate update = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrtePathComputeReq.SLSrtePathWithdraw withdraw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdraw(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrtePathComputeReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrtePathComputeReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLSrPolicyKey policy_key = 1;
  if (this->_internal_has_policy_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::policy_key(this), target, stream);
  }

  // .service_layer.SLSrCandidatePathKey candidate_path_key = 2;
  if (this->_internal_has_candidate_path_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::candidate_path_key(this), target, stream);
  }

  // uint64 seq_num = 3;
  if (this->_internal_seq_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_seq_num(), target);
  }

  // .service_layer.SLSrtePathComputeReq.SLSrtePathInit init = 4;
  if (_internal_has_init()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::init(this), target, stream);
  }

  // .service_layer.SLSrtePathComputeReq.SLSrtePathUpdate update = 5;
  if (_internal_has_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::update(this), target, stream);
  }

  // .service_layer.SLSrtePathComputeReq.SLSrtePathWithdraw withdraw = 6;
  if (_internal_has_withdraw()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::withdraw(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrtePathComputeReq)
  return target;
}

size_t SLSrtePathComputeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrtePathComputeReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLSrPolicyKey policy_key = 1;
  if (this->_internal_has_policy_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *policy_key_);
  }

  // .service_layer.SLSrCandidatePathKey candidate_path_key = 2;
  if (this->_internal_has_candidate_path_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *candidate_path_key_);
  }

  // uint64 seq_num = 3;
  if (this->_internal_seq_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_seq_num());
  }

  switch (request_type_case()) {
    // .service_layer.SLSrtePathComputeReq.SLSrtePathInit init = 4;
    case kInit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_type_.init_);
      break;
    }
    // .service_layer.SLSrtePathComputeReq.SLSrtePathUpdate update = 5;
    case kUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_type_.update_);
      break;
    }
    // .service_layer.SLSrtePathComputeReq.SLSrtePathWithdraw withdraw = 6;
    case kWithdraw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_type_.withdraw_);
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrtePathComputeReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrtePathComputeReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrtePathComputeReq::GetClassData() const { return &_class_data_; }

void SLSrtePathComputeReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrtePathComputeReq *>(to)->MergeFrom(
      static_cast<const SLSrtePathComputeReq &>(from));
}


void SLSrtePathComputeReq::MergeFrom(const SLSrtePathComputeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrtePathComputeReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_policy_key()) {
    _internal_mutable_policy_key()->::service_layer::SLSrPolicyKey::MergeFrom(from._internal_policy_key());
  }
  if (from._internal_has_candidate_path_key()) {
    _internal_mutable_candidate_path_key()->::service_layer::SLSrCandidatePathKey::MergeFrom(from._internal_candidate_path_key());
  }
  if (from._internal_seq_num() != 0) {
    _internal_set_seq_num(from._internal_seq_num());
  }
  switch (from.request_type_case()) {
    case kInit: {
      _internal_mutable_init()->::service_layer::SLSrtePathComputeReq_SLSrtePathInit::MergeFrom(from._internal_init());
      break;
    }
    case kUpdate: {
      _internal_mutable_update()->::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate::MergeFrom(from._internal_update());
      break;
    }
    case kWithdraw: {
      _internal_mutable_withdraw()->::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw::MergeFrom(from._internal_withdraw());
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrtePathComputeReq::CopyFrom(const SLSrtePathComputeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrtePathComputeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrtePathComputeReq::IsInitialized() const {
  return true;
}

void SLSrtePathComputeReq::InternalSwap(SLSrtePathComputeReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLSrtePathComputeReq, seq_num_)
      + sizeof(SLSrtePathComputeReq::seq_num_)
      - PROTOBUF_FIELD_OFFSET(SLSrtePathComputeReq, policy_key_)>(
          reinterpret_cast<char*>(&policy_key_),
          reinterpret_cast<char*>(&other->policy_key_));
  swap(request_type_, other->request_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrtePathComputeReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_getter, &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpcalc_5fstateful_2eproto[5]);
}

// ===================================================================

class SLSrtePathComputeRes_SLSrteDynamicPathResult::_Internal {
 public:
  using HasBits = decltype(std::declval<SLSrtePathComputeRes_SLSrteDynamicPathResult>()._has_bits_);
  static void set_has_effective_diversity_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void SLSrtePathComputeRes_SLSrteDynamicPathResult::clear_segment_lists() {
  segment_lists_.Clear();
}
SLSrtePathComputeRes_SLSrteDynamicPathResult::SLSrtePathComputeRes_SLSrteDynamicPathResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  segment_lists_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult)
}
SLSrtePathComputeRes_SLSrteDynamicPathResult::SLSrtePathComputeRes_SLSrteDynamicPathResult(const SLSrtePathComputeRes_SLSrteDynamicPathResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      segment_lists_(from.segment_lists_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  effective_diversity_level_ = from.effective_diversity_level_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult)
}

inline void SLSrtePathComputeRes_SLSrteDynamicPathResult::SharedCtor() {
effective_diversity_level_ = 0;
}

SLSrtePathComputeRes_SLSrteDynamicPathResult::~SLSrtePathComputeRes_SLSrteDynamicPathResult() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrtePathComputeRes_SLSrteDynamicPathResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLSrtePathComputeRes_SLSrteDynamicPathResult::ArenaDtor(void* object) {
  SLSrtePathComputeRes_SLSrteDynamicPathResult* _this = reinterpret_cast< SLSrtePathComputeRes_SLSrteDynamicPathResult* >(object);
  (void)_this;
}
void SLSrtePathComputeRes_SLSrteDynamicPathResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrtePathComputeRes_SLSrteDynamicPathResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrtePathComputeRes_SLSrteDynamicPathResult::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segment_lists_.Clear();
  effective_diversity_level_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrtePathComputeRes_SLSrteDynamicPathResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLSrSegmentList segment_lists = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segment_lists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .service_layer.SLSrDiversityLevel effective_diversity_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_effective_diversity_level(static_cast<::service_layer::SLSrDiversityLevel>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrtePathComputeRes_SLSrteDynamicPathResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLSrSegmentList segment_lists = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segment_lists_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_segment_lists(i), target, stream);
  }

  // optional .service_layer.SLSrDiversityLevel effective_diversity_level = 3;
  if (_internal_has_effective_diversity_level()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_effective_diversity_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult)
  return target;
}

size_t SLSrtePathComputeRes_SLSrteDynamicPathResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLSrSegmentList segment_lists = 1;
  total_size += 1UL * this->_internal_segment_lists_size();
  for (const auto& msg : this->segment_lists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .service_layer.SLSrDiversityLevel effective_diversity_level = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_effective_diversity_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrtePathComputeRes_SLSrteDynamicPathResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrtePathComputeRes_SLSrteDynamicPathResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrtePathComputeRes_SLSrteDynamicPathResult::GetClassData() const { return &_class_data_; }

void SLSrtePathComputeRes_SLSrteDynamicPathResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrtePathComputeRes_SLSrteDynamicPathResult *>(to)->MergeFrom(
      static_cast<const SLSrtePathComputeRes_SLSrteDynamicPathResult &>(from));
}


void SLSrtePathComputeRes_SLSrteDynamicPathResult::MergeFrom(const SLSrtePathComputeRes_SLSrteDynamicPathResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  segment_lists_.MergeFrom(from.segment_lists_);
  if (from._internal_has_effective_diversity_level()) {
    _internal_set_effective_diversity_level(from._internal_effective_diversity_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrtePathComputeRes_SLSrteDynamicPathResult::CopyFrom(const SLSrtePathComputeRes_SLSrteDynamicPathResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrtePathComputeRes_SLSrteDynamicPathResult::IsInitialized() const {
  return true;
}

void SLSrtePathComputeRes_SLSrteDynamicPathResult::InternalSwap(SLSrtePathComputeRes_SLSrteDynamicPathResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  segment_lists_.InternalSwap(&other->segment_lists_);
  swap(effective_diversity_level_, other->effective_diversity_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrtePathComputeRes_SLSrteDynamicPathResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_getter, &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpcalc_5fstateful_2eproto[6]);
}

// ===================================================================

class SLSrtePathComputeRes_SLSrtePathError::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& type(const SLSrtePathComputeRes_SLSrtePathError* msg);
};

const ::service_layer::SLErrorStatus&
SLSrtePathComputeRes_SLSrtePathError::_Internal::type(const SLSrtePathComputeRes_SLSrtePathError* msg) {
  return *msg->type_;
}
void SLSrtePathComputeRes_SLSrtePathError::clear_type() {
  if (GetArenaForAllocation() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
SLSrtePathComputeRes_SLSrtePathError::SLSrtePathComputeRes_SLSrtePathError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrtePathComputeRes.SLSrtePathError)
}
SLSrtePathComputeRes_SLSrtePathError::SLSrtePathComputeRes_SLSrtePathError(const SLSrtePathComputeRes_SLSrtePathError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_type()) {
    type_ = new ::service_layer::SLErrorStatus(*from.type_);
  } else {
    type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrtePathComputeRes.SLSrtePathError)
}

inline void SLSrtePathComputeRes_SLSrtePathError::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = nullptr;
}

SLSrtePathComputeRes_SLSrtePathError::~SLSrtePathComputeRes_SLSrtePathError() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrtePathComputeRes.SLSrtePathError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrtePathComputeRes_SLSrtePathError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
}

void SLSrtePathComputeRes_SLSrtePathError::ArenaDtor(void* object) {
  SLSrtePathComputeRes_SLSrtePathError* _this = reinterpret_cast< SLSrtePathComputeRes_SLSrtePathError* >(object);
  (void)_this;
}
void SLSrtePathComputeRes_SLSrtePathError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrtePathComputeRes_SLSrtePathError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrtePathComputeRes_SLSrtePathError::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrtePathComputeRes.SLSrtePathError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrtePathComputeRes_SLSrtePathError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLSrtePathComputeRes.SLSrtePathError.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrtePathComputeRes_SLSrtePathError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrtePathComputeRes.SLSrtePathError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus type = 1;
  if (this->_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::type(this), target, stream);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLSrtePathComputeRes.SLSrtePathError.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrtePathComputeRes.SLSrtePathError)
  return target;
}

size_t SLSrtePathComputeRes_SLSrtePathError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrtePathComputeRes.SLSrtePathError)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .service_layer.SLErrorStatus type = 1;
  if (this->_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrtePathComputeRes_SLSrtePathError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrtePathComputeRes_SLSrtePathError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrtePathComputeRes_SLSrtePathError::GetClassData() const { return &_class_data_; }

void SLSrtePathComputeRes_SLSrtePathError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrtePathComputeRes_SLSrtePathError *>(to)->MergeFrom(
      static_cast<const SLSrtePathComputeRes_SLSrtePathError &>(from));
}


void SLSrtePathComputeRes_SLSrtePathError::MergeFrom(const SLSrtePathComputeRes_SLSrtePathError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrtePathComputeRes.SLSrtePathError)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_has_type()) {
    _internal_mutable_type()->::service_layer::SLErrorStatus::MergeFrom(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrtePathComputeRes_SLSrtePathError::CopyFrom(const SLSrtePathComputeRes_SLSrtePathError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrtePathComputeRes.SLSrtePathError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrtePathComputeRes_SLSrtePathError::IsInitialized() const {
  return true;
}

void SLSrtePathComputeRes_SLSrtePathError::InternalSwap(SLSrtePathComputeRes_SLSrtePathError* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrtePathComputeRes_SLSrtePathError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_getter, &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpcalc_5fstateful_2eproto[7]);
}

// ===================================================================

class SLSrtePathComputeRes::_Internal {
 public:
  static const ::service_layer::SLSrPolicyKey& policy_key(const SLSrtePathComputeRes* msg);
  static const ::service_layer::SLSrCandidatePathKey& candidate_path_key(const SLSrtePathComputeRes* msg);
  static const ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult& path_result(const SLSrtePathComputeRes* msg);
  static const ::service_layer::SLSrtePathComputeRes_SLSrtePathError& error(const SLSrtePathComputeRes* msg);
};

const ::service_layer::SLSrPolicyKey&
SLSrtePathComputeRes::_Internal::policy_key(const SLSrtePathComputeRes* msg) {
  return *msg->policy_key_;
}
const ::service_layer::SLSrCandidatePathKey&
SLSrtePathComputeRes::_Internal::candidate_path_key(const SLSrtePathComputeRes* msg) {
  return *msg->candidate_path_key_;
}
const ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult&
SLSrtePathComputeRes::_Internal::path_result(const SLSrtePathComputeRes* msg) {
  return *msg->response_type_.path_result_;
}
const ::service_layer::SLSrtePathComputeRes_SLSrtePathError&
SLSrtePathComputeRes::_Internal::error(const SLSrtePathComputeRes* msg) {
  return *msg->response_type_.error_;
}
void SLSrtePathComputeRes::clear_policy_key() {
  if (GetArenaForAllocation() == nullptr && policy_key_ != nullptr) {
    delete policy_key_;
  }
  policy_key_ = nullptr;
}
void SLSrtePathComputeRes::clear_candidate_path_key() {
  if (GetArenaForAllocation() == nullptr && candidate_path_key_ != nullptr) {
    delete candidate_path_key_;
  }
  candidate_path_key_ = nullptr;
}
void SLSrtePathComputeRes::set_allocated_path_result(::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult* path_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response_type();
  if (path_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult>::GetOwningArena(path_result);
    if (message_arena != submessage_arena) {
      path_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_result, submessage_arena);
    }
    set_has_path_result();
    response_type_.path_result_ = path_result;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrtePathComputeRes.path_result)
}
void SLSrtePathComputeRes::set_allocated_error(::service_layer::SLSrtePathComputeRes_SLSrtePathError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response_type();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrtePathComputeRes_SLSrtePathError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    response_type_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrtePathComputeRes.error)
}
SLSrtePathComputeRes::SLSrtePathComputeRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrtePathComputeRes)
}
SLSrtePathComputeRes::SLSrtePathComputeRes(const SLSrtePathComputeRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_policy_key()) {
    policy_key_ = new ::service_layer::SLSrPolicyKey(*from.policy_key_);
  } else {
    policy_key_ = nullptr;
  }
  if (from._internal_has_candidate_path_key()) {
    candidate_path_key_ = new ::service_layer::SLSrCandidatePathKey(*from.candidate_path_key_);
  } else {
    candidate_path_key_ = nullptr;
  }
  req_seq_num_ = from.req_seq_num_;
  clear_has_response_type();
  switch (from.response_type_case()) {
    case kPathResult: {
      _internal_mutable_path_result()->::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult::MergeFrom(from._internal_path_result());
      break;
    }
    case kError: {
      _internal_mutable_error()->::service_layer::SLSrtePathComputeRes_SLSrtePathError::MergeFrom(from._internal_error());
      break;
    }
    case RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrtePathComputeRes)
}

inline void SLSrtePathComputeRes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&policy_key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&req_seq_num_) -
    reinterpret_cast<char*>(&policy_key_)) + sizeof(req_seq_num_));
clear_has_response_type();
}

SLSrtePathComputeRes::~SLSrtePathComputeRes() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrtePathComputeRes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrtePathComputeRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete policy_key_;
  if (this != internal_default_instance()) delete candidate_path_key_;
  if (has_response_type()) {
    clear_response_type();
  }
}

void SLSrtePathComputeRes::ArenaDtor(void* object) {
  SLSrtePathComputeRes* _this = reinterpret_cast< SLSrtePathComputeRes* >(object);
  (void)_this;
}
void SLSrtePathComputeRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrtePathComputeRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrtePathComputeRes::clear_response_type() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLSrtePathComputeRes)
  switch (response_type_case()) {
    case kPathResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_type_.path_result_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_type_.error_;
      }
      break;
    }
    case RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_TYPE_NOT_SET;
}


void SLSrtePathComputeRes::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrtePathComputeRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && policy_key_ != nullptr) {
    delete policy_key_;
  }
  policy_key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && candidate_path_key_ != nullptr) {
    delete candidate_path_key_;
  }
  candidate_path_key_ = nullptr;
  req_seq_num_ = uint64_t{0u};
  clear_response_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrtePathComputeRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLSrPolicyKey policy_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_policy_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrCandidatePathKey candidate_path_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidate_path_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 req_seq_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          req_seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult path_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrtePathComputeRes.SLSrtePathError error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrtePathComputeRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrtePathComputeRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLSrPolicyKey policy_key = 1;
  if (this->_internal_has_policy_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::policy_key(this), target, stream);
  }

  // .service_layer.SLSrCandidatePathKey candidate_path_key = 2;
  if (this->_internal_has_candidate_path_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::candidate_path_key(this), target, stream);
  }

  // uint64 req_seq_num = 3;
  if (this->_internal_req_seq_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_req_seq_num(), target);
  }

  // .service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult path_result = 4;
  if (_internal_has_path_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::path_result(this), target, stream);
  }

  // .service_layer.SLSrtePathComputeRes.SLSrtePathError error = 6;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrtePathComputeRes)
  return target;
}

size_t SLSrtePathComputeRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrtePathComputeRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLSrPolicyKey policy_key = 1;
  if (this->_internal_has_policy_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *policy_key_);
  }

  // .service_layer.SLSrCandidatePathKey candidate_path_key = 2;
  if (this->_internal_has_candidate_path_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *candidate_path_key_);
  }

  // uint64 req_seq_num = 3;
  if (this->_internal_req_seq_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_req_seq_num());
  }

  switch (response_type_case()) {
    // .service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult path_result = 4;
    case kPathResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_type_.path_result_);
      break;
    }
    // .service_layer.SLSrtePathComputeRes.SLSrtePathError error = 6;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_type_.error_);
      break;
    }
    case RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrtePathComputeRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrtePathComputeRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrtePathComputeRes::GetClassData() const { return &_class_data_; }

void SLSrtePathComputeRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrtePathComputeRes *>(to)->MergeFrom(
      static_cast<const SLSrtePathComputeRes &>(from));
}


void SLSrtePathComputeRes::MergeFrom(const SLSrtePathComputeRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrtePathComputeRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_policy_key()) {
    _internal_mutable_policy_key()->::service_layer::SLSrPolicyKey::MergeFrom(from._internal_policy_key());
  }
  if (from._internal_has_candidate_path_key()) {
    _internal_mutable_candidate_path_key()->::service_layer::SLSrCandidatePathKey::MergeFrom(from._internal_candidate_path_key());
  }
  if (from._internal_req_seq_num() != 0) {
    _internal_set_req_seq_num(from._internal_req_seq_num());
  }
  switch (from.response_type_case()) {
    case kPathResult: {
      _internal_mutable_path_result()->::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult::MergeFrom(from._internal_path_result());
      break;
    }
    case kError: {
      _internal_mutable_error()->::service_layer::SLSrtePathComputeRes_SLSrtePathError::MergeFrom(from._internal_error());
      break;
    }
    case RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrtePathComputeRes::CopyFrom(const SLSrtePathComputeRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrtePathComputeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrtePathComputeRes::IsInitialized() const {
  return true;
}

void SLSrtePathComputeRes::InternalSwap(SLSrtePathComputeRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLSrtePathComputeRes, req_seq_num_)
      + sizeof(SLSrtePathComputeRes::req_seq_num_)
      - PROTOBUF_FIELD_OFFSET(SLSrtePathComputeRes, policy_key_)>(
          reinterpret_cast<char*>(&policy_key_),
          reinterpret_cast<char*>(&other->policy_key_));
  swap(response_type_, other->response_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrtePathComputeRes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_getter, &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpcalc_5fstateful_2eproto[8]);
}

// ===================================================================

class SLSrtePathAttrDynamic::_Internal {
 public:
  static const ::service_layer::ConstraintSet& constraints(const SLSrtePathAttrDynamic* msg);
};

const ::service_layer::ConstraintSet&
SLSrtePathAttrDynamic::_Internal::constraints(const SLSrtePathAttrDynamic* msg) {
  return *msg->constraints_;
}
SLSrtePathAttrDynamic::SLSrtePathAttrDynamic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrtePathAttrDynamic)
}
SLSrtePathAttrDynamic::SLSrtePathAttrDynamic(const SLSrtePathAttrDynamic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_constraints()) {
    constraints_ = new ::service_layer::ConstraintSet(*from.constraints_);
  } else {
    constraints_ = nullptr;
  }
  o_metric_ = from.o_metric_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrtePathAttrDynamic)
}

inline void SLSrtePathAttrDynamic::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&constraints_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&o_metric_) -
    reinterpret_cast<char*>(&constraints_)) + sizeof(o_metric_));
}

SLSrtePathAttrDynamic::~SLSrtePathAttrDynamic() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrtePathAttrDynamic)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrtePathAttrDynamic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete constraints_;
}

void SLSrtePathAttrDynamic::ArenaDtor(void* object) {
  SLSrtePathAttrDynamic* _this = reinterpret_cast< SLSrtePathAttrDynamic* >(object);
  (void)_this;
}
void SLSrtePathAttrDynamic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrtePathAttrDynamic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrtePathAttrDynamic::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrtePathAttrDynamic)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && constraints_ != nullptr) {
    delete constraints_;
  }
  constraints_ = nullptr;
  o_metric_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrtePathAttrDynamic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLSrMetricType o_metric = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_o_metric(static_cast<::service_layer::SLSrMetricType>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.ConstraintSet constraints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_constraints(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrtePathAttrDynamic::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrtePathAttrDynamic)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLSrMetricType o_metric = 1;
  if (this->_internal_o_metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_o_metric(), target);
  }

  // .service_layer.ConstraintSet constraints = 2;
  if (this->_internal_has_constraints()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::constraints(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrtePathAttrDynamic)
  return target;
}

size_t SLSrtePathAttrDynamic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrtePathAttrDynamic)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.ConstraintSet constraints = 2;
  if (this->_internal_has_constraints()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *constraints_);
  }

  // .service_layer.SLSrMetricType o_metric = 1;
  if (this->_internal_o_metric() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_o_metric());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrtePathAttrDynamic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrtePathAttrDynamic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrtePathAttrDynamic::GetClassData() const { return &_class_data_; }

void SLSrtePathAttrDynamic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrtePathAttrDynamic *>(to)->MergeFrom(
      static_cast<const SLSrtePathAttrDynamic &>(from));
}


void SLSrtePathAttrDynamic::MergeFrom(const SLSrtePathAttrDynamic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrtePathAttrDynamic)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_constraints()) {
    _internal_mutable_constraints()->::service_layer::ConstraintSet::MergeFrom(from._internal_constraints());
  }
  if (from._internal_o_metric() != 0) {
    _internal_set_o_metric(from._internal_o_metric());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrtePathAttrDynamic::CopyFrom(const SLSrtePathAttrDynamic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrtePathAttrDynamic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrtePathAttrDynamic::IsInitialized() const {
  return true;
}

void SLSrtePathAttrDynamic::InternalSwap(SLSrtePathAttrDynamic* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLSrtePathAttrDynamic, o_metric_)
      + sizeof(SLSrtePathAttrDynamic::o_metric_)
      - PROTOBUF_FIELD_OFFSET(SLSrtePathAttrDynamic, constraints_)>(
          reinterpret_cast<char*>(&constraints_),
          reinterpret_cast<char*>(&other->constraints_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrtePathAttrDynamic::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_getter, &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpcalc_5fstateful_2eproto[9]);
}

// ===================================================================

class SLSrtePathAttrExplicit::_Internal {
 public:
  static const ::service_layer::ConstraintSet& constraints(const SLSrtePathAttrExplicit* msg);
};

const ::service_layer::ConstraintSet&
SLSrtePathAttrExplicit::_Internal::constraints(const SLSrtePathAttrExplicit* msg) {
  return *msg->constraints_;
}
void SLSrtePathAttrExplicit::clear_segment_lists() {
  segment_lists_.Clear();
}
SLSrtePathAttrExplicit::SLSrtePathAttrExplicit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  segment_lists_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrtePathAttrExplicit)
}
SLSrtePathAttrExplicit::SLSrtePathAttrExplicit(const SLSrtePathAttrExplicit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      segment_lists_(from.segment_lists_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_constraints()) {
    constraints_ = new ::service_layer::ConstraintSet(*from.constraints_);
  } else {
    constraints_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrtePathAttrExplicit)
}

inline void SLSrtePathAttrExplicit::SharedCtor() {
constraints_ = nullptr;
}

SLSrtePathAttrExplicit::~SLSrtePathAttrExplicit() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrtePathAttrExplicit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrtePathAttrExplicit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete constraints_;
}

void SLSrtePathAttrExplicit::ArenaDtor(void* object) {
  SLSrtePathAttrExplicit* _this = reinterpret_cast< SLSrtePathAttrExplicit* >(object);
  (void)_this;
}
void SLSrtePathAttrExplicit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrtePathAttrExplicit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrtePathAttrExplicit::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrtePathAttrExplicit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segment_lists_.Clear();
  if (GetArenaForAllocation() == nullptr && constraints_ != nullptr) {
    delete constraints_;
  }
  constraints_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrtePathAttrExplicit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLSrSegmentList segment_lists = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segment_lists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.ConstraintSet constraints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_constraints(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrtePathAttrExplicit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrtePathAttrExplicit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLSrSegmentList segment_lists = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segment_lists_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_segment_lists(i), target, stream);
  }

  // .service_layer.ConstraintSet constraints = 2;
  if (this->_internal_has_constraints()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::constraints(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrtePathAttrExplicit)
  return target;
}

size_t SLSrtePathAttrExplicit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrtePathAttrExplicit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLSrSegmentList segment_lists = 1;
  total_size += 1UL * this->_internal_segment_lists_size();
  for (const auto& msg : this->segment_lists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.ConstraintSet constraints = 2;
  if (this->_internal_has_constraints()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *constraints_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrtePathAttrExplicit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrtePathAttrExplicit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrtePathAttrExplicit::GetClassData() const { return &_class_data_; }

void SLSrtePathAttrExplicit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrtePathAttrExplicit *>(to)->MergeFrom(
      static_cast<const SLSrtePathAttrExplicit &>(from));
}


void SLSrtePathAttrExplicit::MergeFrom(const SLSrtePathAttrExplicit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrtePathAttrExplicit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  segment_lists_.MergeFrom(from.segment_lists_);
  if (from._internal_has_constraints()) {
    _internal_mutable_constraints()->::service_layer::ConstraintSet::MergeFrom(from._internal_constraints());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrtePathAttrExplicit::CopyFrom(const SLSrtePathAttrExplicit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrtePathAttrExplicit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrtePathAttrExplicit::IsInitialized() const {
  return true;
}

void SLSrtePathAttrExplicit::InternalSwap(SLSrtePathAttrExplicit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  segment_lists_.InternalSwap(&other->segment_lists_);
  swap(constraints_, other->constraints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrtePathAttrExplicit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_getter, &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpcalc_5fstateful_2eproto[10]);
}

// ===================================================================

class ConstraintSet_PathDiversity::_Internal {
 public:
  using HasBits = decltype(std::declval<ConstraintSet_PathDiversity>()._has_bits_);
  static const ::service_layer::AssociationGroup& association(const ConstraintSet_PathDiversity* msg);
  static void set_has_min_diversity_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::service_layer::AssociationGroup&
ConstraintSet_PathDiversity::_Internal::association(const ConstraintSet_PathDiversity* msg) {
  return *msg->association_;
}
ConstraintSet_PathDiversity::ConstraintSet_PathDiversity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.ConstraintSet.PathDiversity)
}
ConstraintSet_PathDiversity::ConstraintSet_PathDiversity(const ConstraintSet_PathDiversity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_association()) {
    association_ = new ::service_layer::AssociationGroup(*from.association_);
  } else {
    association_ = nullptr;
  }
  ::memcpy(&diversity_level_, &from.diversity_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&shortest_path_) -
    reinterpret_cast<char*>(&diversity_level_)) + sizeof(shortest_path_));
  // @@protoc_insertion_point(copy_constructor:service_layer.ConstraintSet.PathDiversity)
}

inline void ConstraintSet_PathDiversity::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&association_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&shortest_path_) -
    reinterpret_cast<char*>(&association_)) + sizeof(shortest_path_));
}

ConstraintSet_PathDiversity::~ConstraintSet_PathDiversity() {
  // @@protoc_insertion_point(destructor:service_layer.ConstraintSet.PathDiversity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConstraintSet_PathDiversity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete association_;
}

void ConstraintSet_PathDiversity::ArenaDtor(void* object) {
  ConstraintSet_PathDiversity* _this = reinterpret_cast< ConstraintSet_PathDiversity* >(object);
  (void)_this;
}
void ConstraintSet_PathDiversity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConstraintSet_PathDiversity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConstraintSet_PathDiversity::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.ConstraintSet.PathDiversity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && association_ != nullptr) {
    delete association_;
  }
  association_ = nullptr;
  diversity_level_ = 0;
  min_diversity_level_ = 0;
  shortest_path_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConstraintSet_PathDiversity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.AssociationGroup association = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_association(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrDiversityLevel diversity_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_diversity_level(static_cast<::service_layer::SLSrDiversityLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .service_layer.SLSrDiversityLevel min_diversity_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_min_diversity_level(static_cast<::service_layer::SLSrDiversityLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // bool shortest_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          shortest_path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConstraintSet_PathDiversity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.ConstraintSet.PathDiversity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.AssociationGroup association = 1;
  if (this->_internal_has_association()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::association(this), target, stream);
  }

  // .service_layer.SLSrDiversityLevel diversity_level = 2;
  if (this->_internal_diversity_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_diversity_level(), target);
  }

  // optional .service_layer.SLSrDiversityLevel min_diversity_level = 3;
  if (_internal_has_min_diversity_level()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_min_diversity_level(), target);
  }

  // bool shortest_path = 4;
  if (this->_internal_shortest_path() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_shortest_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.ConstraintSet.PathDiversity)
  return target;
}

size_t ConstraintSet_PathDiversity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.ConstraintSet.PathDiversity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.AssociationGroup association = 1;
  if (this->_internal_has_association()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *association_);
  }

  // .service_layer.SLSrDiversityLevel diversity_level = 2;
  if (this->_internal_diversity_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_diversity_level());
  }

  // optional .service_layer.SLSrDiversityLevel min_diversity_level = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_min_diversity_level());
  }

  // bool shortest_path = 4;
  if (this->_internal_shortest_path() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConstraintSet_PathDiversity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConstraintSet_PathDiversity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConstraintSet_PathDiversity::GetClassData() const { return &_class_data_; }

void ConstraintSet_PathDiversity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConstraintSet_PathDiversity *>(to)->MergeFrom(
      static_cast<const ConstraintSet_PathDiversity &>(from));
}


void ConstraintSet_PathDiversity::MergeFrom(const ConstraintSet_PathDiversity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.ConstraintSet.PathDiversity)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_association()) {
    _internal_mutable_association()->::service_layer::AssociationGroup::MergeFrom(from._internal_association());
  }
  if (from._internal_diversity_level() != 0) {
    _internal_set_diversity_level(from._internal_diversity_level());
  }
  if (from._internal_has_min_diversity_level()) {
    _internal_set_min_diversity_level(from._internal_min_diversity_level());
  }
  if (from._internal_shortest_path() != 0) {
    _internal_set_shortest_path(from._internal_shortest_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConstraintSet_PathDiversity::CopyFrom(const ConstraintSet_PathDiversity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.ConstraintSet.PathDiversity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstraintSet_PathDiversity::IsInitialized() const {
  return true;
}

void ConstraintSet_PathDiversity::InternalSwap(ConstraintSet_PathDiversity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConstraintSet_PathDiversity, shortest_path_)
      + sizeof(ConstraintSet_PathDiversity::shortest_path_)
      - PROTOBUF_FIELD_OFFSET(ConstraintSet_PathDiversity, association_)>(
          reinterpret_cast<char*>(&association_),
          reinterpret_cast<char*>(&other->association_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConstraintSet_PathDiversity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_getter, &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpcalc_5fstateful_2eproto[11]);
}

// ===================================================================

class ConstraintSet::_Internal {
 public:
  using HasBits = decltype(std::declval<ConstraintSet>()._has_bits_);
  static const ::service_layer::SLSrAffinities& affinities(const ConstraintSet* msg);
  static const ::service_layer::ConstraintSet_PathDiversity& path_diversity(const ConstraintSet* msg);
  static void set_has_path_diversity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::service_layer::AssociationGroup& corouted_association(const ConstraintSet* msg);
  static void set_has_corouted_association(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::service_layer::SLSrAffinities&
ConstraintSet::_Internal::affinities(const ConstraintSet* msg) {
  return *msg->affinities_;
}
const ::service_layer::ConstraintSet_PathDiversity&
ConstraintSet::_Internal::path_diversity(const ConstraintSet* msg) {
  return *msg->path_diversity_;
}
const ::service_layer::AssociationGroup&
ConstraintSet::_Internal::corouted_association(const ConstraintSet* msg) {
  return *msg->corouted_association_;
}
void ConstraintSet::clear_affinities() {
  if (GetArenaForAllocation() == nullptr && affinities_ != nullptr) {
    delete affinities_;
  }
  affinities_ = nullptr;
}
void ConstraintSet::clear_ip_exclude() {
  ip_exclude_.Clear();
}
ConstraintSet::ConstraintSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  srlg_exclude_(arena),
  ip_exclude_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.ConstraintSet)
}
ConstraintSet::ConstraintSet(const ConstraintSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      srlg_exclude_(from.srlg_exclude_),
      ip_exclude_(from.ip_exclude_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_affinities()) {
    affinities_ = new ::service_layer::SLSrAffinities(*from.affinities_);
  } else {
    affinities_ = nullptr;
  }
  if (from._internal_has_path_diversity()) {
    path_diversity_ = new ::service_layer::ConstraintSet_PathDiversity(*from.path_diversity_);
  } else {
    path_diversity_ = nullptr;
  }
  if (from._internal_has_corouted_association()) {
    corouted_association_ = new ::service_layer::AssociationGroup(*from.corouted_association_);
  } else {
    corouted_association_ = nullptr;
  }
  ::memcpy(&maximum_sid_depth_, &from.maximum_sid_depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&persistent_segments_) -
    reinterpret_cast<char*>(&maximum_sid_depth_)) + sizeof(persistent_segments_));
  // @@protoc_insertion_point(copy_constructor:service_layer.ConstraintSet)
}

inline void ConstraintSet::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&affinities_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&persistent_segments_) -
    reinterpret_cast<char*>(&affinities_)) + sizeof(persistent_segments_));
}

ConstraintSet::~ConstraintSet() {
  // @@protoc_insertion_point(destructor:service_layer.ConstraintSet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConstraintSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete affinities_;
  if (this != internal_default_instance()) delete path_diversity_;
  if (this != internal_default_instance()) delete corouted_association_;
}

void ConstraintSet::ArenaDtor(void* object) {
  ConstraintSet* _this = reinterpret_cast< ConstraintSet* >(object);
  (void)_this;
}
void ConstraintSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConstraintSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConstraintSet::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.ConstraintSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srlg_exclude_.Clear();
  ip_exclude_.Clear();
  if (GetArenaForAllocation() == nullptr && affinities_ != nullptr) {
    delete affinities_;
  }
  affinities_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(path_diversity_ != nullptr);
      path_diversity_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(corouted_association_ != nullptr);
      corouted_association_->Clear();
    }
  }
  ::memset(&maximum_sid_depth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&persistent_segments_) -
      reinterpret_cast<char*>(&maximum_sid_depth_)) + sizeof(persistent_segments_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConstraintSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLSrAffinities affinities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_affinities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 srlg_exclude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_srlg_exclude(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_srlg_exclude(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLIpAddress ip_exclude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ip_exclude(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .service_layer.ConstraintSet.PathDiversity path_diversity = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_diversity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .service_layer.AssociationGroup corouted_association = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_corouted_association(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guaranteed_bandwidth = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          guaranteed_bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool strict_path_segments = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          strict_path_segments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool unprotected_segments = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          unprotected_segments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool persistent_segments = 203;
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          persistent_segments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maximum_sid_depth = 204;
      case 204:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          maximum_sid_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConstraintSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.ConstraintSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLSrAffinities affinities = 1;
  if (this->_internal_has_affinities()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::affinities(this), target, stream);
  }

  // repeated uint32 srlg_exclude = 4;
  {
    int byte_size = _srlg_exclude_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_srlg_exclude(), byte_size, target);
    }
  }

  // repeated .service_layer.SLIpAddress ip_exclude = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ip_exclude_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_ip_exclude(i), target, stream);
  }

  // optional .service_layer.ConstraintSet.PathDiversity path_diversity = 101;
  if (_internal_has_path_diversity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::path_diversity(this), target, stream);
  }

  // optional .service_layer.AssociationGroup corouted_association = 102;
  if (_internal_has_corouted_association()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::corouted_association(this), target, stream);
  }

  // uint32 guaranteed_bandwidth = 103;
  if (this->_internal_guaranteed_bandwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(103, this->_internal_guaranteed_bandwidth(), target);
  }

  // bool strict_path_segments = 201;
  if (this->_internal_strict_path_segments() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(201, this->_internal_strict_path_segments(), target);
  }

  // bool unprotected_segments = 202;
  if (this->_internal_unprotected_segments() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(202, this->_internal_unprotected_segments(), target);
  }

  // bool persistent_segments = 203;
  if (this->_internal_persistent_segments() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(203, this->_internal_persistent_segments(), target);
  }

  // uint32 maximum_sid_depth = 204;
  if (this->_internal_maximum_sid_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(204, this->_internal_maximum_sid_depth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.ConstraintSet)
  return target;
}

size_t ConstraintSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.ConstraintSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 srlg_exclude = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->srlg_exclude_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _srlg_exclude_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .service_layer.SLIpAddress ip_exclude = 5;
  total_size += 1UL * this->_internal_ip_exclude_size();
  for (const auto& msg : this->ip_exclude_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLSrAffinities affinities = 1;
  if (this->_internal_has_affinities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *affinities_);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .service_layer.ConstraintSet.PathDiversity path_diversity = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *path_diversity_);
    }

    // optional .service_layer.AssociationGroup corouted_association = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *corouted_association_);
    }

  }
  // uint32 maximum_sid_depth = 204;
  if (this->_internal_maximum_sid_depth() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maximum_sid_depth());
  }

  // uint32 guaranteed_bandwidth = 103;
  if (this->_internal_guaranteed_bandwidth() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_guaranteed_bandwidth());
  }

  // bool strict_path_segments = 201;
  if (this->_internal_strict_path_segments() != 0) {
    total_size += 2 + 1;
  }

  // bool unprotected_segments = 202;
  if (this->_internal_unprotected_segments() != 0) {
    total_size += 2 + 1;
  }

  // bool persistent_segments = 203;
  if (this->_internal_persistent_segments() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConstraintSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConstraintSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConstraintSet::GetClassData() const { return &_class_data_; }

void ConstraintSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConstraintSet *>(to)->MergeFrom(
      static_cast<const ConstraintSet &>(from));
}


void ConstraintSet::MergeFrom(const ConstraintSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.ConstraintSet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  srlg_exclude_.MergeFrom(from.srlg_exclude_);
  ip_exclude_.MergeFrom(from.ip_exclude_);
  if (from._internal_has_affinities()) {
    _internal_mutable_affinities()->::service_layer::SLSrAffinities::MergeFrom(from._internal_affinities());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_path_diversity()->::service_layer::ConstraintSet_PathDiversity::MergeFrom(from._internal_path_diversity());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_corouted_association()->::service_layer::AssociationGroup::MergeFrom(from._internal_corouted_association());
    }
  }
  if (from._internal_maximum_sid_depth() != 0) {
    _internal_set_maximum_sid_depth(from._internal_maximum_sid_depth());
  }
  if (from._internal_guaranteed_bandwidth() != 0) {
    _internal_set_guaranteed_bandwidth(from._internal_guaranteed_bandwidth());
  }
  if (from._internal_strict_path_segments() != 0) {
    _internal_set_strict_path_segments(from._internal_strict_path_segments());
  }
  if (from._internal_unprotected_segments() != 0) {
    _internal_set_unprotected_segments(from._internal_unprotected_segments());
  }
  if (from._internal_persistent_segments() != 0) {
    _internal_set_persistent_segments(from._internal_persistent_segments());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConstraintSet::CopyFrom(const ConstraintSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.ConstraintSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstraintSet::IsInitialized() const {
  return true;
}

void ConstraintSet::InternalSwap(ConstraintSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  srlg_exclude_.InternalSwap(&other->srlg_exclude_);
  ip_exclude_.InternalSwap(&other->ip_exclude_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConstraintSet, persistent_segments_)
      + sizeof(ConstraintSet::persistent_segments_)
      - PROTOBUF_FIELD_OFFSET(ConstraintSet, affinities_)>(
          reinterpret_cast<char*>(&affinities_),
          reinterpret_cast<char*>(&other->affinities_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConstraintSet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_getter, &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpcalc_5fstateful_2eproto[12]);
}

// ===================================================================

class AssociationGroup::_Internal {
 public:
};

AssociationGroup::AssociationGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.AssociationGroup)
}
AssociationGroup::AssociationGroup(const AssociationGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  association_id_ = from.association_id_;
  // @@protoc_insertion_point(copy_constructor:service_layer.AssociationGroup)
}

inline void AssociationGroup::SharedCtor() {
association_id_ = 0u;
}

AssociationGroup::~AssociationGroup() {
  // @@protoc_insertion_point(destructor:service_layer.AssociationGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AssociationGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AssociationGroup::ArenaDtor(void* object) {
  AssociationGroup* _this = reinterpret_cast< AssociationGroup* >(object);
  (void)_this;
}
void AssociationGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssociationGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssociationGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.AssociationGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  association_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssociationGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 association_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          association_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssociationGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.AssociationGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 association_id = 1;
  if (this->_internal_association_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_association_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.AssociationGroup)
  return target;
}

size_t AssociationGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.AssociationGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 association_id = 1;
  if (this->_internal_association_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_association_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssociationGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssociationGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssociationGroup::GetClassData() const { return &_class_data_; }

void AssociationGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AssociationGroup *>(to)->MergeFrom(
      static_cast<const AssociationGroup &>(from));
}


void AssociationGroup::MergeFrom(const AssociationGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.AssociationGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_association_id() != 0) {
    _internal_set_association_id(from._internal_association_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssociationGroup::CopyFrom(const AssociationGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.AssociationGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssociationGroup::IsInitialized() const {
  return true;
}

void AssociationGroup::InternalSwap(AssociationGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(association_id_, other->association_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssociationGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_getter, &descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpcalc_5fstateful_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service_layer::SLSrtePathComputeReqs* Arena::CreateMaybeMessage< ::service_layer::SLSrtePathComputeReqs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrtePathComputeReqs >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrtePathComputeRsps* Arena::CreateMaybeMessage< ::service_layer::SLSrtePathComputeRsps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrtePathComputeRsps >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrtePathComputeReq_SLSrtePathInit* Arena::CreateMaybeMessage< ::service_layer::SLSrtePathComputeReq_SLSrtePathInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrtePathComputeReq_SLSrtePathInit >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate* Arena::CreateMaybeMessage< ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw* Arena::CreateMaybeMessage< ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrtePathComputeReq* Arena::CreateMaybeMessage< ::service_layer::SLSrtePathComputeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrtePathComputeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult* Arena::CreateMaybeMessage< ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrtePathComputeRes_SLSrtePathError* Arena::CreateMaybeMessage< ::service_layer::SLSrtePathComputeRes_SLSrtePathError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrtePathComputeRes_SLSrtePathError >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrtePathComputeRes* Arena::CreateMaybeMessage< ::service_layer::SLSrtePathComputeRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrtePathComputeRes >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrtePathAttrDynamic* Arena::CreateMaybeMessage< ::service_layer::SLSrtePathAttrDynamic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrtePathAttrDynamic >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrtePathAttrExplicit* Arena::CreateMaybeMessage< ::service_layer::SLSrtePathAttrExplicit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrtePathAttrExplicit >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::ConstraintSet_PathDiversity* Arena::CreateMaybeMessage< ::service_layer::ConstraintSet_PathDiversity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::ConstraintSet_PathDiversity >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::ConstraintSet* Arena::CreateMaybeMessage< ::service_layer::ConstraintSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::ConstraintSet >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::AssociationGroup* Arena::CreateMaybeMessage< ::service_layer::AssociationGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::AssociationGroup >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
