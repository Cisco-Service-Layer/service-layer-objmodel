// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_srte_pcalc_stateful.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sl_5fsrte_5fpcalc_5fstateful_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sl_5fsrte_5fpcalc_5fstateful_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "sl_common_types.pb.h"
#include "sl_sr_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sl_5fsrte_5fpcalc_5fstateful_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sl_5fsrte_5fpcalc_5fstateful_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fsrte_5fpcalc_5fstateful_2eproto;
namespace service_layer {
class AssociationGroup;
struct AssociationGroupDefaultTypeInternal;
extern AssociationGroupDefaultTypeInternal _AssociationGroup_default_instance_;
class ConstraintSet;
struct ConstraintSetDefaultTypeInternal;
extern ConstraintSetDefaultTypeInternal _ConstraintSet_default_instance_;
class ConstraintSet_PathDiversity;
struct ConstraintSet_PathDiversityDefaultTypeInternal;
extern ConstraintSet_PathDiversityDefaultTypeInternal _ConstraintSet_PathDiversity_default_instance_;
class SLSrtePathAttrDynamic;
struct SLSrtePathAttrDynamicDefaultTypeInternal;
extern SLSrtePathAttrDynamicDefaultTypeInternal _SLSrtePathAttrDynamic_default_instance_;
class SLSrtePathAttrExplicit;
struct SLSrtePathAttrExplicitDefaultTypeInternal;
extern SLSrtePathAttrExplicitDefaultTypeInternal _SLSrtePathAttrExplicit_default_instance_;
class SLSrtePathComputeReq;
struct SLSrtePathComputeReqDefaultTypeInternal;
extern SLSrtePathComputeReqDefaultTypeInternal _SLSrtePathComputeReq_default_instance_;
class SLSrtePathComputeReq_SLSrtePathInit;
struct SLSrtePathComputeReq_SLSrtePathInitDefaultTypeInternal;
extern SLSrtePathComputeReq_SLSrtePathInitDefaultTypeInternal _SLSrtePathComputeReq_SLSrtePathInit_default_instance_;
class SLSrtePathComputeReq_SLSrtePathUpdate;
struct SLSrtePathComputeReq_SLSrtePathUpdateDefaultTypeInternal;
extern SLSrtePathComputeReq_SLSrtePathUpdateDefaultTypeInternal _SLSrtePathComputeReq_SLSrtePathUpdate_default_instance_;
class SLSrtePathComputeReq_SLSrtePathWithdraw;
struct SLSrtePathComputeReq_SLSrtePathWithdrawDefaultTypeInternal;
extern SLSrtePathComputeReq_SLSrtePathWithdrawDefaultTypeInternal _SLSrtePathComputeReq_SLSrtePathWithdraw_default_instance_;
class SLSrtePathComputeReqs;
struct SLSrtePathComputeReqsDefaultTypeInternal;
extern SLSrtePathComputeReqsDefaultTypeInternal _SLSrtePathComputeReqs_default_instance_;
class SLSrtePathComputeRes;
struct SLSrtePathComputeResDefaultTypeInternal;
extern SLSrtePathComputeResDefaultTypeInternal _SLSrtePathComputeRes_default_instance_;
class SLSrtePathComputeRes_SLSrteDynamicPathResult;
struct SLSrtePathComputeRes_SLSrteDynamicPathResultDefaultTypeInternal;
extern SLSrtePathComputeRes_SLSrteDynamicPathResultDefaultTypeInternal _SLSrtePathComputeRes_SLSrteDynamicPathResult_default_instance_;
class SLSrtePathComputeRes_SLSrtePathError;
struct SLSrtePathComputeRes_SLSrtePathErrorDefaultTypeInternal;
extern SLSrtePathComputeRes_SLSrtePathErrorDefaultTypeInternal _SLSrtePathComputeRes_SLSrtePathError_default_instance_;
class SLSrtePathComputeRsps;
struct SLSrtePathComputeRspsDefaultTypeInternal;
extern SLSrtePathComputeRspsDefaultTypeInternal _SLSrtePathComputeRsps_default_instance_;
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> ::service_layer::AssociationGroup* Arena::CreateMaybeMessage<::service_layer::AssociationGroup>(Arena*);
template<> ::service_layer::ConstraintSet* Arena::CreateMaybeMessage<::service_layer::ConstraintSet>(Arena*);
template<> ::service_layer::ConstraintSet_PathDiversity* Arena::CreateMaybeMessage<::service_layer::ConstraintSet_PathDiversity>(Arena*);
template<> ::service_layer::SLSrtePathAttrDynamic* Arena::CreateMaybeMessage<::service_layer::SLSrtePathAttrDynamic>(Arena*);
template<> ::service_layer::SLSrtePathAttrExplicit* Arena::CreateMaybeMessage<::service_layer::SLSrtePathAttrExplicit>(Arena*);
template<> ::service_layer::SLSrtePathComputeReq* Arena::CreateMaybeMessage<::service_layer::SLSrtePathComputeReq>(Arena*);
template<> ::service_layer::SLSrtePathComputeReq_SLSrtePathInit* Arena::CreateMaybeMessage<::service_layer::SLSrtePathComputeReq_SLSrtePathInit>(Arena*);
template<> ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate* Arena::CreateMaybeMessage<::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate>(Arena*);
template<> ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw* Arena::CreateMaybeMessage<::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw>(Arena*);
template<> ::service_layer::SLSrtePathComputeReqs* Arena::CreateMaybeMessage<::service_layer::SLSrtePathComputeReqs>(Arena*);
template<> ::service_layer::SLSrtePathComputeRes* Arena::CreateMaybeMessage<::service_layer::SLSrtePathComputeRes>(Arena*);
template<> ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult* Arena::CreateMaybeMessage<::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult>(Arena*);
template<> ::service_layer::SLSrtePathComputeRes_SLSrtePathError* Arena::CreateMaybeMessage<::service_layer::SLSrtePathComputeRes_SLSrtePathError>(Arena*);
template<> ::service_layer::SLSrtePathComputeRsps* Arena::CreateMaybeMessage<::service_layer::SLSrtePathComputeRsps>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service_layer {

// ===================================================================

class SLSrtePathComputeReqs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrtePathComputeReqs) */ {
 public:
  inline SLSrtePathComputeReqs() : SLSrtePathComputeReqs(nullptr) {}
  ~SLSrtePathComputeReqs() override;
  explicit constexpr SLSrtePathComputeReqs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrtePathComputeReqs(const SLSrtePathComputeReqs& from);
  SLSrtePathComputeReqs(SLSrtePathComputeReqs&& from) noexcept
    : SLSrtePathComputeReqs() {
    *this = ::std::move(from);
  }

  inline SLSrtePathComputeReqs& operator=(const SLSrtePathComputeReqs& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrtePathComputeReqs& operator=(SLSrtePathComputeReqs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrtePathComputeReqs& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrtePathComputeReqs* internal_default_instance() {
    return reinterpret_cast<const SLSrtePathComputeReqs*>(
               &_SLSrtePathComputeReqs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SLSrtePathComputeReqs& a, SLSrtePathComputeReqs& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrtePathComputeReqs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrtePathComputeReqs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrtePathComputeReqs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrtePathComputeReqs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrtePathComputeReqs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrtePathComputeReqs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrtePathComputeReqs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrtePathComputeReqs";
  }
  protected:
  explicit SLSrtePathComputeReqs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 1,
  };
  // repeated .service_layer.SLSrtePathComputeReq requests = 1;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::service_layer::SLSrtePathComputeReq* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrtePathComputeReq >*
      mutable_requests();
  private:
  const ::service_layer::SLSrtePathComputeReq& _internal_requests(int index) const;
  ::service_layer::SLSrtePathComputeReq* _internal_add_requests();
  public:
  const ::service_layer::SLSrtePathComputeReq& requests(int index) const;
  ::service_layer::SLSrtePathComputeReq* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrtePathComputeReq >&
      requests() const;

  // @@protoc_insertion_point(class_scope:service_layer.SLSrtePathComputeReqs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrtePathComputeReq > requests_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpcalc_5fstateful_2eproto;
};
// -------------------------------------------------------------------

class SLSrtePathComputeRsps final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrtePathComputeRsps) */ {
 public:
  inline SLSrtePathComputeRsps() : SLSrtePathComputeRsps(nullptr) {}
  ~SLSrtePathComputeRsps() override;
  explicit constexpr SLSrtePathComputeRsps(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrtePathComputeRsps(const SLSrtePathComputeRsps& from);
  SLSrtePathComputeRsps(SLSrtePathComputeRsps&& from) noexcept
    : SLSrtePathComputeRsps() {
    *this = ::std::move(from);
  }

  inline SLSrtePathComputeRsps& operator=(const SLSrtePathComputeRsps& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrtePathComputeRsps& operator=(SLSrtePathComputeRsps&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrtePathComputeRsps& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrtePathComputeRsps* internal_default_instance() {
    return reinterpret_cast<const SLSrtePathComputeRsps*>(
               &_SLSrtePathComputeRsps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SLSrtePathComputeRsps& a, SLSrtePathComputeRsps& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrtePathComputeRsps* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrtePathComputeRsps* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrtePathComputeRsps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrtePathComputeRsps>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrtePathComputeRsps& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrtePathComputeRsps& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrtePathComputeRsps* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrtePathComputeRsps";
  }
  protected:
  explicit SLSrtePathComputeRsps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 1,
  };
  // repeated .service_layer.SLSrtePathComputeRes responses = 1;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::service_layer::SLSrtePathComputeRes* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrtePathComputeRes >*
      mutable_responses();
  private:
  const ::service_layer::SLSrtePathComputeRes& _internal_responses(int index) const;
  ::service_layer::SLSrtePathComputeRes* _internal_add_responses();
  public:
  const ::service_layer::SLSrtePathComputeRes& responses(int index) const;
  ::service_layer::SLSrtePathComputeRes* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrtePathComputeRes >&
      responses() const;

  // @@protoc_insertion_point(class_scope:service_layer.SLSrtePathComputeRsps)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrtePathComputeRes > responses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpcalc_5fstateful_2eproto;
};
// -------------------------------------------------------------------

class SLSrtePathComputeReq_SLSrtePathInit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrtePathComputeReq.SLSrtePathInit) */ {
 public:
  inline SLSrtePathComputeReq_SLSrtePathInit() : SLSrtePathComputeReq_SLSrtePathInit(nullptr) {}
  ~SLSrtePathComputeReq_SLSrtePathInit() override;
  explicit constexpr SLSrtePathComputeReq_SLSrtePathInit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrtePathComputeReq_SLSrtePathInit(const SLSrtePathComputeReq_SLSrtePathInit& from);
  SLSrtePathComputeReq_SLSrtePathInit(SLSrtePathComputeReq_SLSrtePathInit&& from) noexcept
    : SLSrtePathComputeReq_SLSrtePathInit() {
    *this = ::std::move(from);
  }

  inline SLSrtePathComputeReq_SLSrtePathInit& operator=(const SLSrtePathComputeReq_SLSrtePathInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrtePathComputeReq_SLSrtePathInit& operator=(SLSrtePathComputeReq_SLSrtePathInit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrtePathComputeReq_SLSrtePathInit& default_instance() {
    return *internal_default_instance();
  }
  enum PathInitTypeCase {
    kDynamic = 2,
    kExplicit = 3,
    PATH_INIT_TYPE_NOT_SET = 0,
  };

  static inline const SLSrtePathComputeReq_SLSrtePathInit* internal_default_instance() {
    return reinterpret_cast<const SLSrtePathComputeReq_SLSrtePathInit*>(
               &_SLSrtePathComputeReq_SLSrtePathInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SLSrtePathComputeReq_SLSrtePathInit& a, SLSrtePathComputeReq_SLSrtePathInit& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrtePathComputeReq_SLSrtePathInit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrtePathComputeReq_SLSrtePathInit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrtePathComputeReq_SLSrtePathInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrtePathComputeReq_SLSrtePathInit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrtePathComputeReq_SLSrtePathInit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrtePathComputeReq_SLSrtePathInit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrtePathComputeReq_SLSrtePathInit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrtePathComputeReq.SLSrtePathInit";
  }
  protected:
  explicit SLSrtePathComputeReq_SLSrtePathInit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataplaneFieldNumber = 1,
    kDynamicFieldNumber = 2,
    kExplicitFieldNumber = 3,
  };
  // .service_layer.SLSrDataplane dataplane = 1;
  void clear_dataplane();
  ::service_layer::SLSrDataplane dataplane() const;
  void set_dataplane(::service_layer::SLSrDataplane value);
  private:
  ::service_layer::SLSrDataplane _internal_dataplane() const;
  void _internal_set_dataplane(::service_layer::SLSrDataplane value);
  public:

  // .service_layer.SLSrtePathAttrDynamic dynamic = 2;
  bool has_dynamic() const;
  private:
  bool _internal_has_dynamic() const;
  public:
  void clear_dynamic();
  const ::service_layer::SLSrtePathAttrDynamic& dynamic() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrtePathAttrDynamic* release_dynamic();
  ::service_layer::SLSrtePathAttrDynamic* mutable_dynamic();
  void set_allocated_dynamic(::service_layer::SLSrtePathAttrDynamic* dynamic);
  private:
  const ::service_layer::SLSrtePathAttrDynamic& _internal_dynamic() const;
  ::service_layer::SLSrtePathAttrDynamic* _internal_mutable_dynamic();
  public:
  void unsafe_arena_set_allocated_dynamic(
      ::service_layer::SLSrtePathAttrDynamic* dynamic);
  ::service_layer::SLSrtePathAttrDynamic* unsafe_arena_release_dynamic();

  // .service_layer.SLSrtePathAttrExplicit explicit = 3;
  bool has_explicit_() const;
  private:
  bool _internal_has_explicit_() const;
  public:
  void clear_explicit_();
  const ::service_layer::SLSrtePathAttrExplicit& explicit_() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrtePathAttrExplicit* release_explicit_();
  ::service_layer::SLSrtePathAttrExplicit* mutable_explicit_();
  void set_allocated_explicit_(::service_layer::SLSrtePathAttrExplicit* explicit_);
  private:
  const ::service_layer::SLSrtePathAttrExplicit& _internal_explicit_() const;
  ::service_layer::SLSrtePathAttrExplicit* _internal_mutable_explicit_();
  public:
  void unsafe_arena_set_allocated_explicit_(
      ::service_layer::SLSrtePathAttrExplicit* explicit_);
  ::service_layer::SLSrtePathAttrExplicit* unsafe_arena_release_explicit_();

  void clear_path_init_type();
  PathInitTypeCase path_init_type_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLSrtePathComputeReq.SLSrtePathInit)
 private:
  class _Internal;
  void set_has_dynamic();
  void set_has_explicit_();

  inline bool has_path_init_type() const;
  inline void clear_has_path_init_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int dataplane_;
  union PathInitTypeUnion {
    constexpr PathInitTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::service_layer::SLSrtePathAttrDynamic* dynamic_;
    ::service_layer::SLSrtePathAttrExplicit* explicit__;
  } path_init_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fsrte_5fpcalc_5fstateful_2eproto;
};
// -------------------------------------------------------------------

class SLSrtePathComputeReq_SLSrtePathUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate) */ {
 public:
  inline SLSrtePathComputeReq_SLSrtePathUpdate() : SLSrtePathComputeReq_SLSrtePathUpdate(nullptr) {}
  ~SLSrtePathComputeReq_SLSrtePathUpdate() override;
  explicit constexpr SLSrtePathComputeReq_SLSrtePathUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrtePathComputeReq_SLSrtePathUpdate(const SLSrtePathComputeReq_SLSrtePathUpdate& from);
  SLSrtePathComputeReq_SLSrtePathUpdate(SLSrtePathComputeReq_SLSrtePathUpdate&& from) noexcept
    : SLSrtePathComputeReq_SLSrtePathUpdate() {
    *this = ::std::move(from);
  }

  inline SLSrtePathComputeReq_SLSrtePathUpdate& operator=(const SLSrtePathComputeReq_SLSrtePathUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrtePathComputeReq_SLSrtePathUpdate& operator=(SLSrtePathComputeReq_SLSrtePathUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrtePathComputeReq_SLSrtePathUpdate& default_instance() {
    return *internal_default_instance();
  }
  enum PathUpdateTypeCase {
    kDynamic = 1,
    kExplicit = 2,
    PATH_UPDATE_TYPE_NOT_SET = 0,
  };

  static inline const SLSrtePathComputeReq_SLSrtePathUpdate* internal_default_instance() {
    return reinterpret_cast<const SLSrtePathComputeReq_SLSrtePathUpdate*>(
               &_SLSrtePathComputeReq_SLSrtePathUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SLSrtePathComputeReq_SLSrtePathUpdate& a, SLSrtePathComputeReq_SLSrtePathUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrtePathComputeReq_SLSrtePathUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrtePathComputeReq_SLSrtePathUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrtePathComputeReq_SLSrtePathUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrtePathComputeReq_SLSrtePathUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrtePathComputeReq_SLSrtePathUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrtePathComputeReq_SLSrtePathUpdate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrtePathComputeReq_SLSrtePathUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrtePathComputeReq.SLSrtePathUpdate";
  }
  protected:
  explicit SLSrtePathComputeReq_SLSrtePathUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDynamicFieldNumber = 1,
    kExplicitFieldNumber = 2,
  };
  // .service_layer.SLSrtePathAttrDynamic dynamic = 1;
  bool has_dynamic() const;
  private:
  bool _internal_has_dynamic() const;
  public:
  void clear_dynamic();
  const ::service_layer::SLSrtePathAttrDynamic& dynamic() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrtePathAttrDynamic* release_dynamic();
  ::service_layer::SLSrtePathAttrDynamic* mutable_dynamic();
  void set_allocated_dynamic(::service_layer::SLSrtePathAttrDynamic* dynamic);
  private:
  const ::service_layer::SLSrtePathAttrDynamic& _internal_dynamic() const;
  ::service_layer::SLSrtePathAttrDynamic* _internal_mutable_dynamic();
  public:
  void unsafe_arena_set_allocated_dynamic(
      ::service_layer::SLSrtePathAttrDynamic* dynamic);
  ::service_layer::SLSrtePathAttrDynamic* unsafe_arena_release_dynamic();

  // .service_layer.SLSrtePathAttrExplicit explicit = 2;
  bool has_explicit_() const;
  private:
  bool _internal_has_explicit_() const;
  public:
  void clear_explicit_();
  const ::service_layer::SLSrtePathAttrExplicit& explicit_() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrtePathAttrExplicit* release_explicit_();
  ::service_layer::SLSrtePathAttrExplicit* mutable_explicit_();
  void set_allocated_explicit_(::service_layer::SLSrtePathAttrExplicit* explicit_);
  private:
  const ::service_layer::SLSrtePathAttrExplicit& _internal_explicit_() const;
  ::service_layer::SLSrtePathAttrExplicit* _internal_mutable_explicit_();
  public:
  void unsafe_arena_set_allocated_explicit_(
      ::service_layer::SLSrtePathAttrExplicit* explicit_);
  ::service_layer::SLSrtePathAttrExplicit* unsafe_arena_release_explicit_();

  void clear_path_update_type();
  PathUpdateTypeCase path_update_type_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate)
 private:
  class _Internal;
  void set_has_dynamic();
  void set_has_explicit_();

  inline bool has_path_update_type() const;
  inline void clear_has_path_update_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union PathUpdateTypeUnion {
    constexpr PathUpdateTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::service_layer::SLSrtePathAttrDynamic* dynamic_;
    ::service_layer::SLSrtePathAttrExplicit* explicit__;
  } path_update_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fsrte_5fpcalc_5fstateful_2eproto;
};
// -------------------------------------------------------------------

class SLSrtePathComputeReq_SLSrtePathWithdraw final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:service_layer.SLSrtePathComputeReq.SLSrtePathWithdraw) */ {
 public:
  inline SLSrtePathComputeReq_SLSrtePathWithdraw() : SLSrtePathComputeReq_SLSrtePathWithdraw(nullptr) {}
  explicit constexpr SLSrtePathComputeReq_SLSrtePathWithdraw(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrtePathComputeReq_SLSrtePathWithdraw(const SLSrtePathComputeReq_SLSrtePathWithdraw& from);
  SLSrtePathComputeReq_SLSrtePathWithdraw(SLSrtePathComputeReq_SLSrtePathWithdraw&& from) noexcept
    : SLSrtePathComputeReq_SLSrtePathWithdraw() {
    *this = ::std::move(from);
  }

  inline SLSrtePathComputeReq_SLSrtePathWithdraw& operator=(const SLSrtePathComputeReq_SLSrtePathWithdraw& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrtePathComputeReq_SLSrtePathWithdraw& operator=(SLSrtePathComputeReq_SLSrtePathWithdraw&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrtePathComputeReq_SLSrtePathWithdraw& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrtePathComputeReq_SLSrtePathWithdraw* internal_default_instance() {
    return reinterpret_cast<const SLSrtePathComputeReq_SLSrtePathWithdraw*>(
               &_SLSrtePathComputeReq_SLSrtePathWithdraw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SLSrtePathComputeReq_SLSrtePathWithdraw& a, SLSrtePathComputeReq_SLSrtePathWithdraw& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrtePathComputeReq_SLSrtePathWithdraw* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrtePathComputeReq_SLSrtePathWithdraw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrtePathComputeReq_SLSrtePathWithdraw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrtePathComputeReq_SLSrtePathWithdraw>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SLSrtePathComputeReq_SLSrtePathWithdraw& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SLSrtePathComputeReq_SLSrtePathWithdraw& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrtePathComputeReq.SLSrtePathWithdraw";
  }
  protected:
  explicit SLSrtePathComputeReq_SLSrtePathWithdraw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:service_layer.SLSrtePathComputeReq.SLSrtePathWithdraw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpcalc_5fstateful_2eproto;
};
// -------------------------------------------------------------------

class SLSrtePathComputeReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrtePathComputeReq) */ {
 public:
  inline SLSrtePathComputeReq() : SLSrtePathComputeReq(nullptr) {}
  ~SLSrtePathComputeReq() override;
  explicit constexpr SLSrtePathComputeReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrtePathComputeReq(const SLSrtePathComputeReq& from);
  SLSrtePathComputeReq(SLSrtePathComputeReq&& from) noexcept
    : SLSrtePathComputeReq() {
    *this = ::std::move(from);
  }

  inline SLSrtePathComputeReq& operator=(const SLSrtePathComputeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrtePathComputeReq& operator=(SLSrtePathComputeReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrtePathComputeReq& default_instance() {
    return *internal_default_instance();
  }
  enum RequestTypeCase {
    kInit = 4,
    kUpdate = 5,
    kWithdraw = 6,
    REQUEST_TYPE_NOT_SET = 0,
  };

  static inline const SLSrtePathComputeReq* internal_default_instance() {
    return reinterpret_cast<const SLSrtePathComputeReq*>(
               &_SLSrtePathComputeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SLSrtePathComputeReq& a, SLSrtePathComputeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrtePathComputeReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrtePathComputeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrtePathComputeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrtePathComputeReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrtePathComputeReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrtePathComputeReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrtePathComputeReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrtePathComputeReq";
  }
  protected:
  explicit SLSrtePathComputeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SLSrtePathComputeReq_SLSrtePathInit SLSrtePathInit;
  typedef SLSrtePathComputeReq_SLSrtePathUpdate SLSrtePathUpdate;
  typedef SLSrtePathComputeReq_SLSrtePathWithdraw SLSrtePathWithdraw;

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyKeyFieldNumber = 1,
    kCandidatePathKeyFieldNumber = 2,
    kSeqNumFieldNumber = 3,
    kInitFieldNumber = 4,
    kUpdateFieldNumber = 5,
    kWithdrawFieldNumber = 6,
  };
  // .service_layer.SLSrPolicyKey policy_key = 1;
  bool has_policy_key() const;
  private:
  bool _internal_has_policy_key() const;
  public:
  void clear_policy_key();
  const ::service_layer::SLSrPolicyKey& policy_key() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrPolicyKey* release_policy_key();
  ::service_layer::SLSrPolicyKey* mutable_policy_key();
  void set_allocated_policy_key(::service_layer::SLSrPolicyKey* policy_key);
  private:
  const ::service_layer::SLSrPolicyKey& _internal_policy_key() const;
  ::service_layer::SLSrPolicyKey* _internal_mutable_policy_key();
  public:
  void unsafe_arena_set_allocated_policy_key(
      ::service_layer::SLSrPolicyKey* policy_key);
  ::service_layer::SLSrPolicyKey* unsafe_arena_release_policy_key();

  // .service_layer.SLSrCandidatePathKey candidate_path_key = 2;
  bool has_candidate_path_key() const;
  private:
  bool _internal_has_candidate_path_key() const;
  public:
  void clear_candidate_path_key();
  const ::service_layer::SLSrCandidatePathKey& candidate_path_key() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrCandidatePathKey* release_candidate_path_key();
  ::service_layer::SLSrCandidatePathKey* mutable_candidate_path_key();
  void set_allocated_candidate_path_key(::service_layer::SLSrCandidatePathKey* candidate_path_key);
  private:
  const ::service_layer::SLSrCandidatePathKey& _internal_candidate_path_key() const;
  ::service_layer::SLSrCandidatePathKey* _internal_mutable_candidate_path_key();
  public:
  void unsafe_arena_set_allocated_candidate_path_key(
      ::service_layer::SLSrCandidatePathKey* candidate_path_key);
  ::service_layer::SLSrCandidatePathKey* unsafe_arena_release_candidate_path_key();

  // uint64 seq_num = 3;
  void clear_seq_num();
  uint64_t seq_num() const;
  void set_seq_num(uint64_t value);
  private:
  uint64_t _internal_seq_num() const;
  void _internal_set_seq_num(uint64_t value);
  public:

  // .service_layer.SLSrtePathComputeReq.SLSrtePathInit init = 4;
  bool has_init() const;
  private:
  bool _internal_has_init() const;
  public:
  void clear_init();
  const ::service_layer::SLSrtePathComputeReq_SLSrtePathInit& init() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrtePathComputeReq_SLSrtePathInit* release_init();
  ::service_layer::SLSrtePathComputeReq_SLSrtePathInit* mutable_init();
  void set_allocated_init(::service_layer::SLSrtePathComputeReq_SLSrtePathInit* init);
  private:
  const ::service_layer::SLSrtePathComputeReq_SLSrtePathInit& _internal_init() const;
  ::service_layer::SLSrtePathComputeReq_SLSrtePathInit* _internal_mutable_init();
  public:
  void unsafe_arena_set_allocated_init(
      ::service_layer::SLSrtePathComputeReq_SLSrtePathInit* init);
  ::service_layer::SLSrtePathComputeReq_SLSrtePathInit* unsafe_arena_release_init();

  // .service_layer.SLSrtePathComputeReq.SLSrtePathUpdate update = 5;
  bool has_update() const;
  private:
  bool _internal_has_update() const;
  public:
  void clear_update();
  const ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate& update() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate* release_update();
  ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate* mutable_update();
  void set_allocated_update(::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate* update);
  private:
  const ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate& _internal_update() const;
  ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate* _internal_mutable_update();
  public:
  void unsafe_arena_set_allocated_update(
      ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate* update);
  ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate* unsafe_arena_release_update();

  // .service_layer.SLSrtePathComputeReq.SLSrtePathWithdraw withdraw = 6;
  bool has_withdraw() const;
  private:
  bool _internal_has_withdraw() const;
  public:
  void clear_withdraw();
  const ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw& withdraw() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw* release_withdraw();
  ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw* mutable_withdraw();
  void set_allocated_withdraw(::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw* withdraw);
  private:
  const ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw& _internal_withdraw() const;
  ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw* _internal_mutable_withdraw();
  public:
  void unsafe_arena_set_allocated_withdraw(
      ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw* withdraw);
  ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw* unsafe_arena_release_withdraw();

  void clear_request_type();
  RequestTypeCase request_type_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLSrtePathComputeReq)
 private:
  class _Internal;
  void set_has_init();
  void set_has_update();
  void set_has_withdraw();

  inline bool has_request_type() const;
  inline void clear_has_request_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLSrPolicyKey* policy_key_;
  ::service_layer::SLSrCandidatePathKey* candidate_path_key_;
  uint64_t seq_num_;
  union RequestTypeUnion {
    constexpr RequestTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::service_layer::SLSrtePathComputeReq_SLSrtePathInit* init_;
    ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate* update_;
    ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw* withdraw_;
  } request_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fsrte_5fpcalc_5fstateful_2eproto;
};
// -------------------------------------------------------------------

class SLSrtePathComputeRes_SLSrteDynamicPathResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult) */ {
 public:
  inline SLSrtePathComputeRes_SLSrteDynamicPathResult() : SLSrtePathComputeRes_SLSrteDynamicPathResult(nullptr) {}
  ~SLSrtePathComputeRes_SLSrteDynamicPathResult() override;
  explicit constexpr SLSrtePathComputeRes_SLSrteDynamicPathResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrtePathComputeRes_SLSrteDynamicPathResult(const SLSrtePathComputeRes_SLSrteDynamicPathResult& from);
  SLSrtePathComputeRes_SLSrteDynamicPathResult(SLSrtePathComputeRes_SLSrteDynamicPathResult&& from) noexcept
    : SLSrtePathComputeRes_SLSrteDynamicPathResult() {
    *this = ::std::move(from);
  }

  inline SLSrtePathComputeRes_SLSrteDynamicPathResult& operator=(const SLSrtePathComputeRes_SLSrteDynamicPathResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrtePathComputeRes_SLSrteDynamicPathResult& operator=(SLSrtePathComputeRes_SLSrteDynamicPathResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrtePathComputeRes_SLSrteDynamicPathResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrtePathComputeRes_SLSrteDynamicPathResult* internal_default_instance() {
    return reinterpret_cast<const SLSrtePathComputeRes_SLSrteDynamicPathResult*>(
               &_SLSrtePathComputeRes_SLSrteDynamicPathResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SLSrtePathComputeRes_SLSrteDynamicPathResult& a, SLSrtePathComputeRes_SLSrteDynamicPathResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrtePathComputeRes_SLSrteDynamicPathResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrtePathComputeRes_SLSrteDynamicPathResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrtePathComputeRes_SLSrteDynamicPathResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrtePathComputeRes_SLSrteDynamicPathResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrtePathComputeRes_SLSrteDynamicPathResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrtePathComputeRes_SLSrteDynamicPathResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrtePathComputeRes_SLSrteDynamicPathResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult";
  }
  protected:
  explicit SLSrtePathComputeRes_SLSrteDynamicPathResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentListsFieldNumber = 1,
    kEffectiveDiversityLevelFieldNumber = 3,
  };
  // repeated .service_layer.SLSrSegmentList segment_lists = 1;
  int segment_lists_size() const;
  private:
  int _internal_segment_lists_size() const;
  public:
  void clear_segment_lists();
  ::service_layer::SLSrSegmentList* mutable_segment_lists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSegmentList >*
      mutable_segment_lists();
  private:
  const ::service_layer::SLSrSegmentList& _internal_segment_lists(int index) const;
  ::service_layer::SLSrSegmentList* _internal_add_segment_lists();
  public:
  const ::service_layer::SLSrSegmentList& segment_lists(int index) const;
  ::service_layer::SLSrSegmentList* add_segment_lists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSegmentList >&
      segment_lists() const;

  // optional .service_layer.SLSrDiversityLevel effective_diversity_level = 3;
  bool has_effective_diversity_level() const;
  private:
  bool _internal_has_effective_diversity_level() const;
  public:
  void clear_effective_diversity_level();
  ::service_layer::SLSrDiversityLevel effective_diversity_level() const;
  void set_effective_diversity_level(::service_layer::SLSrDiversityLevel value);
  private:
  ::service_layer::SLSrDiversityLevel _internal_effective_diversity_level() const;
  void _internal_set_effective_diversity_level(::service_layer::SLSrDiversityLevel value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSegmentList > segment_lists_;
  int effective_diversity_level_;
  friend struct ::TableStruct_sl_5fsrte_5fpcalc_5fstateful_2eproto;
};
// -------------------------------------------------------------------

class SLSrtePathComputeRes_SLSrtePathError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrtePathComputeRes.SLSrtePathError) */ {
 public:
  inline SLSrtePathComputeRes_SLSrtePathError() : SLSrtePathComputeRes_SLSrtePathError(nullptr) {}
  ~SLSrtePathComputeRes_SLSrtePathError() override;
  explicit constexpr SLSrtePathComputeRes_SLSrtePathError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrtePathComputeRes_SLSrtePathError(const SLSrtePathComputeRes_SLSrtePathError& from);
  SLSrtePathComputeRes_SLSrtePathError(SLSrtePathComputeRes_SLSrtePathError&& from) noexcept
    : SLSrtePathComputeRes_SLSrtePathError() {
    *this = ::std::move(from);
  }

  inline SLSrtePathComputeRes_SLSrtePathError& operator=(const SLSrtePathComputeRes_SLSrtePathError& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrtePathComputeRes_SLSrtePathError& operator=(SLSrtePathComputeRes_SLSrtePathError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrtePathComputeRes_SLSrtePathError& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrtePathComputeRes_SLSrtePathError* internal_default_instance() {
    return reinterpret_cast<const SLSrtePathComputeRes_SLSrtePathError*>(
               &_SLSrtePathComputeRes_SLSrtePathError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SLSrtePathComputeRes_SLSrtePathError& a, SLSrtePathComputeRes_SLSrtePathError& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrtePathComputeRes_SLSrtePathError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrtePathComputeRes_SLSrtePathError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrtePathComputeRes_SLSrtePathError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrtePathComputeRes_SLSrtePathError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrtePathComputeRes_SLSrtePathError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrtePathComputeRes_SLSrtePathError& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrtePathComputeRes_SLSrtePathError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrtePathComputeRes.SLSrtePathError";
  }
  protected:
  explicit SLSrtePathComputeRes_SLSrtePathError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .service_layer.SLErrorStatus type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::service_layer::SLErrorStatus& type() const;
  PROTOBUF_NODISCARD ::service_layer::SLErrorStatus* release_type();
  ::service_layer::SLErrorStatus* mutable_type();
  void set_allocated_type(::service_layer::SLErrorStatus* type);
  private:
  const ::service_layer::SLErrorStatus& _internal_type() const;
  ::service_layer::SLErrorStatus* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::service_layer::SLErrorStatus* type);
  ::service_layer::SLErrorStatus* unsafe_arena_release_type();

  // @@protoc_insertion_point(class_scope:service_layer.SLSrtePathComputeRes.SLSrtePathError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::service_layer::SLErrorStatus* type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpcalc_5fstateful_2eproto;
};
// -------------------------------------------------------------------

class SLSrtePathComputeRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrtePathComputeRes) */ {
 public:
  inline SLSrtePathComputeRes() : SLSrtePathComputeRes(nullptr) {}
  ~SLSrtePathComputeRes() override;
  explicit constexpr SLSrtePathComputeRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrtePathComputeRes(const SLSrtePathComputeRes& from);
  SLSrtePathComputeRes(SLSrtePathComputeRes&& from) noexcept
    : SLSrtePathComputeRes() {
    *this = ::std::move(from);
  }

  inline SLSrtePathComputeRes& operator=(const SLSrtePathComputeRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrtePathComputeRes& operator=(SLSrtePathComputeRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrtePathComputeRes& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseTypeCase {
    kPathResult = 4,
    kError = 6,
    RESPONSE_TYPE_NOT_SET = 0,
  };

  static inline const SLSrtePathComputeRes* internal_default_instance() {
    return reinterpret_cast<const SLSrtePathComputeRes*>(
               &_SLSrtePathComputeRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SLSrtePathComputeRes& a, SLSrtePathComputeRes& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrtePathComputeRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrtePathComputeRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrtePathComputeRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrtePathComputeRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrtePathComputeRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrtePathComputeRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrtePathComputeRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrtePathComputeRes";
  }
  protected:
  explicit SLSrtePathComputeRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SLSrtePathComputeRes_SLSrteDynamicPathResult SLSrteDynamicPathResult;
  typedef SLSrtePathComputeRes_SLSrtePathError SLSrtePathError;

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyKeyFieldNumber = 1,
    kCandidatePathKeyFieldNumber = 2,
    kReqSeqNumFieldNumber = 3,
    kPathResultFieldNumber = 4,
    kErrorFieldNumber = 6,
  };
  // .service_layer.SLSrPolicyKey policy_key = 1;
  bool has_policy_key() const;
  private:
  bool _internal_has_policy_key() const;
  public:
  void clear_policy_key();
  const ::service_layer::SLSrPolicyKey& policy_key() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrPolicyKey* release_policy_key();
  ::service_layer::SLSrPolicyKey* mutable_policy_key();
  void set_allocated_policy_key(::service_layer::SLSrPolicyKey* policy_key);
  private:
  const ::service_layer::SLSrPolicyKey& _internal_policy_key() const;
  ::service_layer::SLSrPolicyKey* _internal_mutable_policy_key();
  public:
  void unsafe_arena_set_allocated_policy_key(
      ::service_layer::SLSrPolicyKey* policy_key);
  ::service_layer::SLSrPolicyKey* unsafe_arena_release_policy_key();

  // .service_layer.SLSrCandidatePathKey candidate_path_key = 2;
  bool has_candidate_path_key() const;
  private:
  bool _internal_has_candidate_path_key() const;
  public:
  void clear_candidate_path_key();
  const ::service_layer::SLSrCandidatePathKey& candidate_path_key() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrCandidatePathKey* release_candidate_path_key();
  ::service_layer::SLSrCandidatePathKey* mutable_candidate_path_key();
  void set_allocated_candidate_path_key(::service_layer::SLSrCandidatePathKey* candidate_path_key);
  private:
  const ::service_layer::SLSrCandidatePathKey& _internal_candidate_path_key() const;
  ::service_layer::SLSrCandidatePathKey* _internal_mutable_candidate_path_key();
  public:
  void unsafe_arena_set_allocated_candidate_path_key(
      ::service_layer::SLSrCandidatePathKey* candidate_path_key);
  ::service_layer::SLSrCandidatePathKey* unsafe_arena_release_candidate_path_key();

  // uint64 req_seq_num = 3;
  void clear_req_seq_num();
  uint64_t req_seq_num() const;
  void set_req_seq_num(uint64_t value);
  private:
  uint64_t _internal_req_seq_num() const;
  void _internal_set_req_seq_num(uint64_t value);
  public:

  // .service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult path_result = 4;
  bool has_path_result() const;
  private:
  bool _internal_has_path_result() const;
  public:
  void clear_path_result();
  const ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult& path_result() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult* release_path_result();
  ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult* mutable_path_result();
  void set_allocated_path_result(::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult* path_result);
  private:
  const ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult& _internal_path_result() const;
  ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult* _internal_mutable_path_result();
  public:
  void unsafe_arena_set_allocated_path_result(
      ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult* path_result);
  ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult* unsafe_arena_release_path_result();

  // .service_layer.SLSrtePathComputeRes.SLSrtePathError error = 6;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::service_layer::SLSrtePathComputeRes_SLSrtePathError& error() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrtePathComputeRes_SLSrtePathError* release_error();
  ::service_layer::SLSrtePathComputeRes_SLSrtePathError* mutable_error();
  void set_allocated_error(::service_layer::SLSrtePathComputeRes_SLSrtePathError* error);
  private:
  const ::service_layer::SLSrtePathComputeRes_SLSrtePathError& _internal_error() const;
  ::service_layer::SLSrtePathComputeRes_SLSrtePathError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::service_layer::SLSrtePathComputeRes_SLSrtePathError* error);
  ::service_layer::SLSrtePathComputeRes_SLSrtePathError* unsafe_arena_release_error();

  void clear_response_type();
  ResponseTypeCase response_type_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLSrtePathComputeRes)
 private:
  class _Internal;
  void set_has_path_result();
  void set_has_error();

  inline bool has_response_type() const;
  inline void clear_has_response_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLSrPolicyKey* policy_key_;
  ::service_layer::SLSrCandidatePathKey* candidate_path_key_;
  uint64_t req_seq_num_;
  union ResponseTypeUnion {
    constexpr ResponseTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult* path_result_;
    ::service_layer::SLSrtePathComputeRes_SLSrtePathError* error_;
  } response_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fsrte_5fpcalc_5fstateful_2eproto;
};
// -------------------------------------------------------------------

class SLSrtePathAttrDynamic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrtePathAttrDynamic) */ {
 public:
  inline SLSrtePathAttrDynamic() : SLSrtePathAttrDynamic(nullptr) {}
  ~SLSrtePathAttrDynamic() override;
  explicit constexpr SLSrtePathAttrDynamic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrtePathAttrDynamic(const SLSrtePathAttrDynamic& from);
  SLSrtePathAttrDynamic(SLSrtePathAttrDynamic&& from) noexcept
    : SLSrtePathAttrDynamic() {
    *this = ::std::move(from);
  }

  inline SLSrtePathAttrDynamic& operator=(const SLSrtePathAttrDynamic& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrtePathAttrDynamic& operator=(SLSrtePathAttrDynamic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrtePathAttrDynamic& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrtePathAttrDynamic* internal_default_instance() {
    return reinterpret_cast<const SLSrtePathAttrDynamic*>(
               &_SLSrtePathAttrDynamic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SLSrtePathAttrDynamic& a, SLSrtePathAttrDynamic& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrtePathAttrDynamic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrtePathAttrDynamic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrtePathAttrDynamic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrtePathAttrDynamic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrtePathAttrDynamic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrtePathAttrDynamic& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrtePathAttrDynamic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrtePathAttrDynamic";
  }
  protected:
  explicit SLSrtePathAttrDynamic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstraintsFieldNumber = 2,
    kOMetricFieldNumber = 1,
  };
  // .service_layer.ConstraintSet constraints = 2;
  bool has_constraints() const;
  private:
  bool _internal_has_constraints() const;
  public:
  void clear_constraints();
  const ::service_layer::ConstraintSet& constraints() const;
  PROTOBUF_NODISCARD ::service_layer::ConstraintSet* release_constraints();
  ::service_layer::ConstraintSet* mutable_constraints();
  void set_allocated_constraints(::service_layer::ConstraintSet* constraints);
  private:
  const ::service_layer::ConstraintSet& _internal_constraints() const;
  ::service_layer::ConstraintSet* _internal_mutable_constraints();
  public:
  void unsafe_arena_set_allocated_constraints(
      ::service_layer::ConstraintSet* constraints);
  ::service_layer::ConstraintSet* unsafe_arena_release_constraints();

  // .service_layer.SLSrMetricType o_metric = 1;
  void clear_o_metric();
  ::service_layer::SLSrMetricType o_metric() const;
  void set_o_metric(::service_layer::SLSrMetricType value);
  private:
  ::service_layer::SLSrMetricType _internal_o_metric() const;
  void _internal_set_o_metric(::service_layer::SLSrMetricType value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrtePathAttrDynamic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::ConstraintSet* constraints_;
  int o_metric_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpcalc_5fstateful_2eproto;
};
// -------------------------------------------------------------------

class SLSrtePathAttrExplicit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrtePathAttrExplicit) */ {
 public:
  inline SLSrtePathAttrExplicit() : SLSrtePathAttrExplicit(nullptr) {}
  ~SLSrtePathAttrExplicit() override;
  explicit constexpr SLSrtePathAttrExplicit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrtePathAttrExplicit(const SLSrtePathAttrExplicit& from);
  SLSrtePathAttrExplicit(SLSrtePathAttrExplicit&& from) noexcept
    : SLSrtePathAttrExplicit() {
    *this = ::std::move(from);
  }

  inline SLSrtePathAttrExplicit& operator=(const SLSrtePathAttrExplicit& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrtePathAttrExplicit& operator=(SLSrtePathAttrExplicit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrtePathAttrExplicit& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrtePathAttrExplicit* internal_default_instance() {
    return reinterpret_cast<const SLSrtePathAttrExplicit*>(
               &_SLSrtePathAttrExplicit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SLSrtePathAttrExplicit& a, SLSrtePathAttrExplicit& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrtePathAttrExplicit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrtePathAttrExplicit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrtePathAttrExplicit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrtePathAttrExplicit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrtePathAttrExplicit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrtePathAttrExplicit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrtePathAttrExplicit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrtePathAttrExplicit";
  }
  protected:
  explicit SLSrtePathAttrExplicit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentListsFieldNumber = 1,
    kConstraintsFieldNumber = 2,
  };
  // repeated .service_layer.SLSrSegmentList segment_lists = 1;
  int segment_lists_size() const;
  private:
  int _internal_segment_lists_size() const;
  public:
  void clear_segment_lists();
  ::service_layer::SLSrSegmentList* mutable_segment_lists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSegmentList >*
      mutable_segment_lists();
  private:
  const ::service_layer::SLSrSegmentList& _internal_segment_lists(int index) const;
  ::service_layer::SLSrSegmentList* _internal_add_segment_lists();
  public:
  const ::service_layer::SLSrSegmentList& segment_lists(int index) const;
  ::service_layer::SLSrSegmentList* add_segment_lists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSegmentList >&
      segment_lists() const;

  // .service_layer.ConstraintSet constraints = 2;
  bool has_constraints() const;
  private:
  bool _internal_has_constraints() const;
  public:
  void clear_constraints();
  const ::service_layer::ConstraintSet& constraints() const;
  PROTOBUF_NODISCARD ::service_layer::ConstraintSet* release_constraints();
  ::service_layer::ConstraintSet* mutable_constraints();
  void set_allocated_constraints(::service_layer::ConstraintSet* constraints);
  private:
  const ::service_layer::ConstraintSet& _internal_constraints() const;
  ::service_layer::ConstraintSet* _internal_mutable_constraints();
  public:
  void unsafe_arena_set_allocated_constraints(
      ::service_layer::ConstraintSet* constraints);
  ::service_layer::ConstraintSet* unsafe_arena_release_constraints();

  // @@protoc_insertion_point(class_scope:service_layer.SLSrtePathAttrExplicit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSegmentList > segment_lists_;
  ::service_layer::ConstraintSet* constraints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpcalc_5fstateful_2eproto;
};
// -------------------------------------------------------------------

class ConstraintSet_PathDiversity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.ConstraintSet.PathDiversity) */ {
 public:
  inline ConstraintSet_PathDiversity() : ConstraintSet_PathDiversity(nullptr) {}
  ~ConstraintSet_PathDiversity() override;
  explicit constexpr ConstraintSet_PathDiversity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConstraintSet_PathDiversity(const ConstraintSet_PathDiversity& from);
  ConstraintSet_PathDiversity(ConstraintSet_PathDiversity&& from) noexcept
    : ConstraintSet_PathDiversity() {
    *this = ::std::move(from);
  }

  inline ConstraintSet_PathDiversity& operator=(const ConstraintSet_PathDiversity& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConstraintSet_PathDiversity& operator=(ConstraintSet_PathDiversity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConstraintSet_PathDiversity& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConstraintSet_PathDiversity* internal_default_instance() {
    return reinterpret_cast<const ConstraintSet_PathDiversity*>(
               &_ConstraintSet_PathDiversity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ConstraintSet_PathDiversity& a, ConstraintSet_PathDiversity& b) {
    a.Swap(&b);
  }
  inline void Swap(ConstraintSet_PathDiversity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConstraintSet_PathDiversity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConstraintSet_PathDiversity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConstraintSet_PathDiversity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConstraintSet_PathDiversity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConstraintSet_PathDiversity& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConstraintSet_PathDiversity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.ConstraintSet.PathDiversity";
  }
  protected:
  explicit ConstraintSet_PathDiversity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssociationFieldNumber = 1,
    kDiversityLevelFieldNumber = 2,
    kMinDiversityLevelFieldNumber = 3,
    kShortestPathFieldNumber = 4,
  };
  // .service_layer.AssociationGroup association = 1;
  bool has_association() const;
  private:
  bool _internal_has_association() const;
  public:
  void clear_association();
  const ::service_layer::AssociationGroup& association() const;
  PROTOBUF_NODISCARD ::service_layer::AssociationGroup* release_association();
  ::service_layer::AssociationGroup* mutable_association();
  void set_allocated_association(::service_layer::AssociationGroup* association);
  private:
  const ::service_layer::AssociationGroup& _internal_association() const;
  ::service_layer::AssociationGroup* _internal_mutable_association();
  public:
  void unsafe_arena_set_allocated_association(
      ::service_layer::AssociationGroup* association);
  ::service_layer::AssociationGroup* unsafe_arena_release_association();

  // .service_layer.SLSrDiversityLevel diversity_level = 2;
  void clear_diversity_level();
  ::service_layer::SLSrDiversityLevel diversity_level() const;
  void set_diversity_level(::service_layer::SLSrDiversityLevel value);
  private:
  ::service_layer::SLSrDiversityLevel _internal_diversity_level() const;
  void _internal_set_diversity_level(::service_layer::SLSrDiversityLevel value);
  public:

  // optional .service_layer.SLSrDiversityLevel min_diversity_level = 3;
  bool has_min_diversity_level() const;
  private:
  bool _internal_has_min_diversity_level() const;
  public:
  void clear_min_diversity_level();
  ::service_layer::SLSrDiversityLevel min_diversity_level() const;
  void set_min_diversity_level(::service_layer::SLSrDiversityLevel value);
  private:
  ::service_layer::SLSrDiversityLevel _internal_min_diversity_level() const;
  void _internal_set_min_diversity_level(::service_layer::SLSrDiversityLevel value);
  public:

  // bool shortest_path = 4;
  void clear_shortest_path();
  bool shortest_path() const;
  void set_shortest_path(bool value);
  private:
  bool _internal_shortest_path() const;
  void _internal_set_shortest_path(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.ConstraintSet.PathDiversity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::service_layer::AssociationGroup* association_;
  int diversity_level_;
  int min_diversity_level_;
  bool shortest_path_;
  friend struct ::TableStruct_sl_5fsrte_5fpcalc_5fstateful_2eproto;
};
// -------------------------------------------------------------------

class ConstraintSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.ConstraintSet) */ {
 public:
  inline ConstraintSet() : ConstraintSet(nullptr) {}
  ~ConstraintSet() override;
  explicit constexpr ConstraintSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConstraintSet(const ConstraintSet& from);
  ConstraintSet(ConstraintSet&& from) noexcept
    : ConstraintSet() {
    *this = ::std::move(from);
  }

  inline ConstraintSet& operator=(const ConstraintSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConstraintSet& operator=(ConstraintSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConstraintSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConstraintSet* internal_default_instance() {
    return reinterpret_cast<const ConstraintSet*>(
               &_ConstraintSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ConstraintSet& a, ConstraintSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ConstraintSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConstraintSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConstraintSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConstraintSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConstraintSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConstraintSet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConstraintSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.ConstraintSet";
  }
  protected:
  explicit ConstraintSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConstraintSet_PathDiversity PathDiversity;

  // accessors -------------------------------------------------------

  enum : int {
    kSrlgExcludeFieldNumber = 4,
    kIpExcludeFieldNumber = 5,
    kAffinitiesFieldNumber = 1,
    kPathDiversityFieldNumber = 101,
    kCoroutedAssociationFieldNumber = 102,
    kMaximumSidDepthFieldNumber = 204,
    kGuaranteedBandwidthFieldNumber = 103,
    kStrictPathSegmentsFieldNumber = 201,
    kUnprotectedSegmentsFieldNumber = 202,
    kPersistentSegmentsFieldNumber = 203,
  };
  // repeated uint32 srlg_exclude = 4;
  int srlg_exclude_size() const;
  private:
  int _internal_srlg_exclude_size() const;
  public:
  void clear_srlg_exclude();
  private:
  uint32_t _internal_srlg_exclude(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_srlg_exclude() const;
  void _internal_add_srlg_exclude(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_srlg_exclude();
  public:
  uint32_t srlg_exclude(int index) const;
  void set_srlg_exclude(int index, uint32_t value);
  void add_srlg_exclude(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      srlg_exclude() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_srlg_exclude();

  // repeated .service_layer.SLIpAddress ip_exclude = 5;
  int ip_exclude_size() const;
  private:
  int _internal_ip_exclude_size() const;
  public:
  void clear_ip_exclude();
  ::service_layer::SLIpAddress* mutable_ip_exclude(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLIpAddress >*
      mutable_ip_exclude();
  private:
  const ::service_layer::SLIpAddress& _internal_ip_exclude(int index) const;
  ::service_layer::SLIpAddress* _internal_add_ip_exclude();
  public:
  const ::service_layer::SLIpAddress& ip_exclude(int index) const;
  ::service_layer::SLIpAddress* add_ip_exclude();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLIpAddress >&
      ip_exclude() const;

  // .service_layer.SLSrAffinities affinities = 1;
  bool has_affinities() const;
  private:
  bool _internal_has_affinities() const;
  public:
  void clear_affinities();
  const ::service_layer::SLSrAffinities& affinities() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrAffinities* release_affinities();
  ::service_layer::SLSrAffinities* mutable_affinities();
  void set_allocated_affinities(::service_layer::SLSrAffinities* affinities);
  private:
  const ::service_layer::SLSrAffinities& _internal_affinities() const;
  ::service_layer::SLSrAffinities* _internal_mutable_affinities();
  public:
  void unsafe_arena_set_allocated_affinities(
      ::service_layer::SLSrAffinities* affinities);
  ::service_layer::SLSrAffinities* unsafe_arena_release_affinities();

  // optional .service_layer.ConstraintSet.PathDiversity path_diversity = 101;
  bool has_path_diversity() const;
  private:
  bool _internal_has_path_diversity() const;
  public:
  void clear_path_diversity();
  const ::service_layer::ConstraintSet_PathDiversity& path_diversity() const;
  PROTOBUF_NODISCARD ::service_layer::ConstraintSet_PathDiversity* release_path_diversity();
  ::service_layer::ConstraintSet_PathDiversity* mutable_path_diversity();
  void set_allocated_path_diversity(::service_layer::ConstraintSet_PathDiversity* path_diversity);
  private:
  const ::service_layer::ConstraintSet_PathDiversity& _internal_path_diversity() const;
  ::service_layer::ConstraintSet_PathDiversity* _internal_mutable_path_diversity();
  public:
  void unsafe_arena_set_allocated_path_diversity(
      ::service_layer::ConstraintSet_PathDiversity* path_diversity);
  ::service_layer::ConstraintSet_PathDiversity* unsafe_arena_release_path_diversity();

  // optional .service_layer.AssociationGroup corouted_association = 102;
  bool has_corouted_association() const;
  private:
  bool _internal_has_corouted_association() const;
  public:
  void clear_corouted_association();
  const ::service_layer::AssociationGroup& corouted_association() const;
  PROTOBUF_NODISCARD ::service_layer::AssociationGroup* release_corouted_association();
  ::service_layer::AssociationGroup* mutable_corouted_association();
  void set_allocated_corouted_association(::service_layer::AssociationGroup* corouted_association);
  private:
  const ::service_layer::AssociationGroup& _internal_corouted_association() const;
  ::service_layer::AssociationGroup* _internal_mutable_corouted_association();
  public:
  void unsafe_arena_set_allocated_corouted_association(
      ::service_layer::AssociationGroup* corouted_association);
  ::service_layer::AssociationGroup* unsafe_arena_release_corouted_association();

  // uint32 maximum_sid_depth = 204;
  void clear_maximum_sid_depth();
  uint32_t maximum_sid_depth() const;
  void set_maximum_sid_depth(uint32_t value);
  private:
  uint32_t _internal_maximum_sid_depth() const;
  void _internal_set_maximum_sid_depth(uint32_t value);
  public:

  // uint32 guaranteed_bandwidth = 103;
  void clear_guaranteed_bandwidth();
  uint32_t guaranteed_bandwidth() const;
  void set_guaranteed_bandwidth(uint32_t value);
  private:
  uint32_t _internal_guaranteed_bandwidth() const;
  void _internal_set_guaranteed_bandwidth(uint32_t value);
  public:

  // bool strict_path_segments = 201;
  void clear_strict_path_segments();
  bool strict_path_segments() const;
  void set_strict_path_segments(bool value);
  private:
  bool _internal_strict_path_segments() const;
  void _internal_set_strict_path_segments(bool value);
  public:

  // bool unprotected_segments = 202;
  void clear_unprotected_segments();
  bool unprotected_segments() const;
  void set_unprotected_segments(bool value);
  private:
  bool _internal_unprotected_segments() const;
  void _internal_set_unprotected_segments(bool value);
  public:

  // bool persistent_segments = 203;
  void clear_persistent_segments();
  bool persistent_segments() const;
  void set_persistent_segments(bool value);
  private:
  bool _internal_persistent_segments() const;
  void _internal_set_persistent_segments(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.ConstraintSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > srlg_exclude_;
  mutable std::atomic<int> _srlg_exclude_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLIpAddress > ip_exclude_;
  ::service_layer::SLSrAffinities* affinities_;
  ::service_layer::ConstraintSet_PathDiversity* path_diversity_;
  ::service_layer::AssociationGroup* corouted_association_;
  uint32_t maximum_sid_depth_;
  uint32_t guaranteed_bandwidth_;
  bool strict_path_segments_;
  bool unprotected_segments_;
  bool persistent_segments_;
  friend struct ::TableStruct_sl_5fsrte_5fpcalc_5fstateful_2eproto;
};
// -------------------------------------------------------------------

class AssociationGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.AssociationGroup) */ {
 public:
  inline AssociationGroup() : AssociationGroup(nullptr) {}
  ~AssociationGroup() override;
  explicit constexpr AssociationGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssociationGroup(const AssociationGroup& from);
  AssociationGroup(AssociationGroup&& from) noexcept
    : AssociationGroup() {
    *this = ::std::move(from);
  }

  inline AssociationGroup& operator=(const AssociationGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssociationGroup& operator=(AssociationGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssociationGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssociationGroup* internal_default_instance() {
    return reinterpret_cast<const AssociationGroup*>(
               &_AssociationGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AssociationGroup& a, AssociationGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(AssociationGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssociationGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssociationGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssociationGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssociationGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AssociationGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssociationGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.AssociationGroup";
  }
  protected:
  explicit AssociationGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssociationIdFieldNumber = 1,
  };
  // uint32 association_id = 1;
  void clear_association_id();
  uint32_t association_id() const;
  void set_association_id(uint32_t value);
  private:
  uint32_t _internal_association_id() const;
  void _internal_set_association_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.AssociationGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t association_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpcalc_5fstateful_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SLSrtePathComputeReqs

// repeated .service_layer.SLSrtePathComputeReq requests = 1;
inline int SLSrtePathComputeReqs::_internal_requests_size() const {
  return requests_.size();
}
inline int SLSrtePathComputeReqs::requests_size() const {
  return _internal_requests_size();
}
inline void SLSrtePathComputeReqs::clear_requests() {
  requests_.Clear();
}
inline ::service_layer::SLSrtePathComputeReq* SLSrtePathComputeReqs::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrtePathComputeReqs.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrtePathComputeReq >*
SLSrtePathComputeReqs::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLSrtePathComputeReqs.requests)
  return &requests_;
}
inline const ::service_layer::SLSrtePathComputeReq& SLSrtePathComputeReqs::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::service_layer::SLSrtePathComputeReq& SLSrtePathComputeReqs::requests(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathComputeReqs.requests)
  return _internal_requests(index);
}
inline ::service_layer::SLSrtePathComputeReq* SLSrtePathComputeReqs::_internal_add_requests() {
  return requests_.Add();
}
inline ::service_layer::SLSrtePathComputeReq* SLSrtePathComputeReqs::add_requests() {
  ::service_layer::SLSrtePathComputeReq* _add = _internal_add_requests();
  // @@protoc_insertion_point(field_add:service_layer.SLSrtePathComputeReqs.requests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrtePathComputeReq >&
SLSrtePathComputeReqs::requests() const {
  // @@protoc_insertion_point(field_list:service_layer.SLSrtePathComputeReqs.requests)
  return requests_;
}

// -------------------------------------------------------------------

// SLSrtePathComputeRsps

// repeated .service_layer.SLSrtePathComputeRes responses = 1;
inline int SLSrtePathComputeRsps::_internal_responses_size() const {
  return responses_.size();
}
inline int SLSrtePathComputeRsps::responses_size() const {
  return _internal_responses_size();
}
inline void SLSrtePathComputeRsps::clear_responses() {
  responses_.Clear();
}
inline ::service_layer::SLSrtePathComputeRes* SLSrtePathComputeRsps::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrtePathComputeRsps.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrtePathComputeRes >*
SLSrtePathComputeRsps::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLSrtePathComputeRsps.responses)
  return &responses_;
}
inline const ::service_layer::SLSrtePathComputeRes& SLSrtePathComputeRsps::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::service_layer::SLSrtePathComputeRes& SLSrtePathComputeRsps::responses(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathComputeRsps.responses)
  return _internal_responses(index);
}
inline ::service_layer::SLSrtePathComputeRes* SLSrtePathComputeRsps::_internal_add_responses() {
  return responses_.Add();
}
inline ::service_layer::SLSrtePathComputeRes* SLSrtePathComputeRsps::add_responses() {
  ::service_layer::SLSrtePathComputeRes* _add = _internal_add_responses();
  // @@protoc_insertion_point(field_add:service_layer.SLSrtePathComputeRsps.responses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrtePathComputeRes >&
SLSrtePathComputeRsps::responses() const {
  // @@protoc_insertion_point(field_list:service_layer.SLSrtePathComputeRsps.responses)
  return responses_;
}

// -------------------------------------------------------------------

// SLSrtePathComputeReq_SLSrtePathInit

// .service_layer.SLSrDataplane dataplane = 1;
inline void SLSrtePathComputeReq_SLSrtePathInit::clear_dataplane() {
  dataplane_ = 0;
}
inline ::service_layer::SLSrDataplane SLSrtePathComputeReq_SLSrtePathInit::_internal_dataplane() const {
  return static_cast< ::service_layer::SLSrDataplane >(dataplane_);
}
inline ::service_layer::SLSrDataplane SLSrtePathComputeReq_SLSrtePathInit::dataplane() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathComputeReq.SLSrtePathInit.dataplane)
  return _internal_dataplane();
}
inline void SLSrtePathComputeReq_SLSrtePathInit::_internal_set_dataplane(::service_layer::SLSrDataplane value) {
  
  dataplane_ = value;
}
inline void SLSrtePathComputeReq_SLSrtePathInit::set_dataplane(::service_layer::SLSrDataplane value) {
  _internal_set_dataplane(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrtePathComputeReq.SLSrtePathInit.dataplane)
}

// .service_layer.SLSrtePathAttrDynamic dynamic = 2;
inline bool SLSrtePathComputeReq_SLSrtePathInit::_internal_has_dynamic() const {
  return path_init_type_case() == kDynamic;
}
inline bool SLSrtePathComputeReq_SLSrtePathInit::has_dynamic() const {
  return _internal_has_dynamic();
}
inline void SLSrtePathComputeReq_SLSrtePathInit::set_has_dynamic() {
  _oneof_case_[0] = kDynamic;
}
inline void SLSrtePathComputeReq_SLSrtePathInit::clear_dynamic() {
  if (_internal_has_dynamic()) {
    if (GetArenaForAllocation() == nullptr) {
      delete path_init_type_.dynamic_;
    }
    clear_has_path_init_type();
  }
}
inline ::service_layer::SLSrtePathAttrDynamic* SLSrtePathComputeReq_SLSrtePathInit::release_dynamic() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrtePathComputeReq.SLSrtePathInit.dynamic)
  if (_internal_has_dynamic()) {
    clear_has_path_init_type();
      ::service_layer::SLSrtePathAttrDynamic* temp = path_init_type_.dynamic_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    path_init_type_.dynamic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLSrtePathAttrDynamic& SLSrtePathComputeReq_SLSrtePathInit::_internal_dynamic() const {
  return _internal_has_dynamic()
      ? *path_init_type_.dynamic_
      : reinterpret_cast< ::service_layer::SLSrtePathAttrDynamic&>(::service_layer::_SLSrtePathAttrDynamic_default_instance_);
}
inline const ::service_layer::SLSrtePathAttrDynamic& SLSrtePathComputeReq_SLSrtePathInit::dynamic() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathComputeReq.SLSrtePathInit.dynamic)
  return _internal_dynamic();
}
inline ::service_layer::SLSrtePathAttrDynamic* SLSrtePathComputeReq_SLSrtePathInit::unsafe_arena_release_dynamic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLSrtePathComputeReq.SLSrtePathInit.dynamic)
  if (_internal_has_dynamic()) {
    clear_has_path_init_type();
    ::service_layer::SLSrtePathAttrDynamic* temp = path_init_type_.dynamic_;
    path_init_type_.dynamic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLSrtePathComputeReq_SLSrtePathInit::unsafe_arena_set_allocated_dynamic(::service_layer::SLSrtePathAttrDynamic* dynamic) {
  clear_path_init_type();
  if (dynamic) {
    set_has_dynamic();
    path_init_type_.dynamic_ = dynamic;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrtePathComputeReq.SLSrtePathInit.dynamic)
}
inline ::service_layer::SLSrtePathAttrDynamic* SLSrtePathComputeReq_SLSrtePathInit::_internal_mutable_dynamic() {
  if (!_internal_has_dynamic()) {
    clear_path_init_type();
    set_has_dynamic();
    path_init_type_.dynamic_ = CreateMaybeMessage< ::service_layer::SLSrtePathAttrDynamic >(GetArenaForAllocation());
  }
  return path_init_type_.dynamic_;
}
inline ::service_layer::SLSrtePathAttrDynamic* SLSrtePathComputeReq_SLSrtePathInit::mutable_dynamic() {
  ::service_layer::SLSrtePathAttrDynamic* _msg = _internal_mutable_dynamic();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrtePathComputeReq.SLSrtePathInit.dynamic)
  return _msg;
}

// .service_layer.SLSrtePathAttrExplicit explicit = 3;
inline bool SLSrtePathComputeReq_SLSrtePathInit::_internal_has_explicit_() const {
  return path_init_type_case() == kExplicit;
}
inline bool SLSrtePathComputeReq_SLSrtePathInit::has_explicit_() const {
  return _internal_has_explicit_();
}
inline void SLSrtePathComputeReq_SLSrtePathInit::set_has_explicit_() {
  _oneof_case_[0] = kExplicit;
}
inline void SLSrtePathComputeReq_SLSrtePathInit::clear_explicit_() {
  if (_internal_has_explicit_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete path_init_type_.explicit__;
    }
    clear_has_path_init_type();
  }
}
inline ::service_layer::SLSrtePathAttrExplicit* SLSrtePathComputeReq_SLSrtePathInit::release_explicit_() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrtePathComputeReq.SLSrtePathInit.explicit)
  if (_internal_has_explicit_()) {
    clear_has_path_init_type();
      ::service_layer::SLSrtePathAttrExplicit* temp = path_init_type_.explicit__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    path_init_type_.explicit__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLSrtePathAttrExplicit& SLSrtePathComputeReq_SLSrtePathInit::_internal_explicit_() const {
  return _internal_has_explicit_()
      ? *path_init_type_.explicit__
      : reinterpret_cast< ::service_layer::SLSrtePathAttrExplicit&>(::service_layer::_SLSrtePathAttrExplicit_default_instance_);
}
inline const ::service_layer::SLSrtePathAttrExplicit& SLSrtePathComputeReq_SLSrtePathInit::explicit_() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathComputeReq.SLSrtePathInit.explicit)
  return _internal_explicit_();
}
inline ::service_layer::SLSrtePathAttrExplicit* SLSrtePathComputeReq_SLSrtePathInit::unsafe_arena_release_explicit_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLSrtePathComputeReq.SLSrtePathInit.explicit)
  if (_internal_has_explicit_()) {
    clear_has_path_init_type();
    ::service_layer::SLSrtePathAttrExplicit* temp = path_init_type_.explicit__;
    path_init_type_.explicit__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLSrtePathComputeReq_SLSrtePathInit::unsafe_arena_set_allocated_explicit_(::service_layer::SLSrtePathAttrExplicit* explicit_) {
  clear_path_init_type();
  if (explicit_) {
    set_has_explicit_();
    path_init_type_.explicit__ = explicit_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrtePathComputeReq.SLSrtePathInit.explicit)
}
inline ::service_layer::SLSrtePathAttrExplicit* SLSrtePathComputeReq_SLSrtePathInit::_internal_mutable_explicit_() {
  if (!_internal_has_explicit_()) {
    clear_path_init_type();
    set_has_explicit_();
    path_init_type_.explicit__ = CreateMaybeMessage< ::service_layer::SLSrtePathAttrExplicit >(GetArenaForAllocation());
  }
  return path_init_type_.explicit__;
}
inline ::service_layer::SLSrtePathAttrExplicit* SLSrtePathComputeReq_SLSrtePathInit::mutable_explicit_() {
  ::service_layer::SLSrtePathAttrExplicit* _msg = _internal_mutable_explicit_();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrtePathComputeReq.SLSrtePathInit.explicit)
  return _msg;
}

inline bool SLSrtePathComputeReq_SLSrtePathInit::has_path_init_type() const {
  return path_init_type_case() != PATH_INIT_TYPE_NOT_SET;
}
inline void SLSrtePathComputeReq_SLSrtePathInit::clear_has_path_init_type() {
  _oneof_case_[0] = PATH_INIT_TYPE_NOT_SET;
}
inline SLSrtePathComputeReq_SLSrtePathInit::PathInitTypeCase SLSrtePathComputeReq_SLSrtePathInit::path_init_type_case() const {
  return SLSrtePathComputeReq_SLSrtePathInit::PathInitTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLSrtePathComputeReq_SLSrtePathUpdate

// .service_layer.SLSrtePathAttrDynamic dynamic = 1;
inline bool SLSrtePathComputeReq_SLSrtePathUpdate::_internal_has_dynamic() const {
  return path_update_type_case() == kDynamic;
}
inline bool SLSrtePathComputeReq_SLSrtePathUpdate::has_dynamic() const {
  return _internal_has_dynamic();
}
inline void SLSrtePathComputeReq_SLSrtePathUpdate::set_has_dynamic() {
  _oneof_case_[0] = kDynamic;
}
inline void SLSrtePathComputeReq_SLSrtePathUpdate::clear_dynamic() {
  if (_internal_has_dynamic()) {
    if (GetArenaForAllocation() == nullptr) {
      delete path_update_type_.dynamic_;
    }
    clear_has_path_update_type();
  }
}
inline ::service_layer::SLSrtePathAttrDynamic* SLSrtePathComputeReq_SLSrtePathUpdate::release_dynamic() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate.dynamic)
  if (_internal_has_dynamic()) {
    clear_has_path_update_type();
      ::service_layer::SLSrtePathAttrDynamic* temp = path_update_type_.dynamic_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    path_update_type_.dynamic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLSrtePathAttrDynamic& SLSrtePathComputeReq_SLSrtePathUpdate::_internal_dynamic() const {
  return _internal_has_dynamic()
      ? *path_update_type_.dynamic_
      : reinterpret_cast< ::service_layer::SLSrtePathAttrDynamic&>(::service_layer::_SLSrtePathAttrDynamic_default_instance_);
}
inline const ::service_layer::SLSrtePathAttrDynamic& SLSrtePathComputeReq_SLSrtePathUpdate::dynamic() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate.dynamic)
  return _internal_dynamic();
}
inline ::service_layer::SLSrtePathAttrDynamic* SLSrtePathComputeReq_SLSrtePathUpdate::unsafe_arena_release_dynamic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate.dynamic)
  if (_internal_has_dynamic()) {
    clear_has_path_update_type();
    ::service_layer::SLSrtePathAttrDynamic* temp = path_update_type_.dynamic_;
    path_update_type_.dynamic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLSrtePathComputeReq_SLSrtePathUpdate::unsafe_arena_set_allocated_dynamic(::service_layer::SLSrtePathAttrDynamic* dynamic) {
  clear_path_update_type();
  if (dynamic) {
    set_has_dynamic();
    path_update_type_.dynamic_ = dynamic;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate.dynamic)
}
inline ::service_layer::SLSrtePathAttrDynamic* SLSrtePathComputeReq_SLSrtePathUpdate::_internal_mutable_dynamic() {
  if (!_internal_has_dynamic()) {
    clear_path_update_type();
    set_has_dynamic();
    path_update_type_.dynamic_ = CreateMaybeMessage< ::service_layer::SLSrtePathAttrDynamic >(GetArenaForAllocation());
  }
  return path_update_type_.dynamic_;
}
inline ::service_layer::SLSrtePathAttrDynamic* SLSrtePathComputeReq_SLSrtePathUpdate::mutable_dynamic() {
  ::service_layer::SLSrtePathAttrDynamic* _msg = _internal_mutable_dynamic();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate.dynamic)
  return _msg;
}

// .service_layer.SLSrtePathAttrExplicit explicit = 2;
inline bool SLSrtePathComputeReq_SLSrtePathUpdate::_internal_has_explicit_() const {
  return path_update_type_case() == kExplicit;
}
inline bool SLSrtePathComputeReq_SLSrtePathUpdate::has_explicit_() const {
  return _internal_has_explicit_();
}
inline void SLSrtePathComputeReq_SLSrtePathUpdate::set_has_explicit_() {
  _oneof_case_[0] = kExplicit;
}
inline void SLSrtePathComputeReq_SLSrtePathUpdate::clear_explicit_() {
  if (_internal_has_explicit_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete path_update_type_.explicit__;
    }
    clear_has_path_update_type();
  }
}
inline ::service_layer::SLSrtePathAttrExplicit* SLSrtePathComputeReq_SLSrtePathUpdate::release_explicit_() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate.explicit)
  if (_internal_has_explicit_()) {
    clear_has_path_update_type();
      ::service_layer::SLSrtePathAttrExplicit* temp = path_update_type_.explicit__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    path_update_type_.explicit__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLSrtePathAttrExplicit& SLSrtePathComputeReq_SLSrtePathUpdate::_internal_explicit_() const {
  return _internal_has_explicit_()
      ? *path_update_type_.explicit__
      : reinterpret_cast< ::service_layer::SLSrtePathAttrExplicit&>(::service_layer::_SLSrtePathAttrExplicit_default_instance_);
}
inline const ::service_layer::SLSrtePathAttrExplicit& SLSrtePathComputeReq_SLSrtePathUpdate::explicit_() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate.explicit)
  return _internal_explicit_();
}
inline ::service_layer::SLSrtePathAttrExplicit* SLSrtePathComputeReq_SLSrtePathUpdate::unsafe_arena_release_explicit_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate.explicit)
  if (_internal_has_explicit_()) {
    clear_has_path_update_type();
    ::service_layer::SLSrtePathAttrExplicit* temp = path_update_type_.explicit__;
    path_update_type_.explicit__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLSrtePathComputeReq_SLSrtePathUpdate::unsafe_arena_set_allocated_explicit_(::service_layer::SLSrtePathAttrExplicit* explicit_) {
  clear_path_update_type();
  if (explicit_) {
    set_has_explicit_();
    path_update_type_.explicit__ = explicit_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate.explicit)
}
inline ::service_layer::SLSrtePathAttrExplicit* SLSrtePathComputeReq_SLSrtePathUpdate::_internal_mutable_explicit_() {
  if (!_internal_has_explicit_()) {
    clear_path_update_type();
    set_has_explicit_();
    path_update_type_.explicit__ = CreateMaybeMessage< ::service_layer::SLSrtePathAttrExplicit >(GetArenaForAllocation());
  }
  return path_update_type_.explicit__;
}
inline ::service_layer::SLSrtePathAttrExplicit* SLSrtePathComputeReq_SLSrtePathUpdate::mutable_explicit_() {
  ::service_layer::SLSrtePathAttrExplicit* _msg = _internal_mutable_explicit_();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrtePathComputeReq.SLSrtePathUpdate.explicit)
  return _msg;
}

inline bool SLSrtePathComputeReq_SLSrtePathUpdate::has_path_update_type() const {
  return path_update_type_case() != PATH_UPDATE_TYPE_NOT_SET;
}
inline void SLSrtePathComputeReq_SLSrtePathUpdate::clear_has_path_update_type() {
  _oneof_case_[0] = PATH_UPDATE_TYPE_NOT_SET;
}
inline SLSrtePathComputeReq_SLSrtePathUpdate::PathUpdateTypeCase SLSrtePathComputeReq_SLSrtePathUpdate::path_update_type_case() const {
  return SLSrtePathComputeReq_SLSrtePathUpdate::PathUpdateTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLSrtePathComputeReq_SLSrtePathWithdraw

// -------------------------------------------------------------------

// SLSrtePathComputeReq

// .service_layer.SLSrPolicyKey policy_key = 1;
inline bool SLSrtePathComputeReq::_internal_has_policy_key() const {
  return this != internal_default_instance() && policy_key_ != nullptr;
}
inline bool SLSrtePathComputeReq::has_policy_key() const {
  return _internal_has_policy_key();
}
inline const ::service_layer::SLSrPolicyKey& SLSrtePathComputeReq::_internal_policy_key() const {
  const ::service_layer::SLSrPolicyKey* p = policy_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrPolicyKey&>(
      ::service_layer::_SLSrPolicyKey_default_instance_);
}
inline const ::service_layer::SLSrPolicyKey& SLSrtePathComputeReq::policy_key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathComputeReq.policy_key)
  return _internal_policy_key();
}
inline void SLSrtePathComputeReq::unsafe_arena_set_allocated_policy_key(
    ::service_layer::SLSrPolicyKey* policy_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(policy_key_);
  }
  policy_key_ = policy_key;
  if (policy_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrtePathComputeReq.policy_key)
}
inline ::service_layer::SLSrPolicyKey* SLSrtePathComputeReq::release_policy_key() {
  
  ::service_layer::SLSrPolicyKey* temp = policy_key_;
  policy_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrPolicyKey* SLSrtePathComputeReq::unsafe_arena_release_policy_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrtePathComputeReq.policy_key)
  
  ::service_layer::SLSrPolicyKey* temp = policy_key_;
  policy_key_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrPolicyKey* SLSrtePathComputeReq::_internal_mutable_policy_key() {
  
  if (policy_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrPolicyKey>(GetArenaForAllocation());
    policy_key_ = p;
  }
  return policy_key_;
}
inline ::service_layer::SLSrPolicyKey* SLSrtePathComputeReq::mutable_policy_key() {
  ::service_layer::SLSrPolicyKey* _msg = _internal_mutable_policy_key();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrtePathComputeReq.policy_key)
  return _msg;
}
inline void SLSrtePathComputeReq::set_allocated_policy_key(::service_layer::SLSrPolicyKey* policy_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(policy_key_);
  }
  if (policy_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(policy_key));
    if (message_arena != submessage_arena) {
      policy_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy_key, submessage_arena);
    }
    
  } else {
    
  }
  policy_key_ = policy_key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrtePathComputeReq.policy_key)
}

// .service_layer.SLSrCandidatePathKey candidate_path_key = 2;
inline bool SLSrtePathComputeReq::_internal_has_candidate_path_key() const {
  return this != internal_default_instance() && candidate_path_key_ != nullptr;
}
inline bool SLSrtePathComputeReq::has_candidate_path_key() const {
  return _internal_has_candidate_path_key();
}
inline const ::service_layer::SLSrCandidatePathKey& SLSrtePathComputeReq::_internal_candidate_path_key() const {
  const ::service_layer::SLSrCandidatePathKey* p = candidate_path_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrCandidatePathKey&>(
      ::service_layer::_SLSrCandidatePathKey_default_instance_);
}
inline const ::service_layer::SLSrCandidatePathKey& SLSrtePathComputeReq::candidate_path_key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathComputeReq.candidate_path_key)
  return _internal_candidate_path_key();
}
inline void SLSrtePathComputeReq::unsafe_arena_set_allocated_candidate_path_key(
    ::service_layer::SLSrCandidatePathKey* candidate_path_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(candidate_path_key_);
  }
  candidate_path_key_ = candidate_path_key;
  if (candidate_path_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrtePathComputeReq.candidate_path_key)
}
inline ::service_layer::SLSrCandidatePathKey* SLSrtePathComputeReq::release_candidate_path_key() {
  
  ::service_layer::SLSrCandidatePathKey* temp = candidate_path_key_;
  candidate_path_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrCandidatePathKey* SLSrtePathComputeReq::unsafe_arena_release_candidate_path_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrtePathComputeReq.candidate_path_key)
  
  ::service_layer::SLSrCandidatePathKey* temp = candidate_path_key_;
  candidate_path_key_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrCandidatePathKey* SLSrtePathComputeReq::_internal_mutable_candidate_path_key() {
  
  if (candidate_path_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrCandidatePathKey>(GetArenaForAllocation());
    candidate_path_key_ = p;
  }
  return candidate_path_key_;
}
inline ::service_layer::SLSrCandidatePathKey* SLSrtePathComputeReq::mutable_candidate_path_key() {
  ::service_layer::SLSrCandidatePathKey* _msg = _internal_mutable_candidate_path_key();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrtePathComputeReq.candidate_path_key)
  return _msg;
}
inline void SLSrtePathComputeReq::set_allocated_candidate_path_key(::service_layer::SLSrCandidatePathKey* candidate_path_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(candidate_path_key_);
  }
  if (candidate_path_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(candidate_path_key));
    if (message_arena != submessage_arena) {
      candidate_path_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidate_path_key, submessage_arena);
    }
    
  } else {
    
  }
  candidate_path_key_ = candidate_path_key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrtePathComputeReq.candidate_path_key)
}

// uint64 seq_num = 3;
inline void SLSrtePathComputeReq::clear_seq_num() {
  seq_num_ = uint64_t{0u};
}
inline uint64_t SLSrtePathComputeReq::_internal_seq_num() const {
  return seq_num_;
}
inline uint64_t SLSrtePathComputeReq::seq_num() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathComputeReq.seq_num)
  return _internal_seq_num();
}
inline void SLSrtePathComputeReq::_internal_set_seq_num(uint64_t value) {
  
  seq_num_ = value;
}
inline void SLSrtePathComputeReq::set_seq_num(uint64_t value) {
  _internal_set_seq_num(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrtePathComputeReq.seq_num)
}

// .service_layer.SLSrtePathComputeReq.SLSrtePathInit init = 4;
inline bool SLSrtePathComputeReq::_internal_has_init() const {
  return request_type_case() == kInit;
}
inline bool SLSrtePathComputeReq::has_init() const {
  return _internal_has_init();
}
inline void SLSrtePathComputeReq::set_has_init() {
  _oneof_case_[0] = kInit;
}
inline void SLSrtePathComputeReq::clear_init() {
  if (_internal_has_init()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_type_.init_;
    }
    clear_has_request_type();
  }
}
inline ::service_layer::SLSrtePathComputeReq_SLSrtePathInit* SLSrtePathComputeReq::release_init() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrtePathComputeReq.init)
  if (_internal_has_init()) {
    clear_has_request_type();
      ::service_layer::SLSrtePathComputeReq_SLSrtePathInit* temp = request_type_.init_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLSrtePathComputeReq_SLSrtePathInit& SLSrtePathComputeReq::_internal_init() const {
  return _internal_has_init()
      ? *request_type_.init_
      : reinterpret_cast< ::service_layer::SLSrtePathComputeReq_SLSrtePathInit&>(::service_layer::_SLSrtePathComputeReq_SLSrtePathInit_default_instance_);
}
inline const ::service_layer::SLSrtePathComputeReq_SLSrtePathInit& SLSrtePathComputeReq::init() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathComputeReq.init)
  return _internal_init();
}
inline ::service_layer::SLSrtePathComputeReq_SLSrtePathInit* SLSrtePathComputeReq::unsafe_arena_release_init() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLSrtePathComputeReq.init)
  if (_internal_has_init()) {
    clear_has_request_type();
    ::service_layer::SLSrtePathComputeReq_SLSrtePathInit* temp = request_type_.init_;
    request_type_.init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLSrtePathComputeReq::unsafe_arena_set_allocated_init(::service_layer::SLSrtePathComputeReq_SLSrtePathInit* init) {
  clear_request_type();
  if (init) {
    set_has_init();
    request_type_.init_ = init;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrtePathComputeReq.init)
}
inline ::service_layer::SLSrtePathComputeReq_SLSrtePathInit* SLSrtePathComputeReq::_internal_mutable_init() {
  if (!_internal_has_init()) {
    clear_request_type();
    set_has_init();
    request_type_.init_ = CreateMaybeMessage< ::service_layer::SLSrtePathComputeReq_SLSrtePathInit >(GetArenaForAllocation());
  }
  return request_type_.init_;
}
inline ::service_layer::SLSrtePathComputeReq_SLSrtePathInit* SLSrtePathComputeReq::mutable_init() {
  ::service_layer::SLSrtePathComputeReq_SLSrtePathInit* _msg = _internal_mutable_init();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrtePathComputeReq.init)
  return _msg;
}

// .service_layer.SLSrtePathComputeReq.SLSrtePathUpdate update = 5;
inline bool SLSrtePathComputeReq::_internal_has_update() const {
  return request_type_case() == kUpdate;
}
inline bool SLSrtePathComputeReq::has_update() const {
  return _internal_has_update();
}
inline void SLSrtePathComputeReq::set_has_update() {
  _oneof_case_[0] = kUpdate;
}
inline void SLSrtePathComputeReq::clear_update() {
  if (_internal_has_update()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_type_.update_;
    }
    clear_has_request_type();
  }
}
inline ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate* SLSrtePathComputeReq::release_update() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrtePathComputeReq.update)
  if (_internal_has_update()) {
    clear_has_request_type();
      ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate* temp = request_type_.update_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate& SLSrtePathComputeReq::_internal_update() const {
  return _internal_has_update()
      ? *request_type_.update_
      : reinterpret_cast< ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate&>(::service_layer::_SLSrtePathComputeReq_SLSrtePathUpdate_default_instance_);
}
inline const ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate& SLSrtePathComputeReq::update() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathComputeReq.update)
  return _internal_update();
}
inline ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate* SLSrtePathComputeReq::unsafe_arena_release_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLSrtePathComputeReq.update)
  if (_internal_has_update()) {
    clear_has_request_type();
    ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate* temp = request_type_.update_;
    request_type_.update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLSrtePathComputeReq::unsafe_arena_set_allocated_update(::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate* update) {
  clear_request_type();
  if (update) {
    set_has_update();
    request_type_.update_ = update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrtePathComputeReq.update)
}
inline ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate* SLSrtePathComputeReq::_internal_mutable_update() {
  if (!_internal_has_update()) {
    clear_request_type();
    set_has_update();
    request_type_.update_ = CreateMaybeMessage< ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate >(GetArenaForAllocation());
  }
  return request_type_.update_;
}
inline ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate* SLSrtePathComputeReq::mutable_update() {
  ::service_layer::SLSrtePathComputeReq_SLSrtePathUpdate* _msg = _internal_mutable_update();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrtePathComputeReq.update)
  return _msg;
}

// .service_layer.SLSrtePathComputeReq.SLSrtePathWithdraw withdraw = 6;
inline bool SLSrtePathComputeReq::_internal_has_withdraw() const {
  return request_type_case() == kWithdraw;
}
inline bool SLSrtePathComputeReq::has_withdraw() const {
  return _internal_has_withdraw();
}
inline void SLSrtePathComputeReq::set_has_withdraw() {
  _oneof_case_[0] = kWithdraw;
}
inline void SLSrtePathComputeReq::clear_withdraw() {
  if (_internal_has_withdraw()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_type_.withdraw_;
    }
    clear_has_request_type();
  }
}
inline ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw* SLSrtePathComputeReq::release_withdraw() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrtePathComputeReq.withdraw)
  if (_internal_has_withdraw()) {
    clear_has_request_type();
      ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw* temp = request_type_.withdraw_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.withdraw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw& SLSrtePathComputeReq::_internal_withdraw() const {
  return _internal_has_withdraw()
      ? *request_type_.withdraw_
      : reinterpret_cast< ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw&>(::service_layer::_SLSrtePathComputeReq_SLSrtePathWithdraw_default_instance_);
}
inline const ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw& SLSrtePathComputeReq::withdraw() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathComputeReq.withdraw)
  return _internal_withdraw();
}
inline ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw* SLSrtePathComputeReq::unsafe_arena_release_withdraw() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLSrtePathComputeReq.withdraw)
  if (_internal_has_withdraw()) {
    clear_has_request_type();
    ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw* temp = request_type_.withdraw_;
    request_type_.withdraw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLSrtePathComputeReq::unsafe_arena_set_allocated_withdraw(::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw* withdraw) {
  clear_request_type();
  if (withdraw) {
    set_has_withdraw();
    request_type_.withdraw_ = withdraw;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrtePathComputeReq.withdraw)
}
inline ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw* SLSrtePathComputeReq::_internal_mutable_withdraw() {
  if (!_internal_has_withdraw()) {
    clear_request_type();
    set_has_withdraw();
    request_type_.withdraw_ = CreateMaybeMessage< ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw >(GetArenaForAllocation());
  }
  return request_type_.withdraw_;
}
inline ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw* SLSrtePathComputeReq::mutable_withdraw() {
  ::service_layer::SLSrtePathComputeReq_SLSrtePathWithdraw* _msg = _internal_mutable_withdraw();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrtePathComputeReq.withdraw)
  return _msg;
}

inline bool SLSrtePathComputeReq::has_request_type() const {
  return request_type_case() != REQUEST_TYPE_NOT_SET;
}
inline void SLSrtePathComputeReq::clear_has_request_type() {
  _oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}
inline SLSrtePathComputeReq::RequestTypeCase SLSrtePathComputeReq::request_type_case() const {
  return SLSrtePathComputeReq::RequestTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLSrtePathComputeRes_SLSrteDynamicPathResult

// repeated .service_layer.SLSrSegmentList segment_lists = 1;
inline int SLSrtePathComputeRes_SLSrteDynamicPathResult::_internal_segment_lists_size() const {
  return segment_lists_.size();
}
inline int SLSrtePathComputeRes_SLSrteDynamicPathResult::segment_lists_size() const {
  return _internal_segment_lists_size();
}
inline ::service_layer::SLSrSegmentList* SLSrtePathComputeRes_SLSrteDynamicPathResult::mutable_segment_lists(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult.segment_lists)
  return segment_lists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSegmentList >*
SLSrtePathComputeRes_SLSrteDynamicPathResult::mutable_segment_lists() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult.segment_lists)
  return &segment_lists_;
}
inline const ::service_layer::SLSrSegmentList& SLSrtePathComputeRes_SLSrteDynamicPathResult::_internal_segment_lists(int index) const {
  return segment_lists_.Get(index);
}
inline const ::service_layer::SLSrSegmentList& SLSrtePathComputeRes_SLSrteDynamicPathResult::segment_lists(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult.segment_lists)
  return _internal_segment_lists(index);
}
inline ::service_layer::SLSrSegmentList* SLSrtePathComputeRes_SLSrteDynamicPathResult::_internal_add_segment_lists() {
  return segment_lists_.Add();
}
inline ::service_layer::SLSrSegmentList* SLSrtePathComputeRes_SLSrteDynamicPathResult::add_segment_lists() {
  ::service_layer::SLSrSegmentList* _add = _internal_add_segment_lists();
  // @@protoc_insertion_point(field_add:service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult.segment_lists)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSegmentList >&
SLSrtePathComputeRes_SLSrteDynamicPathResult::segment_lists() const {
  // @@protoc_insertion_point(field_list:service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult.segment_lists)
  return segment_lists_;
}

// optional .service_layer.SLSrDiversityLevel effective_diversity_level = 3;
inline bool SLSrtePathComputeRes_SLSrteDynamicPathResult::_internal_has_effective_diversity_level() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SLSrtePathComputeRes_SLSrteDynamicPathResult::has_effective_diversity_level() const {
  return _internal_has_effective_diversity_level();
}
inline void SLSrtePathComputeRes_SLSrteDynamicPathResult::clear_effective_diversity_level() {
  effective_diversity_level_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::service_layer::SLSrDiversityLevel SLSrtePathComputeRes_SLSrteDynamicPathResult::_internal_effective_diversity_level() const {
  return static_cast< ::service_layer::SLSrDiversityLevel >(effective_diversity_level_);
}
inline ::service_layer::SLSrDiversityLevel SLSrtePathComputeRes_SLSrteDynamicPathResult::effective_diversity_level() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult.effective_diversity_level)
  return _internal_effective_diversity_level();
}
inline void SLSrtePathComputeRes_SLSrteDynamicPathResult::_internal_set_effective_diversity_level(::service_layer::SLSrDiversityLevel value) {
  _has_bits_[0] |= 0x00000001u;
  effective_diversity_level_ = value;
}
inline void SLSrtePathComputeRes_SLSrteDynamicPathResult::set_effective_diversity_level(::service_layer::SLSrDiversityLevel value) {
  _internal_set_effective_diversity_level(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult.effective_diversity_level)
}

// -------------------------------------------------------------------

// SLSrtePathComputeRes_SLSrtePathError

// .service_layer.SLErrorStatus type = 1;
inline bool SLSrtePathComputeRes_SLSrtePathError::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool SLSrtePathComputeRes_SLSrtePathError::has_type() const {
  return _internal_has_type();
}
inline const ::service_layer::SLErrorStatus& SLSrtePathComputeRes_SLSrtePathError::_internal_type() const {
  const ::service_layer::SLErrorStatus* p = type_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLErrorStatus&>(
      ::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLSrtePathComputeRes_SLSrtePathError::type() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathComputeRes.SLSrtePathError.type)
  return _internal_type();
}
inline void SLSrtePathComputeRes_SLSrtePathError::unsafe_arena_set_allocated_type(
    ::service_layer::SLErrorStatus* type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  type_ = type;
  if (type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrtePathComputeRes.SLSrtePathError.type)
}
inline ::service_layer::SLErrorStatus* SLSrtePathComputeRes_SLSrtePathError::release_type() {
  
  ::service_layer::SLErrorStatus* temp = type_;
  type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLErrorStatus* SLSrtePathComputeRes_SLSrtePathError::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrtePathComputeRes.SLSrtePathError.type)
  
  ::service_layer::SLErrorStatus* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLSrtePathComputeRes_SLSrtePathError::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArenaForAllocation());
    type_ = p;
  }
  return type_;
}
inline ::service_layer::SLErrorStatus* SLSrtePathComputeRes_SLSrtePathError::mutable_type() {
  ::service_layer::SLErrorStatus* _msg = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrtePathComputeRes.SLSrtePathError.type)
  return _msg;
}
inline void SLSrtePathComputeRes_SLSrtePathError::set_allocated_type(::service_layer::SLErrorStatus* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type));
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrtePathComputeRes.SLSrtePathError.type)
}

// string description = 2;
inline void SLSrtePathComputeRes_SLSrtePathError::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& SLSrtePathComputeRes_SLSrtePathError::description() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathComputeRes.SLSrtePathError.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLSrtePathComputeRes_SLSrtePathError::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrtePathComputeRes.SLSrtePathError.description)
}
inline std::string* SLSrtePathComputeRes_SLSrtePathError::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrtePathComputeRes.SLSrtePathError.description)
  return _s;
}
inline const std::string& SLSrtePathComputeRes_SLSrtePathError::_internal_description() const {
  return description_.Get();
}
inline void SLSrtePathComputeRes_SLSrtePathError::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrtePathComputeRes_SLSrtePathError::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrtePathComputeRes_SLSrtePathError::release_description() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrtePathComputeRes.SLSrtePathError.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLSrtePathComputeRes_SLSrtePathError::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrtePathComputeRes.SLSrtePathError.description)
}

// -------------------------------------------------------------------

// SLSrtePathComputeRes

// .service_layer.SLSrPolicyKey policy_key = 1;
inline bool SLSrtePathComputeRes::_internal_has_policy_key() const {
  return this != internal_default_instance() && policy_key_ != nullptr;
}
inline bool SLSrtePathComputeRes::has_policy_key() const {
  return _internal_has_policy_key();
}
inline const ::service_layer::SLSrPolicyKey& SLSrtePathComputeRes::_internal_policy_key() const {
  const ::service_layer::SLSrPolicyKey* p = policy_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrPolicyKey&>(
      ::service_layer::_SLSrPolicyKey_default_instance_);
}
inline const ::service_layer::SLSrPolicyKey& SLSrtePathComputeRes::policy_key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathComputeRes.policy_key)
  return _internal_policy_key();
}
inline void SLSrtePathComputeRes::unsafe_arena_set_allocated_policy_key(
    ::service_layer::SLSrPolicyKey* policy_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(policy_key_);
  }
  policy_key_ = policy_key;
  if (policy_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrtePathComputeRes.policy_key)
}
inline ::service_layer::SLSrPolicyKey* SLSrtePathComputeRes::release_policy_key() {
  
  ::service_layer::SLSrPolicyKey* temp = policy_key_;
  policy_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrPolicyKey* SLSrtePathComputeRes::unsafe_arena_release_policy_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrtePathComputeRes.policy_key)
  
  ::service_layer::SLSrPolicyKey* temp = policy_key_;
  policy_key_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrPolicyKey* SLSrtePathComputeRes::_internal_mutable_policy_key() {
  
  if (policy_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrPolicyKey>(GetArenaForAllocation());
    policy_key_ = p;
  }
  return policy_key_;
}
inline ::service_layer::SLSrPolicyKey* SLSrtePathComputeRes::mutable_policy_key() {
  ::service_layer::SLSrPolicyKey* _msg = _internal_mutable_policy_key();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrtePathComputeRes.policy_key)
  return _msg;
}
inline void SLSrtePathComputeRes::set_allocated_policy_key(::service_layer::SLSrPolicyKey* policy_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(policy_key_);
  }
  if (policy_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(policy_key));
    if (message_arena != submessage_arena) {
      policy_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy_key, submessage_arena);
    }
    
  } else {
    
  }
  policy_key_ = policy_key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrtePathComputeRes.policy_key)
}

// .service_layer.SLSrCandidatePathKey candidate_path_key = 2;
inline bool SLSrtePathComputeRes::_internal_has_candidate_path_key() const {
  return this != internal_default_instance() && candidate_path_key_ != nullptr;
}
inline bool SLSrtePathComputeRes::has_candidate_path_key() const {
  return _internal_has_candidate_path_key();
}
inline const ::service_layer::SLSrCandidatePathKey& SLSrtePathComputeRes::_internal_candidate_path_key() const {
  const ::service_layer::SLSrCandidatePathKey* p = candidate_path_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrCandidatePathKey&>(
      ::service_layer::_SLSrCandidatePathKey_default_instance_);
}
inline const ::service_layer::SLSrCandidatePathKey& SLSrtePathComputeRes::candidate_path_key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathComputeRes.candidate_path_key)
  return _internal_candidate_path_key();
}
inline void SLSrtePathComputeRes::unsafe_arena_set_allocated_candidate_path_key(
    ::service_layer::SLSrCandidatePathKey* candidate_path_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(candidate_path_key_);
  }
  candidate_path_key_ = candidate_path_key;
  if (candidate_path_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrtePathComputeRes.candidate_path_key)
}
inline ::service_layer::SLSrCandidatePathKey* SLSrtePathComputeRes::release_candidate_path_key() {
  
  ::service_layer::SLSrCandidatePathKey* temp = candidate_path_key_;
  candidate_path_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrCandidatePathKey* SLSrtePathComputeRes::unsafe_arena_release_candidate_path_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrtePathComputeRes.candidate_path_key)
  
  ::service_layer::SLSrCandidatePathKey* temp = candidate_path_key_;
  candidate_path_key_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrCandidatePathKey* SLSrtePathComputeRes::_internal_mutable_candidate_path_key() {
  
  if (candidate_path_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrCandidatePathKey>(GetArenaForAllocation());
    candidate_path_key_ = p;
  }
  return candidate_path_key_;
}
inline ::service_layer::SLSrCandidatePathKey* SLSrtePathComputeRes::mutable_candidate_path_key() {
  ::service_layer::SLSrCandidatePathKey* _msg = _internal_mutable_candidate_path_key();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrtePathComputeRes.candidate_path_key)
  return _msg;
}
inline void SLSrtePathComputeRes::set_allocated_candidate_path_key(::service_layer::SLSrCandidatePathKey* candidate_path_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(candidate_path_key_);
  }
  if (candidate_path_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(candidate_path_key));
    if (message_arena != submessage_arena) {
      candidate_path_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidate_path_key, submessage_arena);
    }
    
  } else {
    
  }
  candidate_path_key_ = candidate_path_key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrtePathComputeRes.candidate_path_key)
}

// uint64 req_seq_num = 3;
inline void SLSrtePathComputeRes::clear_req_seq_num() {
  req_seq_num_ = uint64_t{0u};
}
inline uint64_t SLSrtePathComputeRes::_internal_req_seq_num() const {
  return req_seq_num_;
}
inline uint64_t SLSrtePathComputeRes::req_seq_num() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathComputeRes.req_seq_num)
  return _internal_req_seq_num();
}
inline void SLSrtePathComputeRes::_internal_set_req_seq_num(uint64_t value) {
  
  req_seq_num_ = value;
}
inline void SLSrtePathComputeRes::set_req_seq_num(uint64_t value) {
  _internal_set_req_seq_num(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrtePathComputeRes.req_seq_num)
}

// .service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult path_result = 4;
inline bool SLSrtePathComputeRes::_internal_has_path_result() const {
  return response_type_case() == kPathResult;
}
inline bool SLSrtePathComputeRes::has_path_result() const {
  return _internal_has_path_result();
}
inline void SLSrtePathComputeRes::set_has_path_result() {
  _oneof_case_[0] = kPathResult;
}
inline void SLSrtePathComputeRes::clear_path_result() {
  if (_internal_has_path_result()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_type_.path_result_;
    }
    clear_has_response_type();
  }
}
inline ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult* SLSrtePathComputeRes::release_path_result() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrtePathComputeRes.path_result)
  if (_internal_has_path_result()) {
    clear_has_response_type();
      ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult* temp = response_type_.path_result_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_type_.path_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult& SLSrtePathComputeRes::_internal_path_result() const {
  return _internal_has_path_result()
      ? *response_type_.path_result_
      : reinterpret_cast< ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult&>(::service_layer::_SLSrtePathComputeRes_SLSrteDynamicPathResult_default_instance_);
}
inline const ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult& SLSrtePathComputeRes::path_result() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathComputeRes.path_result)
  return _internal_path_result();
}
inline ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult* SLSrtePathComputeRes::unsafe_arena_release_path_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLSrtePathComputeRes.path_result)
  if (_internal_has_path_result()) {
    clear_has_response_type();
    ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult* temp = response_type_.path_result_;
    response_type_.path_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLSrtePathComputeRes::unsafe_arena_set_allocated_path_result(::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult* path_result) {
  clear_response_type();
  if (path_result) {
    set_has_path_result();
    response_type_.path_result_ = path_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrtePathComputeRes.path_result)
}
inline ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult* SLSrtePathComputeRes::_internal_mutable_path_result() {
  if (!_internal_has_path_result()) {
    clear_response_type();
    set_has_path_result();
    response_type_.path_result_ = CreateMaybeMessage< ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult >(GetArenaForAllocation());
  }
  return response_type_.path_result_;
}
inline ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult* SLSrtePathComputeRes::mutable_path_result() {
  ::service_layer::SLSrtePathComputeRes_SLSrteDynamicPathResult* _msg = _internal_mutable_path_result();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrtePathComputeRes.path_result)
  return _msg;
}

// .service_layer.SLSrtePathComputeRes.SLSrtePathError error = 6;
inline bool SLSrtePathComputeRes::_internal_has_error() const {
  return response_type_case() == kError;
}
inline bool SLSrtePathComputeRes::has_error() const {
  return _internal_has_error();
}
inline void SLSrtePathComputeRes::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void SLSrtePathComputeRes::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_type_.error_;
    }
    clear_has_response_type();
  }
}
inline ::service_layer::SLSrtePathComputeRes_SLSrtePathError* SLSrtePathComputeRes::release_error() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrtePathComputeRes.error)
  if (_internal_has_error()) {
    clear_has_response_type();
      ::service_layer::SLSrtePathComputeRes_SLSrtePathError* temp = response_type_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_type_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLSrtePathComputeRes_SLSrtePathError& SLSrtePathComputeRes::_internal_error() const {
  return _internal_has_error()
      ? *response_type_.error_
      : reinterpret_cast< ::service_layer::SLSrtePathComputeRes_SLSrtePathError&>(::service_layer::_SLSrtePathComputeRes_SLSrtePathError_default_instance_);
}
inline const ::service_layer::SLSrtePathComputeRes_SLSrtePathError& SLSrtePathComputeRes::error() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathComputeRes.error)
  return _internal_error();
}
inline ::service_layer::SLSrtePathComputeRes_SLSrtePathError* SLSrtePathComputeRes::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLSrtePathComputeRes.error)
  if (_internal_has_error()) {
    clear_has_response_type();
    ::service_layer::SLSrtePathComputeRes_SLSrtePathError* temp = response_type_.error_;
    response_type_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLSrtePathComputeRes::unsafe_arena_set_allocated_error(::service_layer::SLSrtePathComputeRes_SLSrtePathError* error) {
  clear_response_type();
  if (error) {
    set_has_error();
    response_type_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrtePathComputeRes.error)
}
inline ::service_layer::SLSrtePathComputeRes_SLSrtePathError* SLSrtePathComputeRes::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_response_type();
    set_has_error();
    response_type_.error_ = CreateMaybeMessage< ::service_layer::SLSrtePathComputeRes_SLSrtePathError >(GetArenaForAllocation());
  }
  return response_type_.error_;
}
inline ::service_layer::SLSrtePathComputeRes_SLSrtePathError* SLSrtePathComputeRes::mutable_error() {
  ::service_layer::SLSrtePathComputeRes_SLSrtePathError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrtePathComputeRes.error)
  return _msg;
}

inline bool SLSrtePathComputeRes::has_response_type() const {
  return response_type_case() != RESPONSE_TYPE_NOT_SET;
}
inline void SLSrtePathComputeRes::clear_has_response_type() {
  _oneof_case_[0] = RESPONSE_TYPE_NOT_SET;
}
inline SLSrtePathComputeRes::ResponseTypeCase SLSrtePathComputeRes::response_type_case() const {
  return SLSrtePathComputeRes::ResponseTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLSrtePathAttrDynamic

// .service_layer.SLSrMetricType o_metric = 1;
inline void SLSrtePathAttrDynamic::clear_o_metric() {
  o_metric_ = 0;
}
inline ::service_layer::SLSrMetricType SLSrtePathAttrDynamic::_internal_o_metric() const {
  return static_cast< ::service_layer::SLSrMetricType >(o_metric_);
}
inline ::service_layer::SLSrMetricType SLSrtePathAttrDynamic::o_metric() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathAttrDynamic.o_metric)
  return _internal_o_metric();
}
inline void SLSrtePathAttrDynamic::_internal_set_o_metric(::service_layer::SLSrMetricType value) {
  
  o_metric_ = value;
}
inline void SLSrtePathAttrDynamic::set_o_metric(::service_layer::SLSrMetricType value) {
  _internal_set_o_metric(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrtePathAttrDynamic.o_metric)
}

// .service_layer.ConstraintSet constraints = 2;
inline bool SLSrtePathAttrDynamic::_internal_has_constraints() const {
  return this != internal_default_instance() && constraints_ != nullptr;
}
inline bool SLSrtePathAttrDynamic::has_constraints() const {
  return _internal_has_constraints();
}
inline void SLSrtePathAttrDynamic::clear_constraints() {
  if (GetArenaForAllocation() == nullptr && constraints_ != nullptr) {
    delete constraints_;
  }
  constraints_ = nullptr;
}
inline const ::service_layer::ConstraintSet& SLSrtePathAttrDynamic::_internal_constraints() const {
  const ::service_layer::ConstraintSet* p = constraints_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::ConstraintSet&>(
      ::service_layer::_ConstraintSet_default_instance_);
}
inline const ::service_layer::ConstraintSet& SLSrtePathAttrDynamic::constraints() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathAttrDynamic.constraints)
  return _internal_constraints();
}
inline void SLSrtePathAttrDynamic::unsafe_arena_set_allocated_constraints(
    ::service_layer::ConstraintSet* constraints) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(constraints_);
  }
  constraints_ = constraints;
  if (constraints) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrtePathAttrDynamic.constraints)
}
inline ::service_layer::ConstraintSet* SLSrtePathAttrDynamic::release_constraints() {
  
  ::service_layer::ConstraintSet* temp = constraints_;
  constraints_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::ConstraintSet* SLSrtePathAttrDynamic::unsafe_arena_release_constraints() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrtePathAttrDynamic.constraints)
  
  ::service_layer::ConstraintSet* temp = constraints_;
  constraints_ = nullptr;
  return temp;
}
inline ::service_layer::ConstraintSet* SLSrtePathAttrDynamic::_internal_mutable_constraints() {
  
  if (constraints_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::ConstraintSet>(GetArenaForAllocation());
    constraints_ = p;
  }
  return constraints_;
}
inline ::service_layer::ConstraintSet* SLSrtePathAttrDynamic::mutable_constraints() {
  ::service_layer::ConstraintSet* _msg = _internal_mutable_constraints();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrtePathAttrDynamic.constraints)
  return _msg;
}
inline void SLSrtePathAttrDynamic::set_allocated_constraints(::service_layer::ConstraintSet* constraints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete constraints_;
  }
  if (constraints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::ConstraintSet>::GetOwningArena(constraints);
    if (message_arena != submessage_arena) {
      constraints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constraints, submessage_arena);
    }
    
  } else {
    
  }
  constraints_ = constraints;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrtePathAttrDynamic.constraints)
}

// -------------------------------------------------------------------

// SLSrtePathAttrExplicit

// repeated .service_layer.SLSrSegmentList segment_lists = 1;
inline int SLSrtePathAttrExplicit::_internal_segment_lists_size() const {
  return segment_lists_.size();
}
inline int SLSrtePathAttrExplicit::segment_lists_size() const {
  return _internal_segment_lists_size();
}
inline ::service_layer::SLSrSegmentList* SLSrtePathAttrExplicit::mutable_segment_lists(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrtePathAttrExplicit.segment_lists)
  return segment_lists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSegmentList >*
SLSrtePathAttrExplicit::mutable_segment_lists() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLSrtePathAttrExplicit.segment_lists)
  return &segment_lists_;
}
inline const ::service_layer::SLSrSegmentList& SLSrtePathAttrExplicit::_internal_segment_lists(int index) const {
  return segment_lists_.Get(index);
}
inline const ::service_layer::SLSrSegmentList& SLSrtePathAttrExplicit::segment_lists(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathAttrExplicit.segment_lists)
  return _internal_segment_lists(index);
}
inline ::service_layer::SLSrSegmentList* SLSrtePathAttrExplicit::_internal_add_segment_lists() {
  return segment_lists_.Add();
}
inline ::service_layer::SLSrSegmentList* SLSrtePathAttrExplicit::add_segment_lists() {
  ::service_layer::SLSrSegmentList* _add = _internal_add_segment_lists();
  // @@protoc_insertion_point(field_add:service_layer.SLSrtePathAttrExplicit.segment_lists)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSegmentList >&
SLSrtePathAttrExplicit::segment_lists() const {
  // @@protoc_insertion_point(field_list:service_layer.SLSrtePathAttrExplicit.segment_lists)
  return segment_lists_;
}

// .service_layer.ConstraintSet constraints = 2;
inline bool SLSrtePathAttrExplicit::_internal_has_constraints() const {
  return this != internal_default_instance() && constraints_ != nullptr;
}
inline bool SLSrtePathAttrExplicit::has_constraints() const {
  return _internal_has_constraints();
}
inline void SLSrtePathAttrExplicit::clear_constraints() {
  if (GetArenaForAllocation() == nullptr && constraints_ != nullptr) {
    delete constraints_;
  }
  constraints_ = nullptr;
}
inline const ::service_layer::ConstraintSet& SLSrtePathAttrExplicit::_internal_constraints() const {
  const ::service_layer::ConstraintSet* p = constraints_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::ConstraintSet&>(
      ::service_layer::_ConstraintSet_default_instance_);
}
inline const ::service_layer::ConstraintSet& SLSrtePathAttrExplicit::constraints() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrtePathAttrExplicit.constraints)
  return _internal_constraints();
}
inline void SLSrtePathAttrExplicit::unsafe_arena_set_allocated_constraints(
    ::service_layer::ConstraintSet* constraints) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(constraints_);
  }
  constraints_ = constraints;
  if (constraints) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrtePathAttrExplicit.constraints)
}
inline ::service_layer::ConstraintSet* SLSrtePathAttrExplicit::release_constraints() {
  
  ::service_layer::ConstraintSet* temp = constraints_;
  constraints_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::ConstraintSet* SLSrtePathAttrExplicit::unsafe_arena_release_constraints() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrtePathAttrExplicit.constraints)
  
  ::service_layer::ConstraintSet* temp = constraints_;
  constraints_ = nullptr;
  return temp;
}
inline ::service_layer::ConstraintSet* SLSrtePathAttrExplicit::_internal_mutable_constraints() {
  
  if (constraints_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::ConstraintSet>(GetArenaForAllocation());
    constraints_ = p;
  }
  return constraints_;
}
inline ::service_layer::ConstraintSet* SLSrtePathAttrExplicit::mutable_constraints() {
  ::service_layer::ConstraintSet* _msg = _internal_mutable_constraints();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrtePathAttrExplicit.constraints)
  return _msg;
}
inline void SLSrtePathAttrExplicit::set_allocated_constraints(::service_layer::ConstraintSet* constraints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete constraints_;
  }
  if (constraints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::ConstraintSet>::GetOwningArena(constraints);
    if (message_arena != submessage_arena) {
      constraints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constraints, submessage_arena);
    }
    
  } else {
    
  }
  constraints_ = constraints;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrtePathAttrExplicit.constraints)
}

// -------------------------------------------------------------------

// ConstraintSet_PathDiversity

// .service_layer.AssociationGroup association = 1;
inline bool ConstraintSet_PathDiversity::_internal_has_association() const {
  return this != internal_default_instance() && association_ != nullptr;
}
inline bool ConstraintSet_PathDiversity::has_association() const {
  return _internal_has_association();
}
inline void ConstraintSet_PathDiversity::clear_association() {
  if (GetArenaForAllocation() == nullptr && association_ != nullptr) {
    delete association_;
  }
  association_ = nullptr;
}
inline const ::service_layer::AssociationGroup& ConstraintSet_PathDiversity::_internal_association() const {
  const ::service_layer::AssociationGroup* p = association_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::AssociationGroup&>(
      ::service_layer::_AssociationGroup_default_instance_);
}
inline const ::service_layer::AssociationGroup& ConstraintSet_PathDiversity::association() const {
  // @@protoc_insertion_point(field_get:service_layer.ConstraintSet.PathDiversity.association)
  return _internal_association();
}
inline void ConstraintSet_PathDiversity::unsafe_arena_set_allocated_association(
    ::service_layer::AssociationGroup* association) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(association_);
  }
  association_ = association;
  if (association) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.ConstraintSet.PathDiversity.association)
}
inline ::service_layer::AssociationGroup* ConstraintSet_PathDiversity::release_association() {
  
  ::service_layer::AssociationGroup* temp = association_;
  association_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::AssociationGroup* ConstraintSet_PathDiversity::unsafe_arena_release_association() {
  // @@protoc_insertion_point(field_release:service_layer.ConstraintSet.PathDiversity.association)
  
  ::service_layer::AssociationGroup* temp = association_;
  association_ = nullptr;
  return temp;
}
inline ::service_layer::AssociationGroup* ConstraintSet_PathDiversity::_internal_mutable_association() {
  
  if (association_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::AssociationGroup>(GetArenaForAllocation());
    association_ = p;
  }
  return association_;
}
inline ::service_layer::AssociationGroup* ConstraintSet_PathDiversity::mutable_association() {
  ::service_layer::AssociationGroup* _msg = _internal_mutable_association();
  // @@protoc_insertion_point(field_mutable:service_layer.ConstraintSet.PathDiversity.association)
  return _msg;
}
inline void ConstraintSet_PathDiversity::set_allocated_association(::service_layer::AssociationGroup* association) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete association_;
  }
  if (association) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::AssociationGroup>::GetOwningArena(association);
    if (message_arena != submessage_arena) {
      association = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, association, submessage_arena);
    }
    
  } else {
    
  }
  association_ = association;
  // @@protoc_insertion_point(field_set_allocated:service_layer.ConstraintSet.PathDiversity.association)
}

// .service_layer.SLSrDiversityLevel diversity_level = 2;
inline void ConstraintSet_PathDiversity::clear_diversity_level() {
  diversity_level_ = 0;
}
inline ::service_layer::SLSrDiversityLevel ConstraintSet_PathDiversity::_internal_diversity_level() const {
  return static_cast< ::service_layer::SLSrDiversityLevel >(diversity_level_);
}
inline ::service_layer::SLSrDiversityLevel ConstraintSet_PathDiversity::diversity_level() const {
  // @@protoc_insertion_point(field_get:service_layer.ConstraintSet.PathDiversity.diversity_level)
  return _internal_diversity_level();
}
inline void ConstraintSet_PathDiversity::_internal_set_diversity_level(::service_layer::SLSrDiversityLevel value) {
  
  diversity_level_ = value;
}
inline void ConstraintSet_PathDiversity::set_diversity_level(::service_layer::SLSrDiversityLevel value) {
  _internal_set_diversity_level(value);
  // @@protoc_insertion_point(field_set:service_layer.ConstraintSet.PathDiversity.diversity_level)
}

// optional .service_layer.SLSrDiversityLevel min_diversity_level = 3;
inline bool ConstraintSet_PathDiversity::_internal_has_min_diversity_level() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConstraintSet_PathDiversity::has_min_diversity_level() const {
  return _internal_has_min_diversity_level();
}
inline void ConstraintSet_PathDiversity::clear_min_diversity_level() {
  min_diversity_level_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::service_layer::SLSrDiversityLevel ConstraintSet_PathDiversity::_internal_min_diversity_level() const {
  return static_cast< ::service_layer::SLSrDiversityLevel >(min_diversity_level_);
}
inline ::service_layer::SLSrDiversityLevel ConstraintSet_PathDiversity::min_diversity_level() const {
  // @@protoc_insertion_point(field_get:service_layer.ConstraintSet.PathDiversity.min_diversity_level)
  return _internal_min_diversity_level();
}
inline void ConstraintSet_PathDiversity::_internal_set_min_diversity_level(::service_layer::SLSrDiversityLevel value) {
  _has_bits_[0] |= 0x00000001u;
  min_diversity_level_ = value;
}
inline void ConstraintSet_PathDiversity::set_min_diversity_level(::service_layer::SLSrDiversityLevel value) {
  _internal_set_min_diversity_level(value);
  // @@protoc_insertion_point(field_set:service_layer.ConstraintSet.PathDiversity.min_diversity_level)
}

// bool shortest_path = 4;
inline void ConstraintSet_PathDiversity::clear_shortest_path() {
  shortest_path_ = false;
}
inline bool ConstraintSet_PathDiversity::_internal_shortest_path() const {
  return shortest_path_;
}
inline bool ConstraintSet_PathDiversity::shortest_path() const {
  // @@protoc_insertion_point(field_get:service_layer.ConstraintSet.PathDiversity.shortest_path)
  return _internal_shortest_path();
}
inline void ConstraintSet_PathDiversity::_internal_set_shortest_path(bool value) {
  
  shortest_path_ = value;
}
inline void ConstraintSet_PathDiversity::set_shortest_path(bool value) {
  _internal_set_shortest_path(value);
  // @@protoc_insertion_point(field_set:service_layer.ConstraintSet.PathDiversity.shortest_path)
}

// -------------------------------------------------------------------

// ConstraintSet

// .service_layer.SLSrAffinities affinities = 1;
inline bool ConstraintSet::_internal_has_affinities() const {
  return this != internal_default_instance() && affinities_ != nullptr;
}
inline bool ConstraintSet::has_affinities() const {
  return _internal_has_affinities();
}
inline const ::service_layer::SLSrAffinities& ConstraintSet::_internal_affinities() const {
  const ::service_layer::SLSrAffinities* p = affinities_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrAffinities&>(
      ::service_layer::_SLSrAffinities_default_instance_);
}
inline const ::service_layer::SLSrAffinities& ConstraintSet::affinities() const {
  // @@protoc_insertion_point(field_get:service_layer.ConstraintSet.affinities)
  return _internal_affinities();
}
inline void ConstraintSet::unsafe_arena_set_allocated_affinities(
    ::service_layer::SLSrAffinities* affinities) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(affinities_);
  }
  affinities_ = affinities;
  if (affinities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.ConstraintSet.affinities)
}
inline ::service_layer::SLSrAffinities* ConstraintSet::release_affinities() {
  
  ::service_layer::SLSrAffinities* temp = affinities_;
  affinities_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrAffinities* ConstraintSet::unsafe_arena_release_affinities() {
  // @@protoc_insertion_point(field_release:service_layer.ConstraintSet.affinities)
  
  ::service_layer::SLSrAffinities* temp = affinities_;
  affinities_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrAffinities* ConstraintSet::_internal_mutable_affinities() {
  
  if (affinities_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrAffinities>(GetArenaForAllocation());
    affinities_ = p;
  }
  return affinities_;
}
inline ::service_layer::SLSrAffinities* ConstraintSet::mutable_affinities() {
  ::service_layer::SLSrAffinities* _msg = _internal_mutable_affinities();
  // @@protoc_insertion_point(field_mutable:service_layer.ConstraintSet.affinities)
  return _msg;
}
inline void ConstraintSet::set_allocated_affinities(::service_layer::SLSrAffinities* affinities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(affinities_);
  }
  if (affinities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(affinities));
    if (message_arena != submessage_arena) {
      affinities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, affinities, submessage_arena);
    }
    
  } else {
    
  }
  affinities_ = affinities;
  // @@protoc_insertion_point(field_set_allocated:service_layer.ConstraintSet.affinities)
}

// repeated uint32 srlg_exclude = 4;
inline int ConstraintSet::_internal_srlg_exclude_size() const {
  return srlg_exclude_.size();
}
inline int ConstraintSet::srlg_exclude_size() const {
  return _internal_srlg_exclude_size();
}
inline void ConstraintSet::clear_srlg_exclude() {
  srlg_exclude_.Clear();
}
inline uint32_t ConstraintSet::_internal_srlg_exclude(int index) const {
  return srlg_exclude_.Get(index);
}
inline uint32_t ConstraintSet::srlg_exclude(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.ConstraintSet.srlg_exclude)
  return _internal_srlg_exclude(index);
}
inline void ConstraintSet::set_srlg_exclude(int index, uint32_t value) {
  srlg_exclude_.Set(index, value);
  // @@protoc_insertion_point(field_set:service_layer.ConstraintSet.srlg_exclude)
}
inline void ConstraintSet::_internal_add_srlg_exclude(uint32_t value) {
  srlg_exclude_.Add(value);
}
inline void ConstraintSet::add_srlg_exclude(uint32_t value) {
  _internal_add_srlg_exclude(value);
  // @@protoc_insertion_point(field_add:service_layer.ConstraintSet.srlg_exclude)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ConstraintSet::_internal_srlg_exclude() const {
  return srlg_exclude_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ConstraintSet::srlg_exclude() const {
  // @@protoc_insertion_point(field_list:service_layer.ConstraintSet.srlg_exclude)
  return _internal_srlg_exclude();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ConstraintSet::_internal_mutable_srlg_exclude() {
  return &srlg_exclude_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ConstraintSet::mutable_srlg_exclude() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.ConstraintSet.srlg_exclude)
  return _internal_mutable_srlg_exclude();
}

// repeated .service_layer.SLIpAddress ip_exclude = 5;
inline int ConstraintSet::_internal_ip_exclude_size() const {
  return ip_exclude_.size();
}
inline int ConstraintSet::ip_exclude_size() const {
  return _internal_ip_exclude_size();
}
inline ::service_layer::SLIpAddress* ConstraintSet::mutable_ip_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.ConstraintSet.ip_exclude)
  return ip_exclude_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLIpAddress >*
ConstraintSet::mutable_ip_exclude() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.ConstraintSet.ip_exclude)
  return &ip_exclude_;
}
inline const ::service_layer::SLIpAddress& ConstraintSet::_internal_ip_exclude(int index) const {
  return ip_exclude_.Get(index);
}
inline const ::service_layer::SLIpAddress& ConstraintSet::ip_exclude(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.ConstraintSet.ip_exclude)
  return _internal_ip_exclude(index);
}
inline ::service_layer::SLIpAddress* ConstraintSet::_internal_add_ip_exclude() {
  return ip_exclude_.Add();
}
inline ::service_layer::SLIpAddress* ConstraintSet::add_ip_exclude() {
  ::service_layer::SLIpAddress* _add = _internal_add_ip_exclude();
  // @@protoc_insertion_point(field_add:service_layer.ConstraintSet.ip_exclude)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLIpAddress >&
ConstraintSet::ip_exclude() const {
  // @@protoc_insertion_point(field_list:service_layer.ConstraintSet.ip_exclude)
  return ip_exclude_;
}

// optional .service_layer.ConstraintSet.PathDiversity path_diversity = 101;
inline bool ConstraintSet::_internal_has_path_diversity() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || path_diversity_ != nullptr);
  return value;
}
inline bool ConstraintSet::has_path_diversity() const {
  return _internal_has_path_diversity();
}
inline void ConstraintSet::clear_path_diversity() {
  if (path_diversity_ != nullptr) path_diversity_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::service_layer::ConstraintSet_PathDiversity& ConstraintSet::_internal_path_diversity() const {
  const ::service_layer::ConstraintSet_PathDiversity* p = path_diversity_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::ConstraintSet_PathDiversity&>(
      ::service_layer::_ConstraintSet_PathDiversity_default_instance_);
}
inline const ::service_layer::ConstraintSet_PathDiversity& ConstraintSet::path_diversity() const {
  // @@protoc_insertion_point(field_get:service_layer.ConstraintSet.path_diversity)
  return _internal_path_diversity();
}
inline void ConstraintSet::unsafe_arena_set_allocated_path_diversity(
    ::service_layer::ConstraintSet_PathDiversity* path_diversity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_diversity_);
  }
  path_diversity_ = path_diversity;
  if (path_diversity) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.ConstraintSet.path_diversity)
}
inline ::service_layer::ConstraintSet_PathDiversity* ConstraintSet::release_path_diversity() {
  _has_bits_[0] &= ~0x00000001u;
  ::service_layer::ConstraintSet_PathDiversity* temp = path_diversity_;
  path_diversity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::ConstraintSet_PathDiversity* ConstraintSet::unsafe_arena_release_path_diversity() {
  // @@protoc_insertion_point(field_release:service_layer.ConstraintSet.path_diversity)
  _has_bits_[0] &= ~0x00000001u;
  ::service_layer::ConstraintSet_PathDiversity* temp = path_diversity_;
  path_diversity_ = nullptr;
  return temp;
}
inline ::service_layer::ConstraintSet_PathDiversity* ConstraintSet::_internal_mutable_path_diversity() {
  _has_bits_[0] |= 0x00000001u;
  if (path_diversity_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::ConstraintSet_PathDiversity>(GetArenaForAllocation());
    path_diversity_ = p;
  }
  return path_diversity_;
}
inline ::service_layer::ConstraintSet_PathDiversity* ConstraintSet::mutable_path_diversity() {
  ::service_layer::ConstraintSet_PathDiversity* _msg = _internal_mutable_path_diversity();
  // @@protoc_insertion_point(field_mutable:service_layer.ConstraintSet.path_diversity)
  return _msg;
}
inline void ConstraintSet::set_allocated_path_diversity(::service_layer::ConstraintSet_PathDiversity* path_diversity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete path_diversity_;
  }
  if (path_diversity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::ConstraintSet_PathDiversity>::GetOwningArena(path_diversity);
    if (message_arena != submessage_arena) {
      path_diversity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_diversity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_diversity_ = path_diversity;
  // @@protoc_insertion_point(field_set_allocated:service_layer.ConstraintSet.path_diversity)
}

// optional .service_layer.AssociationGroup corouted_association = 102;
inline bool ConstraintSet::_internal_has_corouted_association() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || corouted_association_ != nullptr);
  return value;
}
inline bool ConstraintSet::has_corouted_association() const {
  return _internal_has_corouted_association();
}
inline void ConstraintSet::clear_corouted_association() {
  if (corouted_association_ != nullptr) corouted_association_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::service_layer::AssociationGroup& ConstraintSet::_internal_corouted_association() const {
  const ::service_layer::AssociationGroup* p = corouted_association_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::AssociationGroup&>(
      ::service_layer::_AssociationGroup_default_instance_);
}
inline const ::service_layer::AssociationGroup& ConstraintSet::corouted_association() const {
  // @@protoc_insertion_point(field_get:service_layer.ConstraintSet.corouted_association)
  return _internal_corouted_association();
}
inline void ConstraintSet::unsafe_arena_set_allocated_corouted_association(
    ::service_layer::AssociationGroup* corouted_association) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(corouted_association_);
  }
  corouted_association_ = corouted_association;
  if (corouted_association) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.ConstraintSet.corouted_association)
}
inline ::service_layer::AssociationGroup* ConstraintSet::release_corouted_association() {
  _has_bits_[0] &= ~0x00000002u;
  ::service_layer::AssociationGroup* temp = corouted_association_;
  corouted_association_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::AssociationGroup* ConstraintSet::unsafe_arena_release_corouted_association() {
  // @@protoc_insertion_point(field_release:service_layer.ConstraintSet.corouted_association)
  _has_bits_[0] &= ~0x00000002u;
  ::service_layer::AssociationGroup* temp = corouted_association_;
  corouted_association_ = nullptr;
  return temp;
}
inline ::service_layer::AssociationGroup* ConstraintSet::_internal_mutable_corouted_association() {
  _has_bits_[0] |= 0x00000002u;
  if (corouted_association_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::AssociationGroup>(GetArenaForAllocation());
    corouted_association_ = p;
  }
  return corouted_association_;
}
inline ::service_layer::AssociationGroup* ConstraintSet::mutable_corouted_association() {
  ::service_layer::AssociationGroup* _msg = _internal_mutable_corouted_association();
  // @@protoc_insertion_point(field_mutable:service_layer.ConstraintSet.corouted_association)
  return _msg;
}
inline void ConstraintSet::set_allocated_corouted_association(::service_layer::AssociationGroup* corouted_association) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete corouted_association_;
  }
  if (corouted_association) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::AssociationGroup>::GetOwningArena(corouted_association);
    if (message_arena != submessage_arena) {
      corouted_association = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, corouted_association, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  corouted_association_ = corouted_association;
  // @@protoc_insertion_point(field_set_allocated:service_layer.ConstraintSet.corouted_association)
}

// uint32 guaranteed_bandwidth = 103;
inline void ConstraintSet::clear_guaranteed_bandwidth() {
  guaranteed_bandwidth_ = 0u;
}
inline uint32_t ConstraintSet::_internal_guaranteed_bandwidth() const {
  return guaranteed_bandwidth_;
}
inline uint32_t ConstraintSet::guaranteed_bandwidth() const {
  // @@protoc_insertion_point(field_get:service_layer.ConstraintSet.guaranteed_bandwidth)
  return _internal_guaranteed_bandwidth();
}
inline void ConstraintSet::_internal_set_guaranteed_bandwidth(uint32_t value) {
  
  guaranteed_bandwidth_ = value;
}
inline void ConstraintSet::set_guaranteed_bandwidth(uint32_t value) {
  _internal_set_guaranteed_bandwidth(value);
  // @@protoc_insertion_point(field_set:service_layer.ConstraintSet.guaranteed_bandwidth)
}

// bool strict_path_segments = 201;
inline void ConstraintSet::clear_strict_path_segments() {
  strict_path_segments_ = false;
}
inline bool ConstraintSet::_internal_strict_path_segments() const {
  return strict_path_segments_;
}
inline bool ConstraintSet::strict_path_segments() const {
  // @@protoc_insertion_point(field_get:service_layer.ConstraintSet.strict_path_segments)
  return _internal_strict_path_segments();
}
inline void ConstraintSet::_internal_set_strict_path_segments(bool value) {
  
  strict_path_segments_ = value;
}
inline void ConstraintSet::set_strict_path_segments(bool value) {
  _internal_set_strict_path_segments(value);
  // @@protoc_insertion_point(field_set:service_layer.ConstraintSet.strict_path_segments)
}

// bool unprotected_segments = 202;
inline void ConstraintSet::clear_unprotected_segments() {
  unprotected_segments_ = false;
}
inline bool ConstraintSet::_internal_unprotected_segments() const {
  return unprotected_segments_;
}
inline bool ConstraintSet::unprotected_segments() const {
  // @@protoc_insertion_point(field_get:service_layer.ConstraintSet.unprotected_segments)
  return _internal_unprotected_segments();
}
inline void ConstraintSet::_internal_set_unprotected_segments(bool value) {
  
  unprotected_segments_ = value;
}
inline void ConstraintSet::set_unprotected_segments(bool value) {
  _internal_set_unprotected_segments(value);
  // @@protoc_insertion_point(field_set:service_layer.ConstraintSet.unprotected_segments)
}

// bool persistent_segments = 203;
inline void ConstraintSet::clear_persistent_segments() {
  persistent_segments_ = false;
}
inline bool ConstraintSet::_internal_persistent_segments() const {
  return persistent_segments_;
}
inline bool ConstraintSet::persistent_segments() const {
  // @@protoc_insertion_point(field_get:service_layer.ConstraintSet.persistent_segments)
  return _internal_persistent_segments();
}
inline void ConstraintSet::_internal_set_persistent_segments(bool value) {
  
  persistent_segments_ = value;
}
inline void ConstraintSet::set_persistent_segments(bool value) {
  _internal_set_persistent_segments(value);
  // @@protoc_insertion_point(field_set:service_layer.ConstraintSet.persistent_segments)
}

// uint32 maximum_sid_depth = 204;
inline void ConstraintSet::clear_maximum_sid_depth() {
  maximum_sid_depth_ = 0u;
}
inline uint32_t ConstraintSet::_internal_maximum_sid_depth() const {
  return maximum_sid_depth_;
}
inline uint32_t ConstraintSet::maximum_sid_depth() const {
  // @@protoc_insertion_point(field_get:service_layer.ConstraintSet.maximum_sid_depth)
  return _internal_maximum_sid_depth();
}
inline void ConstraintSet::_internal_set_maximum_sid_depth(uint32_t value) {
  
  maximum_sid_depth_ = value;
}
inline void ConstraintSet::set_maximum_sid_depth(uint32_t value) {
  _internal_set_maximum_sid_depth(value);
  // @@protoc_insertion_point(field_set:service_layer.ConstraintSet.maximum_sid_depth)
}

// -------------------------------------------------------------------

// AssociationGroup

// uint32 association_id = 1;
inline void AssociationGroup::clear_association_id() {
  association_id_ = 0u;
}
inline uint32_t AssociationGroup::_internal_association_id() const {
  return association_id_;
}
inline uint32_t AssociationGroup::association_id() const {
  // @@protoc_insertion_point(field_get:service_layer.AssociationGroup.association_id)
  return _internal_association_id();
}
inline void AssociationGroup::_internal_set_association_id(uint32_t value) {
  
  association_id_ = value;
}
inline void AssociationGroup::set_association_id(uint32_t value) {
  _internal_set_association_id(value);
  // @@protoc_insertion_point(field_set:service_layer.AssociationGroup.association_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sl_5fsrte_5fpcalc_5fstateful_2eproto
