// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sl_srte_policy.proto

#include "sl_srte_policy.pb.h"
#include "sl_srte_policy.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace service_layer {

static const char* SLSrtePolicy_method_names[] = {
  "/service_layer.SLSrtePolicy/SLSrPolicyAdd",
  "/service_layer.SLSrtePolicy/SLSrPolicyDelete",
};

std::unique_ptr< SLSrtePolicy::Stub> SLSrtePolicy::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SLSrtePolicy::Stub> stub(new SLSrtePolicy::Stub(channel, options));
  return stub;
}

SLSrtePolicy::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SLSrPolicyAdd_(SLSrtePolicy_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SLSrPolicyDelete_(SLSrtePolicy_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SLSrtePolicy::Stub::SLSrPolicyAdd(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::service_layer::SLSrPolicyOpRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::service_layer::SLSrPolicyMsg, ::service_layer::SLSrPolicyOpRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SLSrPolicyAdd_, context, request, response);
}

void SLSrtePolicy::Stub::async::SLSrPolicyAdd(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg* request, ::service_layer::SLSrPolicyOpRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::service_layer::SLSrPolicyMsg, ::service_layer::SLSrPolicyOpRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SLSrPolicyAdd_, context, request, response, std::move(f));
}

void SLSrtePolicy::Stub::async::SLSrPolicyAdd(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg* request, ::service_layer::SLSrPolicyOpRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SLSrPolicyAdd_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLSrPolicyOpRsp>* SLSrtePolicy::Stub::PrepareAsyncSLSrPolicyAddRaw(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::service_layer::SLSrPolicyOpRsp, ::service_layer::SLSrPolicyMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SLSrPolicyAdd_, context, request);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLSrPolicyOpRsp>* SLSrtePolicy::Stub::AsyncSLSrPolicyAddRaw(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSLSrPolicyAddRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SLSrtePolicy::Stub::SLSrPolicyDelete(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::service_layer::SLSrPolicyOpRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::service_layer::SLSrPolicyMsg, ::service_layer::SLSrPolicyOpRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SLSrPolicyDelete_, context, request, response);
}

void SLSrtePolicy::Stub::async::SLSrPolicyDelete(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg* request, ::service_layer::SLSrPolicyOpRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::service_layer::SLSrPolicyMsg, ::service_layer::SLSrPolicyOpRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SLSrPolicyDelete_, context, request, response, std::move(f));
}

void SLSrtePolicy::Stub::async::SLSrPolicyDelete(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg* request, ::service_layer::SLSrPolicyOpRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SLSrPolicyDelete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLSrPolicyOpRsp>* SLSrtePolicy::Stub::PrepareAsyncSLSrPolicyDeleteRaw(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::service_layer::SLSrPolicyOpRsp, ::service_layer::SLSrPolicyMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SLSrPolicyDelete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::service_layer::SLSrPolicyOpRsp>* SLSrtePolicy::Stub::AsyncSLSrPolicyDeleteRaw(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSLSrPolicyDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

SLSrtePolicy::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SLSrtePolicy_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SLSrtePolicy::Service, ::service_layer::SLSrPolicyMsg, ::service_layer::SLSrPolicyOpRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SLSrtePolicy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::service_layer::SLSrPolicyMsg* req,
             ::service_layer::SLSrPolicyOpRsp* resp) {
               return service->SLSrPolicyAdd(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SLSrtePolicy_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SLSrtePolicy::Service, ::service_layer::SLSrPolicyMsg, ::service_layer::SLSrPolicyOpRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SLSrtePolicy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::service_layer::SLSrPolicyMsg* req,
             ::service_layer::SLSrPolicyOpRsp* resp) {
               return service->SLSrPolicyDelete(ctx, req, resp);
             }, this)));
}

SLSrtePolicy::Service::~Service() {
}

::grpc::Status SLSrtePolicy::Service::SLSrPolicyAdd(::grpc::ServerContext* context, const ::service_layer::SLSrPolicyMsg* request, ::service_layer::SLSrPolicyOpRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLSrtePolicy::Service::SLSrPolicyDelete(::grpc::ServerContext* context, const ::service_layer::SLSrPolicyMsg* request, ::service_layer::SLSrPolicyOpRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace service_layer

