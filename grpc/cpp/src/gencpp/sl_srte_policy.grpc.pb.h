// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sl_srte_policy.proto
// Original file comments:
// @file 
// @brief Proto file for Segment-routing traffic-eng (SRTE) Policy RPCs.
// Declares calls for adding, deleting, updating the SRTE policies.
// The GPB data model should reflect the model from the SRTE policy
// RFC https://datatracker.ietf.org/doc/rfc9256/.
// 
// ----------------------------------------------------------------
//  Copyright (c) 2024 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//
//
#ifndef GRPC_sl_5fsrte_5fpolicy_2eproto__INCLUDED
#define GRPC_sl_5fsrte_5fpolicy_2eproto__INCLUDED

#include "sl_srte_policy.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace service_layer {

// @defgroup SLSrtePolicy
// Used to programmatically create/update/delete SR-TE and SRv6TE policies.
// The real-time monitoring of these policies is done via BGP-LS or telemetry.
// Defines the RPC for operations on SRTE policy.
//
// @{ 
class SLSrtePolicy final {
 public:
  static constexpr char const* service_full_name() {
    return "service_layer.SLSrtePolicy";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //    
    // SRTE Policy operations
    //
    //
    // The SLSrPolicyAdd RPC is used to create/update a policy based on the
    // passed parameters.
    virtual ::grpc::Status SLSrPolicyAdd(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::service_layer::SLSrPolicyOpRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLSrPolicyOpRsp>> AsyncSLSrPolicyAdd(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLSrPolicyOpRsp>>(AsyncSLSrPolicyAddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLSrPolicyOpRsp>> PrepareAsyncSLSrPolicyAdd(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLSrPolicyOpRsp>>(PrepareAsyncSLSrPolicyAddRaw(context, request, cq));
    }
    // The SLSrPolicyDelete RPC is used to delete a policy/candidate-paths.
    // If the message only contains the key of the policy, then all the CPs with gRPC
    // originator-protocol are deleted. The policy is also deleted if it has no more CPs.
    // If the message contains the keys of one or more CPs, then only these CPs are
    // deleted and they have to be gRPC CPs.
    // There is no requirement/enforcement for the client to delete the policy/CPs
    // it created.
    virtual ::grpc::Status SLSrPolicyDelete(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::service_layer::SLSrPolicyOpRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLSrPolicyOpRsp>> AsyncSLSrPolicyDelete(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLSrPolicyOpRsp>>(AsyncSLSrPolicyDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLSrPolicyOpRsp>> PrepareAsyncSLSrPolicyDelete(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLSrPolicyOpRsp>>(PrepareAsyncSLSrPolicyDeleteRaw(context, request, cq));
    }
    // @} 
    class async_interface {
     public:
      virtual ~async_interface() {}
      //    
      // SRTE Policy operations
      //
      //
      // The SLSrPolicyAdd RPC is used to create/update a policy based on the
      // passed parameters.
      virtual void SLSrPolicyAdd(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg* request, ::service_layer::SLSrPolicyOpRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SLSrPolicyAdd(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg* request, ::service_layer::SLSrPolicyOpRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // The SLSrPolicyDelete RPC is used to delete a policy/candidate-paths.
      // If the message only contains the key of the policy, then all the CPs with gRPC
      // originator-protocol are deleted. The policy is also deleted if it has no more CPs.
      // If the message contains the keys of one or more CPs, then only these CPs are
      // deleted and they have to be gRPC CPs.
      // There is no requirement/enforcement for the client to delete the policy/CPs
      // it created.
      virtual void SLSrPolicyDelete(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg* request, ::service_layer::SLSrPolicyOpRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SLSrPolicyDelete(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg* request, ::service_layer::SLSrPolicyOpRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // @} 
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLSrPolicyOpRsp>* AsyncSLSrPolicyAddRaw(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLSrPolicyOpRsp>* PrepareAsyncSLSrPolicyAddRaw(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLSrPolicyOpRsp>* AsyncSLSrPolicyDeleteRaw(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::service_layer::SLSrPolicyOpRsp>* PrepareAsyncSLSrPolicyDeleteRaw(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SLSrPolicyAdd(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::service_layer::SLSrPolicyOpRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLSrPolicyOpRsp>> AsyncSLSrPolicyAdd(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLSrPolicyOpRsp>>(AsyncSLSrPolicyAddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLSrPolicyOpRsp>> PrepareAsyncSLSrPolicyAdd(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLSrPolicyOpRsp>>(PrepareAsyncSLSrPolicyAddRaw(context, request, cq));
    }
    ::grpc::Status SLSrPolicyDelete(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::service_layer::SLSrPolicyOpRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLSrPolicyOpRsp>> AsyncSLSrPolicyDelete(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLSrPolicyOpRsp>>(AsyncSLSrPolicyDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLSrPolicyOpRsp>> PrepareAsyncSLSrPolicyDelete(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::service_layer::SLSrPolicyOpRsp>>(PrepareAsyncSLSrPolicyDeleteRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SLSrPolicyAdd(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg* request, ::service_layer::SLSrPolicyOpRsp* response, std::function<void(::grpc::Status)>) override;
      void SLSrPolicyAdd(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg* request, ::service_layer::SLSrPolicyOpRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SLSrPolicyDelete(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg* request, ::service_layer::SLSrPolicyOpRsp* response, std::function<void(::grpc::Status)>) override;
      void SLSrPolicyDelete(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg* request, ::service_layer::SLSrPolicyOpRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLSrPolicyOpRsp>* AsyncSLSrPolicyAddRaw(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLSrPolicyOpRsp>* PrepareAsyncSLSrPolicyAddRaw(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLSrPolicyOpRsp>* AsyncSLSrPolicyDeleteRaw(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::service_layer::SLSrPolicyOpRsp>* PrepareAsyncSLSrPolicyDeleteRaw(::grpc::ClientContext* context, const ::service_layer::SLSrPolicyMsg& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SLSrPolicyAdd_;
    const ::grpc::internal::RpcMethod rpcmethod_SLSrPolicyDelete_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //    
    // SRTE Policy operations
    //
    //
    // The SLSrPolicyAdd RPC is used to create/update a policy based on the
    // passed parameters.
    virtual ::grpc::Status SLSrPolicyAdd(::grpc::ServerContext* context, const ::service_layer::SLSrPolicyMsg* request, ::service_layer::SLSrPolicyOpRsp* response);
    // The SLSrPolicyDelete RPC is used to delete a policy/candidate-paths.
    // If the message only contains the key of the policy, then all the CPs with gRPC
    // originator-protocol are deleted. The policy is also deleted if it has no more CPs.
    // If the message contains the keys of one or more CPs, then only these CPs are
    // deleted and they have to be gRPC CPs.
    // There is no requirement/enforcement for the client to delete the policy/CPs
    // it created.
    virtual ::grpc::Status SLSrPolicyDelete(::grpc::ServerContext* context, const ::service_layer::SLSrPolicyMsg* request, ::service_layer::SLSrPolicyOpRsp* response);
    // @} 
  };
  template <class BaseClass>
  class WithAsyncMethod_SLSrPolicyAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLSrPolicyAdd() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SLSrPolicyAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLSrPolicyAdd(::grpc::ServerContext* /*context*/, const ::service_layer::SLSrPolicyMsg* /*request*/, ::service_layer::SLSrPolicyOpRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLSrPolicyAdd(::grpc::ServerContext* context, ::service_layer::SLSrPolicyMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLSrPolicyOpRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SLSrPolicyDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SLSrPolicyDelete() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SLSrPolicyDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLSrPolicyDelete(::grpc::ServerContext* /*context*/, const ::service_layer::SLSrPolicyMsg* /*request*/, ::service_layer::SLSrPolicyOpRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLSrPolicyDelete(::grpc::ServerContext* context, ::service_layer::SLSrPolicyMsg* request, ::grpc::ServerAsyncResponseWriter< ::service_layer::SLSrPolicyOpRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SLSrPolicyAdd<WithAsyncMethod_SLSrPolicyDelete<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SLSrPolicyAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLSrPolicyAdd() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::service_layer::SLSrPolicyMsg, ::service_layer::SLSrPolicyOpRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLSrPolicyMsg* request, ::service_layer::SLSrPolicyOpRsp* response) { return this->SLSrPolicyAdd(context, request, response); }));}
    void SetMessageAllocatorFor_SLSrPolicyAdd(
        ::grpc::MessageAllocator< ::service_layer::SLSrPolicyMsg, ::service_layer::SLSrPolicyOpRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service_layer::SLSrPolicyMsg, ::service_layer::SLSrPolicyOpRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SLSrPolicyAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLSrPolicyAdd(::grpc::ServerContext* /*context*/, const ::service_layer::SLSrPolicyMsg* /*request*/, ::service_layer::SLSrPolicyOpRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLSrPolicyAdd(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLSrPolicyMsg* /*request*/, ::service_layer::SLSrPolicyOpRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SLSrPolicyDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SLSrPolicyDelete() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::service_layer::SLSrPolicyMsg, ::service_layer::SLSrPolicyOpRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::service_layer::SLSrPolicyMsg* request, ::service_layer::SLSrPolicyOpRsp* response) { return this->SLSrPolicyDelete(context, request, response); }));}
    void SetMessageAllocatorFor_SLSrPolicyDelete(
        ::grpc::MessageAllocator< ::service_layer::SLSrPolicyMsg, ::service_layer::SLSrPolicyOpRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::service_layer::SLSrPolicyMsg, ::service_layer::SLSrPolicyOpRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SLSrPolicyDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLSrPolicyDelete(::grpc::ServerContext* /*context*/, const ::service_layer::SLSrPolicyMsg* /*request*/, ::service_layer::SLSrPolicyOpRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLSrPolicyDelete(
      ::grpc::CallbackServerContext* /*context*/, const ::service_layer::SLSrPolicyMsg* /*request*/, ::service_layer::SLSrPolicyOpRsp* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SLSrPolicyAdd<WithCallbackMethod_SLSrPolicyDelete<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SLSrPolicyAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLSrPolicyAdd() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SLSrPolicyAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLSrPolicyAdd(::grpc::ServerContext* /*context*/, const ::service_layer::SLSrPolicyMsg* /*request*/, ::service_layer::SLSrPolicyOpRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SLSrPolicyDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SLSrPolicyDelete() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SLSrPolicyDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLSrPolicyDelete(::grpc::ServerContext* /*context*/, const ::service_layer::SLSrPolicyMsg* /*request*/, ::service_layer::SLSrPolicyOpRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLSrPolicyAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLSrPolicyAdd() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SLSrPolicyAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLSrPolicyAdd(::grpc::ServerContext* /*context*/, const ::service_layer::SLSrPolicyMsg* /*request*/, ::service_layer::SLSrPolicyOpRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLSrPolicyAdd(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SLSrPolicyDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SLSrPolicyDelete() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SLSrPolicyDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLSrPolicyDelete(::grpc::ServerContext* /*context*/, const ::service_layer::SLSrPolicyMsg* /*request*/, ::service_layer::SLSrPolicyOpRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSLSrPolicyDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLSrPolicyAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLSrPolicyAdd() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SLSrPolicyAdd(context, request, response); }));
    }
    ~WithRawCallbackMethod_SLSrPolicyAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLSrPolicyAdd(::grpc::ServerContext* /*context*/, const ::service_layer::SLSrPolicyMsg* /*request*/, ::service_layer::SLSrPolicyOpRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLSrPolicyAdd(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SLSrPolicyDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SLSrPolicyDelete() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SLSrPolicyDelete(context, request, response); }));
    }
    ~WithRawCallbackMethod_SLSrPolicyDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SLSrPolicyDelete(::grpc::ServerContext* /*context*/, const ::service_layer::SLSrPolicyMsg* /*request*/, ::service_layer::SLSrPolicyOpRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SLSrPolicyDelete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLSrPolicyAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SLSrPolicyAdd() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service_layer::SLSrPolicyMsg, ::service_layer::SLSrPolicyOpRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service_layer::SLSrPolicyMsg, ::service_layer::SLSrPolicyOpRsp>* streamer) {
                       return this->StreamedSLSrPolicyAdd(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SLSrPolicyAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLSrPolicyAdd(::grpc::ServerContext* /*context*/, const ::service_layer::SLSrPolicyMsg* /*request*/, ::service_layer::SLSrPolicyOpRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLSrPolicyAdd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLSrPolicyMsg,::service_layer::SLSrPolicyOpRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SLSrPolicyDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SLSrPolicyDelete() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::service_layer::SLSrPolicyMsg, ::service_layer::SLSrPolicyOpRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::service_layer::SLSrPolicyMsg, ::service_layer::SLSrPolicyOpRsp>* streamer) {
                       return this->StreamedSLSrPolicyDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SLSrPolicyDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SLSrPolicyDelete(::grpc::ServerContext* /*context*/, const ::service_layer::SLSrPolicyMsg* /*request*/, ::service_layer::SLSrPolicyOpRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSLSrPolicyDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::service_layer::SLSrPolicyMsg,::service_layer::SLSrPolicyOpRsp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SLSrPolicyAdd<WithStreamedUnaryMethod_SLSrPolicyDelete<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SLSrPolicyAdd<WithStreamedUnaryMethod_SLSrPolicyDelete<Service > > StreamedService;
};
// @addtogroup SLSrtePolicy
// @{
// ;

}  // namespace service_layer


#endif  // GRPC_sl_5fsrte_5fpolicy_2eproto__INCLUDED
