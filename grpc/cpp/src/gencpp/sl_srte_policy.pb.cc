// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_srte_policy.proto

#include "sl_srte_policy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace service_layer {
constexpr SLSrPolicyMsg::SLSrPolicyMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SLSrPolicyMsgDefaultTypeInternal {
  constexpr SLSrPolicyMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrPolicyMsgDefaultTypeInternal() {}
  union {
    SLSrPolicyMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrPolicyMsgDefaultTypeInternal _SLSrPolicyMsg_default_instance_;
constexpr SLSrPolicyRsp_PolicyRsp::SLSrPolicyRsp_PolicyRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(nullptr)
  , status_(nullptr)
  , operation_id_(uint64_t{0u}){}
struct SLSrPolicyRsp_PolicyRspDefaultTypeInternal {
  constexpr SLSrPolicyRsp_PolicyRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrPolicyRsp_PolicyRspDefaultTypeInternal() {}
  union {
    SLSrPolicyRsp_PolicyRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrPolicyRsp_PolicyRspDefaultTypeInternal _SLSrPolicyRsp_PolicyRsp_default_instance_;
constexpr SLSrPolicyRsp::SLSrPolicyRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : responses_()
  , status_(nullptr){}
struct SLSrPolicyRspDefaultTypeInternal {
  constexpr SLSrPolicyRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrPolicyRspDefaultTypeInternal() {}
  union {
    SLSrPolicyRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrPolicyRspDefaultTypeInternal _SLSrPolicyRsp_default_instance_;
constexpr SLSrPolicyOpen::SLSrPolicyOpen(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mode_(0)
{}
struct SLSrPolicyOpenDefaultTypeInternal {
  constexpr SLSrPolicyOpenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrPolicyOpenDefaultTypeInternal() {}
  union {
    SLSrPolicyOpen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrPolicyOpenDefaultTypeInternal _SLSrPolicyOpen_default_instance_;
constexpr SLSrPolicyRequests::SLSrPolicyRequests(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_(){}
struct SLSrPolicyRequestsDefaultTypeInternal {
  constexpr SLSrPolicyRequestsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrPolicyRequestsDefaultTypeInternal() {}
  union {
    SLSrPolicyRequests _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrPolicyRequestsDefaultTypeInternal _SLSrPolicyRequests_default_instance_;
constexpr SLSrPolicyReq::SLSrPolicyReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : policy_(nullptr)
  , operation_(0)
{}
struct SLSrPolicyReqDefaultTypeInternal {
  constexpr SLSrPolicyReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrPolicyReqDefaultTypeInternal() {}
  union {
    SLSrPolicyReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrPolicyReqDefaultTypeInternal _SLSrPolicyReq_default_instance_;
constexpr SLSrEndOfReplay::SLSrEndOfReplay(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SLSrEndOfReplayDefaultTypeInternal {
  constexpr SLSrEndOfReplayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrEndOfReplayDefaultTypeInternal() {}
  union {
    SLSrEndOfReplay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrEndOfReplayDefaultTypeInternal _SLSrEndOfReplay_default_instance_;
constexpr SLSrStartOfReplay::SLSrStartOfReplay(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SLSrStartOfReplayDefaultTypeInternal {
  constexpr SLSrStartOfReplayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrStartOfReplayDefaultTypeInternal() {}
  union {
    SLSrStartOfReplay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrStartOfReplayDefaultTypeInternal _SLSrStartOfReplay_default_instance_;
constexpr SLSrPolicy::SLSrPolicy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cps_()
  , key_(nullptr)
  , attrs_(nullptr)
  , operation_id_(uint64_t{0u}){}
struct SLSrPolicyDefaultTypeInternal {
  constexpr SLSrPolicyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrPolicyDefaultTypeInternal() {}
  union {
    SLSrPolicy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrPolicyDefaultTypeInternal _SLSrPolicy_default_instance_;
constexpr SLSrPolicyAttributes::SLSrPolicyAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : srv6_bsids_()
  , mpls_bsid_(nullptr)
  , transit_eligible_(false)
  , dataplane_(0)

  , profile_id_(0u){}
struct SLSrPolicyAttributesDefaultTypeInternal {
  constexpr SLSrPolicyAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrPolicyAttributesDefaultTypeInternal() {}
  union {
    SLSrPolicyAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrPolicyAttributesDefaultTypeInternal _SLSrPolicyAttributes_default_instance_;
constexpr SLSrCandidatePath::SLSrCandidatePath(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_(nullptr)
  , preference_(0u)
  , _oneof_case_{}{}
struct SLSrCandidatePathDefaultTypeInternal {
  constexpr SLSrCandidatePathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrCandidatePathDefaultTypeInternal() {}
  union {
    SLSrCandidatePath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrCandidatePathDefaultTypeInternal _SLSrCandidatePath_default_instance_;
constexpr SLSrExplicitCP::SLSrExplicitCP(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : segment_list_()
  , metric_type_(0u){}
struct SLSrExplicitCPDefaultTypeInternal {
  constexpr SLSrExplicitCPDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrExplicitCPDefaultTypeInternal() {}
  union {
    SLSrExplicitCP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrExplicitCPDefaultTypeInternal _SLSrExplicitCP_default_instance_;
constexpr SLSrDynamicCP::SLSrDynamicCP(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : constraints_(nullptr)
  , metric_type_(0u){}
struct SLSrDynamicCPDefaultTypeInternal {
  constexpr SLSrDynamicCPDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrDynamicCPDefaultTypeInternal() {}
  union {
    SLSrDynamicCP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrDynamicCPDefaultTypeInternal _SLSrDynamicCP_default_instance_;
constexpr SLSrConstraints::SLSrConstraints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : affinities_(nullptr)
  , protection_(0)

  , sid_algo_(0u)
  , maximum_sid_depth_(0u){}
struct SLSrConstraintsDefaultTypeInternal {
  constexpr SLSrConstraintsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrConstraintsDefaultTypeInternal() {}
  union {
    SLSrConstraints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrConstraintsDefaultTypeInternal _SLSrConstraints_default_instance_;
constexpr SLSrSrv6BindingSID::SLSrSrv6BindingSID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SLSrSrv6BindingSIDDefaultTypeInternal {
  constexpr SLSrSrv6BindingSIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrSrv6BindingSIDDefaultTypeInternal() {}
  union {
    SLSrSrv6BindingSID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrSrv6BindingSIDDefaultTypeInternal _SLSrSrv6BindingSID_default_instance_;
constexpr SLSrMPLSBindingSID::SLSrMPLSBindingSID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mpls_bsid_(0u){}
struct SLSrMPLSBindingSIDDefaultTypeInternal {
  constexpr SLSrMPLSBindingSIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrMPLSBindingSIDDefaultTypeInternal() {}
  union {
    SLSrMPLSBindingSID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrMPLSBindingSIDDefaultTypeInternal _SLSrMPLSBindingSID_default_instance_;
constexpr SLSrSrv6DynamicBindingSID::SLSrSrv6DynamicBindingSID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : behavior_(0u){}
struct SLSrSrv6DynamicBindingSIDDefaultTypeInternal {
  constexpr SLSrSrv6DynamicBindingSIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrSrv6DynamicBindingSIDDefaultTypeInternal() {}
  union {
    SLSrSrv6DynamicBindingSID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrSrv6DynamicBindingSIDDefaultTypeInternal _SLSrSrv6DynamicBindingSID_default_instance_;
}  // namespace service_layer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sl_5fsrte_5fpolicy_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sl_5fsrte_5fpolicy_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sl_5fsrte_5fpolicy_2eproto = nullptr;

const uint32_t TableStruct_sl_5fsrte_5fpolicy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyMsg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyMsg, msg_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyRsp_PolicyRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyRsp_PolicyRsp, operation_id_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyRsp_PolicyRsp, key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyRsp_PolicyRsp, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyRsp, responses_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyRsp, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyOpen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyOpen, client_id_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyOpen, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyRequests, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyRequests, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyReq, operation_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyReq, policy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrEndOfReplay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrStartOfReplay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicy, operation_id_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicy, key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicy, attrs_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicy, cps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyAttributes, transit_eligible_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyAttributes, dataplane_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyAttributes, mpls_bsid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyAttributes, srv6_bsids_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyAttributes, profile_id_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrCandidatePath, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrCandidatePath, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrCandidatePath, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrCandidatePath, key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrCandidatePath, name_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrCandidatePath, preference_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrCandidatePath, CP_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrExplicitCP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrExplicitCP, segment_list_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrExplicitCP, metric_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrDynamicCP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrDynamicCP, metric_type_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrDynamicCP, constraints_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrConstraints, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrConstraints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrConstraints, affinities_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrConstraints, protection_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrConstraints, sid_algo_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrConstraints, maximum_sid_depth_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrSrv6BindingSID, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrSrv6BindingSID, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrSrv6BindingSID, type_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrMPLSBindingSID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrMPLSBindingSID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrMPLSBindingSID, mpls_bsid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrSrv6DynamicBindingSID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrSrv6DynamicBindingSID, behavior_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::service_layer::SLSrPolicyMsg)},
  { 9, -1, -1, sizeof(::service_layer::SLSrPolicyRsp_PolicyRsp)},
  { 18, -1, -1, sizeof(::service_layer::SLSrPolicyRsp)},
  { 26, -1, -1, sizeof(::service_layer::SLSrPolicyOpen)},
  { 34, -1, -1, sizeof(::service_layer::SLSrPolicyRequests)},
  { 41, -1, -1, sizeof(::service_layer::SLSrPolicyReq)},
  { 49, -1, -1, sizeof(::service_layer::SLSrEndOfReplay)},
  { 55, -1, -1, sizeof(::service_layer::SLSrStartOfReplay)},
  { 61, -1, -1, sizeof(::service_layer::SLSrPolicy)},
  { 71, -1, -1, sizeof(::service_layer::SLSrPolicyAttributes)},
  { 82, 94, -1, sizeof(::service_layer::SLSrCandidatePath)},
  { 99, -1, -1, sizeof(::service_layer::SLSrExplicitCP)},
  { 107, -1, -1, sizeof(::service_layer::SLSrDynamicCP)},
  { 115, 125, -1, sizeof(::service_layer::SLSrConstraints)},
  { 129, -1, -1, sizeof(::service_layer::SLSrSrv6BindingSID)},
  { 137, 144, -1, sizeof(::service_layer::SLSrMPLSBindingSID)},
  { 145, -1, -1, sizeof(::service_layer::SLSrSrv6DynamicBindingSID)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrPolicyMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrPolicyRsp_PolicyRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrPolicyRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrPolicyOpen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrPolicyRequests_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrPolicyReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrEndOfReplay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrStartOfReplay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrPolicyAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrCandidatePath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrExplicitCP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrDynamicCP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrConstraints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrSrv6BindingSID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrMPLSBindingSID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrSrv6DynamicBindingSID_default_instance_),
};

const char descriptor_table_protodef_sl_5fsrte_5fpolicy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024sl_srte_policy.proto\022\rservice_layer\032\022s"
  "l_sr_common.proto\"\201\001\n\rSLSrPolicyMsg\022-\n\004o"
  "pen\030\001 \001(\0132\035.service_layer.SLSrPolicyOpen"
  "H\000\0225\n\010requests\030\002 \001(\0132!.service_layer.SLS"
  "rPolicyRequestsH\000B\n\n\010msg_type\"\356\001\n\rSLSrPo"
  "licyRsp\0229\n\tresponses\030\001 \003(\0132&.service_lay"
  "er.SLSrPolicyRsp.PolicyRsp\022)\n\006status\030\002 \001"
  "(\0132\031.service_layer.SLSrStatus\032w\n\tPolicyR"
  "sp\022\024\n\014operation_id\030\001 \001(\004\022)\n\003key\030\002 \001(\0132\034."
  "service_layer.SLSrPolicyKey\022)\n\006status\030\003 "
  "\001(\0132\031.service_layer.SLSrStatus\"\225\001\n\016SLSrP"
  "olicyOpen\022\021\n\tclient_id\030\001 \001(\t\022\?\n\004mode\030\003 \001"
  "(\01621.service_layer.SLSrPolicyOpen.SLSrPe"
  "rsistenceMode\"/\n\023SLSrPersistenceMode\022\n\n\006"
  "DELETE\020\000\022\014\n\010PRESERVE\020\001\"C\n\022SLSrPolicyRequ"
  "ests\022-\n\007request\030\001 \003(\0132\034.service_layer.SL"
  "SrPolicyReq\"\224\001\n\rSLSrPolicyReq\0226\n\toperati"
  "on\030\001 \001(\0162#.service_layer.SLSrPolicyReq.S"
  "LSrOp\022)\n\006policy\030\002 \001(\0132\031.service_layer.SL"
  "SrPolicy\" \n\006SLSrOp\022\n\n\006UPDATE\020\000\022\n\n\006DELETE"
  "\020\001\"\021\n\017SLSrEndOfReplay\"\023\n\021SLSrStartOfRepl"
  "ay\"\260\001\n\nSLSrPolicy\022\024\n\014operation_id\030\001 \001(\004\022"
  ")\n\003key\030\002 \001(\0132\034.service_layer.SLSrPolicyK"
  "ey\0222\n\005attrs\030\003 \001(\0132#.service_layer.SLSrPo"
  "licyAttributes\022-\n\003CPs\030\004 \003(\0132 .service_la"
  "yer.SLSrCandidatePath\"\342\001\n\024SLSrPolicyAttr"
  "ibutes\022\030\n\020transit_eligible\030\002 \001(\010\022/\n\tdata"
  "plane\030\003 \001(\0162\034.service_layer.SLSrDataplan"
  "e\0224\n\tmpls_bsid\030\004 \001(\0132!.service_layer.SLS"
  "rMPLSBindingSID\0225\n\nsrv6_bsids\030\005 \003(\0132!.se"
  "rvice_layer.SLSrSrv6BindingSID\022\022\n\nprofil"
  "e_id\030\006 \001(\r\"\345\001\n\021SLSrCandidatePath\0220\n\003key\030"
  "\002 \001(\0132#.service_layer.SLSrCandidatePathK"
  "ey\022\014\n\004name\030\003 \001(\t\022\027\n\npreference\030\004 \001(\rH\001\210\001"
  "\001\022/\n\007dynamic\030\005 \001(\0132\034.service_layer.SLSrD"
  "ynamicCPH\000\0221\n\010explicit\030\006 \001(\0132\035.service_l"
  "ayer.SLSrExplicitCPH\000B\004\n\002CPB\r\n\013_preferen"
  "ce\"[\n\016SLSrExplicitCP\0224\n\014segment_list\030\001 \003"
  "(\0132\036.service_layer.SLSrSegmentList\022\023\n\013me"
  "tric_type\030\003 \001(\r\"Y\n\rSLSrDynamicCP\022\023\n\013metr"
  "ic_type\030\001 \001(\r\0223\n\013constraints\030\002 \001(\0132\036.ser"
  "vice_layer.SLSrConstraints\"\274\001\n\017SLSrConst"
  "raints\0221\n\naffinities\030\001 \001(\0132\035.service_lay"
  "er.SLSrAffinities\0227\n\nprotection\030\002 \001(\0162#."
  "service_layer.SLSrteProtectionType\022\025\n\010si"
  "d_algo\030\003 \001(\rH\000\210\001\001\022\031\n\021maximum_sid_depth\030\004"
  " \001(\rB\013\n\t_sid_algo\"Y\n\022SLSrSrv6BindingSID\022"
  ";\n\007dynamic\030\002 \001(\0132(.service_layer.SLSrSrv"
  "6DynamicBindingSIDH\000B\006\n\004type\":\n\022SLSrMPLS"
  "BindingSID\022\026\n\tmpls_bsid\030\001 \001(\rH\000\210\001\001B\014\n\n_m"
  "pls_bsid\"-\n\031SLSrSrv6DynamicBindingSID\022\020\n"
  "\010behavior\030\001 \001(\r2^\n\014SLSrtePolicy\022N\n\014SLSrP"
  "olicyOp\022\034.service_layer.SLSrPolicyMsg\032\034."
  "service_layer.SLSrPolicyRsp(\0010\001BQZOgithu"
  "b.com/Cisco-service-layer/service-layer-"
  "objmodel/grpc/protos;service_layerb\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sl_5fsrte_5fpolicy_2eproto_deps[1] = {
  &::descriptor_table_sl_5fsr_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sl_5fsrte_5fpolicy_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fsrte_5fpolicy_2eproto = {
  false, false, 2242, descriptor_table_protodef_sl_5fsrte_5fpolicy_2eproto, "sl_srte_policy.proto", 
  &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once, descriptor_table_sl_5fsrte_5fpolicy_2eproto_deps, 1, 17,
  schemas, file_default_instances, TableStruct_sl_5fsrte_5fpolicy_2eproto::offsets,
  file_level_metadata_sl_5fsrte_5fpolicy_2eproto, file_level_enum_descriptors_sl_5fsrte_5fpolicy_2eproto, file_level_service_descriptors_sl_5fsrte_5fpolicy_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter() {
  return &descriptor_table_sl_5fsrte_5fpolicy_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sl_5fsrte_5fpolicy_2eproto(&descriptor_table_sl_5fsrte_5fpolicy_2eproto);
namespace service_layer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrPolicyOpen_SLSrPersistenceMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fsrte_5fpolicy_2eproto);
  return file_level_enum_descriptors_sl_5fsrte_5fpolicy_2eproto[0];
}
bool SLSrPolicyOpen_SLSrPersistenceMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SLSrPolicyOpen_SLSrPersistenceMode SLSrPolicyOpen::DELETE;
constexpr SLSrPolicyOpen_SLSrPersistenceMode SLSrPolicyOpen::PRESERVE;
constexpr SLSrPolicyOpen_SLSrPersistenceMode SLSrPolicyOpen::SLSrPersistenceMode_MIN;
constexpr SLSrPolicyOpen_SLSrPersistenceMode SLSrPolicyOpen::SLSrPersistenceMode_MAX;
constexpr int SLSrPolicyOpen::SLSrPersistenceMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrPolicyReq_SLSrOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fsrte_5fpolicy_2eproto);
  return file_level_enum_descriptors_sl_5fsrte_5fpolicy_2eproto[1];
}
bool SLSrPolicyReq_SLSrOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SLSrPolicyReq_SLSrOp SLSrPolicyReq::UPDATE;
constexpr SLSrPolicyReq_SLSrOp SLSrPolicyReq::DELETE;
constexpr SLSrPolicyReq_SLSrOp SLSrPolicyReq::SLSrOp_MIN;
constexpr SLSrPolicyReq_SLSrOp SLSrPolicyReq::SLSrOp_MAX;
constexpr int SLSrPolicyReq::SLSrOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SLSrPolicyMsg::_Internal {
 public:
  static const ::service_layer::SLSrPolicyOpen& open(const SLSrPolicyMsg* msg);
  static const ::service_layer::SLSrPolicyRequests& requests(const SLSrPolicyMsg* msg);
};

const ::service_layer::SLSrPolicyOpen&
SLSrPolicyMsg::_Internal::open(const SLSrPolicyMsg* msg) {
  return *msg->msg_type_.open_;
}
const ::service_layer::SLSrPolicyRequests&
SLSrPolicyMsg::_Internal::requests(const SLSrPolicyMsg* msg) {
  return *msg->msg_type_.requests_;
}
void SLSrPolicyMsg::set_allocated_open(::service_layer::SLSrPolicyOpen* open) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg_type();
  if (open) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrPolicyOpen>::GetOwningArena(open);
    if (message_arena != submessage_arena) {
      open = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open, submessage_arena);
    }
    set_has_open();
    msg_type_.open_ = open;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrPolicyMsg.open)
}
void SLSrPolicyMsg::set_allocated_requests(::service_layer::SLSrPolicyRequests* requests) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg_type();
  if (requests) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrPolicyRequests>::GetOwningArena(requests);
    if (message_arena != submessage_arena) {
      requests = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requests, submessage_arena);
    }
    set_has_requests();
    msg_type_.requests_ = requests;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrPolicyMsg.requests)
}
SLSrPolicyMsg::SLSrPolicyMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrPolicyMsg)
}
SLSrPolicyMsg::SLSrPolicyMsg(const SLSrPolicyMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_msg_type();
  switch (from.msg_type_case()) {
    case kOpen: {
      _internal_mutable_open()->::service_layer::SLSrPolicyOpen::MergeFrom(from._internal_open());
      break;
    }
    case kRequests: {
      _internal_mutable_requests()->::service_layer::SLSrPolicyRequests::MergeFrom(from._internal_requests());
      break;
    }
    case MSG_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrPolicyMsg)
}

inline void SLSrPolicyMsg::SharedCtor() {
clear_has_msg_type();
}

SLSrPolicyMsg::~SLSrPolicyMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrPolicyMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrPolicyMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_msg_type()) {
    clear_msg_type();
  }
}

void SLSrPolicyMsg::ArenaDtor(void* object) {
  SLSrPolicyMsg* _this = reinterpret_cast< SLSrPolicyMsg* >(object);
  (void)_this;
}
void SLSrPolicyMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrPolicyMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrPolicyMsg::clear_msg_type() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLSrPolicyMsg)
  switch (msg_type_case()) {
    case kOpen: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_type_.open_;
      }
      break;
    }
    case kRequests: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_type_.requests_;
      }
      break;
    }
    case MSG_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_TYPE_NOT_SET;
}


void SLSrPolicyMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrPolicyMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrPolicyMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLSrPolicyOpen open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_open(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrPolicyRequests requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_requests(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrPolicyMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrPolicyMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLSrPolicyOpen open = 1;
  if (_internal_has_open()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::open(this), target, stream);
  }

  // .service_layer.SLSrPolicyRequests requests = 2;
  if (_internal_has_requests()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::requests(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrPolicyMsg)
  return target;
}

size_t SLSrPolicyMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrPolicyMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_type_case()) {
    // .service_layer.SLSrPolicyOpen open = 1;
    case kOpen: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_type_.open_);
      break;
    }
    // .service_layer.SLSrPolicyRequests requests = 2;
    case kRequests: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_type_.requests_);
      break;
    }
    case MSG_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrPolicyMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrPolicyMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrPolicyMsg::GetClassData() const { return &_class_data_; }

void SLSrPolicyMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrPolicyMsg *>(to)->MergeFrom(
      static_cast<const SLSrPolicyMsg &>(from));
}


void SLSrPolicyMsg::MergeFrom(const SLSrPolicyMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrPolicyMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_type_case()) {
    case kOpen: {
      _internal_mutable_open()->::service_layer::SLSrPolicyOpen::MergeFrom(from._internal_open());
      break;
    }
    case kRequests: {
      _internal_mutable_requests()->::service_layer::SLSrPolicyRequests::MergeFrom(from._internal_requests());
      break;
    }
    case MSG_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrPolicyMsg::CopyFrom(const SLSrPolicyMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrPolicyMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrPolicyMsg::IsInitialized() const {
  return true;
}

void SLSrPolicyMsg::InternalSwap(SLSrPolicyMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(msg_type_, other->msg_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrPolicyMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[0]);
}

// ===================================================================

class SLSrPolicyRsp_PolicyRsp::_Internal {
 public:
  static const ::service_layer::SLSrPolicyKey& key(const SLSrPolicyRsp_PolicyRsp* msg);
  static const ::service_layer::SLSrStatus& status(const SLSrPolicyRsp_PolicyRsp* msg);
};

const ::service_layer::SLSrPolicyKey&
SLSrPolicyRsp_PolicyRsp::_Internal::key(const SLSrPolicyRsp_PolicyRsp* msg) {
  return *msg->key_;
}
const ::service_layer::SLSrStatus&
SLSrPolicyRsp_PolicyRsp::_Internal::status(const SLSrPolicyRsp_PolicyRsp* msg) {
  return *msg->status_;
}
void SLSrPolicyRsp_PolicyRsp::clear_key() {
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
void SLSrPolicyRsp_PolicyRsp::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SLSrPolicyRsp_PolicyRsp::SLSrPolicyRsp_PolicyRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrPolicyRsp.PolicyRsp)
}
SLSrPolicyRsp_PolicyRsp::SLSrPolicyRsp_PolicyRsp(const SLSrPolicyRsp_PolicyRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLSrPolicyKey(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::service_layer::SLSrStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  operation_id_ = from.operation_id_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrPolicyRsp.PolicyRsp)
}

inline void SLSrPolicyRsp_PolicyRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&operation_id_) -
    reinterpret_cast<char*>(&key_)) + sizeof(operation_id_));
}

SLSrPolicyRsp_PolicyRsp::~SLSrPolicyRsp_PolicyRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrPolicyRsp.PolicyRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrPolicyRsp_PolicyRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete status_;
}

void SLSrPolicyRsp_PolicyRsp::ArenaDtor(void* object) {
  SLSrPolicyRsp_PolicyRsp* _this = reinterpret_cast< SLSrPolicyRsp_PolicyRsp* >(object);
  (void)_this;
}
void SLSrPolicyRsp_PolicyRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrPolicyRsp_PolicyRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrPolicyRsp_PolicyRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrPolicyRsp.PolicyRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  operation_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrPolicyRsp_PolicyRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 operation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          operation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrPolicyKey key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrPolicyRsp_PolicyRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrPolicyRsp.PolicyRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 operation_id = 1;
  if (this->_internal_operation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_operation_id(), target);
  }

  // .service_layer.SLSrPolicyKey key = 2;
  if (this->_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key(this), target, stream);
  }

  // .service_layer.SLSrStatus status = 3;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrPolicyRsp.PolicyRsp)
  return target;
}

size_t SLSrPolicyRsp_PolicyRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrPolicyRsp.PolicyRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLSrPolicyKey key = 2;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .service_layer.SLSrStatus status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // uint64 operation_id = 1;
  if (this->_internal_operation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_operation_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrPolicyRsp_PolicyRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrPolicyRsp_PolicyRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrPolicyRsp_PolicyRsp::GetClassData() const { return &_class_data_; }

void SLSrPolicyRsp_PolicyRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrPolicyRsp_PolicyRsp *>(to)->MergeFrom(
      static_cast<const SLSrPolicyRsp_PolicyRsp &>(from));
}


void SLSrPolicyRsp_PolicyRsp::MergeFrom(const SLSrPolicyRsp_PolicyRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrPolicyRsp.PolicyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key()) {
    _internal_mutable_key()->::service_layer::SLSrPolicyKey::MergeFrom(from._internal_key());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::service_layer::SLSrStatus::MergeFrom(from._internal_status());
  }
  if (from._internal_operation_id() != 0) {
    _internal_set_operation_id(from._internal_operation_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrPolicyRsp_PolicyRsp::CopyFrom(const SLSrPolicyRsp_PolicyRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrPolicyRsp.PolicyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrPolicyRsp_PolicyRsp::IsInitialized() const {
  return true;
}

void SLSrPolicyRsp_PolicyRsp::InternalSwap(SLSrPolicyRsp_PolicyRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLSrPolicyRsp_PolicyRsp, operation_id_)
      + sizeof(SLSrPolicyRsp_PolicyRsp::operation_id_)
      - PROTOBUF_FIELD_OFFSET(SLSrPolicyRsp_PolicyRsp, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrPolicyRsp_PolicyRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[1]);
}

// ===================================================================

class SLSrPolicyRsp::_Internal {
 public:
  static const ::service_layer::SLSrStatus& status(const SLSrPolicyRsp* msg);
};

const ::service_layer::SLSrStatus&
SLSrPolicyRsp::_Internal::status(const SLSrPolicyRsp* msg) {
  return *msg->status_;
}
void SLSrPolicyRsp::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SLSrPolicyRsp::SLSrPolicyRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  responses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrPolicyRsp)
}
SLSrPolicyRsp::SLSrPolicyRsp(const SLSrPolicyRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::service_layer::SLSrStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrPolicyRsp)
}

inline void SLSrPolicyRsp::SharedCtor() {
status_ = nullptr;
}

SLSrPolicyRsp::~SLSrPolicyRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrPolicyRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrPolicyRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void SLSrPolicyRsp::ArenaDtor(void* object) {
  SLSrPolicyRsp* _this = reinterpret_cast< SLSrPolicyRsp* >(object);
  (void)_this;
}
void SLSrPolicyRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrPolicyRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrPolicyRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrPolicyRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrPolicyRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLSrPolicyRsp.PolicyRsp responses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrPolicyRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrPolicyRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLSrPolicyRsp.PolicyRsp responses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_responses(i), target, stream);
  }

  // .service_layer.SLSrStatus status = 2;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrPolicyRsp)
  return target;
}

size_t SLSrPolicyRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrPolicyRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLSrPolicyRsp.PolicyRsp responses = 1;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLSrStatus status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrPolicyRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrPolicyRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrPolicyRsp::GetClassData() const { return &_class_data_; }

void SLSrPolicyRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrPolicyRsp *>(to)->MergeFrom(
      static_cast<const SLSrPolicyRsp &>(from));
}


void SLSrPolicyRsp::MergeFrom(const SLSrPolicyRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrPolicyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::service_layer::SLSrStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrPolicyRsp::CopyFrom(const SLSrPolicyRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrPolicyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrPolicyRsp::IsInitialized() const {
  return true;
}

void SLSrPolicyRsp::InternalSwap(SLSrPolicyRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrPolicyRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[2]);
}

// ===================================================================

class SLSrPolicyOpen::_Internal {
 public:
};

SLSrPolicyOpen::SLSrPolicyOpen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrPolicyOpen)
}
SLSrPolicyOpen::SLSrPolicyOpen(const SLSrPolicyOpen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_id(), 
      GetArenaForAllocation());
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrPolicyOpen)
}

inline void SLSrPolicyOpen::SharedCtor() {
client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mode_ = 0;
}

SLSrPolicyOpen::~SLSrPolicyOpen() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrPolicyOpen)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrPolicyOpen::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLSrPolicyOpen::ArenaDtor(void* object) {
  SLSrPolicyOpen* _this = reinterpret_cast< SLSrPolicyOpen* >(object);
  (void)_this;
}
void SLSrPolicyOpen::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrPolicyOpen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrPolicyOpen::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrPolicyOpen)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmpty();
  mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrPolicyOpen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLSrPolicyOpen.client_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrPolicyOpen.SLSrPersistenceMode mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::service_layer::SLSrPolicyOpen_SLSrPersistenceMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrPolicyOpen::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrPolicyOpen)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (!this->_internal_client_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLSrPolicyOpen.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // .service_layer.SLSrPolicyOpen.SLSrPersistenceMode mode = 3;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrPolicyOpen)
  return target;
}

size_t SLSrPolicyOpen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrPolicyOpen)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (!this->_internal_client_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // .service_layer.SLSrPolicyOpen.SLSrPersistenceMode mode = 3;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrPolicyOpen::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrPolicyOpen::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrPolicyOpen::GetClassData() const { return &_class_data_; }

void SLSrPolicyOpen::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrPolicyOpen *>(to)->MergeFrom(
      static_cast<const SLSrPolicyOpen &>(from));
}


void SLSrPolicyOpen::MergeFrom(const SLSrPolicyOpen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrPolicyOpen)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_id().empty()) {
    _internal_set_client_id(from._internal_client_id());
  }
  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrPolicyOpen::CopyFrom(const SLSrPolicyOpen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrPolicyOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrPolicyOpen::IsInitialized() const {
  return true;
}

void SLSrPolicyOpen::InternalSwap(SLSrPolicyOpen* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &client_id_, lhs_arena,
      &other->client_id_, rhs_arena
  );
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrPolicyOpen::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[3]);
}

// ===================================================================

class SLSrPolicyRequests::_Internal {
 public:
};

SLSrPolicyRequests::SLSrPolicyRequests(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  request_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrPolicyRequests)
}
SLSrPolicyRequests::SLSrPolicyRequests(const SLSrPolicyRequests& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      request_(from.request_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrPolicyRequests)
}

inline void SLSrPolicyRequests::SharedCtor() {
}

SLSrPolicyRequests::~SLSrPolicyRequests() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrPolicyRequests)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrPolicyRequests::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLSrPolicyRequests::ArenaDtor(void* object) {
  SLSrPolicyRequests* _this = reinterpret_cast< SLSrPolicyRequests* >(object);
  (void)_this;
}
void SLSrPolicyRequests::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrPolicyRequests::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrPolicyRequests::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrPolicyRequests)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrPolicyRequests::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLSrPolicyReq request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_request(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrPolicyRequests::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrPolicyRequests)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLSrPolicyReq request = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_request_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_request(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrPolicyRequests)
  return target;
}

size_t SLSrPolicyRequests::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrPolicyRequests)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLSrPolicyReq request = 1;
  total_size += 1UL * this->_internal_request_size();
  for (const auto& msg : this->request_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrPolicyRequests::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrPolicyRequests::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrPolicyRequests::GetClassData() const { return &_class_data_; }

void SLSrPolicyRequests::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrPolicyRequests *>(to)->MergeFrom(
      static_cast<const SLSrPolicyRequests &>(from));
}


void SLSrPolicyRequests::MergeFrom(const SLSrPolicyRequests& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrPolicyRequests)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  request_.MergeFrom(from.request_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrPolicyRequests::CopyFrom(const SLSrPolicyRequests& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrPolicyRequests)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrPolicyRequests::IsInitialized() const {
  return true;
}

void SLSrPolicyRequests::InternalSwap(SLSrPolicyRequests* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  request_.InternalSwap(&other->request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrPolicyRequests::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[4]);
}

// ===================================================================

class SLSrPolicyReq::_Internal {
 public:
  static const ::service_layer::SLSrPolicy& policy(const SLSrPolicyReq* msg);
};

const ::service_layer::SLSrPolicy&
SLSrPolicyReq::_Internal::policy(const SLSrPolicyReq* msg) {
  return *msg->policy_;
}
SLSrPolicyReq::SLSrPolicyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrPolicyReq)
}
SLSrPolicyReq::SLSrPolicyReq(const SLSrPolicyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_policy()) {
    policy_ = new ::service_layer::SLSrPolicy(*from.policy_);
  } else {
    policy_ = nullptr;
  }
  operation_ = from.operation_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrPolicyReq)
}

inline void SLSrPolicyReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&policy_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&operation_) -
    reinterpret_cast<char*>(&policy_)) + sizeof(operation_));
}

SLSrPolicyReq::~SLSrPolicyReq() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrPolicyReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrPolicyReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete policy_;
}

void SLSrPolicyReq::ArenaDtor(void* object) {
  SLSrPolicyReq* _this = reinterpret_cast< SLSrPolicyReq* >(object);
  (void)_this;
}
void SLSrPolicyReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrPolicyReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrPolicyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrPolicyReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && policy_ != nullptr) {
    delete policy_;
  }
  policy_ = nullptr;
  operation_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrPolicyReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLSrPolicyReq.SLSrOp operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::service_layer::SLSrPolicyReq_SLSrOp>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrPolicy policy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_policy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrPolicyReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrPolicyReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLSrPolicyReq.SLSrOp operation = 1;
  if (this->_internal_operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // .service_layer.SLSrPolicy policy = 2;
  if (this->_internal_has_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::policy(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrPolicyReq)
  return target;
}

size_t SLSrPolicyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrPolicyReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLSrPolicy policy = 2;
  if (this->_internal_has_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *policy_);
  }

  // .service_layer.SLSrPolicyReq.SLSrOp operation = 1;
  if (this->_internal_operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrPolicyReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrPolicyReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrPolicyReq::GetClassData() const { return &_class_data_; }

void SLSrPolicyReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrPolicyReq *>(to)->MergeFrom(
      static_cast<const SLSrPolicyReq &>(from));
}


void SLSrPolicyReq::MergeFrom(const SLSrPolicyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrPolicyReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_policy()) {
    _internal_mutable_policy()->::service_layer::SLSrPolicy::MergeFrom(from._internal_policy());
  }
  if (from._internal_operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrPolicyReq::CopyFrom(const SLSrPolicyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrPolicyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrPolicyReq::IsInitialized() const {
  return true;
}

void SLSrPolicyReq::InternalSwap(SLSrPolicyReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLSrPolicyReq, operation_)
      + sizeof(SLSrPolicyReq::operation_)
      - PROTOBUF_FIELD_OFFSET(SLSrPolicyReq, policy_)>(
          reinterpret_cast<char*>(&policy_),
          reinterpret_cast<char*>(&other->policy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrPolicyReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[5]);
}

// ===================================================================

class SLSrEndOfReplay::_Internal {
 public:
};

SLSrEndOfReplay::SLSrEndOfReplay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrEndOfReplay)
}
SLSrEndOfReplay::SLSrEndOfReplay(const SLSrEndOfReplay& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrEndOfReplay)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrEndOfReplay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrEndOfReplay::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SLSrEndOfReplay::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[6]);
}

// ===================================================================

class SLSrStartOfReplay::_Internal {
 public:
};

SLSrStartOfReplay::SLSrStartOfReplay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrStartOfReplay)
}
SLSrStartOfReplay::SLSrStartOfReplay(const SLSrStartOfReplay& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrStartOfReplay)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrStartOfReplay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrStartOfReplay::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SLSrStartOfReplay::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[7]);
}

// ===================================================================

class SLSrPolicy::_Internal {
 public:
  static const ::service_layer::SLSrPolicyKey& key(const SLSrPolicy* msg);
  static const ::service_layer::SLSrPolicyAttributes& attrs(const SLSrPolicy* msg);
};

const ::service_layer::SLSrPolicyKey&
SLSrPolicy::_Internal::key(const SLSrPolicy* msg) {
  return *msg->key_;
}
const ::service_layer::SLSrPolicyAttributes&
SLSrPolicy::_Internal::attrs(const SLSrPolicy* msg) {
  return *msg->attrs_;
}
void SLSrPolicy::clear_key() {
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
SLSrPolicy::SLSrPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cps_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrPolicy)
}
SLSrPolicy::SLSrPolicy(const SLSrPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cps_(from.cps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLSrPolicyKey(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from._internal_has_attrs()) {
    attrs_ = new ::service_layer::SLSrPolicyAttributes(*from.attrs_);
  } else {
    attrs_ = nullptr;
  }
  operation_id_ = from.operation_id_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrPolicy)
}

inline void SLSrPolicy::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&operation_id_) -
    reinterpret_cast<char*>(&key_)) + sizeof(operation_id_));
}

SLSrPolicy::~SLSrPolicy() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrPolicy)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete attrs_;
}

void SLSrPolicy::ArenaDtor(void* object) {
  SLSrPolicy* _this = reinterpret_cast< SLSrPolicy* >(object);
  (void)_this;
}
void SLSrPolicy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrPolicy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cps_.Clear();
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && attrs_ != nullptr) {
    delete attrs_;
  }
  attrs_ = nullptr;
  operation_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 operation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          operation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrPolicyKey key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrPolicyAttributes attrs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_attrs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLSrCandidatePath CPs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrPolicy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrPolicy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 operation_id = 1;
  if (this->_internal_operation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_operation_id(), target);
  }

  // .service_layer.SLSrPolicyKey key = 2;
  if (this->_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key(this), target, stream);
  }

  // .service_layer.SLSrPolicyAttributes attrs = 3;
  if (this->_internal_has_attrs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::attrs(this), target, stream);
  }

  // repeated .service_layer.SLSrCandidatePath CPs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_cps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrPolicy)
  return target;
}

size_t SLSrPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrPolicy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLSrCandidatePath CPs = 4;
  total_size += 1UL * this->_internal_cps_size();
  for (const auto& msg : this->cps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLSrPolicyKey key = 2;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .service_layer.SLSrPolicyAttributes attrs = 3;
  if (this->_internal_has_attrs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attrs_);
  }

  // uint64 operation_id = 1;
  if (this->_internal_operation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_operation_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrPolicy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrPolicy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrPolicy::GetClassData() const { return &_class_data_; }

void SLSrPolicy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrPolicy *>(to)->MergeFrom(
      static_cast<const SLSrPolicy &>(from));
}


void SLSrPolicy::MergeFrom(const SLSrPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cps_.MergeFrom(from.cps_);
  if (from._internal_has_key()) {
    _internal_mutable_key()->::service_layer::SLSrPolicyKey::MergeFrom(from._internal_key());
  }
  if (from._internal_has_attrs()) {
    _internal_mutable_attrs()->::service_layer::SLSrPolicyAttributes::MergeFrom(from._internal_attrs());
  }
  if (from._internal_operation_id() != 0) {
    _internal_set_operation_id(from._internal_operation_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrPolicy::CopyFrom(const SLSrPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrPolicy::IsInitialized() const {
  return true;
}

void SLSrPolicy::InternalSwap(SLSrPolicy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cps_.InternalSwap(&other->cps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLSrPolicy, operation_id_)
      + sizeof(SLSrPolicy::operation_id_)
      - PROTOBUF_FIELD_OFFSET(SLSrPolicy, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrPolicy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[8]);
}

// ===================================================================

class SLSrPolicyAttributes::_Internal {
 public:
  static const ::service_layer::SLSrMPLSBindingSID& mpls_bsid(const SLSrPolicyAttributes* msg);
};

const ::service_layer::SLSrMPLSBindingSID&
SLSrPolicyAttributes::_Internal::mpls_bsid(const SLSrPolicyAttributes* msg) {
  return *msg->mpls_bsid_;
}
SLSrPolicyAttributes::SLSrPolicyAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  srv6_bsids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrPolicyAttributes)
}
SLSrPolicyAttributes::SLSrPolicyAttributes(const SLSrPolicyAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      srv6_bsids_(from.srv6_bsids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mpls_bsid()) {
    mpls_bsid_ = new ::service_layer::SLSrMPLSBindingSID(*from.mpls_bsid_);
  } else {
    mpls_bsid_ = nullptr;
  }
  ::memcpy(&transit_eligible_, &from.transit_eligible_,
    static_cast<size_t>(reinterpret_cast<char*>(&profile_id_) -
    reinterpret_cast<char*>(&transit_eligible_)) + sizeof(profile_id_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrPolicyAttributes)
}

inline void SLSrPolicyAttributes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mpls_bsid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&profile_id_) -
    reinterpret_cast<char*>(&mpls_bsid_)) + sizeof(profile_id_));
}

SLSrPolicyAttributes::~SLSrPolicyAttributes() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrPolicyAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrPolicyAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mpls_bsid_;
}

void SLSrPolicyAttributes::ArenaDtor(void* object) {
  SLSrPolicyAttributes* _this = reinterpret_cast< SLSrPolicyAttributes* >(object);
  (void)_this;
}
void SLSrPolicyAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrPolicyAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrPolicyAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrPolicyAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srv6_bsids_.Clear();
  if (GetArenaForAllocation() == nullptr && mpls_bsid_ != nullptr) {
    delete mpls_bsid_;
  }
  mpls_bsid_ = nullptr;
  ::memset(&transit_eligible_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&profile_id_) -
      reinterpret_cast<char*>(&transit_eligible_)) + sizeof(profile_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrPolicyAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool transit_eligible = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          transit_eligible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrDataplane dataplane = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dataplane(static_cast<::service_layer::SLSrDataplane>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrMPLSBindingSID mpls_bsid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mpls_bsid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLSrSrv6BindingSID srv6_bsids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_srv6_bsids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 profile_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          profile_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrPolicyAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrPolicyAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool transit_eligible = 2;
  if (this->_internal_transit_eligible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_transit_eligible(), target);
  }

  // .service_layer.SLSrDataplane dataplane = 3;
  if (this->_internal_dataplane() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_dataplane(), target);
  }

  // .service_layer.SLSrMPLSBindingSID mpls_bsid = 4;
  if (this->_internal_has_mpls_bsid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::mpls_bsid(this), target, stream);
  }

  // repeated .service_layer.SLSrSrv6BindingSID srv6_bsids = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_srv6_bsids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_srv6_bsids(i), target, stream);
  }

  // uint32 profile_id = 6;
  if (this->_internal_profile_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_profile_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrPolicyAttributes)
  return target;
}

size_t SLSrPolicyAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrPolicyAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLSrSrv6BindingSID srv6_bsids = 5;
  total_size += 1UL * this->_internal_srv6_bsids_size();
  for (const auto& msg : this->srv6_bsids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLSrMPLSBindingSID mpls_bsid = 4;
  if (this->_internal_has_mpls_bsid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mpls_bsid_);
  }

  // bool transit_eligible = 2;
  if (this->_internal_transit_eligible() != 0) {
    total_size += 1 + 1;
  }

  // .service_layer.SLSrDataplane dataplane = 3;
  if (this->_internal_dataplane() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dataplane());
  }

  // uint32 profile_id = 6;
  if (this->_internal_profile_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_profile_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrPolicyAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrPolicyAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrPolicyAttributes::GetClassData() const { return &_class_data_; }

void SLSrPolicyAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrPolicyAttributes *>(to)->MergeFrom(
      static_cast<const SLSrPolicyAttributes &>(from));
}


void SLSrPolicyAttributes::MergeFrom(const SLSrPolicyAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrPolicyAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  srv6_bsids_.MergeFrom(from.srv6_bsids_);
  if (from._internal_has_mpls_bsid()) {
    _internal_mutable_mpls_bsid()->::service_layer::SLSrMPLSBindingSID::MergeFrom(from._internal_mpls_bsid());
  }
  if (from._internal_transit_eligible() != 0) {
    _internal_set_transit_eligible(from._internal_transit_eligible());
  }
  if (from._internal_dataplane() != 0) {
    _internal_set_dataplane(from._internal_dataplane());
  }
  if (from._internal_profile_id() != 0) {
    _internal_set_profile_id(from._internal_profile_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrPolicyAttributes::CopyFrom(const SLSrPolicyAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrPolicyAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrPolicyAttributes::IsInitialized() const {
  return true;
}

void SLSrPolicyAttributes::InternalSwap(SLSrPolicyAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  srv6_bsids_.InternalSwap(&other->srv6_bsids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLSrPolicyAttributes, profile_id_)
      + sizeof(SLSrPolicyAttributes::profile_id_)
      - PROTOBUF_FIELD_OFFSET(SLSrPolicyAttributes, mpls_bsid_)>(
          reinterpret_cast<char*>(&mpls_bsid_),
          reinterpret_cast<char*>(&other->mpls_bsid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrPolicyAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[9]);
}

// ===================================================================

class SLSrCandidatePath::_Internal {
 public:
  using HasBits = decltype(std::declval<SLSrCandidatePath>()._has_bits_);
  static const ::service_layer::SLSrCandidatePathKey& key(const SLSrCandidatePath* msg);
  static void set_has_preference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::service_layer::SLSrDynamicCP& dynamic(const SLSrCandidatePath* msg);
  static const ::service_layer::SLSrExplicitCP& explicit_(const SLSrCandidatePath* msg);
};

const ::service_layer::SLSrCandidatePathKey&
SLSrCandidatePath::_Internal::key(const SLSrCandidatePath* msg) {
  return *msg->key_;
}
const ::service_layer::SLSrDynamicCP&
SLSrCandidatePath::_Internal::dynamic(const SLSrCandidatePath* msg) {
  return *msg->CP_.dynamic_;
}
const ::service_layer::SLSrExplicitCP&
SLSrCandidatePath::_Internal::explicit_(const SLSrCandidatePath* msg) {
  return *msg->CP_.explicit__;
}
void SLSrCandidatePath::clear_key() {
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
void SLSrCandidatePath::set_allocated_dynamic(::service_layer::SLSrDynamicCP* dynamic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_CP();
  if (dynamic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrDynamicCP>::GetOwningArena(dynamic);
    if (message_arena != submessage_arena) {
      dynamic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dynamic, submessage_arena);
    }
    set_has_dynamic();
    CP_.dynamic_ = dynamic;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrCandidatePath.dynamic)
}
void SLSrCandidatePath::set_allocated_explicit_(::service_layer::SLSrExplicitCP* explicit_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_CP();
  if (explicit_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrExplicitCP>::GetOwningArena(explicit_);
    if (message_arena != submessage_arena) {
      explicit_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, explicit_, submessage_arena);
    }
    set_has_explicit_();
    CP_.explicit__ = explicit_;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrCandidatePath.explicit)
}
SLSrCandidatePath::SLSrCandidatePath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrCandidatePath)
}
SLSrCandidatePath::SLSrCandidatePath(const SLSrCandidatePath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLSrCandidatePathKey(*from.key_);
  } else {
    key_ = nullptr;
  }
  preference_ = from.preference_;
  clear_has_CP();
  switch (from.CP_case()) {
    case kDynamic: {
      _internal_mutable_dynamic()->::service_layer::SLSrDynamicCP::MergeFrom(from._internal_dynamic());
      break;
    }
    case kExplicit: {
      _internal_mutable_explicit_()->::service_layer::SLSrExplicitCP::MergeFrom(from._internal_explicit_());
      break;
    }
    case CP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrCandidatePath)
}

inline void SLSrCandidatePath::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&preference_) -
    reinterpret_cast<char*>(&key_)) + sizeof(preference_));
clear_has_CP();
}

SLSrCandidatePath::~SLSrCandidatePath() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrCandidatePath)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrCandidatePath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete key_;
  if (has_CP()) {
    clear_CP();
  }
}

void SLSrCandidatePath::ArenaDtor(void* object) {
  SLSrCandidatePath* _this = reinterpret_cast< SLSrCandidatePath* >(object);
  (void)_this;
}
void SLSrCandidatePath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrCandidatePath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrCandidatePath::clear_CP() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLSrCandidatePath)
  switch (CP_case()) {
    case kDynamic: {
      if (GetArenaForAllocation() == nullptr) {
        delete CP_.dynamic_;
      }
      break;
    }
    case kExplicit: {
      if (GetArenaForAllocation() == nullptr) {
        delete CP_.explicit__;
      }
      break;
    }
    case CP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CP_NOT_SET;
}


void SLSrCandidatePath::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrCandidatePath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  preference_ = 0u;
  clear_CP();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrCandidatePath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLSrCandidatePathKey key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLSrCandidatePath.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 preference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_preference(&has_bits);
          preference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrDynamicCP dynamic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrExplicitCP explicit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_explicit_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrCandidatePath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrCandidatePath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLSrCandidatePathKey key = 2;
  if (this->_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key(this), target, stream);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLSrCandidatePath.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional uint32 preference = 4;
  if (_internal_has_preference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_preference(), target);
  }

  // .service_layer.SLSrDynamicCP dynamic = 5;
  if (_internal_has_dynamic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::dynamic(this), target, stream);
  }

  // .service_layer.SLSrExplicitCP explicit = 6;
  if (_internal_has_explicit_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::explicit_(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrCandidatePath)
  return target;
}

size_t SLSrCandidatePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrCandidatePath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .service_layer.SLSrCandidatePathKey key = 2;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // optional uint32 preference = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_preference());
  }

  switch (CP_case()) {
    // .service_layer.SLSrDynamicCP dynamic = 5;
    case kDynamic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *CP_.dynamic_);
      break;
    }
    // .service_layer.SLSrExplicitCP explicit = 6;
    case kExplicit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *CP_.explicit__);
      break;
    }
    case CP_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrCandidatePath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrCandidatePath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrCandidatePath::GetClassData() const { return &_class_data_; }

void SLSrCandidatePath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrCandidatePath *>(to)->MergeFrom(
      static_cast<const SLSrCandidatePath &>(from));
}


void SLSrCandidatePath::MergeFrom(const SLSrCandidatePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrCandidatePath)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_key()) {
    _internal_mutable_key()->::service_layer::SLSrCandidatePathKey::MergeFrom(from._internal_key());
  }
  if (from._internal_has_preference()) {
    _internal_set_preference(from._internal_preference());
  }
  switch (from.CP_case()) {
    case kDynamic: {
      _internal_mutable_dynamic()->::service_layer::SLSrDynamicCP::MergeFrom(from._internal_dynamic());
      break;
    }
    case kExplicit: {
      _internal_mutable_explicit_()->::service_layer::SLSrExplicitCP::MergeFrom(from._internal_explicit_());
      break;
    }
    case CP_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrCandidatePath::CopyFrom(const SLSrCandidatePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrCandidatePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrCandidatePath::IsInitialized() const {
  return true;
}

void SLSrCandidatePath::InternalSwap(SLSrCandidatePath* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLSrCandidatePath, preference_)
      + sizeof(SLSrCandidatePath::preference_)
      - PROTOBUF_FIELD_OFFSET(SLSrCandidatePath, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
  swap(CP_, other->CP_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrCandidatePath::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[10]);
}

// ===================================================================

class SLSrExplicitCP::_Internal {
 public:
};

void SLSrExplicitCP::clear_segment_list() {
  segment_list_.Clear();
}
SLSrExplicitCP::SLSrExplicitCP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  segment_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrExplicitCP)
}
SLSrExplicitCP::SLSrExplicitCP(const SLSrExplicitCP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      segment_list_(from.segment_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metric_type_ = from.metric_type_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrExplicitCP)
}

inline void SLSrExplicitCP::SharedCtor() {
metric_type_ = 0u;
}

SLSrExplicitCP::~SLSrExplicitCP() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrExplicitCP)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrExplicitCP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLSrExplicitCP::ArenaDtor(void* object) {
  SLSrExplicitCP* _this = reinterpret_cast< SLSrExplicitCP* >(object);
  (void)_this;
}
void SLSrExplicitCP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrExplicitCP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrExplicitCP::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrExplicitCP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segment_list_.Clear();
  metric_type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrExplicitCP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLSrSegmentList segment_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segment_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 metric_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          metric_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrExplicitCP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrExplicitCP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLSrSegmentList segment_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segment_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_segment_list(i), target, stream);
  }

  // uint32 metric_type = 3;
  if (this->_internal_metric_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_metric_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrExplicitCP)
  return target;
}

size_t SLSrExplicitCP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrExplicitCP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLSrSegmentList segment_list = 1;
  total_size += 1UL * this->_internal_segment_list_size();
  for (const auto& msg : this->segment_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 metric_type = 3;
  if (this->_internal_metric_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_metric_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrExplicitCP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrExplicitCP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrExplicitCP::GetClassData() const { return &_class_data_; }

void SLSrExplicitCP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrExplicitCP *>(to)->MergeFrom(
      static_cast<const SLSrExplicitCP &>(from));
}


void SLSrExplicitCP::MergeFrom(const SLSrExplicitCP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrExplicitCP)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  segment_list_.MergeFrom(from.segment_list_);
  if (from._internal_metric_type() != 0) {
    _internal_set_metric_type(from._internal_metric_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrExplicitCP::CopyFrom(const SLSrExplicitCP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrExplicitCP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrExplicitCP::IsInitialized() const {
  return true;
}

void SLSrExplicitCP::InternalSwap(SLSrExplicitCP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  segment_list_.InternalSwap(&other->segment_list_);
  swap(metric_type_, other->metric_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrExplicitCP::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[11]);
}

// ===================================================================

class SLSrDynamicCP::_Internal {
 public:
  static const ::service_layer::SLSrConstraints& constraints(const SLSrDynamicCP* msg);
};

const ::service_layer::SLSrConstraints&
SLSrDynamicCP::_Internal::constraints(const SLSrDynamicCP* msg) {
  return *msg->constraints_;
}
SLSrDynamicCP::SLSrDynamicCP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrDynamicCP)
}
SLSrDynamicCP::SLSrDynamicCP(const SLSrDynamicCP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_constraints()) {
    constraints_ = new ::service_layer::SLSrConstraints(*from.constraints_);
  } else {
    constraints_ = nullptr;
  }
  metric_type_ = from.metric_type_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrDynamicCP)
}

inline void SLSrDynamicCP::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&constraints_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&metric_type_) -
    reinterpret_cast<char*>(&constraints_)) + sizeof(metric_type_));
}

SLSrDynamicCP::~SLSrDynamicCP() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrDynamicCP)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrDynamicCP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete constraints_;
}

void SLSrDynamicCP::ArenaDtor(void* object) {
  SLSrDynamicCP* _this = reinterpret_cast< SLSrDynamicCP* >(object);
  (void)_this;
}
void SLSrDynamicCP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrDynamicCP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrDynamicCP::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrDynamicCP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && constraints_ != nullptr) {
    delete constraints_;
  }
  constraints_ = nullptr;
  metric_type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrDynamicCP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 metric_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          metric_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrConstraints constraints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_constraints(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrDynamicCP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrDynamicCP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 metric_type = 1;
  if (this->_internal_metric_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_metric_type(), target);
  }

  // .service_layer.SLSrConstraints constraints = 2;
  if (this->_internal_has_constraints()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::constraints(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrDynamicCP)
  return target;
}

size_t SLSrDynamicCP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrDynamicCP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLSrConstraints constraints = 2;
  if (this->_internal_has_constraints()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *constraints_);
  }

  // uint32 metric_type = 1;
  if (this->_internal_metric_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_metric_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrDynamicCP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrDynamicCP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrDynamicCP::GetClassData() const { return &_class_data_; }

void SLSrDynamicCP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrDynamicCP *>(to)->MergeFrom(
      static_cast<const SLSrDynamicCP &>(from));
}


void SLSrDynamicCP::MergeFrom(const SLSrDynamicCP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrDynamicCP)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_constraints()) {
    _internal_mutable_constraints()->::service_layer::SLSrConstraints::MergeFrom(from._internal_constraints());
  }
  if (from._internal_metric_type() != 0) {
    _internal_set_metric_type(from._internal_metric_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrDynamicCP::CopyFrom(const SLSrDynamicCP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrDynamicCP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrDynamicCP::IsInitialized() const {
  return true;
}

void SLSrDynamicCP::InternalSwap(SLSrDynamicCP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLSrDynamicCP, metric_type_)
      + sizeof(SLSrDynamicCP::metric_type_)
      - PROTOBUF_FIELD_OFFSET(SLSrDynamicCP, constraints_)>(
          reinterpret_cast<char*>(&constraints_),
          reinterpret_cast<char*>(&other->constraints_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrDynamicCP::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[12]);
}

// ===================================================================

class SLSrConstraints::_Internal {
 public:
  using HasBits = decltype(std::declval<SLSrConstraints>()._has_bits_);
  static const ::service_layer::SLSrAffinities& affinities(const SLSrConstraints* msg);
  static void set_has_sid_algo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::service_layer::SLSrAffinities&
SLSrConstraints::_Internal::affinities(const SLSrConstraints* msg) {
  return *msg->affinities_;
}
void SLSrConstraints::clear_affinities() {
  if (GetArenaForAllocation() == nullptr && affinities_ != nullptr) {
    delete affinities_;
  }
  affinities_ = nullptr;
}
SLSrConstraints::SLSrConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrConstraints)
}
SLSrConstraints::SLSrConstraints(const SLSrConstraints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_affinities()) {
    affinities_ = new ::service_layer::SLSrAffinities(*from.affinities_);
  } else {
    affinities_ = nullptr;
  }
  ::memcpy(&protection_, &from.protection_,
    static_cast<size_t>(reinterpret_cast<char*>(&maximum_sid_depth_) -
    reinterpret_cast<char*>(&protection_)) + sizeof(maximum_sid_depth_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrConstraints)
}

inline void SLSrConstraints::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&affinities_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maximum_sid_depth_) -
    reinterpret_cast<char*>(&affinities_)) + sizeof(maximum_sid_depth_));
}

SLSrConstraints::~SLSrConstraints() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrConstraints)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrConstraints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete affinities_;
}

void SLSrConstraints::ArenaDtor(void* object) {
  SLSrConstraints* _this = reinterpret_cast< SLSrConstraints* >(object);
  (void)_this;
}
void SLSrConstraints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrConstraints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrConstraints::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrConstraints)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && affinities_ != nullptr) {
    delete affinities_;
  }
  affinities_ = nullptr;
  protection_ = 0;
  sid_algo_ = 0u;
  maximum_sid_depth_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrConstraints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLSrAffinities affinities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_affinities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrteProtectionType protection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protection(static_cast<::service_layer::SLSrteProtectionType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sid_algo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_sid_algo(&has_bits);
          sid_algo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maximum_sid_depth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          maximum_sid_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrConstraints::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrConstraints)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLSrAffinities affinities = 1;
  if (this->_internal_has_affinities()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::affinities(this), target, stream);
  }

  // .service_layer.SLSrteProtectionType protection = 2;
  if (this->_internal_protection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_protection(), target);
  }

  // optional uint32 sid_algo = 3;
  if (_internal_has_sid_algo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sid_algo(), target);
  }

  // uint32 maximum_sid_depth = 4;
  if (this->_internal_maximum_sid_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_maximum_sid_depth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrConstraints)
  return target;
}

size_t SLSrConstraints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrConstraints)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLSrAffinities affinities = 1;
  if (this->_internal_has_affinities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *affinities_);
  }

  // .service_layer.SLSrteProtectionType protection = 2;
  if (this->_internal_protection() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protection());
  }

  // optional uint32 sid_algo = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sid_algo());
  }

  // uint32 maximum_sid_depth = 4;
  if (this->_internal_maximum_sid_depth() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_maximum_sid_depth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrConstraints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrConstraints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrConstraints::GetClassData() const { return &_class_data_; }

void SLSrConstraints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrConstraints *>(to)->MergeFrom(
      static_cast<const SLSrConstraints &>(from));
}


void SLSrConstraints::MergeFrom(const SLSrConstraints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_affinities()) {
    _internal_mutable_affinities()->::service_layer::SLSrAffinities::MergeFrom(from._internal_affinities());
  }
  if (from._internal_protection() != 0) {
    _internal_set_protection(from._internal_protection());
  }
  if (from._internal_has_sid_algo()) {
    _internal_set_sid_algo(from._internal_sid_algo());
  }
  if (from._internal_maximum_sid_depth() != 0) {
    _internal_set_maximum_sid_depth(from._internal_maximum_sid_depth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrConstraints::CopyFrom(const SLSrConstraints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrConstraints::IsInitialized() const {
  return true;
}

void SLSrConstraints::InternalSwap(SLSrConstraints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLSrConstraints, maximum_sid_depth_)
      + sizeof(SLSrConstraints::maximum_sid_depth_)
      - PROTOBUF_FIELD_OFFSET(SLSrConstraints, affinities_)>(
          reinterpret_cast<char*>(&affinities_),
          reinterpret_cast<char*>(&other->affinities_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrConstraints::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[13]);
}

// ===================================================================

class SLSrSrv6BindingSID::_Internal {
 public:
  static const ::service_layer::SLSrSrv6DynamicBindingSID& dynamic(const SLSrSrv6BindingSID* msg);
};

const ::service_layer::SLSrSrv6DynamicBindingSID&
SLSrSrv6BindingSID::_Internal::dynamic(const SLSrSrv6BindingSID* msg) {
  return *msg->type_.dynamic_;
}
void SLSrSrv6BindingSID::set_allocated_dynamic(::service_layer::SLSrSrv6DynamicBindingSID* dynamic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (dynamic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrSrv6DynamicBindingSID>::GetOwningArena(dynamic);
    if (message_arena != submessage_arena) {
      dynamic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dynamic, submessage_arena);
    }
    set_has_dynamic();
    type_.dynamic_ = dynamic;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrSrv6BindingSID.dynamic)
}
SLSrSrv6BindingSID::SLSrSrv6BindingSID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrSrv6BindingSID)
}
SLSrSrv6BindingSID::SLSrSrv6BindingSID(const SLSrSrv6BindingSID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kDynamic: {
      _internal_mutable_dynamic()->::service_layer::SLSrSrv6DynamicBindingSID::MergeFrom(from._internal_dynamic());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrSrv6BindingSID)
}

inline void SLSrSrv6BindingSID::SharedCtor() {
clear_has_type();
}

SLSrSrv6BindingSID::~SLSrSrv6BindingSID() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrSrv6BindingSID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrSrv6BindingSID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void SLSrSrv6BindingSID::ArenaDtor(void* object) {
  SLSrSrv6BindingSID* _this = reinterpret_cast< SLSrSrv6BindingSID* >(object);
  (void)_this;
}
void SLSrSrv6BindingSID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrSrv6BindingSID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrSrv6BindingSID::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLSrSrv6BindingSID)
  switch (type_case()) {
    case kDynamic: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.dynamic_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void SLSrSrv6BindingSID::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrSrv6BindingSID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrSrv6BindingSID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLSrSrv6DynamicBindingSID dynamic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrSrv6BindingSID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrSrv6BindingSID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLSrSrv6DynamicBindingSID dynamic = 2;
  if (_internal_has_dynamic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dynamic(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrSrv6BindingSID)
  return target;
}

size_t SLSrSrv6BindingSID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrSrv6BindingSID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .service_layer.SLSrSrv6DynamicBindingSID dynamic = 2;
    case kDynamic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.dynamic_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrSrv6BindingSID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrSrv6BindingSID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrSrv6BindingSID::GetClassData() const { return &_class_data_; }

void SLSrSrv6BindingSID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrSrv6BindingSID *>(to)->MergeFrom(
      static_cast<const SLSrSrv6BindingSID &>(from));
}


void SLSrSrv6BindingSID::MergeFrom(const SLSrSrv6BindingSID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrSrv6BindingSID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kDynamic: {
      _internal_mutable_dynamic()->::service_layer::SLSrSrv6DynamicBindingSID::MergeFrom(from._internal_dynamic());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrSrv6BindingSID::CopyFrom(const SLSrSrv6BindingSID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrSrv6BindingSID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrSrv6BindingSID::IsInitialized() const {
  return true;
}

void SLSrSrv6BindingSID::InternalSwap(SLSrSrv6BindingSID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrSrv6BindingSID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[14]);
}

// ===================================================================

class SLSrMPLSBindingSID::_Internal {
 public:
  using HasBits = decltype(std::declval<SLSrMPLSBindingSID>()._has_bits_);
  static void set_has_mpls_bsid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SLSrMPLSBindingSID::SLSrMPLSBindingSID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrMPLSBindingSID)
}
SLSrMPLSBindingSID::SLSrMPLSBindingSID(const SLSrMPLSBindingSID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mpls_bsid_ = from.mpls_bsid_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrMPLSBindingSID)
}

inline void SLSrMPLSBindingSID::SharedCtor() {
mpls_bsid_ = 0u;
}

SLSrMPLSBindingSID::~SLSrMPLSBindingSID() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrMPLSBindingSID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrMPLSBindingSID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLSrMPLSBindingSID::ArenaDtor(void* object) {
  SLSrMPLSBindingSID* _this = reinterpret_cast< SLSrMPLSBindingSID* >(object);
  (void)_this;
}
void SLSrMPLSBindingSID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrMPLSBindingSID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrMPLSBindingSID::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrMPLSBindingSID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mpls_bsid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrMPLSBindingSID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 mpls_bsid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mpls_bsid(&has_bits);
          mpls_bsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrMPLSBindingSID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrMPLSBindingSID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint32 mpls_bsid = 1;
  if (_internal_has_mpls_bsid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mpls_bsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrMPLSBindingSID)
  return target;
}

size_t SLSrMPLSBindingSID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrMPLSBindingSID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 mpls_bsid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mpls_bsid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrMPLSBindingSID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrMPLSBindingSID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrMPLSBindingSID::GetClassData() const { return &_class_data_; }

void SLSrMPLSBindingSID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrMPLSBindingSID *>(to)->MergeFrom(
      static_cast<const SLSrMPLSBindingSID &>(from));
}


void SLSrMPLSBindingSID::MergeFrom(const SLSrMPLSBindingSID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrMPLSBindingSID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mpls_bsid()) {
    _internal_set_mpls_bsid(from._internal_mpls_bsid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrMPLSBindingSID::CopyFrom(const SLSrMPLSBindingSID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrMPLSBindingSID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrMPLSBindingSID::IsInitialized() const {
  return true;
}

void SLSrMPLSBindingSID::InternalSwap(SLSrMPLSBindingSID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mpls_bsid_, other->mpls_bsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrMPLSBindingSID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[15]);
}

// ===================================================================

class SLSrSrv6DynamicBindingSID::_Internal {
 public:
};

SLSrSrv6DynamicBindingSID::SLSrSrv6DynamicBindingSID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrSrv6DynamicBindingSID)
}
SLSrSrv6DynamicBindingSID::SLSrSrv6DynamicBindingSID(const SLSrSrv6DynamicBindingSID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  behavior_ = from.behavior_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrSrv6DynamicBindingSID)
}

inline void SLSrSrv6DynamicBindingSID::SharedCtor() {
behavior_ = 0u;
}

SLSrSrv6DynamicBindingSID::~SLSrSrv6DynamicBindingSID() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrSrv6DynamicBindingSID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrSrv6DynamicBindingSID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLSrSrv6DynamicBindingSID::ArenaDtor(void* object) {
  SLSrSrv6DynamicBindingSID* _this = reinterpret_cast< SLSrSrv6DynamicBindingSID* >(object);
  (void)_this;
}
void SLSrSrv6DynamicBindingSID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrSrv6DynamicBindingSID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrSrv6DynamicBindingSID::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrSrv6DynamicBindingSID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  behavior_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrSrv6DynamicBindingSID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 behavior = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          behavior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrSrv6DynamicBindingSID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrSrv6DynamicBindingSID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 behavior = 1;
  if (this->_internal_behavior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_behavior(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrSrv6DynamicBindingSID)
  return target;
}

size_t SLSrSrv6DynamicBindingSID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrSrv6DynamicBindingSID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 behavior = 1;
  if (this->_internal_behavior() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_behavior());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrSrv6DynamicBindingSID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrSrv6DynamicBindingSID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrSrv6DynamicBindingSID::GetClassData() const { return &_class_data_; }

void SLSrSrv6DynamicBindingSID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrSrv6DynamicBindingSID *>(to)->MergeFrom(
      static_cast<const SLSrSrv6DynamicBindingSID &>(from));
}


void SLSrSrv6DynamicBindingSID::MergeFrom(const SLSrSrv6DynamicBindingSID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrSrv6DynamicBindingSID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_behavior() != 0) {
    _internal_set_behavior(from._internal_behavior());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrSrv6DynamicBindingSID::CopyFrom(const SLSrSrv6DynamicBindingSID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrSrv6DynamicBindingSID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrSrv6DynamicBindingSID::IsInitialized() const {
  return true;
}

void SLSrSrv6DynamicBindingSID::InternalSwap(SLSrSrv6DynamicBindingSID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(behavior_, other->behavior_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrSrv6DynamicBindingSID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service_layer::SLSrPolicyMsg* Arena::CreateMaybeMessage< ::service_layer::SLSrPolicyMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrPolicyMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrPolicyRsp_PolicyRsp* Arena::CreateMaybeMessage< ::service_layer::SLSrPolicyRsp_PolicyRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrPolicyRsp_PolicyRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrPolicyRsp* Arena::CreateMaybeMessage< ::service_layer::SLSrPolicyRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrPolicyRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrPolicyOpen* Arena::CreateMaybeMessage< ::service_layer::SLSrPolicyOpen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrPolicyOpen >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrPolicyRequests* Arena::CreateMaybeMessage< ::service_layer::SLSrPolicyRequests >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrPolicyRequests >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrPolicyReq* Arena::CreateMaybeMessage< ::service_layer::SLSrPolicyReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrPolicyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrEndOfReplay* Arena::CreateMaybeMessage< ::service_layer::SLSrEndOfReplay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrEndOfReplay >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrStartOfReplay* Arena::CreateMaybeMessage< ::service_layer::SLSrStartOfReplay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrStartOfReplay >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrPolicy* Arena::CreateMaybeMessage< ::service_layer::SLSrPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrPolicyAttributes* Arena::CreateMaybeMessage< ::service_layer::SLSrPolicyAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrPolicyAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrCandidatePath* Arena::CreateMaybeMessage< ::service_layer::SLSrCandidatePath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrCandidatePath >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrExplicitCP* Arena::CreateMaybeMessage< ::service_layer::SLSrExplicitCP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrExplicitCP >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrDynamicCP* Arena::CreateMaybeMessage< ::service_layer::SLSrDynamicCP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrDynamicCP >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrConstraints* Arena::CreateMaybeMessage< ::service_layer::SLSrConstraints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrConstraints >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrSrv6BindingSID* Arena::CreateMaybeMessage< ::service_layer::SLSrSrv6BindingSID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrSrv6BindingSID >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrMPLSBindingSID* Arena::CreateMaybeMessage< ::service_layer::SLSrMPLSBindingSID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrMPLSBindingSID >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrSrv6DynamicBindingSID* Arena::CreateMaybeMessage< ::service_layer::SLSrSrv6DynamicBindingSID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrSrv6DynamicBindingSID >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
