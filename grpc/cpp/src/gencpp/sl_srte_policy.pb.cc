// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_srte_policy.proto

#include "sl_srte_policy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace service_layer {
constexpr SLSrExplicitCP::SLSrExplicitCP(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : segment_list_(){}
struct SLSrExplicitCPDefaultTypeInternal {
  constexpr SLSrExplicitCPDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrExplicitCPDefaultTypeInternal() {}
  union {
    SLSrExplicitCP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrExplicitCPDefaultTypeInternal _SLSrExplicitCP_default_instance_;
constexpr SLSrConstraints_SegmentConstraints::SLSrConstraints_SegmentConstraints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : protection_(0)

  , sid_algo_(0u)
  , maximum_sid_depth_(0u){}
struct SLSrConstraints_SegmentConstraintsDefaultTypeInternal {
  constexpr SLSrConstraints_SegmentConstraintsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrConstraints_SegmentConstraintsDefaultTypeInternal() {}
  union {
    SLSrConstraints_SegmentConstraints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrConstraints_SegmentConstraintsDefaultTypeInternal _SLSrConstraints_SegmentConstraints_default_instance_;
constexpr SLSrConstraints::SLSrConstraints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : affinities_(nullptr)
  , metricbounds_(nullptr)
  , segment_constraints_(nullptr){}
struct SLSrConstraintsDefaultTypeInternal {
  constexpr SLSrConstraintsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrConstraintsDefaultTypeInternal() {}
  union {
    SLSrConstraints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrConstraintsDefaultTypeInternal _SLSrConstraints_default_instance_;
constexpr SLSrDynamicCP::SLSrDynamicCP(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : constraints_(nullptr)
  , metric_margin_(nullptr)
  , o_metric_(0)

  , delegate_(false){}
struct SLSrDynamicCPDefaultTypeInternal {
  constexpr SLSrDynamicCPDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrDynamicCPDefaultTypeInternal() {}
  union {
    SLSrDynamicCP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrDynamicCPDefaultTypeInternal _SLSrDynamicCP_default_instance_;
constexpr SLSrCandidatePath::SLSrCandidatePath(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_(nullptr)
  , preference_(0u)
  , dataplane_(0)

  , _oneof_case_{}{}
struct SLSrCandidatePathDefaultTypeInternal {
  constexpr SLSrCandidatePathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrCandidatePathDefaultTypeInternal() {}
  union {
    SLSrCandidatePath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrCandidatePathDefaultTypeInternal _SLSrCandidatePath_default_instance_;
constexpr SLSrv6BindingSID::SLSrv6BindingSID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : locator_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , behavior_(0u){}
struct SLSrv6BindingSIDDefaultTypeInternal {
  constexpr SLSrv6BindingSIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrv6BindingSIDDefaultTypeInternal() {}
  union {
    SLSrv6BindingSID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrv6BindingSIDDefaultTypeInternal _SLSrv6BindingSID_default_instance_;
constexpr SLSrBindingSID::SLSrBindingSID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : srv6_bsid_(nullptr)
  , allocation_mode_(0)

  , mpls_bsid_(0u){}
struct SLSrBindingSIDDefaultTypeInternal {
  constexpr SLSrBindingSIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrBindingSIDDefaultTypeInternal() {}
  union {
    SLSrBindingSID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrBindingSIDDefaultTypeInternal _SLSrBindingSID_default_instance_;
constexpr SLSrPolicy::SLSrPolicy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cps_()
  , key_(nullptr)
  , bsid_(nullptr)
  , transit_eligible_(false)
  , profile_id_(0u){}
struct SLSrPolicyDefaultTypeInternal {
  constexpr SLSrPolicyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrPolicyDefaultTypeInternal() {}
  union {
    SLSrPolicy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrPolicyDefaultTypeInternal _SLSrPolicy_default_instance_;
constexpr SLSrPolicyMsg::SLSrPolicyMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : policies_(){}
struct SLSrPolicyMsgDefaultTypeInternal {
  constexpr SLSrPolicyMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrPolicyMsgDefaultTypeInternal() {}
  union {
    SLSrPolicyMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrPolicyMsgDefaultTypeInternal _SLSrPolicyMsg_default_instance_;
constexpr SLSrPolicyOpRsp_PolicyRsp::SLSrPolicyOpRsp_PolicyRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : returncode_(nullptr)
  , key_(nullptr){}
struct SLSrPolicyOpRsp_PolicyRspDefaultTypeInternal {
  constexpr SLSrPolicyOpRsp_PolicyRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrPolicyOpRsp_PolicyRspDefaultTypeInternal() {}
  union {
    SLSrPolicyOpRsp_PolicyRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrPolicyOpRsp_PolicyRspDefaultTypeInternal _SLSrPolicyOpRsp_PolicyRsp_default_instance_;
constexpr SLSrPolicyOpRsp::SLSrPolicyOpRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : responses_(){}
struct SLSrPolicyOpRspDefaultTypeInternal {
  constexpr SLSrPolicyOpRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLSrPolicyOpRspDefaultTypeInternal() {}
  union {
    SLSrPolicyOpRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLSrPolicyOpRspDefaultTypeInternal _SLSrPolicyOpRsp_default_instance_;
}  // namespace service_layer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sl_5fsrte_5fpolicy_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sl_5fsrte_5fpolicy_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sl_5fsrte_5fpolicy_2eproto = nullptr;

const uint32_t TableStruct_sl_5fsrte_5fpolicy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrExplicitCP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrExplicitCP, segment_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrConstraints_SegmentConstraints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrConstraints_SegmentConstraints, protection_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrConstraints_SegmentConstraints, sid_algo_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrConstraints_SegmentConstraints, maximum_sid_depth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrConstraints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrConstraints, affinities_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrConstraints, metricbounds_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrConstraints, segment_constraints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrDynamicCP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrDynamicCP, o_metric_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrDynamicCP, constraints_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrDynamicCP, metric_margin_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrDynamicCP, delegate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrCandidatePath, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrCandidatePath, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrCandidatePath, key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrCandidatePath, name_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrCandidatePath, preference_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrCandidatePath, dataplane_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrCandidatePath, CP_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrv6BindingSID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrv6BindingSID, locator_name_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrv6BindingSID, behavior_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrBindingSID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrBindingSID, allocation_mode_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrBindingSID, mpls_bsid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrBindingSID, srv6_bsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicy, key_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicy, transit_eligible_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicy, cps_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicy, bsid_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicy, profile_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyMsg, policies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyOpRsp_PolicyRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyOpRsp_PolicyRsp, returncode_),
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyOpRsp_PolicyRsp, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyOpRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_layer::SLSrPolicyOpRsp, responses_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::service_layer::SLSrExplicitCP)},
  { 7, -1, -1, sizeof(::service_layer::SLSrConstraints_SegmentConstraints)},
  { 16, -1, -1, sizeof(::service_layer::SLSrConstraints)},
  { 25, -1, -1, sizeof(::service_layer::SLSrDynamicCP)},
  { 35, -1, -1, sizeof(::service_layer::SLSrCandidatePath)},
  { 48, -1, -1, sizeof(::service_layer::SLSrv6BindingSID)},
  { 56, -1, -1, sizeof(::service_layer::SLSrBindingSID)},
  { 65, -1, -1, sizeof(::service_layer::SLSrPolicy)},
  { 76, -1, -1, sizeof(::service_layer::SLSrPolicyMsg)},
  { 83, -1, -1, sizeof(::service_layer::SLSrPolicyOpRsp_PolicyRsp)},
  { 91, -1, -1, sizeof(::service_layer::SLSrPolicyOpRsp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrExplicitCP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrConstraints_SegmentConstraints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrConstraints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrDynamicCP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrCandidatePath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrv6BindingSID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrBindingSID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrPolicyMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrPolicyOpRsp_PolicyRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service_layer::_SLSrPolicyOpRsp_default_instance_),
};

const char descriptor_table_protodef_sl_5fsrte_5fpolicy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024sl_srte_policy.proto\022\rservice_layer\032\025s"
  "l_common_types.proto\032\022sl_sr_common.proto"
  "\"F\n\016SLSrExplicitCP\0224\n\014segment_list\030\001 \003(\013"
  "2\036.service_layer.SLSrSegmentList\"\356\003\n\017SLS"
  "rConstraints\0221\n\naffinities\030\001 \001(\0132\035.servi"
  "ce_layer.SLSrAffinities\0225\n\014metricBounds\030"
  "\002 \001(\0132\037.service_layer.SLSrMetricBounds\022N"
  "\n\023segment_constraints\030\003 \001(\01321.service_la"
  "yer.SLSrConstraints.SegmentConstraints\032\240"
  "\002\n\022SegmentConstraints\022T\n\nprotection\030\001 \001("
  "\0162@.service_layer.SLSrConstraints.Segmen"
  "tConstraints.ProtectionType\022\020\n\010sid_algo\030"
  "\002 \001(\r\022\031\n\021maximum_sid_depth\030\003 \001(\r\"\206\001\n\016Pro"
  "tectionType\022\035\n\031SL_SR_PROTECTED_PREFERRED"
  "\020\000\022\030\n\024SL_SR_PROTECTED_ONLY\020\001\022\037\n\033SL_SR_UN"
  "PROTECTED_PREFERRED\020\002\022\032\n\026SL_SR_UNPROTECT"
  "ED_ONLY\020\003\"\277\001\n\rSLSrDynamicCP\022/\n\010o_metric\030"
  "\001 \001(\0162\035.service_layer.SLSrMetricType\0223\n\013"
  "constraints\030\002 \001(\0132\036.service_layer.SLSrCo"
  "nstraints\0226\n\rmetric_margin\030\003 \001(\0132\037.servi"
  "ce_layer.SLSrMetricMargin\022\020\n\010delegate\030\004 "
  "\001(\010\"\202\002\n\021SLSrCandidatePath\0220\n\003key\030\001 \001(\0132#"
  ".service_layer.SLSrCandidatePathKey\022\014\n\004n"
  "ame\030\002 \001(\t\022\022\n\npreference\030\003 \001(\r\022/\n\tdatapla"
  "ne\030\004 \001(\0162\034.service_layer.SLSrDataplane\022/"
  "\n\007dynamic\030\005 \001(\0132\034.service_layer.SLSrDyna"
  "micCPH\000\0221\n\010explicit\030\006 \001(\0132\035.service_laye"
  "r.SLSrExplicitCPH\000B\004\n\002CP\":\n\020SLSrv6Bindin"
  "gSID\022\024\n\014locator_name\030\001 \001(\t\022\020\n\010behavior\030\002"
  " \001(\r\"\235\001\n\016SLSrBindingSID\022D\n\017allocation_mo"
  "de\030\001 \001(\0162+.service_layer.SLSrBindingSIDA"
  "llocationMode\022\021\n\tmpls_bsid\030\002 \001(\r\0222\n\tsrv6"
  "_bsid\030\003 \001(\0132\037.service_layer.SLSrv6Bindin"
  "gSID\"\301\001\n\nSLSrPolicy\022)\n\003key\030\001 \001(\0132\034.servi"
  "ce_layer.SLSrPolicyKey\022\030\n\020transit_eligib"
  "le\030\002 \001(\010\022-\n\003CPs\030\003 \003(\0132 .service_layer.SL"
  "SrCandidatePath\022+\n\004bsid\030\004 \001(\0132\035.service_"
  "layer.SLSrBindingSID\022\022\n\nprofile_id\030\005 \001(\r"
  "\"<\n\rSLSrPolicyMsg\022+\n\010policies\030\001 \003(\0132\031.se"
  "rvice_layer.SLSrPolicy\"\270\001\n\017SLSrPolicyOpR"
  "sp\022;\n\tresponses\030\001 \003(\0132(.service_layer.SL"
  "SrPolicyOpRsp.PolicyRsp\032h\n\tPolicyRsp\0220\n\n"
  "returnCode\030\001 \001(\0132\034.service_layer.SLError"
  "Status\022)\n\003key\030\002 \001(\0132\034.service_layer.SLSr"
  "PolicyKey*O\n\034SLSrBindingSIDAllocationMod"
  "e\022\027\n\023SL_SR_BSID_EXPLICIT\020\000\022\026\n\022SL_SR_BSID"
  "_DYNAMIC\020\0012\257\001\n\014SLSrtePolicy\022M\n\rSLSrPolic"
  "yAdd\022\034.service_layer.SLSrPolicyMsg\032\036.ser"
  "vice_layer.SLSrPolicyOpRsp\022P\n\020SLSrPolicy"
  "Delete\022\034.service_layer.SLSrPolicyMsg\032\036.s"
  "ervice_layer.SLSrPolicyOpRspBQZOgithub.c"
  "om/Cisco-service-layer/service-layer-obj"
  "model/grpc/protos;service_layerb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sl_5fsrte_5fpolicy_2eproto_deps[2] = {
  &::descriptor_table_sl_5fcommon_5ftypes_2eproto,
  &::descriptor_table_sl_5fsr_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sl_5fsrte_5fpolicy_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fsrte_5fpolicy_2eproto = {
  false, false, 2119, descriptor_table_protodef_sl_5fsrte_5fpolicy_2eproto, "sl_srte_policy.proto", 
  &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once, descriptor_table_sl_5fsrte_5fpolicy_2eproto_deps, 2, 11,
  schemas, file_default_instances, TableStruct_sl_5fsrte_5fpolicy_2eproto::offsets,
  file_level_metadata_sl_5fsrte_5fpolicy_2eproto, file_level_enum_descriptors_sl_5fsrte_5fpolicy_2eproto, file_level_service_descriptors_sl_5fsrte_5fpolicy_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter() {
  return &descriptor_table_sl_5fsrte_5fpolicy_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sl_5fsrte_5fpolicy_2eproto(&descriptor_table_sl_5fsrte_5fpolicy_2eproto);
namespace service_layer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrConstraints_SegmentConstraints_ProtectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fsrte_5fpolicy_2eproto);
  return file_level_enum_descriptors_sl_5fsrte_5fpolicy_2eproto[0];
}
bool SLSrConstraints_SegmentConstraints_ProtectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SLSrConstraints_SegmentConstraints_ProtectionType SLSrConstraints_SegmentConstraints::SL_SR_PROTECTED_PREFERRED;
constexpr SLSrConstraints_SegmentConstraints_ProtectionType SLSrConstraints_SegmentConstraints::SL_SR_PROTECTED_ONLY;
constexpr SLSrConstraints_SegmentConstraints_ProtectionType SLSrConstraints_SegmentConstraints::SL_SR_UNPROTECTED_PREFERRED;
constexpr SLSrConstraints_SegmentConstraints_ProtectionType SLSrConstraints_SegmentConstraints::SL_SR_UNPROTECTED_ONLY;
constexpr SLSrConstraints_SegmentConstraints_ProtectionType SLSrConstraints_SegmentConstraints::ProtectionType_MIN;
constexpr SLSrConstraints_SegmentConstraints_ProtectionType SLSrConstraints_SegmentConstraints::ProtectionType_MAX;
constexpr int SLSrConstraints_SegmentConstraints::ProtectionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrBindingSIDAllocationMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sl_5fsrte_5fpolicy_2eproto);
  return file_level_enum_descriptors_sl_5fsrte_5fpolicy_2eproto[1];
}
bool SLSrBindingSIDAllocationMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SLSrExplicitCP::_Internal {
 public:
};

void SLSrExplicitCP::clear_segment_list() {
  segment_list_.Clear();
}
SLSrExplicitCP::SLSrExplicitCP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  segment_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrExplicitCP)
}
SLSrExplicitCP::SLSrExplicitCP(const SLSrExplicitCP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      segment_list_(from.segment_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrExplicitCP)
}

inline void SLSrExplicitCP::SharedCtor() {
}

SLSrExplicitCP::~SLSrExplicitCP() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrExplicitCP)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrExplicitCP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLSrExplicitCP::ArenaDtor(void* object) {
  SLSrExplicitCP* _this = reinterpret_cast< SLSrExplicitCP* >(object);
  (void)_this;
}
void SLSrExplicitCP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrExplicitCP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrExplicitCP::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrExplicitCP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segment_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrExplicitCP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLSrSegmentList segment_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segment_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrExplicitCP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrExplicitCP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLSrSegmentList segment_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segment_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_segment_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrExplicitCP)
  return target;
}

size_t SLSrExplicitCP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrExplicitCP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLSrSegmentList segment_list = 1;
  total_size += 1UL * this->_internal_segment_list_size();
  for (const auto& msg : this->segment_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrExplicitCP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrExplicitCP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrExplicitCP::GetClassData() const { return &_class_data_; }

void SLSrExplicitCP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrExplicitCP *>(to)->MergeFrom(
      static_cast<const SLSrExplicitCP &>(from));
}


void SLSrExplicitCP::MergeFrom(const SLSrExplicitCP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrExplicitCP)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  segment_list_.MergeFrom(from.segment_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrExplicitCP::CopyFrom(const SLSrExplicitCP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrExplicitCP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrExplicitCP::IsInitialized() const {
  return true;
}

void SLSrExplicitCP::InternalSwap(SLSrExplicitCP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  segment_list_.InternalSwap(&other->segment_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrExplicitCP::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[0]);
}

// ===================================================================

class SLSrConstraints_SegmentConstraints::_Internal {
 public:
};

SLSrConstraints_SegmentConstraints::SLSrConstraints_SegmentConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrConstraints.SegmentConstraints)
}
SLSrConstraints_SegmentConstraints::SLSrConstraints_SegmentConstraints(const SLSrConstraints_SegmentConstraints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&protection_, &from.protection_,
    static_cast<size_t>(reinterpret_cast<char*>(&maximum_sid_depth_) -
    reinterpret_cast<char*>(&protection_)) + sizeof(maximum_sid_depth_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrConstraints.SegmentConstraints)
}

inline void SLSrConstraints_SegmentConstraints::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&protection_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maximum_sid_depth_) -
    reinterpret_cast<char*>(&protection_)) + sizeof(maximum_sid_depth_));
}

SLSrConstraints_SegmentConstraints::~SLSrConstraints_SegmentConstraints() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrConstraints.SegmentConstraints)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrConstraints_SegmentConstraints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLSrConstraints_SegmentConstraints::ArenaDtor(void* object) {
  SLSrConstraints_SegmentConstraints* _this = reinterpret_cast< SLSrConstraints_SegmentConstraints* >(object);
  (void)_this;
}
void SLSrConstraints_SegmentConstraints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrConstraints_SegmentConstraints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrConstraints_SegmentConstraints::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrConstraints.SegmentConstraints)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&protection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_sid_depth_) -
      reinterpret_cast<char*>(&protection_)) + sizeof(maximum_sid_depth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrConstraints_SegmentConstraints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLSrConstraints.SegmentConstraints.ProtectionType protection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protection(static_cast<::service_layer::SLSrConstraints_SegmentConstraints_ProtectionType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 sid_algo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          sid_algo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maximum_sid_depth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          maximum_sid_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrConstraints_SegmentConstraints::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrConstraints.SegmentConstraints)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLSrConstraints.SegmentConstraints.ProtectionType protection = 1;
  if (this->_internal_protection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_protection(), target);
  }

  // uint32 sid_algo = 2;
  if (this->_internal_sid_algo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sid_algo(), target);
  }

  // uint32 maximum_sid_depth = 3;
  if (this->_internal_maximum_sid_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maximum_sid_depth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrConstraints.SegmentConstraints)
  return target;
}

size_t SLSrConstraints_SegmentConstraints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrConstraints.SegmentConstraints)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLSrConstraints.SegmentConstraints.ProtectionType protection = 1;
  if (this->_internal_protection() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protection());
  }

  // uint32 sid_algo = 2;
  if (this->_internal_sid_algo() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sid_algo());
  }

  // uint32 maximum_sid_depth = 3;
  if (this->_internal_maximum_sid_depth() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_maximum_sid_depth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrConstraints_SegmentConstraints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrConstraints_SegmentConstraints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrConstraints_SegmentConstraints::GetClassData() const { return &_class_data_; }

void SLSrConstraints_SegmentConstraints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrConstraints_SegmentConstraints *>(to)->MergeFrom(
      static_cast<const SLSrConstraints_SegmentConstraints &>(from));
}


void SLSrConstraints_SegmentConstraints::MergeFrom(const SLSrConstraints_SegmentConstraints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrConstraints.SegmentConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_protection() != 0) {
    _internal_set_protection(from._internal_protection());
  }
  if (from._internal_sid_algo() != 0) {
    _internal_set_sid_algo(from._internal_sid_algo());
  }
  if (from._internal_maximum_sid_depth() != 0) {
    _internal_set_maximum_sid_depth(from._internal_maximum_sid_depth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrConstraints_SegmentConstraints::CopyFrom(const SLSrConstraints_SegmentConstraints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrConstraints.SegmentConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrConstraints_SegmentConstraints::IsInitialized() const {
  return true;
}

void SLSrConstraints_SegmentConstraints::InternalSwap(SLSrConstraints_SegmentConstraints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLSrConstraints_SegmentConstraints, maximum_sid_depth_)
      + sizeof(SLSrConstraints_SegmentConstraints::maximum_sid_depth_)
      - PROTOBUF_FIELD_OFFSET(SLSrConstraints_SegmentConstraints, protection_)>(
          reinterpret_cast<char*>(&protection_),
          reinterpret_cast<char*>(&other->protection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrConstraints_SegmentConstraints::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[1]);
}

// ===================================================================

class SLSrConstraints::_Internal {
 public:
  static const ::service_layer::SLSrAffinities& affinities(const SLSrConstraints* msg);
  static const ::service_layer::SLSrMetricBounds& metricbounds(const SLSrConstraints* msg);
  static const ::service_layer::SLSrConstraints_SegmentConstraints& segment_constraints(const SLSrConstraints* msg);
};

const ::service_layer::SLSrAffinities&
SLSrConstraints::_Internal::affinities(const SLSrConstraints* msg) {
  return *msg->affinities_;
}
const ::service_layer::SLSrMetricBounds&
SLSrConstraints::_Internal::metricbounds(const SLSrConstraints* msg) {
  return *msg->metricbounds_;
}
const ::service_layer::SLSrConstraints_SegmentConstraints&
SLSrConstraints::_Internal::segment_constraints(const SLSrConstraints* msg) {
  return *msg->segment_constraints_;
}
void SLSrConstraints::clear_affinities() {
  if (GetArenaForAllocation() == nullptr && affinities_ != nullptr) {
    delete affinities_;
  }
  affinities_ = nullptr;
}
void SLSrConstraints::clear_metricbounds() {
  if (GetArenaForAllocation() == nullptr && metricbounds_ != nullptr) {
    delete metricbounds_;
  }
  metricbounds_ = nullptr;
}
SLSrConstraints::SLSrConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrConstraints)
}
SLSrConstraints::SLSrConstraints(const SLSrConstraints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_affinities()) {
    affinities_ = new ::service_layer::SLSrAffinities(*from.affinities_);
  } else {
    affinities_ = nullptr;
  }
  if (from._internal_has_metricbounds()) {
    metricbounds_ = new ::service_layer::SLSrMetricBounds(*from.metricbounds_);
  } else {
    metricbounds_ = nullptr;
  }
  if (from._internal_has_segment_constraints()) {
    segment_constraints_ = new ::service_layer::SLSrConstraints_SegmentConstraints(*from.segment_constraints_);
  } else {
    segment_constraints_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrConstraints)
}

inline void SLSrConstraints::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&affinities_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&segment_constraints_) -
    reinterpret_cast<char*>(&affinities_)) + sizeof(segment_constraints_));
}

SLSrConstraints::~SLSrConstraints() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrConstraints)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrConstraints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete affinities_;
  if (this != internal_default_instance()) delete metricbounds_;
  if (this != internal_default_instance()) delete segment_constraints_;
}

void SLSrConstraints::ArenaDtor(void* object) {
  SLSrConstraints* _this = reinterpret_cast< SLSrConstraints* >(object);
  (void)_this;
}
void SLSrConstraints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrConstraints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrConstraints::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrConstraints)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && affinities_ != nullptr) {
    delete affinities_;
  }
  affinities_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metricbounds_ != nullptr) {
    delete metricbounds_;
  }
  metricbounds_ = nullptr;
  if (GetArenaForAllocation() == nullptr && segment_constraints_ != nullptr) {
    delete segment_constraints_;
  }
  segment_constraints_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrConstraints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLSrAffinities affinities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_affinities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrMetricBounds metricBounds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metricbounds(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrConstraints.SegmentConstraints segment_constraints = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_segment_constraints(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrConstraints::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrConstraints)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLSrAffinities affinities = 1;
  if (this->_internal_has_affinities()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::affinities(this), target, stream);
  }

  // .service_layer.SLSrMetricBounds metricBounds = 2;
  if (this->_internal_has_metricbounds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::metricbounds(this), target, stream);
  }

  // .service_layer.SLSrConstraints.SegmentConstraints segment_constraints = 3;
  if (this->_internal_has_segment_constraints()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::segment_constraints(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrConstraints)
  return target;
}

size_t SLSrConstraints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrConstraints)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLSrAffinities affinities = 1;
  if (this->_internal_has_affinities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *affinities_);
  }

  // .service_layer.SLSrMetricBounds metricBounds = 2;
  if (this->_internal_has_metricbounds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metricbounds_);
  }

  // .service_layer.SLSrConstraints.SegmentConstraints segment_constraints = 3;
  if (this->_internal_has_segment_constraints()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *segment_constraints_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrConstraints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrConstraints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrConstraints::GetClassData() const { return &_class_data_; }

void SLSrConstraints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrConstraints *>(to)->MergeFrom(
      static_cast<const SLSrConstraints &>(from));
}


void SLSrConstraints::MergeFrom(const SLSrConstraints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_affinities()) {
    _internal_mutable_affinities()->::service_layer::SLSrAffinities::MergeFrom(from._internal_affinities());
  }
  if (from._internal_has_metricbounds()) {
    _internal_mutable_metricbounds()->::service_layer::SLSrMetricBounds::MergeFrom(from._internal_metricbounds());
  }
  if (from._internal_has_segment_constraints()) {
    _internal_mutable_segment_constraints()->::service_layer::SLSrConstraints_SegmentConstraints::MergeFrom(from._internal_segment_constraints());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrConstraints::CopyFrom(const SLSrConstraints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrConstraints::IsInitialized() const {
  return true;
}

void SLSrConstraints::InternalSwap(SLSrConstraints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLSrConstraints, segment_constraints_)
      + sizeof(SLSrConstraints::segment_constraints_)
      - PROTOBUF_FIELD_OFFSET(SLSrConstraints, affinities_)>(
          reinterpret_cast<char*>(&affinities_),
          reinterpret_cast<char*>(&other->affinities_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrConstraints::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[2]);
}

// ===================================================================

class SLSrDynamicCP::_Internal {
 public:
  static const ::service_layer::SLSrConstraints& constraints(const SLSrDynamicCP* msg);
  static const ::service_layer::SLSrMetricMargin& metric_margin(const SLSrDynamicCP* msg);
};

const ::service_layer::SLSrConstraints&
SLSrDynamicCP::_Internal::constraints(const SLSrDynamicCP* msg) {
  return *msg->constraints_;
}
const ::service_layer::SLSrMetricMargin&
SLSrDynamicCP::_Internal::metric_margin(const SLSrDynamicCP* msg) {
  return *msg->metric_margin_;
}
void SLSrDynamicCP::clear_metric_margin() {
  if (GetArenaForAllocation() == nullptr && metric_margin_ != nullptr) {
    delete metric_margin_;
  }
  metric_margin_ = nullptr;
}
SLSrDynamicCP::SLSrDynamicCP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrDynamicCP)
}
SLSrDynamicCP::SLSrDynamicCP(const SLSrDynamicCP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_constraints()) {
    constraints_ = new ::service_layer::SLSrConstraints(*from.constraints_);
  } else {
    constraints_ = nullptr;
  }
  if (from._internal_has_metric_margin()) {
    metric_margin_ = new ::service_layer::SLSrMetricMargin(*from.metric_margin_);
  } else {
    metric_margin_ = nullptr;
  }
  ::memcpy(&o_metric_, &from.o_metric_,
    static_cast<size_t>(reinterpret_cast<char*>(&delegate_) -
    reinterpret_cast<char*>(&o_metric_)) + sizeof(delegate_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrDynamicCP)
}

inline void SLSrDynamicCP::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&constraints_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&delegate_) -
    reinterpret_cast<char*>(&constraints_)) + sizeof(delegate_));
}

SLSrDynamicCP::~SLSrDynamicCP() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrDynamicCP)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrDynamicCP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete constraints_;
  if (this != internal_default_instance()) delete metric_margin_;
}

void SLSrDynamicCP::ArenaDtor(void* object) {
  SLSrDynamicCP* _this = reinterpret_cast< SLSrDynamicCP* >(object);
  (void)_this;
}
void SLSrDynamicCP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrDynamicCP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrDynamicCP::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrDynamicCP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && constraints_ != nullptr) {
    delete constraints_;
  }
  constraints_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metric_margin_ != nullptr) {
    delete metric_margin_;
  }
  metric_margin_ = nullptr;
  ::memset(&o_metric_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delegate_) -
      reinterpret_cast<char*>(&o_metric_)) + sizeof(delegate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrDynamicCP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLSrMetricType o_metric = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_o_metric(static_cast<::service_layer::SLSrMetricType>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrConstraints constraints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_constraints(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrMetricMargin metric_margin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_metric_margin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool delegate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          delegate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrDynamicCP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrDynamicCP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLSrMetricType o_metric = 1;
  if (this->_internal_o_metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_o_metric(), target);
  }

  // .service_layer.SLSrConstraints constraints = 2;
  if (this->_internal_has_constraints()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::constraints(this), target, stream);
  }

  // .service_layer.SLSrMetricMargin metric_margin = 3;
  if (this->_internal_has_metric_margin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::metric_margin(this), target, stream);
  }

  // bool delegate = 4;
  if (this->_internal_delegate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_delegate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrDynamicCP)
  return target;
}

size_t SLSrDynamicCP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrDynamicCP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLSrConstraints constraints = 2;
  if (this->_internal_has_constraints()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *constraints_);
  }

  // .service_layer.SLSrMetricMargin metric_margin = 3;
  if (this->_internal_has_metric_margin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metric_margin_);
  }

  // .service_layer.SLSrMetricType o_metric = 1;
  if (this->_internal_o_metric() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_o_metric());
  }

  // bool delegate = 4;
  if (this->_internal_delegate() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrDynamicCP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrDynamicCP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrDynamicCP::GetClassData() const { return &_class_data_; }

void SLSrDynamicCP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrDynamicCP *>(to)->MergeFrom(
      static_cast<const SLSrDynamicCP &>(from));
}


void SLSrDynamicCP::MergeFrom(const SLSrDynamicCP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrDynamicCP)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_constraints()) {
    _internal_mutable_constraints()->::service_layer::SLSrConstraints::MergeFrom(from._internal_constraints());
  }
  if (from._internal_has_metric_margin()) {
    _internal_mutable_metric_margin()->::service_layer::SLSrMetricMargin::MergeFrom(from._internal_metric_margin());
  }
  if (from._internal_o_metric() != 0) {
    _internal_set_o_metric(from._internal_o_metric());
  }
  if (from._internal_delegate() != 0) {
    _internal_set_delegate(from._internal_delegate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrDynamicCP::CopyFrom(const SLSrDynamicCP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrDynamicCP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrDynamicCP::IsInitialized() const {
  return true;
}

void SLSrDynamicCP::InternalSwap(SLSrDynamicCP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLSrDynamicCP, delegate_)
      + sizeof(SLSrDynamicCP::delegate_)
      - PROTOBUF_FIELD_OFFSET(SLSrDynamicCP, constraints_)>(
          reinterpret_cast<char*>(&constraints_),
          reinterpret_cast<char*>(&other->constraints_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrDynamicCP::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[3]);
}

// ===================================================================

class SLSrCandidatePath::_Internal {
 public:
  static const ::service_layer::SLSrCandidatePathKey& key(const SLSrCandidatePath* msg);
  static const ::service_layer::SLSrDynamicCP& dynamic(const SLSrCandidatePath* msg);
  static const ::service_layer::SLSrExplicitCP& explicit_(const SLSrCandidatePath* msg);
};

const ::service_layer::SLSrCandidatePathKey&
SLSrCandidatePath::_Internal::key(const SLSrCandidatePath* msg) {
  return *msg->key_;
}
const ::service_layer::SLSrDynamicCP&
SLSrCandidatePath::_Internal::dynamic(const SLSrCandidatePath* msg) {
  return *msg->CP_.dynamic_;
}
const ::service_layer::SLSrExplicitCP&
SLSrCandidatePath::_Internal::explicit_(const SLSrCandidatePath* msg) {
  return *msg->CP_.explicit__;
}
void SLSrCandidatePath::clear_key() {
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
void SLSrCandidatePath::set_allocated_dynamic(::service_layer::SLSrDynamicCP* dynamic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_CP();
  if (dynamic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrDynamicCP>::GetOwningArena(dynamic);
    if (message_arena != submessage_arena) {
      dynamic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dynamic, submessage_arena);
    }
    set_has_dynamic();
    CP_.dynamic_ = dynamic;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrCandidatePath.dynamic)
}
void SLSrCandidatePath::set_allocated_explicit_(::service_layer::SLSrExplicitCP* explicit_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_CP();
  if (explicit_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrExplicitCP>::GetOwningArena(explicit_);
    if (message_arena != submessage_arena) {
      explicit_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, explicit_, submessage_arena);
    }
    set_has_explicit_();
    CP_.explicit__ = explicit_;
  }
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrCandidatePath.explicit)
}
SLSrCandidatePath::SLSrCandidatePath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrCandidatePath)
}
SLSrCandidatePath::SLSrCandidatePath(const SLSrCandidatePath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLSrCandidatePathKey(*from.key_);
  } else {
    key_ = nullptr;
  }
  ::memcpy(&preference_, &from.preference_,
    static_cast<size_t>(reinterpret_cast<char*>(&dataplane_) -
    reinterpret_cast<char*>(&preference_)) + sizeof(dataplane_));
  clear_has_CP();
  switch (from.CP_case()) {
    case kDynamic: {
      _internal_mutable_dynamic()->::service_layer::SLSrDynamicCP::MergeFrom(from._internal_dynamic());
      break;
    }
    case kExplicit: {
      _internal_mutable_explicit_()->::service_layer::SLSrExplicitCP::MergeFrom(from._internal_explicit_());
      break;
    }
    case CP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrCandidatePath)
}

inline void SLSrCandidatePath::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dataplane_) -
    reinterpret_cast<char*>(&key_)) + sizeof(dataplane_));
clear_has_CP();
}

SLSrCandidatePath::~SLSrCandidatePath() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrCandidatePath)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrCandidatePath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete key_;
  if (has_CP()) {
    clear_CP();
  }
}

void SLSrCandidatePath::ArenaDtor(void* object) {
  SLSrCandidatePath* _this = reinterpret_cast< SLSrCandidatePath* >(object);
  (void)_this;
}
void SLSrCandidatePath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrCandidatePath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrCandidatePath::clear_CP() {
// @@protoc_insertion_point(one_of_clear_start:service_layer.SLSrCandidatePath)
  switch (CP_case()) {
    case kDynamic: {
      if (GetArenaForAllocation() == nullptr) {
        delete CP_.dynamic_;
      }
      break;
    }
    case kExplicit: {
      if (GetArenaForAllocation() == nullptr) {
        delete CP_.explicit__;
      }
      break;
    }
    case CP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CP_NOT_SET;
}


void SLSrCandidatePath::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrCandidatePath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  ::memset(&preference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dataplane_) -
      reinterpret_cast<char*>(&preference_)) + sizeof(dataplane_));
  clear_CP();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrCandidatePath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLSrCandidatePathKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLSrCandidatePath.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 preference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          preference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrDataplane dataplane = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dataplane(static_cast<::service_layer::SLSrDataplane>(val));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrDynamicCP dynamic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrExplicitCP explicit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_explicit_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrCandidatePath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrCandidatePath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLSrCandidatePathKey key = 1;
  if (this->_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLSrCandidatePath.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 preference = 3;
  if (this->_internal_preference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_preference(), target);
  }

  // .service_layer.SLSrDataplane dataplane = 4;
  if (this->_internal_dataplane() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_dataplane(), target);
  }

  // .service_layer.SLSrDynamicCP dynamic = 5;
  if (_internal_has_dynamic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::dynamic(this), target, stream);
  }

  // .service_layer.SLSrExplicitCP explicit = 6;
  if (_internal_has_explicit_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::explicit_(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrCandidatePath)
  return target;
}

size_t SLSrCandidatePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrCandidatePath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .service_layer.SLSrCandidatePathKey key = 1;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // uint32 preference = 3;
  if (this->_internal_preference() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_preference());
  }

  // .service_layer.SLSrDataplane dataplane = 4;
  if (this->_internal_dataplane() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dataplane());
  }

  switch (CP_case()) {
    // .service_layer.SLSrDynamicCP dynamic = 5;
    case kDynamic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *CP_.dynamic_);
      break;
    }
    // .service_layer.SLSrExplicitCP explicit = 6;
    case kExplicit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *CP_.explicit__);
      break;
    }
    case CP_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrCandidatePath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrCandidatePath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrCandidatePath::GetClassData() const { return &_class_data_; }

void SLSrCandidatePath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrCandidatePath *>(to)->MergeFrom(
      static_cast<const SLSrCandidatePath &>(from));
}


void SLSrCandidatePath::MergeFrom(const SLSrCandidatePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrCandidatePath)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_key()) {
    _internal_mutable_key()->::service_layer::SLSrCandidatePathKey::MergeFrom(from._internal_key());
  }
  if (from._internal_preference() != 0) {
    _internal_set_preference(from._internal_preference());
  }
  if (from._internal_dataplane() != 0) {
    _internal_set_dataplane(from._internal_dataplane());
  }
  switch (from.CP_case()) {
    case kDynamic: {
      _internal_mutable_dynamic()->::service_layer::SLSrDynamicCP::MergeFrom(from._internal_dynamic());
      break;
    }
    case kExplicit: {
      _internal_mutable_explicit_()->::service_layer::SLSrExplicitCP::MergeFrom(from._internal_explicit_());
      break;
    }
    case CP_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrCandidatePath::CopyFrom(const SLSrCandidatePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrCandidatePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrCandidatePath::IsInitialized() const {
  return true;
}

void SLSrCandidatePath::InternalSwap(SLSrCandidatePath* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLSrCandidatePath, dataplane_)
      + sizeof(SLSrCandidatePath::dataplane_)
      - PROTOBUF_FIELD_OFFSET(SLSrCandidatePath, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
  swap(CP_, other->CP_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrCandidatePath::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[4]);
}

// ===================================================================

class SLSrv6BindingSID::_Internal {
 public:
};

SLSrv6BindingSID::SLSrv6BindingSID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrv6BindingSID)
}
SLSrv6BindingSID::SLSrv6BindingSID(const SLSrv6BindingSID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  locator_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    locator_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_locator_name().empty()) {
    locator_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_locator_name(), 
      GetArenaForAllocation());
  }
  behavior_ = from.behavior_;
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrv6BindingSID)
}

inline void SLSrv6BindingSID::SharedCtor() {
locator_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  locator_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
behavior_ = 0u;
}

SLSrv6BindingSID::~SLSrv6BindingSID() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrv6BindingSID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrv6BindingSID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  locator_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLSrv6BindingSID::ArenaDtor(void* object) {
  SLSrv6BindingSID* _this = reinterpret_cast< SLSrv6BindingSID* >(object);
  (void)_this;
}
void SLSrv6BindingSID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrv6BindingSID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrv6BindingSID::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrv6BindingSID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locator_name_.ClearToEmpty();
  behavior_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrv6BindingSID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string locator_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_locator_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service_layer.SLSrv6BindingSID.locator_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 behavior = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          behavior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrv6BindingSID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrv6BindingSID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string locator_name = 1;
  if (!this->_internal_locator_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locator_name().data(), static_cast<int>(this->_internal_locator_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_layer.SLSrv6BindingSID.locator_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_locator_name(), target);
  }

  // uint32 behavior = 2;
  if (this->_internal_behavior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_behavior(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrv6BindingSID)
  return target;
}

size_t SLSrv6BindingSID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrv6BindingSID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string locator_name = 1;
  if (!this->_internal_locator_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locator_name());
  }

  // uint32 behavior = 2;
  if (this->_internal_behavior() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_behavior());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrv6BindingSID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrv6BindingSID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrv6BindingSID::GetClassData() const { return &_class_data_; }

void SLSrv6BindingSID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrv6BindingSID *>(to)->MergeFrom(
      static_cast<const SLSrv6BindingSID &>(from));
}


void SLSrv6BindingSID::MergeFrom(const SLSrv6BindingSID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrv6BindingSID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_locator_name().empty()) {
    _internal_set_locator_name(from._internal_locator_name());
  }
  if (from._internal_behavior() != 0) {
    _internal_set_behavior(from._internal_behavior());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrv6BindingSID::CopyFrom(const SLSrv6BindingSID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrv6BindingSID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrv6BindingSID::IsInitialized() const {
  return true;
}

void SLSrv6BindingSID::InternalSwap(SLSrv6BindingSID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &locator_name_, lhs_arena,
      &other->locator_name_, rhs_arena
  );
  swap(behavior_, other->behavior_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrv6BindingSID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[5]);
}

// ===================================================================

class SLSrBindingSID::_Internal {
 public:
  static const ::service_layer::SLSrv6BindingSID& srv6_bsid(const SLSrBindingSID* msg);
};

const ::service_layer::SLSrv6BindingSID&
SLSrBindingSID::_Internal::srv6_bsid(const SLSrBindingSID* msg) {
  return *msg->srv6_bsid_;
}
SLSrBindingSID::SLSrBindingSID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrBindingSID)
}
SLSrBindingSID::SLSrBindingSID(const SLSrBindingSID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_srv6_bsid()) {
    srv6_bsid_ = new ::service_layer::SLSrv6BindingSID(*from.srv6_bsid_);
  } else {
    srv6_bsid_ = nullptr;
  }
  ::memcpy(&allocation_mode_, &from.allocation_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&mpls_bsid_) -
    reinterpret_cast<char*>(&allocation_mode_)) + sizeof(mpls_bsid_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrBindingSID)
}

inline void SLSrBindingSID::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&srv6_bsid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mpls_bsid_) -
    reinterpret_cast<char*>(&srv6_bsid_)) + sizeof(mpls_bsid_));
}

SLSrBindingSID::~SLSrBindingSID() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrBindingSID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrBindingSID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete srv6_bsid_;
}

void SLSrBindingSID::ArenaDtor(void* object) {
  SLSrBindingSID* _this = reinterpret_cast< SLSrBindingSID* >(object);
  (void)_this;
}
void SLSrBindingSID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrBindingSID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrBindingSID::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrBindingSID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && srv6_bsid_ != nullptr) {
    delete srv6_bsid_;
  }
  srv6_bsid_ = nullptr;
  ::memset(&allocation_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mpls_bsid_) -
      reinterpret_cast<char*>(&allocation_mode_)) + sizeof(mpls_bsid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrBindingSID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLSrBindingSIDAllocationMode allocation_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_allocation_mode(static_cast<::service_layer::SLSrBindingSIDAllocationMode>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 mpls_bsid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          mpls_bsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrv6BindingSID srv6_bsid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_srv6_bsid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrBindingSID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrBindingSID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLSrBindingSIDAllocationMode allocation_mode = 1;
  if (this->_internal_allocation_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_allocation_mode(), target);
  }

  // uint32 mpls_bsid = 2;
  if (this->_internal_mpls_bsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mpls_bsid(), target);
  }

  // .service_layer.SLSrv6BindingSID srv6_bsid = 3;
  if (this->_internal_has_srv6_bsid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::srv6_bsid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrBindingSID)
  return target;
}

size_t SLSrBindingSID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrBindingSID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLSrv6BindingSID srv6_bsid = 3;
  if (this->_internal_has_srv6_bsid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *srv6_bsid_);
  }

  // .service_layer.SLSrBindingSIDAllocationMode allocation_mode = 1;
  if (this->_internal_allocation_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_allocation_mode());
  }

  // uint32 mpls_bsid = 2;
  if (this->_internal_mpls_bsid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mpls_bsid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrBindingSID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrBindingSID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrBindingSID::GetClassData() const { return &_class_data_; }

void SLSrBindingSID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrBindingSID *>(to)->MergeFrom(
      static_cast<const SLSrBindingSID &>(from));
}


void SLSrBindingSID::MergeFrom(const SLSrBindingSID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrBindingSID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_srv6_bsid()) {
    _internal_mutable_srv6_bsid()->::service_layer::SLSrv6BindingSID::MergeFrom(from._internal_srv6_bsid());
  }
  if (from._internal_allocation_mode() != 0) {
    _internal_set_allocation_mode(from._internal_allocation_mode());
  }
  if (from._internal_mpls_bsid() != 0) {
    _internal_set_mpls_bsid(from._internal_mpls_bsid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrBindingSID::CopyFrom(const SLSrBindingSID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrBindingSID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrBindingSID::IsInitialized() const {
  return true;
}

void SLSrBindingSID::InternalSwap(SLSrBindingSID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLSrBindingSID, mpls_bsid_)
      + sizeof(SLSrBindingSID::mpls_bsid_)
      - PROTOBUF_FIELD_OFFSET(SLSrBindingSID, srv6_bsid_)>(
          reinterpret_cast<char*>(&srv6_bsid_),
          reinterpret_cast<char*>(&other->srv6_bsid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrBindingSID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[6]);
}

// ===================================================================

class SLSrPolicy::_Internal {
 public:
  static const ::service_layer::SLSrPolicyKey& key(const SLSrPolicy* msg);
  static const ::service_layer::SLSrBindingSID& bsid(const SLSrPolicy* msg);
};

const ::service_layer::SLSrPolicyKey&
SLSrPolicy::_Internal::key(const SLSrPolicy* msg) {
  return *msg->key_;
}
const ::service_layer::SLSrBindingSID&
SLSrPolicy::_Internal::bsid(const SLSrPolicy* msg) {
  return *msg->bsid_;
}
void SLSrPolicy::clear_key() {
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
SLSrPolicy::SLSrPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cps_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrPolicy)
}
SLSrPolicy::SLSrPolicy(const SLSrPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cps_(from.cps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLSrPolicyKey(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from._internal_has_bsid()) {
    bsid_ = new ::service_layer::SLSrBindingSID(*from.bsid_);
  } else {
    bsid_ = nullptr;
  }
  ::memcpy(&transit_eligible_, &from.transit_eligible_,
    static_cast<size_t>(reinterpret_cast<char*>(&profile_id_) -
    reinterpret_cast<char*>(&transit_eligible_)) + sizeof(profile_id_));
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrPolicy)
}

inline void SLSrPolicy::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&profile_id_) -
    reinterpret_cast<char*>(&key_)) + sizeof(profile_id_));
}

SLSrPolicy::~SLSrPolicy() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrPolicy)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete bsid_;
}

void SLSrPolicy::ArenaDtor(void* object) {
  SLSrPolicy* _this = reinterpret_cast< SLSrPolicy* >(object);
  (void)_this;
}
void SLSrPolicy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrPolicy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cps_.Clear();
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bsid_ != nullptr) {
    delete bsid_;
  }
  bsid_ = nullptr;
  ::memset(&transit_eligible_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&profile_id_) -
      reinterpret_cast<char*>(&transit_eligible_)) + sizeof(profile_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLSrPolicyKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool transit_eligible = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          transit_eligible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_layer.SLSrCandidatePath CPs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrBindingSID bsid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bsid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 profile_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          profile_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrPolicy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrPolicy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLSrPolicyKey key = 1;
  if (this->_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // bool transit_eligible = 2;
  if (this->_internal_transit_eligible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_transit_eligible(), target);
  }

  // repeated .service_layer.SLSrCandidatePath CPs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_cps(i), target, stream);
  }

  // .service_layer.SLSrBindingSID bsid = 4;
  if (this->_internal_has_bsid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bsid(this), target, stream);
  }

  // uint32 profile_id = 5;
  if (this->_internal_profile_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_profile_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrPolicy)
  return target;
}

size_t SLSrPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrPolicy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLSrCandidatePath CPs = 3;
  total_size += 1UL * this->_internal_cps_size();
  for (const auto& msg : this->cps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .service_layer.SLSrPolicyKey key = 1;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .service_layer.SLSrBindingSID bsid = 4;
  if (this->_internal_has_bsid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bsid_);
  }

  // bool transit_eligible = 2;
  if (this->_internal_transit_eligible() != 0) {
    total_size += 1 + 1;
  }

  // uint32 profile_id = 5;
  if (this->_internal_profile_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_profile_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrPolicy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrPolicy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrPolicy::GetClassData() const { return &_class_data_; }

void SLSrPolicy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrPolicy *>(to)->MergeFrom(
      static_cast<const SLSrPolicy &>(from));
}


void SLSrPolicy::MergeFrom(const SLSrPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cps_.MergeFrom(from.cps_);
  if (from._internal_has_key()) {
    _internal_mutable_key()->::service_layer::SLSrPolicyKey::MergeFrom(from._internal_key());
  }
  if (from._internal_has_bsid()) {
    _internal_mutable_bsid()->::service_layer::SLSrBindingSID::MergeFrom(from._internal_bsid());
  }
  if (from._internal_transit_eligible() != 0) {
    _internal_set_transit_eligible(from._internal_transit_eligible());
  }
  if (from._internal_profile_id() != 0) {
    _internal_set_profile_id(from._internal_profile_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrPolicy::CopyFrom(const SLSrPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrPolicy::IsInitialized() const {
  return true;
}

void SLSrPolicy::InternalSwap(SLSrPolicy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cps_.InternalSwap(&other->cps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLSrPolicy, profile_id_)
      + sizeof(SLSrPolicy::profile_id_)
      - PROTOBUF_FIELD_OFFSET(SLSrPolicy, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrPolicy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[7]);
}

// ===================================================================

class SLSrPolicyMsg::_Internal {
 public:
};

SLSrPolicyMsg::SLSrPolicyMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  policies_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrPolicyMsg)
}
SLSrPolicyMsg::SLSrPolicyMsg(const SLSrPolicyMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      policies_(from.policies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrPolicyMsg)
}

inline void SLSrPolicyMsg::SharedCtor() {
}

SLSrPolicyMsg::~SLSrPolicyMsg() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrPolicyMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrPolicyMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLSrPolicyMsg::ArenaDtor(void* object) {
  SLSrPolicyMsg* _this = reinterpret_cast< SLSrPolicyMsg* >(object);
  (void)_this;
}
void SLSrPolicyMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrPolicyMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrPolicyMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrPolicyMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrPolicyMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLSrPolicy policies = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_policies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrPolicyMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrPolicyMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLSrPolicy policies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_policies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_policies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrPolicyMsg)
  return target;
}

size_t SLSrPolicyMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrPolicyMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLSrPolicy policies = 1;
  total_size += 1UL * this->_internal_policies_size();
  for (const auto& msg : this->policies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrPolicyMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrPolicyMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrPolicyMsg::GetClassData() const { return &_class_data_; }

void SLSrPolicyMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrPolicyMsg *>(to)->MergeFrom(
      static_cast<const SLSrPolicyMsg &>(from));
}


void SLSrPolicyMsg::MergeFrom(const SLSrPolicyMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrPolicyMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  policies_.MergeFrom(from.policies_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrPolicyMsg::CopyFrom(const SLSrPolicyMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrPolicyMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrPolicyMsg::IsInitialized() const {
  return true;
}

void SLSrPolicyMsg::InternalSwap(SLSrPolicyMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  policies_.InternalSwap(&other->policies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrPolicyMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[8]);
}

// ===================================================================

class SLSrPolicyOpRsp_PolicyRsp::_Internal {
 public:
  static const ::service_layer::SLErrorStatus& returncode(const SLSrPolicyOpRsp_PolicyRsp* msg);
  static const ::service_layer::SLSrPolicyKey& key(const SLSrPolicyOpRsp_PolicyRsp* msg);
};

const ::service_layer::SLErrorStatus&
SLSrPolicyOpRsp_PolicyRsp::_Internal::returncode(const SLSrPolicyOpRsp_PolicyRsp* msg) {
  return *msg->returncode_;
}
const ::service_layer::SLSrPolicyKey&
SLSrPolicyOpRsp_PolicyRsp::_Internal::key(const SLSrPolicyOpRsp_PolicyRsp* msg) {
  return *msg->key_;
}
void SLSrPolicyOpRsp_PolicyRsp::clear_returncode() {
  if (GetArenaForAllocation() == nullptr && returncode_ != nullptr) {
    delete returncode_;
  }
  returncode_ = nullptr;
}
void SLSrPolicyOpRsp_PolicyRsp::clear_key() {
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
SLSrPolicyOpRsp_PolicyRsp::SLSrPolicyOpRsp_PolicyRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrPolicyOpRsp.PolicyRsp)
}
SLSrPolicyOpRsp_PolicyRsp::SLSrPolicyOpRsp_PolicyRsp(const SLSrPolicyOpRsp_PolicyRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_returncode()) {
    returncode_ = new ::service_layer::SLErrorStatus(*from.returncode_);
  } else {
    returncode_ = nullptr;
  }
  if (from._internal_has_key()) {
    key_ = new ::service_layer::SLSrPolicyKey(*from.key_);
  } else {
    key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrPolicyOpRsp.PolicyRsp)
}

inline void SLSrPolicyOpRsp_PolicyRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&returncode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&returncode_)) + sizeof(key_));
}

SLSrPolicyOpRsp_PolicyRsp::~SLSrPolicyOpRsp_PolicyRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrPolicyOpRsp.PolicyRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrPolicyOpRsp_PolicyRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete returncode_;
  if (this != internal_default_instance()) delete key_;
}

void SLSrPolicyOpRsp_PolicyRsp::ArenaDtor(void* object) {
  SLSrPolicyOpRsp_PolicyRsp* _this = reinterpret_cast< SLSrPolicyOpRsp_PolicyRsp* >(object);
  (void)_this;
}
void SLSrPolicyOpRsp_PolicyRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrPolicyOpRsp_PolicyRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrPolicyOpRsp_PolicyRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrPolicyOpRsp.PolicyRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && returncode_ != nullptr) {
    delete returncode_;
  }
  returncode_ = nullptr;
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrPolicyOpRsp_PolicyRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .service_layer.SLErrorStatus returnCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_returncode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .service_layer.SLSrPolicyKey key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrPolicyOpRsp_PolicyRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrPolicyOpRsp.PolicyRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus returnCode = 1;
  if (this->_internal_has_returncode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::returncode(this), target, stream);
  }

  // .service_layer.SLSrPolicyKey key = 2;
  if (this->_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrPolicyOpRsp.PolicyRsp)
  return target;
}

size_t SLSrPolicyOpRsp_PolicyRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrPolicyOpRsp.PolicyRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .service_layer.SLErrorStatus returnCode = 1;
  if (this->_internal_has_returncode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *returncode_);
  }

  // .service_layer.SLSrPolicyKey key = 2;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrPolicyOpRsp_PolicyRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrPolicyOpRsp_PolicyRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrPolicyOpRsp_PolicyRsp::GetClassData() const { return &_class_data_; }

void SLSrPolicyOpRsp_PolicyRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrPolicyOpRsp_PolicyRsp *>(to)->MergeFrom(
      static_cast<const SLSrPolicyOpRsp_PolicyRsp &>(from));
}


void SLSrPolicyOpRsp_PolicyRsp::MergeFrom(const SLSrPolicyOpRsp_PolicyRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrPolicyOpRsp.PolicyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_returncode()) {
    _internal_mutable_returncode()->::service_layer::SLErrorStatus::MergeFrom(from._internal_returncode());
  }
  if (from._internal_has_key()) {
    _internal_mutable_key()->::service_layer::SLSrPolicyKey::MergeFrom(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrPolicyOpRsp_PolicyRsp::CopyFrom(const SLSrPolicyOpRsp_PolicyRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrPolicyOpRsp.PolicyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrPolicyOpRsp_PolicyRsp::IsInitialized() const {
  return true;
}

void SLSrPolicyOpRsp_PolicyRsp::InternalSwap(SLSrPolicyOpRsp_PolicyRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLSrPolicyOpRsp_PolicyRsp, key_)
      + sizeof(SLSrPolicyOpRsp_PolicyRsp::key_)
      - PROTOBUF_FIELD_OFFSET(SLSrPolicyOpRsp_PolicyRsp, returncode_)>(
          reinterpret_cast<char*>(&returncode_),
          reinterpret_cast<char*>(&other->returncode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrPolicyOpRsp_PolicyRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[9]);
}

// ===================================================================

class SLSrPolicyOpRsp::_Internal {
 public:
};

SLSrPolicyOpRsp::SLSrPolicyOpRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  responses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:service_layer.SLSrPolicyOpRsp)
}
SLSrPolicyOpRsp::SLSrPolicyOpRsp(const SLSrPolicyOpRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:service_layer.SLSrPolicyOpRsp)
}

inline void SLSrPolicyOpRsp::SharedCtor() {
}

SLSrPolicyOpRsp::~SLSrPolicyOpRsp() {
  // @@protoc_insertion_point(destructor:service_layer.SLSrPolicyOpRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLSrPolicyOpRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLSrPolicyOpRsp::ArenaDtor(void* object) {
  SLSrPolicyOpRsp* _this = reinterpret_cast< SLSrPolicyOpRsp* >(object);
  (void)_this;
}
void SLSrPolicyOpRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLSrPolicyOpRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLSrPolicyOpRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:service_layer.SLSrPolicyOpRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLSrPolicyOpRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_layer.SLSrPolicyOpRsp.PolicyRsp responses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLSrPolicyOpRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_layer.SLSrPolicyOpRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_layer.SLSrPolicyOpRsp.PolicyRsp responses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_layer.SLSrPolicyOpRsp)
  return target;
}

size_t SLSrPolicyOpRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_layer.SLSrPolicyOpRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_layer.SLSrPolicyOpRsp.PolicyRsp responses = 1;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLSrPolicyOpRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLSrPolicyOpRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLSrPolicyOpRsp::GetClassData() const { return &_class_data_; }

void SLSrPolicyOpRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLSrPolicyOpRsp *>(to)->MergeFrom(
      static_cast<const SLSrPolicyOpRsp &>(from));
}


void SLSrPolicyOpRsp::MergeFrom(const SLSrPolicyOpRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service_layer.SLSrPolicyOpRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLSrPolicyOpRsp::CopyFrom(const SLSrPolicyOpRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_layer.SLSrPolicyOpRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLSrPolicyOpRsp::IsInitialized() const {
  return true;
}

void SLSrPolicyOpRsp::InternalSwap(SLSrPolicyOpRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLSrPolicyOpRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sl_5fsrte_5fpolicy_2eproto_getter, &descriptor_table_sl_5fsrte_5fpolicy_2eproto_once,
      file_level_metadata_sl_5fsrte_5fpolicy_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service_layer::SLSrExplicitCP* Arena::CreateMaybeMessage< ::service_layer::SLSrExplicitCP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrExplicitCP >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrConstraints_SegmentConstraints* Arena::CreateMaybeMessage< ::service_layer::SLSrConstraints_SegmentConstraints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrConstraints_SegmentConstraints >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrConstraints* Arena::CreateMaybeMessage< ::service_layer::SLSrConstraints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrConstraints >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrDynamicCP* Arena::CreateMaybeMessage< ::service_layer::SLSrDynamicCP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrDynamicCP >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrCandidatePath* Arena::CreateMaybeMessage< ::service_layer::SLSrCandidatePath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrCandidatePath >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrv6BindingSID* Arena::CreateMaybeMessage< ::service_layer::SLSrv6BindingSID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrv6BindingSID >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrBindingSID* Arena::CreateMaybeMessage< ::service_layer::SLSrBindingSID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrBindingSID >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrPolicy* Arena::CreateMaybeMessage< ::service_layer::SLSrPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrPolicyMsg* Arena::CreateMaybeMessage< ::service_layer::SLSrPolicyMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrPolicyMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrPolicyOpRsp_PolicyRsp* Arena::CreateMaybeMessage< ::service_layer::SLSrPolicyOpRsp_PolicyRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrPolicyOpRsp_PolicyRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::service_layer::SLSrPolicyOpRsp* Arena::CreateMaybeMessage< ::service_layer::SLSrPolicyOpRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_layer::SLSrPolicyOpRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
