// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_srte_policy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sl_5fsrte_5fpolicy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sl_5fsrte_5fpolicy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "sl_sr_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sl_5fsrte_5fpolicy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sl_5fsrte_5fpolicy_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fsrte_5fpolicy_2eproto;
namespace service_layer {
class SLSrCandidatePath;
struct SLSrCandidatePathDefaultTypeInternal;
extern SLSrCandidatePathDefaultTypeInternal _SLSrCandidatePath_default_instance_;
class SLSrConstraints;
struct SLSrConstraintsDefaultTypeInternal;
extern SLSrConstraintsDefaultTypeInternal _SLSrConstraints_default_instance_;
class SLSrDynamicCP;
struct SLSrDynamicCPDefaultTypeInternal;
extern SLSrDynamicCPDefaultTypeInternal _SLSrDynamicCP_default_instance_;
class SLSrEndOfReplay;
struct SLSrEndOfReplayDefaultTypeInternal;
extern SLSrEndOfReplayDefaultTypeInternal _SLSrEndOfReplay_default_instance_;
class SLSrExplicitCP;
struct SLSrExplicitCPDefaultTypeInternal;
extern SLSrExplicitCPDefaultTypeInternal _SLSrExplicitCP_default_instance_;
class SLSrMPLSBindingSID;
struct SLSrMPLSBindingSIDDefaultTypeInternal;
extern SLSrMPLSBindingSIDDefaultTypeInternal _SLSrMPLSBindingSID_default_instance_;
class SLSrPolicy;
struct SLSrPolicyDefaultTypeInternal;
extern SLSrPolicyDefaultTypeInternal _SLSrPolicy_default_instance_;
class SLSrPolicyAttributes;
struct SLSrPolicyAttributesDefaultTypeInternal;
extern SLSrPolicyAttributesDefaultTypeInternal _SLSrPolicyAttributes_default_instance_;
class SLSrPolicyMsg;
struct SLSrPolicyMsgDefaultTypeInternal;
extern SLSrPolicyMsgDefaultTypeInternal _SLSrPolicyMsg_default_instance_;
class SLSrPolicyOpen;
struct SLSrPolicyOpenDefaultTypeInternal;
extern SLSrPolicyOpenDefaultTypeInternal _SLSrPolicyOpen_default_instance_;
class SLSrPolicyReq;
struct SLSrPolicyReqDefaultTypeInternal;
extern SLSrPolicyReqDefaultTypeInternal _SLSrPolicyReq_default_instance_;
class SLSrPolicyRequests;
struct SLSrPolicyRequestsDefaultTypeInternal;
extern SLSrPolicyRequestsDefaultTypeInternal _SLSrPolicyRequests_default_instance_;
class SLSrPolicyRsp;
struct SLSrPolicyRspDefaultTypeInternal;
extern SLSrPolicyRspDefaultTypeInternal _SLSrPolicyRsp_default_instance_;
class SLSrPolicyRsp_PolicyRsp;
struct SLSrPolicyRsp_PolicyRspDefaultTypeInternal;
extern SLSrPolicyRsp_PolicyRspDefaultTypeInternal _SLSrPolicyRsp_PolicyRsp_default_instance_;
class SLSrSrv6BindingSID;
struct SLSrSrv6BindingSIDDefaultTypeInternal;
extern SLSrSrv6BindingSIDDefaultTypeInternal _SLSrSrv6BindingSID_default_instance_;
class SLSrSrv6DynamicBindingSID;
struct SLSrSrv6DynamicBindingSIDDefaultTypeInternal;
extern SLSrSrv6DynamicBindingSIDDefaultTypeInternal _SLSrSrv6DynamicBindingSID_default_instance_;
class SLSrStartOfReplay;
struct SLSrStartOfReplayDefaultTypeInternal;
extern SLSrStartOfReplayDefaultTypeInternal _SLSrStartOfReplay_default_instance_;
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> ::service_layer::SLSrCandidatePath* Arena::CreateMaybeMessage<::service_layer::SLSrCandidatePath>(Arena*);
template<> ::service_layer::SLSrConstraints* Arena::CreateMaybeMessage<::service_layer::SLSrConstraints>(Arena*);
template<> ::service_layer::SLSrDynamicCP* Arena::CreateMaybeMessage<::service_layer::SLSrDynamicCP>(Arena*);
template<> ::service_layer::SLSrEndOfReplay* Arena::CreateMaybeMessage<::service_layer::SLSrEndOfReplay>(Arena*);
template<> ::service_layer::SLSrExplicitCP* Arena::CreateMaybeMessage<::service_layer::SLSrExplicitCP>(Arena*);
template<> ::service_layer::SLSrMPLSBindingSID* Arena::CreateMaybeMessage<::service_layer::SLSrMPLSBindingSID>(Arena*);
template<> ::service_layer::SLSrPolicy* Arena::CreateMaybeMessage<::service_layer::SLSrPolicy>(Arena*);
template<> ::service_layer::SLSrPolicyAttributes* Arena::CreateMaybeMessage<::service_layer::SLSrPolicyAttributes>(Arena*);
template<> ::service_layer::SLSrPolicyMsg* Arena::CreateMaybeMessage<::service_layer::SLSrPolicyMsg>(Arena*);
template<> ::service_layer::SLSrPolicyOpen* Arena::CreateMaybeMessage<::service_layer::SLSrPolicyOpen>(Arena*);
template<> ::service_layer::SLSrPolicyReq* Arena::CreateMaybeMessage<::service_layer::SLSrPolicyReq>(Arena*);
template<> ::service_layer::SLSrPolicyRequests* Arena::CreateMaybeMessage<::service_layer::SLSrPolicyRequests>(Arena*);
template<> ::service_layer::SLSrPolicyRsp* Arena::CreateMaybeMessage<::service_layer::SLSrPolicyRsp>(Arena*);
template<> ::service_layer::SLSrPolicyRsp_PolicyRsp* Arena::CreateMaybeMessage<::service_layer::SLSrPolicyRsp_PolicyRsp>(Arena*);
template<> ::service_layer::SLSrSrv6BindingSID* Arena::CreateMaybeMessage<::service_layer::SLSrSrv6BindingSID>(Arena*);
template<> ::service_layer::SLSrSrv6DynamicBindingSID* Arena::CreateMaybeMessage<::service_layer::SLSrSrv6DynamicBindingSID>(Arena*);
template<> ::service_layer::SLSrStartOfReplay* Arena::CreateMaybeMessage<::service_layer::SLSrStartOfReplay>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service_layer {

enum SLSrPolicyOpen_SLSrPersistenceMode : int {
  SLSrPolicyOpen_SLSrPersistenceMode_DELETE = 0,
  SLSrPolicyOpen_SLSrPersistenceMode_PRESERVE = 1,
  SLSrPolicyOpen_SLSrPersistenceMode_SLSrPolicyOpen_SLSrPersistenceMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLSrPolicyOpen_SLSrPersistenceMode_SLSrPolicyOpen_SLSrPersistenceMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLSrPolicyOpen_SLSrPersistenceMode_IsValid(int value);
constexpr SLSrPolicyOpen_SLSrPersistenceMode SLSrPolicyOpen_SLSrPersistenceMode_SLSrPersistenceMode_MIN = SLSrPolicyOpen_SLSrPersistenceMode_DELETE;
constexpr SLSrPolicyOpen_SLSrPersistenceMode SLSrPolicyOpen_SLSrPersistenceMode_SLSrPersistenceMode_MAX = SLSrPolicyOpen_SLSrPersistenceMode_PRESERVE;
constexpr int SLSrPolicyOpen_SLSrPersistenceMode_SLSrPersistenceMode_ARRAYSIZE = SLSrPolicyOpen_SLSrPersistenceMode_SLSrPersistenceMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrPolicyOpen_SLSrPersistenceMode_descriptor();
template<typename T>
inline const std::string& SLSrPolicyOpen_SLSrPersistenceMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLSrPolicyOpen_SLSrPersistenceMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLSrPolicyOpen_SLSrPersistenceMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLSrPolicyOpen_SLSrPersistenceMode_descriptor(), enum_t_value);
}
inline bool SLSrPolicyOpen_SLSrPersistenceMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLSrPolicyOpen_SLSrPersistenceMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLSrPolicyOpen_SLSrPersistenceMode>(
    SLSrPolicyOpen_SLSrPersistenceMode_descriptor(), name, value);
}
enum SLSrPolicyReq_SLSrOp : int {
  SLSrPolicyReq_SLSrOp_UPDATE = 0,
  SLSrPolicyReq_SLSrOp_DELETE = 1,
  SLSrPolicyReq_SLSrOp_SLSrPolicyReq_SLSrOp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLSrPolicyReq_SLSrOp_SLSrPolicyReq_SLSrOp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLSrPolicyReq_SLSrOp_IsValid(int value);
constexpr SLSrPolicyReq_SLSrOp SLSrPolicyReq_SLSrOp_SLSrOp_MIN = SLSrPolicyReq_SLSrOp_UPDATE;
constexpr SLSrPolicyReq_SLSrOp SLSrPolicyReq_SLSrOp_SLSrOp_MAX = SLSrPolicyReq_SLSrOp_DELETE;
constexpr int SLSrPolicyReq_SLSrOp_SLSrOp_ARRAYSIZE = SLSrPolicyReq_SLSrOp_SLSrOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrPolicyReq_SLSrOp_descriptor();
template<typename T>
inline const std::string& SLSrPolicyReq_SLSrOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLSrPolicyReq_SLSrOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLSrPolicyReq_SLSrOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLSrPolicyReq_SLSrOp_descriptor(), enum_t_value);
}
inline bool SLSrPolicyReq_SLSrOp_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLSrPolicyReq_SLSrOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLSrPolicyReq_SLSrOp>(
    SLSrPolicyReq_SLSrOp_descriptor(), name, value);
}
// ===================================================================

class SLSrPolicyMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrPolicyMsg) */ {
 public:
  inline SLSrPolicyMsg() : SLSrPolicyMsg(nullptr) {}
  ~SLSrPolicyMsg() override;
  explicit constexpr SLSrPolicyMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrPolicyMsg(const SLSrPolicyMsg& from);
  SLSrPolicyMsg(SLSrPolicyMsg&& from) noexcept
    : SLSrPolicyMsg() {
    *this = ::std::move(from);
  }

  inline SLSrPolicyMsg& operator=(const SLSrPolicyMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrPolicyMsg& operator=(SLSrPolicyMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrPolicyMsg& default_instance() {
    return *internal_default_instance();
  }
  enum MsgTypeCase {
    kOpen = 1,
    kRequests = 2,
    MSG_TYPE_NOT_SET = 0,
  };

  static inline const SLSrPolicyMsg* internal_default_instance() {
    return reinterpret_cast<const SLSrPolicyMsg*>(
               &_SLSrPolicyMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SLSrPolicyMsg& a, SLSrPolicyMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrPolicyMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrPolicyMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrPolicyMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrPolicyMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrPolicyMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrPolicyMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrPolicyMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrPolicyMsg";
  }
  protected:
  explicit SLSrPolicyMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenFieldNumber = 1,
    kRequestsFieldNumber = 2,
  };
  // .service_layer.SLSrPolicyOpen open = 1;
  bool has_open() const;
  private:
  bool _internal_has_open() const;
  public:
  void clear_open();
  const ::service_layer::SLSrPolicyOpen& open() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrPolicyOpen* release_open();
  ::service_layer::SLSrPolicyOpen* mutable_open();
  void set_allocated_open(::service_layer::SLSrPolicyOpen* open);
  private:
  const ::service_layer::SLSrPolicyOpen& _internal_open() const;
  ::service_layer::SLSrPolicyOpen* _internal_mutable_open();
  public:
  void unsafe_arena_set_allocated_open(
      ::service_layer::SLSrPolicyOpen* open);
  ::service_layer::SLSrPolicyOpen* unsafe_arena_release_open();

  // .service_layer.SLSrPolicyRequests requests = 2;
  bool has_requests() const;
  private:
  bool _internal_has_requests() const;
  public:
  void clear_requests();
  const ::service_layer::SLSrPolicyRequests& requests() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrPolicyRequests* release_requests();
  ::service_layer::SLSrPolicyRequests* mutable_requests();
  void set_allocated_requests(::service_layer::SLSrPolicyRequests* requests);
  private:
  const ::service_layer::SLSrPolicyRequests& _internal_requests() const;
  ::service_layer::SLSrPolicyRequests* _internal_mutable_requests();
  public:
  void unsafe_arena_set_allocated_requests(
      ::service_layer::SLSrPolicyRequests* requests);
  ::service_layer::SLSrPolicyRequests* unsafe_arena_release_requests();

  void clear_msg_type();
  MsgTypeCase msg_type_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLSrPolicyMsg)
 private:
  class _Internal;
  void set_has_open();
  void set_has_requests();

  inline bool has_msg_type() const;
  inline void clear_has_msg_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MsgTypeUnion {
    constexpr MsgTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::service_layer::SLSrPolicyOpen* open_;
    ::service_layer::SLSrPolicyRequests* requests_;
  } msg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrPolicyRsp_PolicyRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrPolicyRsp.PolicyRsp) */ {
 public:
  inline SLSrPolicyRsp_PolicyRsp() : SLSrPolicyRsp_PolicyRsp(nullptr) {}
  ~SLSrPolicyRsp_PolicyRsp() override;
  explicit constexpr SLSrPolicyRsp_PolicyRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrPolicyRsp_PolicyRsp(const SLSrPolicyRsp_PolicyRsp& from);
  SLSrPolicyRsp_PolicyRsp(SLSrPolicyRsp_PolicyRsp&& from) noexcept
    : SLSrPolicyRsp_PolicyRsp() {
    *this = ::std::move(from);
  }

  inline SLSrPolicyRsp_PolicyRsp& operator=(const SLSrPolicyRsp_PolicyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrPolicyRsp_PolicyRsp& operator=(SLSrPolicyRsp_PolicyRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrPolicyRsp_PolicyRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrPolicyRsp_PolicyRsp* internal_default_instance() {
    return reinterpret_cast<const SLSrPolicyRsp_PolicyRsp*>(
               &_SLSrPolicyRsp_PolicyRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SLSrPolicyRsp_PolicyRsp& a, SLSrPolicyRsp_PolicyRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrPolicyRsp_PolicyRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrPolicyRsp_PolicyRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrPolicyRsp_PolicyRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrPolicyRsp_PolicyRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrPolicyRsp_PolicyRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrPolicyRsp_PolicyRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrPolicyRsp_PolicyRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrPolicyRsp.PolicyRsp";
  }
  protected:
  explicit SLSrPolicyRsp_PolicyRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kStatusFieldNumber = 3,
    kOperationIdFieldNumber = 1,
  };
  // .service_layer.SLSrPolicyKey key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::service_layer::SLSrPolicyKey& key() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrPolicyKey* release_key();
  ::service_layer::SLSrPolicyKey* mutable_key();
  void set_allocated_key(::service_layer::SLSrPolicyKey* key);
  private:
  const ::service_layer::SLSrPolicyKey& _internal_key() const;
  ::service_layer::SLSrPolicyKey* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::service_layer::SLSrPolicyKey* key);
  ::service_layer::SLSrPolicyKey* unsafe_arena_release_key();

  // .service_layer.SLSrStatus status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::service_layer::SLSrStatus& status() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrStatus* release_status();
  ::service_layer::SLSrStatus* mutable_status();
  void set_allocated_status(::service_layer::SLSrStatus* status);
  private:
  const ::service_layer::SLSrStatus& _internal_status() const;
  ::service_layer::SLSrStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::service_layer::SLSrStatus* status);
  ::service_layer::SLSrStatus* unsafe_arena_release_status();

  // uint64 operation_id = 1;
  void clear_operation_id();
  uint64_t operation_id() const;
  void set_operation_id(uint64_t value);
  private:
  uint64_t _internal_operation_id() const;
  void _internal_set_operation_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrPolicyRsp.PolicyRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLSrPolicyKey* key_;
  ::service_layer::SLSrStatus* status_;
  uint64_t operation_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrPolicyRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrPolicyRsp) */ {
 public:
  inline SLSrPolicyRsp() : SLSrPolicyRsp(nullptr) {}
  ~SLSrPolicyRsp() override;
  explicit constexpr SLSrPolicyRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrPolicyRsp(const SLSrPolicyRsp& from);
  SLSrPolicyRsp(SLSrPolicyRsp&& from) noexcept
    : SLSrPolicyRsp() {
    *this = ::std::move(from);
  }

  inline SLSrPolicyRsp& operator=(const SLSrPolicyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrPolicyRsp& operator=(SLSrPolicyRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrPolicyRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrPolicyRsp* internal_default_instance() {
    return reinterpret_cast<const SLSrPolicyRsp*>(
               &_SLSrPolicyRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SLSrPolicyRsp& a, SLSrPolicyRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrPolicyRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrPolicyRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrPolicyRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrPolicyRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrPolicyRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrPolicyRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrPolicyRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrPolicyRsp";
  }
  protected:
  explicit SLSrPolicyRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SLSrPolicyRsp_PolicyRsp PolicyRsp;

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // repeated .service_layer.SLSrPolicyRsp.PolicyRsp responses = 1;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::service_layer::SLSrPolicyRsp_PolicyRsp* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrPolicyRsp_PolicyRsp >*
      mutable_responses();
  private:
  const ::service_layer::SLSrPolicyRsp_PolicyRsp& _internal_responses(int index) const;
  ::service_layer::SLSrPolicyRsp_PolicyRsp* _internal_add_responses();
  public:
  const ::service_layer::SLSrPolicyRsp_PolicyRsp& responses(int index) const;
  ::service_layer::SLSrPolicyRsp_PolicyRsp* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrPolicyRsp_PolicyRsp >&
      responses() const;

  // .service_layer.SLSrStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::service_layer::SLSrStatus& status() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrStatus* release_status();
  ::service_layer::SLSrStatus* mutable_status();
  void set_allocated_status(::service_layer::SLSrStatus* status);
  private:
  const ::service_layer::SLSrStatus& _internal_status() const;
  ::service_layer::SLSrStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::service_layer::SLSrStatus* status);
  ::service_layer::SLSrStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:service_layer.SLSrPolicyRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrPolicyRsp_PolicyRsp > responses_;
  ::service_layer::SLSrStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrPolicyOpen final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrPolicyOpen) */ {
 public:
  inline SLSrPolicyOpen() : SLSrPolicyOpen(nullptr) {}
  ~SLSrPolicyOpen() override;
  explicit constexpr SLSrPolicyOpen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrPolicyOpen(const SLSrPolicyOpen& from);
  SLSrPolicyOpen(SLSrPolicyOpen&& from) noexcept
    : SLSrPolicyOpen() {
    *this = ::std::move(from);
  }

  inline SLSrPolicyOpen& operator=(const SLSrPolicyOpen& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrPolicyOpen& operator=(SLSrPolicyOpen&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrPolicyOpen& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrPolicyOpen* internal_default_instance() {
    return reinterpret_cast<const SLSrPolicyOpen*>(
               &_SLSrPolicyOpen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SLSrPolicyOpen& a, SLSrPolicyOpen& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrPolicyOpen* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrPolicyOpen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrPolicyOpen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrPolicyOpen>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrPolicyOpen& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrPolicyOpen& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrPolicyOpen* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrPolicyOpen";
  }
  protected:
  explicit SLSrPolicyOpen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SLSrPolicyOpen_SLSrPersistenceMode SLSrPersistenceMode;
  static constexpr SLSrPersistenceMode DELETE =
    SLSrPolicyOpen_SLSrPersistenceMode_DELETE;
  static constexpr SLSrPersistenceMode PRESERVE =
    SLSrPolicyOpen_SLSrPersistenceMode_PRESERVE;
  static inline bool SLSrPersistenceMode_IsValid(int value) {
    return SLSrPolicyOpen_SLSrPersistenceMode_IsValid(value);
  }
  static constexpr SLSrPersistenceMode SLSrPersistenceMode_MIN =
    SLSrPolicyOpen_SLSrPersistenceMode_SLSrPersistenceMode_MIN;
  static constexpr SLSrPersistenceMode SLSrPersistenceMode_MAX =
    SLSrPolicyOpen_SLSrPersistenceMode_SLSrPersistenceMode_MAX;
  static constexpr int SLSrPersistenceMode_ARRAYSIZE =
    SLSrPolicyOpen_SLSrPersistenceMode_SLSrPersistenceMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SLSrPersistenceMode_descriptor() {
    return SLSrPolicyOpen_SLSrPersistenceMode_descriptor();
  }
  template<typename T>
  static inline const std::string& SLSrPersistenceMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SLSrPersistenceMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SLSrPersistenceMode_Name.");
    return SLSrPolicyOpen_SLSrPersistenceMode_Name(enum_t_value);
  }
  static inline bool SLSrPersistenceMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SLSrPersistenceMode* value) {
    return SLSrPolicyOpen_SLSrPersistenceMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kModeFieldNumber = 3,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // .service_layer.SLSrPolicyOpen.SLSrPersistenceMode mode = 3;
  void clear_mode();
  ::service_layer::SLSrPolicyOpen_SLSrPersistenceMode mode() const;
  void set_mode(::service_layer::SLSrPolicyOpen_SLSrPersistenceMode value);
  private:
  ::service_layer::SLSrPolicyOpen_SLSrPersistenceMode _internal_mode() const;
  void _internal_set_mode(::service_layer::SLSrPolicyOpen_SLSrPersistenceMode value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrPolicyOpen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrPolicyRequests final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrPolicyRequests) */ {
 public:
  inline SLSrPolicyRequests() : SLSrPolicyRequests(nullptr) {}
  ~SLSrPolicyRequests() override;
  explicit constexpr SLSrPolicyRequests(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrPolicyRequests(const SLSrPolicyRequests& from);
  SLSrPolicyRequests(SLSrPolicyRequests&& from) noexcept
    : SLSrPolicyRequests() {
    *this = ::std::move(from);
  }

  inline SLSrPolicyRequests& operator=(const SLSrPolicyRequests& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrPolicyRequests& operator=(SLSrPolicyRequests&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrPolicyRequests& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrPolicyRequests* internal_default_instance() {
    return reinterpret_cast<const SLSrPolicyRequests*>(
               &_SLSrPolicyRequests_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SLSrPolicyRequests& a, SLSrPolicyRequests& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrPolicyRequests* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrPolicyRequests* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrPolicyRequests* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrPolicyRequests>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrPolicyRequests& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrPolicyRequests& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrPolicyRequests* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrPolicyRequests";
  }
  protected:
  explicit SLSrPolicyRequests(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // repeated .service_layer.SLSrPolicyReq request = 1;
  int request_size() const;
  private:
  int _internal_request_size() const;
  public:
  void clear_request();
  ::service_layer::SLSrPolicyReq* mutable_request(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrPolicyReq >*
      mutable_request();
  private:
  const ::service_layer::SLSrPolicyReq& _internal_request(int index) const;
  ::service_layer::SLSrPolicyReq* _internal_add_request();
  public:
  const ::service_layer::SLSrPolicyReq& request(int index) const;
  ::service_layer::SLSrPolicyReq* add_request();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrPolicyReq >&
      request() const;

  // @@protoc_insertion_point(class_scope:service_layer.SLSrPolicyRequests)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrPolicyReq > request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrPolicyReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrPolicyReq) */ {
 public:
  inline SLSrPolicyReq() : SLSrPolicyReq(nullptr) {}
  ~SLSrPolicyReq() override;
  explicit constexpr SLSrPolicyReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrPolicyReq(const SLSrPolicyReq& from);
  SLSrPolicyReq(SLSrPolicyReq&& from) noexcept
    : SLSrPolicyReq() {
    *this = ::std::move(from);
  }

  inline SLSrPolicyReq& operator=(const SLSrPolicyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrPolicyReq& operator=(SLSrPolicyReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrPolicyReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrPolicyReq* internal_default_instance() {
    return reinterpret_cast<const SLSrPolicyReq*>(
               &_SLSrPolicyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SLSrPolicyReq& a, SLSrPolicyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrPolicyReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrPolicyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrPolicyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrPolicyReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrPolicyReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrPolicyReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrPolicyReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrPolicyReq";
  }
  protected:
  explicit SLSrPolicyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SLSrPolicyReq_SLSrOp SLSrOp;
  static constexpr SLSrOp UPDATE =
    SLSrPolicyReq_SLSrOp_UPDATE;
  static constexpr SLSrOp DELETE =
    SLSrPolicyReq_SLSrOp_DELETE;
  static inline bool SLSrOp_IsValid(int value) {
    return SLSrPolicyReq_SLSrOp_IsValid(value);
  }
  static constexpr SLSrOp SLSrOp_MIN =
    SLSrPolicyReq_SLSrOp_SLSrOp_MIN;
  static constexpr SLSrOp SLSrOp_MAX =
    SLSrPolicyReq_SLSrOp_SLSrOp_MAX;
  static constexpr int SLSrOp_ARRAYSIZE =
    SLSrPolicyReq_SLSrOp_SLSrOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SLSrOp_descriptor() {
    return SLSrPolicyReq_SLSrOp_descriptor();
  }
  template<typename T>
  static inline const std::string& SLSrOp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SLSrOp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SLSrOp_Name.");
    return SLSrPolicyReq_SLSrOp_Name(enum_t_value);
  }
  static inline bool SLSrOp_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SLSrOp* value) {
    return SLSrPolicyReq_SLSrOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyFieldNumber = 2,
    kOperationFieldNumber = 1,
  };
  // .service_layer.SLSrPolicy policy = 2;
  bool has_policy() const;
  private:
  bool _internal_has_policy() const;
  public:
  void clear_policy();
  const ::service_layer::SLSrPolicy& policy() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrPolicy* release_policy();
  ::service_layer::SLSrPolicy* mutable_policy();
  void set_allocated_policy(::service_layer::SLSrPolicy* policy);
  private:
  const ::service_layer::SLSrPolicy& _internal_policy() const;
  ::service_layer::SLSrPolicy* _internal_mutable_policy();
  public:
  void unsafe_arena_set_allocated_policy(
      ::service_layer::SLSrPolicy* policy);
  ::service_layer::SLSrPolicy* unsafe_arena_release_policy();

  // .service_layer.SLSrPolicyReq.SLSrOp operation = 1;
  void clear_operation();
  ::service_layer::SLSrPolicyReq_SLSrOp operation() const;
  void set_operation(::service_layer::SLSrPolicyReq_SLSrOp value);
  private:
  ::service_layer::SLSrPolicyReq_SLSrOp _internal_operation() const;
  void _internal_set_operation(::service_layer::SLSrPolicyReq_SLSrOp value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrPolicyReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLSrPolicy* policy_;
  int operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrEndOfReplay final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:service_layer.SLSrEndOfReplay) */ {
 public:
  inline SLSrEndOfReplay() : SLSrEndOfReplay(nullptr) {}
  explicit constexpr SLSrEndOfReplay(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrEndOfReplay(const SLSrEndOfReplay& from);
  SLSrEndOfReplay(SLSrEndOfReplay&& from) noexcept
    : SLSrEndOfReplay() {
    *this = ::std::move(from);
  }

  inline SLSrEndOfReplay& operator=(const SLSrEndOfReplay& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrEndOfReplay& operator=(SLSrEndOfReplay&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrEndOfReplay& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrEndOfReplay* internal_default_instance() {
    return reinterpret_cast<const SLSrEndOfReplay*>(
               &_SLSrEndOfReplay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SLSrEndOfReplay& a, SLSrEndOfReplay& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrEndOfReplay* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrEndOfReplay* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrEndOfReplay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrEndOfReplay>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SLSrEndOfReplay& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SLSrEndOfReplay& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrEndOfReplay";
  }
  protected:
  explicit SLSrEndOfReplay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:service_layer.SLSrEndOfReplay)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrStartOfReplay final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:service_layer.SLSrStartOfReplay) */ {
 public:
  inline SLSrStartOfReplay() : SLSrStartOfReplay(nullptr) {}
  explicit constexpr SLSrStartOfReplay(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrStartOfReplay(const SLSrStartOfReplay& from);
  SLSrStartOfReplay(SLSrStartOfReplay&& from) noexcept
    : SLSrStartOfReplay() {
    *this = ::std::move(from);
  }

  inline SLSrStartOfReplay& operator=(const SLSrStartOfReplay& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrStartOfReplay& operator=(SLSrStartOfReplay&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrStartOfReplay& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrStartOfReplay* internal_default_instance() {
    return reinterpret_cast<const SLSrStartOfReplay*>(
               &_SLSrStartOfReplay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SLSrStartOfReplay& a, SLSrStartOfReplay& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrStartOfReplay* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrStartOfReplay* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrStartOfReplay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrStartOfReplay>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SLSrStartOfReplay& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SLSrStartOfReplay& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrStartOfReplay";
  }
  protected:
  explicit SLSrStartOfReplay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:service_layer.SLSrStartOfReplay)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrPolicy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrPolicy) */ {
 public:
  inline SLSrPolicy() : SLSrPolicy(nullptr) {}
  ~SLSrPolicy() override;
  explicit constexpr SLSrPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrPolicy(const SLSrPolicy& from);
  SLSrPolicy(SLSrPolicy&& from) noexcept
    : SLSrPolicy() {
    *this = ::std::move(from);
  }

  inline SLSrPolicy& operator=(const SLSrPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrPolicy& operator=(SLSrPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrPolicy* internal_default_instance() {
    return reinterpret_cast<const SLSrPolicy*>(
               &_SLSrPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SLSrPolicy& a, SLSrPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrPolicy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrPolicy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrPolicy& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrPolicy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrPolicy";
  }
  protected:
  explicit SLSrPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCPsFieldNumber = 4,
    kKeyFieldNumber = 2,
    kAttrsFieldNumber = 3,
    kOperationIdFieldNumber = 1,
  };
  // repeated .service_layer.SLSrCandidatePath CPs = 4;
  int cps_size() const;
  private:
  int _internal_cps_size() const;
  public:
  void clear_cps();
  ::service_layer::SLSrCandidatePath* mutable_cps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrCandidatePath >*
      mutable_cps();
  private:
  const ::service_layer::SLSrCandidatePath& _internal_cps(int index) const;
  ::service_layer::SLSrCandidatePath* _internal_add_cps();
  public:
  const ::service_layer::SLSrCandidatePath& cps(int index) const;
  ::service_layer::SLSrCandidatePath* add_cps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrCandidatePath >&
      cps() const;

  // .service_layer.SLSrPolicyKey key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::service_layer::SLSrPolicyKey& key() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrPolicyKey* release_key();
  ::service_layer::SLSrPolicyKey* mutable_key();
  void set_allocated_key(::service_layer::SLSrPolicyKey* key);
  private:
  const ::service_layer::SLSrPolicyKey& _internal_key() const;
  ::service_layer::SLSrPolicyKey* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::service_layer::SLSrPolicyKey* key);
  ::service_layer::SLSrPolicyKey* unsafe_arena_release_key();

  // .service_layer.SLSrPolicyAttributes attrs = 3;
  bool has_attrs() const;
  private:
  bool _internal_has_attrs() const;
  public:
  void clear_attrs();
  const ::service_layer::SLSrPolicyAttributes& attrs() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrPolicyAttributes* release_attrs();
  ::service_layer::SLSrPolicyAttributes* mutable_attrs();
  void set_allocated_attrs(::service_layer::SLSrPolicyAttributes* attrs);
  private:
  const ::service_layer::SLSrPolicyAttributes& _internal_attrs() const;
  ::service_layer::SLSrPolicyAttributes* _internal_mutable_attrs();
  public:
  void unsafe_arena_set_allocated_attrs(
      ::service_layer::SLSrPolicyAttributes* attrs);
  ::service_layer::SLSrPolicyAttributes* unsafe_arena_release_attrs();

  // uint64 operation_id = 1;
  void clear_operation_id();
  uint64_t operation_id() const;
  void set_operation_id(uint64_t value);
  private:
  uint64_t _internal_operation_id() const;
  void _internal_set_operation_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrCandidatePath > cps_;
  ::service_layer::SLSrPolicyKey* key_;
  ::service_layer::SLSrPolicyAttributes* attrs_;
  uint64_t operation_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrPolicyAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrPolicyAttributes) */ {
 public:
  inline SLSrPolicyAttributes() : SLSrPolicyAttributes(nullptr) {}
  ~SLSrPolicyAttributes() override;
  explicit constexpr SLSrPolicyAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrPolicyAttributes(const SLSrPolicyAttributes& from);
  SLSrPolicyAttributes(SLSrPolicyAttributes&& from) noexcept
    : SLSrPolicyAttributes() {
    *this = ::std::move(from);
  }

  inline SLSrPolicyAttributes& operator=(const SLSrPolicyAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrPolicyAttributes& operator=(SLSrPolicyAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrPolicyAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrPolicyAttributes* internal_default_instance() {
    return reinterpret_cast<const SLSrPolicyAttributes*>(
               &_SLSrPolicyAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SLSrPolicyAttributes& a, SLSrPolicyAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrPolicyAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrPolicyAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrPolicyAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrPolicyAttributes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrPolicyAttributes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrPolicyAttributes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrPolicyAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrPolicyAttributes";
  }
  protected:
  explicit SLSrPolicyAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrv6BsidsFieldNumber = 5,
    kMplsBsidFieldNumber = 4,
    kTransitEligibleFieldNumber = 2,
    kDataplaneFieldNumber = 3,
    kProfileIdFieldNumber = 6,
  };
  // repeated .service_layer.SLSrSrv6BindingSID srv6_bsids = 5;
  int srv6_bsids_size() const;
  private:
  int _internal_srv6_bsids_size() const;
  public:
  void clear_srv6_bsids();
  ::service_layer::SLSrSrv6BindingSID* mutable_srv6_bsids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSrv6BindingSID >*
      mutable_srv6_bsids();
  private:
  const ::service_layer::SLSrSrv6BindingSID& _internal_srv6_bsids(int index) const;
  ::service_layer::SLSrSrv6BindingSID* _internal_add_srv6_bsids();
  public:
  const ::service_layer::SLSrSrv6BindingSID& srv6_bsids(int index) const;
  ::service_layer::SLSrSrv6BindingSID* add_srv6_bsids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSrv6BindingSID >&
      srv6_bsids() const;

  // .service_layer.SLSrMPLSBindingSID mpls_bsid = 4;
  bool has_mpls_bsid() const;
  private:
  bool _internal_has_mpls_bsid() const;
  public:
  void clear_mpls_bsid();
  const ::service_layer::SLSrMPLSBindingSID& mpls_bsid() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrMPLSBindingSID* release_mpls_bsid();
  ::service_layer::SLSrMPLSBindingSID* mutable_mpls_bsid();
  void set_allocated_mpls_bsid(::service_layer::SLSrMPLSBindingSID* mpls_bsid);
  private:
  const ::service_layer::SLSrMPLSBindingSID& _internal_mpls_bsid() const;
  ::service_layer::SLSrMPLSBindingSID* _internal_mutable_mpls_bsid();
  public:
  void unsafe_arena_set_allocated_mpls_bsid(
      ::service_layer::SLSrMPLSBindingSID* mpls_bsid);
  ::service_layer::SLSrMPLSBindingSID* unsafe_arena_release_mpls_bsid();

  // bool transit_eligible = 2;
  void clear_transit_eligible();
  bool transit_eligible() const;
  void set_transit_eligible(bool value);
  private:
  bool _internal_transit_eligible() const;
  void _internal_set_transit_eligible(bool value);
  public:

  // .service_layer.SLSrDataplane dataplane = 3;
  void clear_dataplane();
  ::service_layer::SLSrDataplane dataplane() const;
  void set_dataplane(::service_layer::SLSrDataplane value);
  private:
  ::service_layer::SLSrDataplane _internal_dataplane() const;
  void _internal_set_dataplane(::service_layer::SLSrDataplane value);
  public:

  // uint32 profile_id = 6;
  void clear_profile_id();
  uint32_t profile_id() const;
  void set_profile_id(uint32_t value);
  private:
  uint32_t _internal_profile_id() const;
  void _internal_set_profile_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrPolicyAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSrv6BindingSID > srv6_bsids_;
  ::service_layer::SLSrMPLSBindingSID* mpls_bsid_;
  bool transit_eligible_;
  int dataplane_;
  uint32_t profile_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrCandidatePath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrCandidatePath) */ {
 public:
  inline SLSrCandidatePath() : SLSrCandidatePath(nullptr) {}
  ~SLSrCandidatePath() override;
  explicit constexpr SLSrCandidatePath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrCandidatePath(const SLSrCandidatePath& from);
  SLSrCandidatePath(SLSrCandidatePath&& from) noexcept
    : SLSrCandidatePath() {
    *this = ::std::move(from);
  }

  inline SLSrCandidatePath& operator=(const SLSrCandidatePath& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrCandidatePath& operator=(SLSrCandidatePath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrCandidatePath& default_instance() {
    return *internal_default_instance();
  }
  enum CPCase {
    kDynamic = 5,
    kExplicit = 6,
    CP_NOT_SET = 0,
  };

  static inline const SLSrCandidatePath* internal_default_instance() {
    return reinterpret_cast<const SLSrCandidatePath*>(
               &_SLSrCandidatePath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SLSrCandidatePath& a, SLSrCandidatePath& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrCandidatePath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrCandidatePath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrCandidatePath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrCandidatePath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrCandidatePath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrCandidatePath& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrCandidatePath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrCandidatePath";
  }
  protected:
  explicit SLSrCandidatePath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kKeyFieldNumber = 2,
    kPreferenceFieldNumber = 4,
    kDynamicFieldNumber = 5,
    kExplicitFieldNumber = 6,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .service_layer.SLSrCandidatePathKey key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::service_layer::SLSrCandidatePathKey& key() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrCandidatePathKey* release_key();
  ::service_layer::SLSrCandidatePathKey* mutable_key();
  void set_allocated_key(::service_layer::SLSrCandidatePathKey* key);
  private:
  const ::service_layer::SLSrCandidatePathKey& _internal_key() const;
  ::service_layer::SLSrCandidatePathKey* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::service_layer::SLSrCandidatePathKey* key);
  ::service_layer::SLSrCandidatePathKey* unsafe_arena_release_key();

  // optional uint32 preference = 4;
  bool has_preference() const;
  private:
  bool _internal_has_preference() const;
  public:
  void clear_preference();
  uint32_t preference() const;
  void set_preference(uint32_t value);
  private:
  uint32_t _internal_preference() const;
  void _internal_set_preference(uint32_t value);
  public:

  // .service_layer.SLSrDynamicCP dynamic = 5;
  bool has_dynamic() const;
  private:
  bool _internal_has_dynamic() const;
  public:
  void clear_dynamic();
  const ::service_layer::SLSrDynamicCP& dynamic() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrDynamicCP* release_dynamic();
  ::service_layer::SLSrDynamicCP* mutable_dynamic();
  void set_allocated_dynamic(::service_layer::SLSrDynamicCP* dynamic);
  private:
  const ::service_layer::SLSrDynamicCP& _internal_dynamic() const;
  ::service_layer::SLSrDynamicCP* _internal_mutable_dynamic();
  public:
  void unsafe_arena_set_allocated_dynamic(
      ::service_layer::SLSrDynamicCP* dynamic);
  ::service_layer::SLSrDynamicCP* unsafe_arena_release_dynamic();

  // .service_layer.SLSrExplicitCP explicit = 6;
  bool has_explicit_() const;
  private:
  bool _internal_has_explicit_() const;
  public:
  void clear_explicit_();
  const ::service_layer::SLSrExplicitCP& explicit_() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrExplicitCP* release_explicit_();
  ::service_layer::SLSrExplicitCP* mutable_explicit_();
  void set_allocated_explicit_(::service_layer::SLSrExplicitCP* explicit_);
  private:
  const ::service_layer::SLSrExplicitCP& _internal_explicit_() const;
  ::service_layer::SLSrExplicitCP* _internal_mutable_explicit_();
  public:
  void unsafe_arena_set_allocated_explicit_(
      ::service_layer::SLSrExplicitCP* explicit_);
  ::service_layer::SLSrExplicitCP* unsafe_arena_release_explicit_();

  void clear_CP();
  CPCase CP_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLSrCandidatePath)
 private:
  class _Internal;
  void set_has_dynamic();
  void set_has_explicit_();

  inline bool has_CP() const;
  inline void clear_has_CP();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::service_layer::SLSrCandidatePathKey* key_;
  uint32_t preference_;
  union CPUnion {
    constexpr CPUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::service_layer::SLSrDynamicCP* dynamic_;
    ::service_layer::SLSrExplicitCP* explicit__;
  } CP_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrExplicitCP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrExplicitCP) */ {
 public:
  inline SLSrExplicitCP() : SLSrExplicitCP(nullptr) {}
  ~SLSrExplicitCP() override;
  explicit constexpr SLSrExplicitCP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrExplicitCP(const SLSrExplicitCP& from);
  SLSrExplicitCP(SLSrExplicitCP&& from) noexcept
    : SLSrExplicitCP() {
    *this = ::std::move(from);
  }

  inline SLSrExplicitCP& operator=(const SLSrExplicitCP& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrExplicitCP& operator=(SLSrExplicitCP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrExplicitCP& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrExplicitCP* internal_default_instance() {
    return reinterpret_cast<const SLSrExplicitCP*>(
               &_SLSrExplicitCP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SLSrExplicitCP& a, SLSrExplicitCP& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrExplicitCP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrExplicitCP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrExplicitCP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrExplicitCP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrExplicitCP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrExplicitCP& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrExplicitCP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrExplicitCP";
  }
  protected:
  explicit SLSrExplicitCP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentListFieldNumber = 1,
    kMetricTypeFieldNumber = 3,
  };
  // repeated .service_layer.SLSrSegmentList segment_list = 1;
  int segment_list_size() const;
  private:
  int _internal_segment_list_size() const;
  public:
  void clear_segment_list();
  ::service_layer::SLSrSegmentList* mutable_segment_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSegmentList >*
      mutable_segment_list();
  private:
  const ::service_layer::SLSrSegmentList& _internal_segment_list(int index) const;
  ::service_layer::SLSrSegmentList* _internal_add_segment_list();
  public:
  const ::service_layer::SLSrSegmentList& segment_list(int index) const;
  ::service_layer::SLSrSegmentList* add_segment_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSegmentList >&
      segment_list() const;

  // uint32 metric_type = 3;
  void clear_metric_type();
  uint32_t metric_type() const;
  void set_metric_type(uint32_t value);
  private:
  uint32_t _internal_metric_type() const;
  void _internal_set_metric_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrExplicitCP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSegmentList > segment_list_;
  uint32_t metric_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrDynamicCP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrDynamicCP) */ {
 public:
  inline SLSrDynamicCP() : SLSrDynamicCP(nullptr) {}
  ~SLSrDynamicCP() override;
  explicit constexpr SLSrDynamicCP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrDynamicCP(const SLSrDynamicCP& from);
  SLSrDynamicCP(SLSrDynamicCP&& from) noexcept
    : SLSrDynamicCP() {
    *this = ::std::move(from);
  }

  inline SLSrDynamicCP& operator=(const SLSrDynamicCP& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrDynamicCP& operator=(SLSrDynamicCP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrDynamicCP& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrDynamicCP* internal_default_instance() {
    return reinterpret_cast<const SLSrDynamicCP*>(
               &_SLSrDynamicCP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SLSrDynamicCP& a, SLSrDynamicCP& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrDynamicCP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrDynamicCP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrDynamicCP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrDynamicCP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrDynamicCP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrDynamicCP& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrDynamicCP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrDynamicCP";
  }
  protected:
  explicit SLSrDynamicCP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstraintsFieldNumber = 2,
    kMetricTypeFieldNumber = 1,
  };
  // .service_layer.SLSrConstraints constraints = 2;
  bool has_constraints() const;
  private:
  bool _internal_has_constraints() const;
  public:
  void clear_constraints();
  const ::service_layer::SLSrConstraints& constraints() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrConstraints* release_constraints();
  ::service_layer::SLSrConstraints* mutable_constraints();
  void set_allocated_constraints(::service_layer::SLSrConstraints* constraints);
  private:
  const ::service_layer::SLSrConstraints& _internal_constraints() const;
  ::service_layer::SLSrConstraints* _internal_mutable_constraints();
  public:
  void unsafe_arena_set_allocated_constraints(
      ::service_layer::SLSrConstraints* constraints);
  ::service_layer::SLSrConstraints* unsafe_arena_release_constraints();

  // uint32 metric_type = 1;
  void clear_metric_type();
  uint32_t metric_type() const;
  void set_metric_type(uint32_t value);
  private:
  uint32_t _internal_metric_type() const;
  void _internal_set_metric_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrDynamicCP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLSrConstraints* constraints_;
  uint32_t metric_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrConstraints final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrConstraints) */ {
 public:
  inline SLSrConstraints() : SLSrConstraints(nullptr) {}
  ~SLSrConstraints() override;
  explicit constexpr SLSrConstraints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrConstraints(const SLSrConstraints& from);
  SLSrConstraints(SLSrConstraints&& from) noexcept
    : SLSrConstraints() {
    *this = ::std::move(from);
  }

  inline SLSrConstraints& operator=(const SLSrConstraints& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrConstraints& operator=(SLSrConstraints&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrConstraints& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrConstraints* internal_default_instance() {
    return reinterpret_cast<const SLSrConstraints*>(
               &_SLSrConstraints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SLSrConstraints& a, SLSrConstraints& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrConstraints* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrConstraints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrConstraints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrConstraints>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrConstraints& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrConstraints& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrConstraints* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrConstraints";
  }
  protected:
  explicit SLSrConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAffinitiesFieldNumber = 1,
    kProtectionFieldNumber = 2,
    kSidAlgoFieldNumber = 3,
    kMaximumSidDepthFieldNumber = 4,
  };
  // .service_layer.SLSrAffinities affinities = 1;
  bool has_affinities() const;
  private:
  bool _internal_has_affinities() const;
  public:
  void clear_affinities();
  const ::service_layer::SLSrAffinities& affinities() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrAffinities* release_affinities();
  ::service_layer::SLSrAffinities* mutable_affinities();
  void set_allocated_affinities(::service_layer::SLSrAffinities* affinities);
  private:
  const ::service_layer::SLSrAffinities& _internal_affinities() const;
  ::service_layer::SLSrAffinities* _internal_mutable_affinities();
  public:
  void unsafe_arena_set_allocated_affinities(
      ::service_layer::SLSrAffinities* affinities);
  ::service_layer::SLSrAffinities* unsafe_arena_release_affinities();

  // .service_layer.SLSrteProtectionType protection = 2;
  void clear_protection();
  ::service_layer::SLSrteProtectionType protection() const;
  void set_protection(::service_layer::SLSrteProtectionType value);
  private:
  ::service_layer::SLSrteProtectionType _internal_protection() const;
  void _internal_set_protection(::service_layer::SLSrteProtectionType value);
  public:

  // optional uint32 sid_algo = 3;
  bool has_sid_algo() const;
  private:
  bool _internal_has_sid_algo() const;
  public:
  void clear_sid_algo();
  uint32_t sid_algo() const;
  void set_sid_algo(uint32_t value);
  private:
  uint32_t _internal_sid_algo() const;
  void _internal_set_sid_algo(uint32_t value);
  public:

  // uint32 maximum_sid_depth = 4;
  void clear_maximum_sid_depth();
  uint32_t maximum_sid_depth() const;
  void set_maximum_sid_depth(uint32_t value);
  private:
  uint32_t _internal_maximum_sid_depth() const;
  void _internal_set_maximum_sid_depth(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrConstraints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::service_layer::SLSrAffinities* affinities_;
  int protection_;
  uint32_t sid_algo_;
  uint32_t maximum_sid_depth_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrSrv6BindingSID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrSrv6BindingSID) */ {
 public:
  inline SLSrSrv6BindingSID() : SLSrSrv6BindingSID(nullptr) {}
  ~SLSrSrv6BindingSID() override;
  explicit constexpr SLSrSrv6BindingSID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrSrv6BindingSID(const SLSrSrv6BindingSID& from);
  SLSrSrv6BindingSID(SLSrSrv6BindingSID&& from) noexcept
    : SLSrSrv6BindingSID() {
    *this = ::std::move(from);
  }

  inline SLSrSrv6BindingSID& operator=(const SLSrSrv6BindingSID& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrSrv6BindingSID& operator=(SLSrSrv6BindingSID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrSrv6BindingSID& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kDynamic = 2,
    TYPE_NOT_SET = 0,
  };

  static inline const SLSrSrv6BindingSID* internal_default_instance() {
    return reinterpret_cast<const SLSrSrv6BindingSID*>(
               &_SLSrSrv6BindingSID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SLSrSrv6BindingSID& a, SLSrSrv6BindingSID& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrSrv6BindingSID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrSrv6BindingSID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrSrv6BindingSID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrSrv6BindingSID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrSrv6BindingSID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrSrv6BindingSID& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrSrv6BindingSID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrSrv6BindingSID";
  }
  protected:
  explicit SLSrSrv6BindingSID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDynamicFieldNumber = 2,
  };
  // .service_layer.SLSrSrv6DynamicBindingSID dynamic = 2;
  bool has_dynamic() const;
  private:
  bool _internal_has_dynamic() const;
  public:
  void clear_dynamic();
  const ::service_layer::SLSrSrv6DynamicBindingSID& dynamic() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrSrv6DynamicBindingSID* release_dynamic();
  ::service_layer::SLSrSrv6DynamicBindingSID* mutable_dynamic();
  void set_allocated_dynamic(::service_layer::SLSrSrv6DynamicBindingSID* dynamic);
  private:
  const ::service_layer::SLSrSrv6DynamicBindingSID& _internal_dynamic() const;
  ::service_layer::SLSrSrv6DynamicBindingSID* _internal_mutable_dynamic();
  public:
  void unsafe_arena_set_allocated_dynamic(
      ::service_layer::SLSrSrv6DynamicBindingSID* dynamic);
  ::service_layer::SLSrSrv6DynamicBindingSID* unsafe_arena_release_dynamic();

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLSrSrv6BindingSID)
 private:
  class _Internal;
  void set_has_dynamic();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::service_layer::SLSrSrv6DynamicBindingSID* dynamic_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrMPLSBindingSID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrMPLSBindingSID) */ {
 public:
  inline SLSrMPLSBindingSID() : SLSrMPLSBindingSID(nullptr) {}
  ~SLSrMPLSBindingSID() override;
  explicit constexpr SLSrMPLSBindingSID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrMPLSBindingSID(const SLSrMPLSBindingSID& from);
  SLSrMPLSBindingSID(SLSrMPLSBindingSID&& from) noexcept
    : SLSrMPLSBindingSID() {
    *this = ::std::move(from);
  }

  inline SLSrMPLSBindingSID& operator=(const SLSrMPLSBindingSID& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrMPLSBindingSID& operator=(SLSrMPLSBindingSID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrMPLSBindingSID& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrMPLSBindingSID* internal_default_instance() {
    return reinterpret_cast<const SLSrMPLSBindingSID*>(
               &_SLSrMPLSBindingSID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SLSrMPLSBindingSID& a, SLSrMPLSBindingSID& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrMPLSBindingSID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrMPLSBindingSID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrMPLSBindingSID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrMPLSBindingSID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrMPLSBindingSID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrMPLSBindingSID& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrMPLSBindingSID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrMPLSBindingSID";
  }
  protected:
  explicit SLSrMPLSBindingSID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMplsBsidFieldNumber = 1,
  };
  // optional uint32 mpls_bsid = 1;
  bool has_mpls_bsid() const;
  private:
  bool _internal_has_mpls_bsid() const;
  public:
  void clear_mpls_bsid();
  uint32_t mpls_bsid() const;
  void set_mpls_bsid(uint32_t value);
  private:
  uint32_t _internal_mpls_bsid() const;
  void _internal_set_mpls_bsid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrMPLSBindingSID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t mpls_bsid_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrSrv6DynamicBindingSID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrSrv6DynamicBindingSID) */ {
 public:
  inline SLSrSrv6DynamicBindingSID() : SLSrSrv6DynamicBindingSID(nullptr) {}
  ~SLSrSrv6DynamicBindingSID() override;
  explicit constexpr SLSrSrv6DynamicBindingSID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrSrv6DynamicBindingSID(const SLSrSrv6DynamicBindingSID& from);
  SLSrSrv6DynamicBindingSID(SLSrSrv6DynamicBindingSID&& from) noexcept
    : SLSrSrv6DynamicBindingSID() {
    *this = ::std::move(from);
  }

  inline SLSrSrv6DynamicBindingSID& operator=(const SLSrSrv6DynamicBindingSID& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrSrv6DynamicBindingSID& operator=(SLSrSrv6DynamicBindingSID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrSrv6DynamicBindingSID& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrSrv6DynamicBindingSID* internal_default_instance() {
    return reinterpret_cast<const SLSrSrv6DynamicBindingSID*>(
               &_SLSrSrv6DynamicBindingSID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SLSrSrv6DynamicBindingSID& a, SLSrSrv6DynamicBindingSID& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrSrv6DynamicBindingSID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrSrv6DynamicBindingSID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrSrv6DynamicBindingSID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrSrv6DynamicBindingSID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrSrv6DynamicBindingSID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrSrv6DynamicBindingSID& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrSrv6DynamicBindingSID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrSrv6DynamicBindingSID";
  }
  protected:
  explicit SLSrSrv6DynamicBindingSID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBehaviorFieldNumber = 1,
  };
  // uint32 behavior = 1;
  void clear_behavior();
  uint32_t behavior() const;
  void set_behavior(uint32_t value);
  private:
  uint32_t _internal_behavior() const;
  void _internal_set_behavior(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrSrv6DynamicBindingSID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t behavior_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SLSrPolicyMsg

// .service_layer.SLSrPolicyOpen open = 1;
inline bool SLSrPolicyMsg::_internal_has_open() const {
  return msg_type_case() == kOpen;
}
inline bool SLSrPolicyMsg::has_open() const {
  return _internal_has_open();
}
inline void SLSrPolicyMsg::set_has_open() {
  _oneof_case_[0] = kOpen;
}
inline void SLSrPolicyMsg::clear_open() {
  if (_internal_has_open()) {
    if (GetArenaForAllocation() == nullptr) {
      delete msg_type_.open_;
    }
    clear_has_msg_type();
  }
}
inline ::service_layer::SLSrPolicyOpen* SLSrPolicyMsg::release_open() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrPolicyMsg.open)
  if (_internal_has_open()) {
    clear_has_msg_type();
      ::service_layer::SLSrPolicyOpen* temp = msg_type_.open_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_type_.open_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLSrPolicyOpen& SLSrPolicyMsg::_internal_open() const {
  return _internal_has_open()
      ? *msg_type_.open_
      : reinterpret_cast< ::service_layer::SLSrPolicyOpen&>(::service_layer::_SLSrPolicyOpen_default_instance_);
}
inline const ::service_layer::SLSrPolicyOpen& SLSrPolicyMsg::open() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyMsg.open)
  return _internal_open();
}
inline ::service_layer::SLSrPolicyOpen* SLSrPolicyMsg::unsafe_arena_release_open() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLSrPolicyMsg.open)
  if (_internal_has_open()) {
    clear_has_msg_type();
    ::service_layer::SLSrPolicyOpen* temp = msg_type_.open_;
    msg_type_.open_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLSrPolicyMsg::unsafe_arena_set_allocated_open(::service_layer::SLSrPolicyOpen* open) {
  clear_msg_type();
  if (open) {
    set_has_open();
    msg_type_.open_ = open;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrPolicyMsg.open)
}
inline ::service_layer::SLSrPolicyOpen* SLSrPolicyMsg::_internal_mutable_open() {
  if (!_internal_has_open()) {
    clear_msg_type();
    set_has_open();
    msg_type_.open_ = CreateMaybeMessage< ::service_layer::SLSrPolicyOpen >(GetArenaForAllocation());
  }
  return msg_type_.open_;
}
inline ::service_layer::SLSrPolicyOpen* SLSrPolicyMsg::mutable_open() {
  ::service_layer::SLSrPolicyOpen* _msg = _internal_mutable_open();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrPolicyMsg.open)
  return _msg;
}

// .service_layer.SLSrPolicyRequests requests = 2;
inline bool SLSrPolicyMsg::_internal_has_requests() const {
  return msg_type_case() == kRequests;
}
inline bool SLSrPolicyMsg::has_requests() const {
  return _internal_has_requests();
}
inline void SLSrPolicyMsg::set_has_requests() {
  _oneof_case_[0] = kRequests;
}
inline void SLSrPolicyMsg::clear_requests() {
  if (_internal_has_requests()) {
    if (GetArenaForAllocation() == nullptr) {
      delete msg_type_.requests_;
    }
    clear_has_msg_type();
  }
}
inline ::service_layer::SLSrPolicyRequests* SLSrPolicyMsg::release_requests() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrPolicyMsg.requests)
  if (_internal_has_requests()) {
    clear_has_msg_type();
      ::service_layer::SLSrPolicyRequests* temp = msg_type_.requests_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_type_.requests_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLSrPolicyRequests& SLSrPolicyMsg::_internal_requests() const {
  return _internal_has_requests()
      ? *msg_type_.requests_
      : reinterpret_cast< ::service_layer::SLSrPolicyRequests&>(::service_layer::_SLSrPolicyRequests_default_instance_);
}
inline const ::service_layer::SLSrPolicyRequests& SLSrPolicyMsg::requests() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyMsg.requests)
  return _internal_requests();
}
inline ::service_layer::SLSrPolicyRequests* SLSrPolicyMsg::unsafe_arena_release_requests() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLSrPolicyMsg.requests)
  if (_internal_has_requests()) {
    clear_has_msg_type();
    ::service_layer::SLSrPolicyRequests* temp = msg_type_.requests_;
    msg_type_.requests_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLSrPolicyMsg::unsafe_arena_set_allocated_requests(::service_layer::SLSrPolicyRequests* requests) {
  clear_msg_type();
  if (requests) {
    set_has_requests();
    msg_type_.requests_ = requests;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrPolicyMsg.requests)
}
inline ::service_layer::SLSrPolicyRequests* SLSrPolicyMsg::_internal_mutable_requests() {
  if (!_internal_has_requests()) {
    clear_msg_type();
    set_has_requests();
    msg_type_.requests_ = CreateMaybeMessage< ::service_layer::SLSrPolicyRequests >(GetArenaForAllocation());
  }
  return msg_type_.requests_;
}
inline ::service_layer::SLSrPolicyRequests* SLSrPolicyMsg::mutable_requests() {
  ::service_layer::SLSrPolicyRequests* _msg = _internal_mutable_requests();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrPolicyMsg.requests)
  return _msg;
}

inline bool SLSrPolicyMsg::has_msg_type() const {
  return msg_type_case() != MSG_TYPE_NOT_SET;
}
inline void SLSrPolicyMsg::clear_has_msg_type() {
  _oneof_case_[0] = MSG_TYPE_NOT_SET;
}
inline SLSrPolicyMsg::MsgTypeCase SLSrPolicyMsg::msg_type_case() const {
  return SLSrPolicyMsg::MsgTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLSrPolicyRsp_PolicyRsp

// uint64 operation_id = 1;
inline void SLSrPolicyRsp_PolicyRsp::clear_operation_id() {
  operation_id_ = uint64_t{0u};
}
inline uint64_t SLSrPolicyRsp_PolicyRsp::_internal_operation_id() const {
  return operation_id_;
}
inline uint64_t SLSrPolicyRsp_PolicyRsp::operation_id() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyRsp.PolicyRsp.operation_id)
  return _internal_operation_id();
}
inline void SLSrPolicyRsp_PolicyRsp::_internal_set_operation_id(uint64_t value) {
  
  operation_id_ = value;
}
inline void SLSrPolicyRsp_PolicyRsp::set_operation_id(uint64_t value) {
  _internal_set_operation_id(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrPolicyRsp.PolicyRsp.operation_id)
}

// .service_layer.SLSrPolicyKey key = 2;
inline bool SLSrPolicyRsp_PolicyRsp::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool SLSrPolicyRsp_PolicyRsp::has_key() const {
  return _internal_has_key();
}
inline const ::service_layer::SLSrPolicyKey& SLSrPolicyRsp_PolicyRsp::_internal_key() const {
  const ::service_layer::SLSrPolicyKey* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrPolicyKey&>(
      ::service_layer::_SLSrPolicyKey_default_instance_);
}
inline const ::service_layer::SLSrPolicyKey& SLSrPolicyRsp_PolicyRsp::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyRsp.PolicyRsp.key)
  return _internal_key();
}
inline void SLSrPolicyRsp_PolicyRsp::unsafe_arena_set_allocated_key(
    ::service_layer::SLSrPolicyKey* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrPolicyRsp.PolicyRsp.key)
}
inline ::service_layer::SLSrPolicyKey* SLSrPolicyRsp_PolicyRsp::release_key() {
  
  ::service_layer::SLSrPolicyKey* temp = key_;
  key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrPolicyKey* SLSrPolicyRsp_PolicyRsp::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrPolicyRsp.PolicyRsp.key)
  
  ::service_layer::SLSrPolicyKey* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrPolicyKey* SLSrPolicyRsp_PolicyRsp::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrPolicyKey>(GetArenaForAllocation());
    key_ = p;
  }
  return key_;
}
inline ::service_layer::SLSrPolicyKey* SLSrPolicyRsp_PolicyRsp::mutable_key() {
  ::service_layer::SLSrPolicyKey* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrPolicyRsp.PolicyRsp.key)
  return _msg;
}
inline void SLSrPolicyRsp_PolicyRsp::set_allocated_key(::service_layer::SLSrPolicyKey* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key));
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrPolicyRsp.PolicyRsp.key)
}

// .service_layer.SLSrStatus status = 3;
inline bool SLSrPolicyRsp_PolicyRsp::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SLSrPolicyRsp_PolicyRsp::has_status() const {
  return _internal_has_status();
}
inline const ::service_layer::SLSrStatus& SLSrPolicyRsp_PolicyRsp::_internal_status() const {
  const ::service_layer::SLSrStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrStatus&>(
      ::service_layer::_SLSrStatus_default_instance_);
}
inline const ::service_layer::SLSrStatus& SLSrPolicyRsp_PolicyRsp::status() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyRsp.PolicyRsp.status)
  return _internal_status();
}
inline void SLSrPolicyRsp_PolicyRsp::unsafe_arena_set_allocated_status(
    ::service_layer::SLSrStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrPolicyRsp.PolicyRsp.status)
}
inline ::service_layer::SLSrStatus* SLSrPolicyRsp_PolicyRsp::release_status() {
  
  ::service_layer::SLSrStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrStatus* SLSrPolicyRsp_PolicyRsp::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrPolicyRsp.PolicyRsp.status)
  
  ::service_layer::SLSrStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrStatus* SLSrPolicyRsp_PolicyRsp::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::service_layer::SLSrStatus* SLSrPolicyRsp_PolicyRsp::mutable_status() {
  ::service_layer::SLSrStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrPolicyRsp.PolicyRsp.status)
  return _msg;
}
inline void SLSrPolicyRsp_PolicyRsp::set_allocated_status(::service_layer::SLSrStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrPolicyRsp.PolicyRsp.status)
}

// -------------------------------------------------------------------

// SLSrPolicyRsp

// repeated .service_layer.SLSrPolicyRsp.PolicyRsp responses = 1;
inline int SLSrPolicyRsp::_internal_responses_size() const {
  return responses_.size();
}
inline int SLSrPolicyRsp::responses_size() const {
  return _internal_responses_size();
}
inline void SLSrPolicyRsp::clear_responses() {
  responses_.Clear();
}
inline ::service_layer::SLSrPolicyRsp_PolicyRsp* SLSrPolicyRsp::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrPolicyRsp.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrPolicyRsp_PolicyRsp >*
SLSrPolicyRsp::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLSrPolicyRsp.responses)
  return &responses_;
}
inline const ::service_layer::SLSrPolicyRsp_PolicyRsp& SLSrPolicyRsp::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::service_layer::SLSrPolicyRsp_PolicyRsp& SLSrPolicyRsp::responses(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyRsp.responses)
  return _internal_responses(index);
}
inline ::service_layer::SLSrPolicyRsp_PolicyRsp* SLSrPolicyRsp::_internal_add_responses() {
  return responses_.Add();
}
inline ::service_layer::SLSrPolicyRsp_PolicyRsp* SLSrPolicyRsp::add_responses() {
  ::service_layer::SLSrPolicyRsp_PolicyRsp* _add = _internal_add_responses();
  // @@protoc_insertion_point(field_add:service_layer.SLSrPolicyRsp.responses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrPolicyRsp_PolicyRsp >&
SLSrPolicyRsp::responses() const {
  // @@protoc_insertion_point(field_list:service_layer.SLSrPolicyRsp.responses)
  return responses_;
}

// .service_layer.SLSrStatus status = 2;
inline bool SLSrPolicyRsp::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SLSrPolicyRsp::has_status() const {
  return _internal_has_status();
}
inline const ::service_layer::SLSrStatus& SLSrPolicyRsp::_internal_status() const {
  const ::service_layer::SLSrStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrStatus&>(
      ::service_layer::_SLSrStatus_default_instance_);
}
inline const ::service_layer::SLSrStatus& SLSrPolicyRsp::status() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyRsp.status)
  return _internal_status();
}
inline void SLSrPolicyRsp::unsafe_arena_set_allocated_status(
    ::service_layer::SLSrStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrPolicyRsp.status)
}
inline ::service_layer::SLSrStatus* SLSrPolicyRsp::release_status() {
  
  ::service_layer::SLSrStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrStatus* SLSrPolicyRsp::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrPolicyRsp.status)
  
  ::service_layer::SLSrStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrStatus* SLSrPolicyRsp::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::service_layer::SLSrStatus* SLSrPolicyRsp::mutable_status() {
  ::service_layer::SLSrStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrPolicyRsp.status)
  return _msg;
}
inline void SLSrPolicyRsp::set_allocated_status(::service_layer::SLSrStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrPolicyRsp.status)
}

// -------------------------------------------------------------------

// SLSrPolicyOpen

// string client_id = 1;
inline void SLSrPolicyOpen::clear_client_id() {
  client_id_.ClearToEmpty();
}
inline const std::string& SLSrPolicyOpen::client_id() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyOpen.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLSrPolicyOpen::set_client_id(ArgT0&& arg0, ArgT... args) {
 
 client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrPolicyOpen.client_id)
}
inline std::string* SLSrPolicyOpen::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrPolicyOpen.client_id)
  return _s;
}
inline const std::string& SLSrPolicyOpen::_internal_client_id() const {
  return client_id_.Get();
}
inline void SLSrPolicyOpen::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrPolicyOpen::_internal_mutable_client_id() {
  
  return client_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrPolicyOpen::release_client_id() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrPolicyOpen.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLSrPolicyOpen::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrPolicyOpen.client_id)
}

// .service_layer.SLSrPolicyOpen.SLSrPersistenceMode mode = 3;
inline void SLSrPolicyOpen::clear_mode() {
  mode_ = 0;
}
inline ::service_layer::SLSrPolicyOpen_SLSrPersistenceMode SLSrPolicyOpen::_internal_mode() const {
  return static_cast< ::service_layer::SLSrPolicyOpen_SLSrPersistenceMode >(mode_);
}
inline ::service_layer::SLSrPolicyOpen_SLSrPersistenceMode SLSrPolicyOpen::mode() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyOpen.mode)
  return _internal_mode();
}
inline void SLSrPolicyOpen::_internal_set_mode(::service_layer::SLSrPolicyOpen_SLSrPersistenceMode value) {
  
  mode_ = value;
}
inline void SLSrPolicyOpen::set_mode(::service_layer::SLSrPolicyOpen_SLSrPersistenceMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrPolicyOpen.mode)
}

// -------------------------------------------------------------------

// SLSrPolicyRequests

// repeated .service_layer.SLSrPolicyReq request = 1;
inline int SLSrPolicyRequests::_internal_request_size() const {
  return request_.size();
}
inline int SLSrPolicyRequests::request_size() const {
  return _internal_request_size();
}
inline void SLSrPolicyRequests::clear_request() {
  request_.Clear();
}
inline ::service_layer::SLSrPolicyReq* SLSrPolicyRequests::mutable_request(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrPolicyRequests.request)
  return request_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrPolicyReq >*
SLSrPolicyRequests::mutable_request() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLSrPolicyRequests.request)
  return &request_;
}
inline const ::service_layer::SLSrPolicyReq& SLSrPolicyRequests::_internal_request(int index) const {
  return request_.Get(index);
}
inline const ::service_layer::SLSrPolicyReq& SLSrPolicyRequests::request(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyRequests.request)
  return _internal_request(index);
}
inline ::service_layer::SLSrPolicyReq* SLSrPolicyRequests::_internal_add_request() {
  return request_.Add();
}
inline ::service_layer::SLSrPolicyReq* SLSrPolicyRequests::add_request() {
  ::service_layer::SLSrPolicyReq* _add = _internal_add_request();
  // @@protoc_insertion_point(field_add:service_layer.SLSrPolicyRequests.request)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrPolicyReq >&
SLSrPolicyRequests::request() const {
  // @@protoc_insertion_point(field_list:service_layer.SLSrPolicyRequests.request)
  return request_;
}

// -------------------------------------------------------------------

// SLSrPolicyReq

// .service_layer.SLSrPolicyReq.SLSrOp operation = 1;
inline void SLSrPolicyReq::clear_operation() {
  operation_ = 0;
}
inline ::service_layer::SLSrPolicyReq_SLSrOp SLSrPolicyReq::_internal_operation() const {
  return static_cast< ::service_layer::SLSrPolicyReq_SLSrOp >(operation_);
}
inline ::service_layer::SLSrPolicyReq_SLSrOp SLSrPolicyReq::operation() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyReq.operation)
  return _internal_operation();
}
inline void SLSrPolicyReq::_internal_set_operation(::service_layer::SLSrPolicyReq_SLSrOp value) {
  
  operation_ = value;
}
inline void SLSrPolicyReq::set_operation(::service_layer::SLSrPolicyReq_SLSrOp value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrPolicyReq.operation)
}

// .service_layer.SLSrPolicy policy = 2;
inline bool SLSrPolicyReq::_internal_has_policy() const {
  return this != internal_default_instance() && policy_ != nullptr;
}
inline bool SLSrPolicyReq::has_policy() const {
  return _internal_has_policy();
}
inline void SLSrPolicyReq::clear_policy() {
  if (GetArenaForAllocation() == nullptr && policy_ != nullptr) {
    delete policy_;
  }
  policy_ = nullptr;
}
inline const ::service_layer::SLSrPolicy& SLSrPolicyReq::_internal_policy() const {
  const ::service_layer::SLSrPolicy* p = policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrPolicy&>(
      ::service_layer::_SLSrPolicy_default_instance_);
}
inline const ::service_layer::SLSrPolicy& SLSrPolicyReq::policy() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyReq.policy)
  return _internal_policy();
}
inline void SLSrPolicyReq::unsafe_arena_set_allocated_policy(
    ::service_layer::SLSrPolicy* policy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(policy_);
  }
  policy_ = policy;
  if (policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrPolicyReq.policy)
}
inline ::service_layer::SLSrPolicy* SLSrPolicyReq::release_policy() {
  
  ::service_layer::SLSrPolicy* temp = policy_;
  policy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrPolicy* SLSrPolicyReq::unsafe_arena_release_policy() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrPolicyReq.policy)
  
  ::service_layer::SLSrPolicy* temp = policy_;
  policy_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrPolicy* SLSrPolicyReq::_internal_mutable_policy() {
  
  if (policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrPolicy>(GetArenaForAllocation());
    policy_ = p;
  }
  return policy_;
}
inline ::service_layer::SLSrPolicy* SLSrPolicyReq::mutable_policy() {
  ::service_layer::SLSrPolicy* _msg = _internal_mutable_policy();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrPolicyReq.policy)
  return _msg;
}
inline void SLSrPolicyReq::set_allocated_policy(::service_layer::SLSrPolicy* policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete policy_;
  }
  if (policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrPolicy>::GetOwningArena(policy);
    if (message_arena != submessage_arena) {
      policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy, submessage_arena);
    }
    
  } else {
    
  }
  policy_ = policy;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrPolicyReq.policy)
}

// -------------------------------------------------------------------

// SLSrEndOfReplay

// -------------------------------------------------------------------

// SLSrStartOfReplay

// -------------------------------------------------------------------

// SLSrPolicy

// uint64 operation_id = 1;
inline void SLSrPolicy::clear_operation_id() {
  operation_id_ = uint64_t{0u};
}
inline uint64_t SLSrPolicy::_internal_operation_id() const {
  return operation_id_;
}
inline uint64_t SLSrPolicy::operation_id() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicy.operation_id)
  return _internal_operation_id();
}
inline void SLSrPolicy::_internal_set_operation_id(uint64_t value) {
  
  operation_id_ = value;
}
inline void SLSrPolicy::set_operation_id(uint64_t value) {
  _internal_set_operation_id(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrPolicy.operation_id)
}

// .service_layer.SLSrPolicyKey key = 2;
inline bool SLSrPolicy::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool SLSrPolicy::has_key() const {
  return _internal_has_key();
}
inline const ::service_layer::SLSrPolicyKey& SLSrPolicy::_internal_key() const {
  const ::service_layer::SLSrPolicyKey* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrPolicyKey&>(
      ::service_layer::_SLSrPolicyKey_default_instance_);
}
inline const ::service_layer::SLSrPolicyKey& SLSrPolicy::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicy.key)
  return _internal_key();
}
inline void SLSrPolicy::unsafe_arena_set_allocated_key(
    ::service_layer::SLSrPolicyKey* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrPolicy.key)
}
inline ::service_layer::SLSrPolicyKey* SLSrPolicy::release_key() {
  
  ::service_layer::SLSrPolicyKey* temp = key_;
  key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrPolicyKey* SLSrPolicy::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrPolicy.key)
  
  ::service_layer::SLSrPolicyKey* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrPolicyKey* SLSrPolicy::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrPolicyKey>(GetArenaForAllocation());
    key_ = p;
  }
  return key_;
}
inline ::service_layer::SLSrPolicyKey* SLSrPolicy::mutable_key() {
  ::service_layer::SLSrPolicyKey* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrPolicy.key)
  return _msg;
}
inline void SLSrPolicy::set_allocated_key(::service_layer::SLSrPolicyKey* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key));
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrPolicy.key)
}

// .service_layer.SLSrPolicyAttributes attrs = 3;
inline bool SLSrPolicy::_internal_has_attrs() const {
  return this != internal_default_instance() && attrs_ != nullptr;
}
inline bool SLSrPolicy::has_attrs() const {
  return _internal_has_attrs();
}
inline void SLSrPolicy::clear_attrs() {
  if (GetArenaForAllocation() == nullptr && attrs_ != nullptr) {
    delete attrs_;
  }
  attrs_ = nullptr;
}
inline const ::service_layer::SLSrPolicyAttributes& SLSrPolicy::_internal_attrs() const {
  const ::service_layer::SLSrPolicyAttributes* p = attrs_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrPolicyAttributes&>(
      ::service_layer::_SLSrPolicyAttributes_default_instance_);
}
inline const ::service_layer::SLSrPolicyAttributes& SLSrPolicy::attrs() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicy.attrs)
  return _internal_attrs();
}
inline void SLSrPolicy::unsafe_arena_set_allocated_attrs(
    ::service_layer::SLSrPolicyAttributes* attrs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attrs_);
  }
  attrs_ = attrs;
  if (attrs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrPolicy.attrs)
}
inline ::service_layer::SLSrPolicyAttributes* SLSrPolicy::release_attrs() {
  
  ::service_layer::SLSrPolicyAttributes* temp = attrs_;
  attrs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrPolicyAttributes* SLSrPolicy::unsafe_arena_release_attrs() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrPolicy.attrs)
  
  ::service_layer::SLSrPolicyAttributes* temp = attrs_;
  attrs_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrPolicyAttributes* SLSrPolicy::_internal_mutable_attrs() {
  
  if (attrs_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrPolicyAttributes>(GetArenaForAllocation());
    attrs_ = p;
  }
  return attrs_;
}
inline ::service_layer::SLSrPolicyAttributes* SLSrPolicy::mutable_attrs() {
  ::service_layer::SLSrPolicyAttributes* _msg = _internal_mutable_attrs();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrPolicy.attrs)
  return _msg;
}
inline void SLSrPolicy::set_allocated_attrs(::service_layer::SLSrPolicyAttributes* attrs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attrs_;
  }
  if (attrs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrPolicyAttributes>::GetOwningArena(attrs);
    if (message_arena != submessage_arena) {
      attrs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attrs, submessage_arena);
    }
    
  } else {
    
  }
  attrs_ = attrs;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrPolicy.attrs)
}

// repeated .service_layer.SLSrCandidatePath CPs = 4;
inline int SLSrPolicy::_internal_cps_size() const {
  return cps_.size();
}
inline int SLSrPolicy::cps_size() const {
  return _internal_cps_size();
}
inline void SLSrPolicy::clear_cps() {
  cps_.Clear();
}
inline ::service_layer::SLSrCandidatePath* SLSrPolicy::mutable_cps(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrPolicy.CPs)
  return cps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrCandidatePath >*
SLSrPolicy::mutable_cps() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLSrPolicy.CPs)
  return &cps_;
}
inline const ::service_layer::SLSrCandidatePath& SLSrPolicy::_internal_cps(int index) const {
  return cps_.Get(index);
}
inline const ::service_layer::SLSrCandidatePath& SLSrPolicy::cps(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicy.CPs)
  return _internal_cps(index);
}
inline ::service_layer::SLSrCandidatePath* SLSrPolicy::_internal_add_cps() {
  return cps_.Add();
}
inline ::service_layer::SLSrCandidatePath* SLSrPolicy::add_cps() {
  ::service_layer::SLSrCandidatePath* _add = _internal_add_cps();
  // @@protoc_insertion_point(field_add:service_layer.SLSrPolicy.CPs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrCandidatePath >&
SLSrPolicy::cps() const {
  // @@protoc_insertion_point(field_list:service_layer.SLSrPolicy.CPs)
  return cps_;
}

// -------------------------------------------------------------------

// SLSrPolicyAttributes

// bool transit_eligible = 2;
inline void SLSrPolicyAttributes::clear_transit_eligible() {
  transit_eligible_ = false;
}
inline bool SLSrPolicyAttributes::_internal_transit_eligible() const {
  return transit_eligible_;
}
inline bool SLSrPolicyAttributes::transit_eligible() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyAttributes.transit_eligible)
  return _internal_transit_eligible();
}
inline void SLSrPolicyAttributes::_internal_set_transit_eligible(bool value) {
  
  transit_eligible_ = value;
}
inline void SLSrPolicyAttributes::set_transit_eligible(bool value) {
  _internal_set_transit_eligible(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrPolicyAttributes.transit_eligible)
}

// .service_layer.SLSrDataplane dataplane = 3;
inline void SLSrPolicyAttributes::clear_dataplane() {
  dataplane_ = 0;
}
inline ::service_layer::SLSrDataplane SLSrPolicyAttributes::_internal_dataplane() const {
  return static_cast< ::service_layer::SLSrDataplane >(dataplane_);
}
inline ::service_layer::SLSrDataplane SLSrPolicyAttributes::dataplane() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyAttributes.dataplane)
  return _internal_dataplane();
}
inline void SLSrPolicyAttributes::_internal_set_dataplane(::service_layer::SLSrDataplane value) {
  
  dataplane_ = value;
}
inline void SLSrPolicyAttributes::set_dataplane(::service_layer::SLSrDataplane value) {
  _internal_set_dataplane(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrPolicyAttributes.dataplane)
}

// .service_layer.SLSrMPLSBindingSID mpls_bsid = 4;
inline bool SLSrPolicyAttributes::_internal_has_mpls_bsid() const {
  return this != internal_default_instance() && mpls_bsid_ != nullptr;
}
inline bool SLSrPolicyAttributes::has_mpls_bsid() const {
  return _internal_has_mpls_bsid();
}
inline void SLSrPolicyAttributes::clear_mpls_bsid() {
  if (GetArenaForAllocation() == nullptr && mpls_bsid_ != nullptr) {
    delete mpls_bsid_;
  }
  mpls_bsid_ = nullptr;
}
inline const ::service_layer::SLSrMPLSBindingSID& SLSrPolicyAttributes::_internal_mpls_bsid() const {
  const ::service_layer::SLSrMPLSBindingSID* p = mpls_bsid_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrMPLSBindingSID&>(
      ::service_layer::_SLSrMPLSBindingSID_default_instance_);
}
inline const ::service_layer::SLSrMPLSBindingSID& SLSrPolicyAttributes::mpls_bsid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyAttributes.mpls_bsid)
  return _internal_mpls_bsid();
}
inline void SLSrPolicyAttributes::unsafe_arena_set_allocated_mpls_bsid(
    ::service_layer::SLSrMPLSBindingSID* mpls_bsid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mpls_bsid_);
  }
  mpls_bsid_ = mpls_bsid;
  if (mpls_bsid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrPolicyAttributes.mpls_bsid)
}
inline ::service_layer::SLSrMPLSBindingSID* SLSrPolicyAttributes::release_mpls_bsid() {
  
  ::service_layer::SLSrMPLSBindingSID* temp = mpls_bsid_;
  mpls_bsid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrMPLSBindingSID* SLSrPolicyAttributes::unsafe_arena_release_mpls_bsid() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrPolicyAttributes.mpls_bsid)
  
  ::service_layer::SLSrMPLSBindingSID* temp = mpls_bsid_;
  mpls_bsid_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrMPLSBindingSID* SLSrPolicyAttributes::_internal_mutable_mpls_bsid() {
  
  if (mpls_bsid_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrMPLSBindingSID>(GetArenaForAllocation());
    mpls_bsid_ = p;
  }
  return mpls_bsid_;
}
inline ::service_layer::SLSrMPLSBindingSID* SLSrPolicyAttributes::mutable_mpls_bsid() {
  ::service_layer::SLSrMPLSBindingSID* _msg = _internal_mutable_mpls_bsid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrPolicyAttributes.mpls_bsid)
  return _msg;
}
inline void SLSrPolicyAttributes::set_allocated_mpls_bsid(::service_layer::SLSrMPLSBindingSID* mpls_bsid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mpls_bsid_;
  }
  if (mpls_bsid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrMPLSBindingSID>::GetOwningArena(mpls_bsid);
    if (message_arena != submessage_arena) {
      mpls_bsid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mpls_bsid, submessage_arena);
    }
    
  } else {
    
  }
  mpls_bsid_ = mpls_bsid;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrPolicyAttributes.mpls_bsid)
}

// repeated .service_layer.SLSrSrv6BindingSID srv6_bsids = 5;
inline int SLSrPolicyAttributes::_internal_srv6_bsids_size() const {
  return srv6_bsids_.size();
}
inline int SLSrPolicyAttributes::srv6_bsids_size() const {
  return _internal_srv6_bsids_size();
}
inline void SLSrPolicyAttributes::clear_srv6_bsids() {
  srv6_bsids_.Clear();
}
inline ::service_layer::SLSrSrv6BindingSID* SLSrPolicyAttributes::mutable_srv6_bsids(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrPolicyAttributes.srv6_bsids)
  return srv6_bsids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSrv6BindingSID >*
SLSrPolicyAttributes::mutable_srv6_bsids() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLSrPolicyAttributes.srv6_bsids)
  return &srv6_bsids_;
}
inline const ::service_layer::SLSrSrv6BindingSID& SLSrPolicyAttributes::_internal_srv6_bsids(int index) const {
  return srv6_bsids_.Get(index);
}
inline const ::service_layer::SLSrSrv6BindingSID& SLSrPolicyAttributes::srv6_bsids(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyAttributes.srv6_bsids)
  return _internal_srv6_bsids(index);
}
inline ::service_layer::SLSrSrv6BindingSID* SLSrPolicyAttributes::_internal_add_srv6_bsids() {
  return srv6_bsids_.Add();
}
inline ::service_layer::SLSrSrv6BindingSID* SLSrPolicyAttributes::add_srv6_bsids() {
  ::service_layer::SLSrSrv6BindingSID* _add = _internal_add_srv6_bsids();
  // @@protoc_insertion_point(field_add:service_layer.SLSrPolicyAttributes.srv6_bsids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSrv6BindingSID >&
SLSrPolicyAttributes::srv6_bsids() const {
  // @@protoc_insertion_point(field_list:service_layer.SLSrPolicyAttributes.srv6_bsids)
  return srv6_bsids_;
}

// uint32 profile_id = 6;
inline void SLSrPolicyAttributes::clear_profile_id() {
  profile_id_ = 0u;
}
inline uint32_t SLSrPolicyAttributes::_internal_profile_id() const {
  return profile_id_;
}
inline uint32_t SLSrPolicyAttributes::profile_id() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyAttributes.profile_id)
  return _internal_profile_id();
}
inline void SLSrPolicyAttributes::_internal_set_profile_id(uint32_t value) {
  
  profile_id_ = value;
}
inline void SLSrPolicyAttributes::set_profile_id(uint32_t value) {
  _internal_set_profile_id(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrPolicyAttributes.profile_id)
}

// -------------------------------------------------------------------

// SLSrCandidatePath

// .service_layer.SLSrCandidatePathKey key = 2;
inline bool SLSrCandidatePath::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool SLSrCandidatePath::has_key() const {
  return _internal_has_key();
}
inline const ::service_layer::SLSrCandidatePathKey& SLSrCandidatePath::_internal_key() const {
  const ::service_layer::SLSrCandidatePathKey* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrCandidatePathKey&>(
      ::service_layer::_SLSrCandidatePathKey_default_instance_);
}
inline const ::service_layer::SLSrCandidatePathKey& SLSrCandidatePath::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrCandidatePath.key)
  return _internal_key();
}
inline void SLSrCandidatePath::unsafe_arena_set_allocated_key(
    ::service_layer::SLSrCandidatePathKey* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrCandidatePath.key)
}
inline ::service_layer::SLSrCandidatePathKey* SLSrCandidatePath::release_key() {
  
  ::service_layer::SLSrCandidatePathKey* temp = key_;
  key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrCandidatePathKey* SLSrCandidatePath::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrCandidatePath.key)
  
  ::service_layer::SLSrCandidatePathKey* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrCandidatePathKey* SLSrCandidatePath::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrCandidatePathKey>(GetArenaForAllocation());
    key_ = p;
  }
  return key_;
}
inline ::service_layer::SLSrCandidatePathKey* SLSrCandidatePath::mutable_key() {
  ::service_layer::SLSrCandidatePathKey* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrCandidatePath.key)
  return _msg;
}
inline void SLSrCandidatePath::set_allocated_key(::service_layer::SLSrCandidatePathKey* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key));
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrCandidatePath.key)
}

// string name = 3;
inline void SLSrCandidatePath::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SLSrCandidatePath::name() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrCandidatePath.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLSrCandidatePath::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrCandidatePath.name)
}
inline std::string* SLSrCandidatePath::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrCandidatePath.name)
  return _s;
}
inline const std::string& SLSrCandidatePath::_internal_name() const {
  return name_.Get();
}
inline void SLSrCandidatePath::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrCandidatePath::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrCandidatePath::release_name() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrCandidatePath.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLSrCandidatePath::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrCandidatePath.name)
}

// optional uint32 preference = 4;
inline bool SLSrCandidatePath::_internal_has_preference() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SLSrCandidatePath::has_preference() const {
  return _internal_has_preference();
}
inline void SLSrCandidatePath::clear_preference() {
  preference_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t SLSrCandidatePath::_internal_preference() const {
  return preference_;
}
inline uint32_t SLSrCandidatePath::preference() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrCandidatePath.preference)
  return _internal_preference();
}
inline void SLSrCandidatePath::_internal_set_preference(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  preference_ = value;
}
inline void SLSrCandidatePath::set_preference(uint32_t value) {
  _internal_set_preference(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrCandidatePath.preference)
}

// .service_layer.SLSrDynamicCP dynamic = 5;
inline bool SLSrCandidatePath::_internal_has_dynamic() const {
  return CP_case() == kDynamic;
}
inline bool SLSrCandidatePath::has_dynamic() const {
  return _internal_has_dynamic();
}
inline void SLSrCandidatePath::set_has_dynamic() {
  _oneof_case_[0] = kDynamic;
}
inline void SLSrCandidatePath::clear_dynamic() {
  if (_internal_has_dynamic()) {
    if (GetArenaForAllocation() == nullptr) {
      delete CP_.dynamic_;
    }
    clear_has_CP();
  }
}
inline ::service_layer::SLSrDynamicCP* SLSrCandidatePath::release_dynamic() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrCandidatePath.dynamic)
  if (_internal_has_dynamic()) {
    clear_has_CP();
      ::service_layer::SLSrDynamicCP* temp = CP_.dynamic_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    CP_.dynamic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLSrDynamicCP& SLSrCandidatePath::_internal_dynamic() const {
  return _internal_has_dynamic()
      ? *CP_.dynamic_
      : reinterpret_cast< ::service_layer::SLSrDynamicCP&>(::service_layer::_SLSrDynamicCP_default_instance_);
}
inline const ::service_layer::SLSrDynamicCP& SLSrCandidatePath::dynamic() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrCandidatePath.dynamic)
  return _internal_dynamic();
}
inline ::service_layer::SLSrDynamicCP* SLSrCandidatePath::unsafe_arena_release_dynamic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLSrCandidatePath.dynamic)
  if (_internal_has_dynamic()) {
    clear_has_CP();
    ::service_layer::SLSrDynamicCP* temp = CP_.dynamic_;
    CP_.dynamic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLSrCandidatePath::unsafe_arena_set_allocated_dynamic(::service_layer::SLSrDynamicCP* dynamic) {
  clear_CP();
  if (dynamic) {
    set_has_dynamic();
    CP_.dynamic_ = dynamic;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrCandidatePath.dynamic)
}
inline ::service_layer::SLSrDynamicCP* SLSrCandidatePath::_internal_mutable_dynamic() {
  if (!_internal_has_dynamic()) {
    clear_CP();
    set_has_dynamic();
    CP_.dynamic_ = CreateMaybeMessage< ::service_layer::SLSrDynamicCP >(GetArenaForAllocation());
  }
  return CP_.dynamic_;
}
inline ::service_layer::SLSrDynamicCP* SLSrCandidatePath::mutable_dynamic() {
  ::service_layer::SLSrDynamicCP* _msg = _internal_mutable_dynamic();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrCandidatePath.dynamic)
  return _msg;
}

// .service_layer.SLSrExplicitCP explicit = 6;
inline bool SLSrCandidatePath::_internal_has_explicit_() const {
  return CP_case() == kExplicit;
}
inline bool SLSrCandidatePath::has_explicit_() const {
  return _internal_has_explicit_();
}
inline void SLSrCandidatePath::set_has_explicit_() {
  _oneof_case_[0] = kExplicit;
}
inline void SLSrCandidatePath::clear_explicit_() {
  if (_internal_has_explicit_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete CP_.explicit__;
    }
    clear_has_CP();
  }
}
inline ::service_layer::SLSrExplicitCP* SLSrCandidatePath::release_explicit_() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrCandidatePath.explicit)
  if (_internal_has_explicit_()) {
    clear_has_CP();
      ::service_layer::SLSrExplicitCP* temp = CP_.explicit__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    CP_.explicit__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLSrExplicitCP& SLSrCandidatePath::_internal_explicit_() const {
  return _internal_has_explicit_()
      ? *CP_.explicit__
      : reinterpret_cast< ::service_layer::SLSrExplicitCP&>(::service_layer::_SLSrExplicitCP_default_instance_);
}
inline const ::service_layer::SLSrExplicitCP& SLSrCandidatePath::explicit_() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrCandidatePath.explicit)
  return _internal_explicit_();
}
inline ::service_layer::SLSrExplicitCP* SLSrCandidatePath::unsafe_arena_release_explicit_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLSrCandidatePath.explicit)
  if (_internal_has_explicit_()) {
    clear_has_CP();
    ::service_layer::SLSrExplicitCP* temp = CP_.explicit__;
    CP_.explicit__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLSrCandidatePath::unsafe_arena_set_allocated_explicit_(::service_layer::SLSrExplicitCP* explicit_) {
  clear_CP();
  if (explicit_) {
    set_has_explicit_();
    CP_.explicit__ = explicit_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrCandidatePath.explicit)
}
inline ::service_layer::SLSrExplicitCP* SLSrCandidatePath::_internal_mutable_explicit_() {
  if (!_internal_has_explicit_()) {
    clear_CP();
    set_has_explicit_();
    CP_.explicit__ = CreateMaybeMessage< ::service_layer::SLSrExplicitCP >(GetArenaForAllocation());
  }
  return CP_.explicit__;
}
inline ::service_layer::SLSrExplicitCP* SLSrCandidatePath::mutable_explicit_() {
  ::service_layer::SLSrExplicitCP* _msg = _internal_mutable_explicit_();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrCandidatePath.explicit)
  return _msg;
}

inline bool SLSrCandidatePath::has_CP() const {
  return CP_case() != CP_NOT_SET;
}
inline void SLSrCandidatePath::clear_has_CP() {
  _oneof_case_[0] = CP_NOT_SET;
}
inline SLSrCandidatePath::CPCase SLSrCandidatePath::CP_case() const {
  return SLSrCandidatePath::CPCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLSrExplicitCP

// repeated .service_layer.SLSrSegmentList segment_list = 1;
inline int SLSrExplicitCP::_internal_segment_list_size() const {
  return segment_list_.size();
}
inline int SLSrExplicitCP::segment_list_size() const {
  return _internal_segment_list_size();
}
inline ::service_layer::SLSrSegmentList* SLSrExplicitCP::mutable_segment_list(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrExplicitCP.segment_list)
  return segment_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSegmentList >*
SLSrExplicitCP::mutable_segment_list() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLSrExplicitCP.segment_list)
  return &segment_list_;
}
inline const ::service_layer::SLSrSegmentList& SLSrExplicitCP::_internal_segment_list(int index) const {
  return segment_list_.Get(index);
}
inline const ::service_layer::SLSrSegmentList& SLSrExplicitCP::segment_list(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrExplicitCP.segment_list)
  return _internal_segment_list(index);
}
inline ::service_layer::SLSrSegmentList* SLSrExplicitCP::_internal_add_segment_list() {
  return segment_list_.Add();
}
inline ::service_layer::SLSrSegmentList* SLSrExplicitCP::add_segment_list() {
  ::service_layer::SLSrSegmentList* _add = _internal_add_segment_list();
  // @@protoc_insertion_point(field_add:service_layer.SLSrExplicitCP.segment_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSegmentList >&
SLSrExplicitCP::segment_list() const {
  // @@protoc_insertion_point(field_list:service_layer.SLSrExplicitCP.segment_list)
  return segment_list_;
}

// uint32 metric_type = 3;
inline void SLSrExplicitCP::clear_metric_type() {
  metric_type_ = 0u;
}
inline uint32_t SLSrExplicitCP::_internal_metric_type() const {
  return metric_type_;
}
inline uint32_t SLSrExplicitCP::metric_type() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrExplicitCP.metric_type)
  return _internal_metric_type();
}
inline void SLSrExplicitCP::_internal_set_metric_type(uint32_t value) {
  
  metric_type_ = value;
}
inline void SLSrExplicitCP::set_metric_type(uint32_t value) {
  _internal_set_metric_type(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrExplicitCP.metric_type)
}

// -------------------------------------------------------------------

// SLSrDynamicCP

// uint32 metric_type = 1;
inline void SLSrDynamicCP::clear_metric_type() {
  metric_type_ = 0u;
}
inline uint32_t SLSrDynamicCP::_internal_metric_type() const {
  return metric_type_;
}
inline uint32_t SLSrDynamicCP::metric_type() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrDynamicCP.metric_type)
  return _internal_metric_type();
}
inline void SLSrDynamicCP::_internal_set_metric_type(uint32_t value) {
  
  metric_type_ = value;
}
inline void SLSrDynamicCP::set_metric_type(uint32_t value) {
  _internal_set_metric_type(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrDynamicCP.metric_type)
}

// .service_layer.SLSrConstraints constraints = 2;
inline bool SLSrDynamicCP::_internal_has_constraints() const {
  return this != internal_default_instance() && constraints_ != nullptr;
}
inline bool SLSrDynamicCP::has_constraints() const {
  return _internal_has_constraints();
}
inline void SLSrDynamicCP::clear_constraints() {
  if (GetArenaForAllocation() == nullptr && constraints_ != nullptr) {
    delete constraints_;
  }
  constraints_ = nullptr;
}
inline const ::service_layer::SLSrConstraints& SLSrDynamicCP::_internal_constraints() const {
  const ::service_layer::SLSrConstraints* p = constraints_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrConstraints&>(
      ::service_layer::_SLSrConstraints_default_instance_);
}
inline const ::service_layer::SLSrConstraints& SLSrDynamicCP::constraints() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrDynamicCP.constraints)
  return _internal_constraints();
}
inline void SLSrDynamicCP::unsafe_arena_set_allocated_constraints(
    ::service_layer::SLSrConstraints* constraints) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(constraints_);
  }
  constraints_ = constraints;
  if (constraints) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrDynamicCP.constraints)
}
inline ::service_layer::SLSrConstraints* SLSrDynamicCP::release_constraints() {
  
  ::service_layer::SLSrConstraints* temp = constraints_;
  constraints_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrConstraints* SLSrDynamicCP::unsafe_arena_release_constraints() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrDynamicCP.constraints)
  
  ::service_layer::SLSrConstraints* temp = constraints_;
  constraints_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrConstraints* SLSrDynamicCP::_internal_mutable_constraints() {
  
  if (constraints_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrConstraints>(GetArenaForAllocation());
    constraints_ = p;
  }
  return constraints_;
}
inline ::service_layer::SLSrConstraints* SLSrDynamicCP::mutable_constraints() {
  ::service_layer::SLSrConstraints* _msg = _internal_mutable_constraints();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrDynamicCP.constraints)
  return _msg;
}
inline void SLSrDynamicCP::set_allocated_constraints(::service_layer::SLSrConstraints* constraints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete constraints_;
  }
  if (constraints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrConstraints>::GetOwningArena(constraints);
    if (message_arena != submessage_arena) {
      constraints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constraints, submessage_arena);
    }
    
  } else {
    
  }
  constraints_ = constraints;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrDynamicCP.constraints)
}

// -------------------------------------------------------------------

// SLSrConstraints

// .service_layer.SLSrAffinities affinities = 1;
inline bool SLSrConstraints::_internal_has_affinities() const {
  return this != internal_default_instance() && affinities_ != nullptr;
}
inline bool SLSrConstraints::has_affinities() const {
  return _internal_has_affinities();
}
inline const ::service_layer::SLSrAffinities& SLSrConstraints::_internal_affinities() const {
  const ::service_layer::SLSrAffinities* p = affinities_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrAffinities&>(
      ::service_layer::_SLSrAffinities_default_instance_);
}
inline const ::service_layer::SLSrAffinities& SLSrConstraints::affinities() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrConstraints.affinities)
  return _internal_affinities();
}
inline void SLSrConstraints::unsafe_arena_set_allocated_affinities(
    ::service_layer::SLSrAffinities* affinities) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(affinities_);
  }
  affinities_ = affinities;
  if (affinities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrConstraints.affinities)
}
inline ::service_layer::SLSrAffinities* SLSrConstraints::release_affinities() {
  
  ::service_layer::SLSrAffinities* temp = affinities_;
  affinities_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrAffinities* SLSrConstraints::unsafe_arena_release_affinities() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrConstraints.affinities)
  
  ::service_layer::SLSrAffinities* temp = affinities_;
  affinities_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrAffinities* SLSrConstraints::_internal_mutable_affinities() {
  
  if (affinities_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrAffinities>(GetArenaForAllocation());
    affinities_ = p;
  }
  return affinities_;
}
inline ::service_layer::SLSrAffinities* SLSrConstraints::mutable_affinities() {
  ::service_layer::SLSrAffinities* _msg = _internal_mutable_affinities();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrConstraints.affinities)
  return _msg;
}
inline void SLSrConstraints::set_allocated_affinities(::service_layer::SLSrAffinities* affinities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(affinities_);
  }
  if (affinities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(affinities));
    if (message_arena != submessage_arena) {
      affinities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, affinities, submessage_arena);
    }
    
  } else {
    
  }
  affinities_ = affinities;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrConstraints.affinities)
}

// .service_layer.SLSrteProtectionType protection = 2;
inline void SLSrConstraints::clear_protection() {
  protection_ = 0;
}
inline ::service_layer::SLSrteProtectionType SLSrConstraints::_internal_protection() const {
  return static_cast< ::service_layer::SLSrteProtectionType >(protection_);
}
inline ::service_layer::SLSrteProtectionType SLSrConstraints::protection() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrConstraints.protection)
  return _internal_protection();
}
inline void SLSrConstraints::_internal_set_protection(::service_layer::SLSrteProtectionType value) {
  
  protection_ = value;
}
inline void SLSrConstraints::set_protection(::service_layer::SLSrteProtectionType value) {
  _internal_set_protection(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrConstraints.protection)
}

// optional uint32 sid_algo = 3;
inline bool SLSrConstraints::_internal_has_sid_algo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SLSrConstraints::has_sid_algo() const {
  return _internal_has_sid_algo();
}
inline void SLSrConstraints::clear_sid_algo() {
  sid_algo_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t SLSrConstraints::_internal_sid_algo() const {
  return sid_algo_;
}
inline uint32_t SLSrConstraints::sid_algo() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrConstraints.sid_algo)
  return _internal_sid_algo();
}
inline void SLSrConstraints::_internal_set_sid_algo(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  sid_algo_ = value;
}
inline void SLSrConstraints::set_sid_algo(uint32_t value) {
  _internal_set_sid_algo(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrConstraints.sid_algo)
}

// uint32 maximum_sid_depth = 4;
inline void SLSrConstraints::clear_maximum_sid_depth() {
  maximum_sid_depth_ = 0u;
}
inline uint32_t SLSrConstraints::_internal_maximum_sid_depth() const {
  return maximum_sid_depth_;
}
inline uint32_t SLSrConstraints::maximum_sid_depth() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrConstraints.maximum_sid_depth)
  return _internal_maximum_sid_depth();
}
inline void SLSrConstraints::_internal_set_maximum_sid_depth(uint32_t value) {
  
  maximum_sid_depth_ = value;
}
inline void SLSrConstraints::set_maximum_sid_depth(uint32_t value) {
  _internal_set_maximum_sid_depth(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrConstraints.maximum_sid_depth)
}

// -------------------------------------------------------------------

// SLSrSrv6BindingSID

// .service_layer.SLSrSrv6DynamicBindingSID dynamic = 2;
inline bool SLSrSrv6BindingSID::_internal_has_dynamic() const {
  return type_case() == kDynamic;
}
inline bool SLSrSrv6BindingSID::has_dynamic() const {
  return _internal_has_dynamic();
}
inline void SLSrSrv6BindingSID::set_has_dynamic() {
  _oneof_case_[0] = kDynamic;
}
inline void SLSrSrv6BindingSID::clear_dynamic() {
  if (_internal_has_dynamic()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.dynamic_;
    }
    clear_has_type();
  }
}
inline ::service_layer::SLSrSrv6DynamicBindingSID* SLSrSrv6BindingSID::release_dynamic() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrSrv6BindingSID.dynamic)
  if (_internal_has_dynamic()) {
    clear_has_type();
      ::service_layer::SLSrSrv6DynamicBindingSID* temp = type_.dynamic_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.dynamic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLSrSrv6DynamicBindingSID& SLSrSrv6BindingSID::_internal_dynamic() const {
  return _internal_has_dynamic()
      ? *type_.dynamic_
      : reinterpret_cast< ::service_layer::SLSrSrv6DynamicBindingSID&>(::service_layer::_SLSrSrv6DynamicBindingSID_default_instance_);
}
inline const ::service_layer::SLSrSrv6DynamicBindingSID& SLSrSrv6BindingSID::dynamic() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSrv6BindingSID.dynamic)
  return _internal_dynamic();
}
inline ::service_layer::SLSrSrv6DynamicBindingSID* SLSrSrv6BindingSID::unsafe_arena_release_dynamic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLSrSrv6BindingSID.dynamic)
  if (_internal_has_dynamic()) {
    clear_has_type();
    ::service_layer::SLSrSrv6DynamicBindingSID* temp = type_.dynamic_;
    type_.dynamic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLSrSrv6BindingSID::unsafe_arena_set_allocated_dynamic(::service_layer::SLSrSrv6DynamicBindingSID* dynamic) {
  clear_type();
  if (dynamic) {
    set_has_dynamic();
    type_.dynamic_ = dynamic;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrSrv6BindingSID.dynamic)
}
inline ::service_layer::SLSrSrv6DynamicBindingSID* SLSrSrv6BindingSID::_internal_mutable_dynamic() {
  if (!_internal_has_dynamic()) {
    clear_type();
    set_has_dynamic();
    type_.dynamic_ = CreateMaybeMessage< ::service_layer::SLSrSrv6DynamicBindingSID >(GetArenaForAllocation());
  }
  return type_.dynamic_;
}
inline ::service_layer::SLSrSrv6DynamicBindingSID* SLSrSrv6BindingSID::mutable_dynamic() {
  ::service_layer::SLSrSrv6DynamicBindingSID* _msg = _internal_mutable_dynamic();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrSrv6BindingSID.dynamic)
  return _msg;
}

inline bool SLSrSrv6BindingSID::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void SLSrSrv6BindingSID::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline SLSrSrv6BindingSID::TypeCase SLSrSrv6BindingSID::type_case() const {
  return SLSrSrv6BindingSID::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLSrMPLSBindingSID

// optional uint32 mpls_bsid = 1;
inline bool SLSrMPLSBindingSID::_internal_has_mpls_bsid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SLSrMPLSBindingSID::has_mpls_bsid() const {
  return _internal_has_mpls_bsid();
}
inline void SLSrMPLSBindingSID::clear_mpls_bsid() {
  mpls_bsid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t SLSrMPLSBindingSID::_internal_mpls_bsid() const {
  return mpls_bsid_;
}
inline uint32_t SLSrMPLSBindingSID::mpls_bsid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrMPLSBindingSID.mpls_bsid)
  return _internal_mpls_bsid();
}
inline void SLSrMPLSBindingSID::_internal_set_mpls_bsid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  mpls_bsid_ = value;
}
inline void SLSrMPLSBindingSID::set_mpls_bsid(uint32_t value) {
  _internal_set_mpls_bsid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrMPLSBindingSID.mpls_bsid)
}

// -------------------------------------------------------------------

// SLSrSrv6DynamicBindingSID

// uint32 behavior = 1;
inline void SLSrSrv6DynamicBindingSID::clear_behavior() {
  behavior_ = 0u;
}
inline uint32_t SLSrSrv6DynamicBindingSID::_internal_behavior() const {
  return behavior_;
}
inline uint32_t SLSrSrv6DynamicBindingSID::behavior() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrSrv6DynamicBindingSID.behavior)
  return _internal_behavior();
}
inline void SLSrSrv6DynamicBindingSID::_internal_set_behavior(uint32_t value) {
  
  behavior_ = value;
}
inline void SLSrSrv6DynamicBindingSID::set_behavior(uint32_t value) {
  _internal_set_behavior(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrSrv6DynamicBindingSID.behavior)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::service_layer::SLSrPolicyOpen_SLSrPersistenceMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLSrPolicyOpen_SLSrPersistenceMode>() {
  return ::service_layer::SLSrPolicyOpen_SLSrPersistenceMode_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLSrPolicyReq_SLSrOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLSrPolicyReq_SLSrOp>() {
  return ::service_layer::SLSrPolicyReq_SLSrOp_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sl_5fsrte_5fpolicy_2eproto
