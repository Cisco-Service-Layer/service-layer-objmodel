// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sl_srte_policy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sl_5fsrte_5fpolicy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sl_5fsrte_5fpolicy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "sl_common_types.pb.h"
#include "sl_sr_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sl_5fsrte_5fpolicy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sl_5fsrte_5fpolicy_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sl_5fsrte_5fpolicy_2eproto;
namespace service_layer {
class SLSrBindingSID;
struct SLSrBindingSIDDefaultTypeInternal;
extern SLSrBindingSIDDefaultTypeInternal _SLSrBindingSID_default_instance_;
class SLSrCandidatePath;
struct SLSrCandidatePathDefaultTypeInternal;
extern SLSrCandidatePathDefaultTypeInternal _SLSrCandidatePath_default_instance_;
class SLSrConstraints;
struct SLSrConstraintsDefaultTypeInternal;
extern SLSrConstraintsDefaultTypeInternal _SLSrConstraints_default_instance_;
class SLSrConstraints_SegmentConstraints;
struct SLSrConstraints_SegmentConstraintsDefaultTypeInternal;
extern SLSrConstraints_SegmentConstraintsDefaultTypeInternal _SLSrConstraints_SegmentConstraints_default_instance_;
class SLSrDynamicCP;
struct SLSrDynamicCPDefaultTypeInternal;
extern SLSrDynamicCPDefaultTypeInternal _SLSrDynamicCP_default_instance_;
class SLSrExplicitCP;
struct SLSrExplicitCPDefaultTypeInternal;
extern SLSrExplicitCPDefaultTypeInternal _SLSrExplicitCP_default_instance_;
class SLSrPolicy;
struct SLSrPolicyDefaultTypeInternal;
extern SLSrPolicyDefaultTypeInternal _SLSrPolicy_default_instance_;
class SLSrPolicyMsg;
struct SLSrPolicyMsgDefaultTypeInternal;
extern SLSrPolicyMsgDefaultTypeInternal _SLSrPolicyMsg_default_instance_;
class SLSrPolicyOpRsp;
struct SLSrPolicyOpRspDefaultTypeInternal;
extern SLSrPolicyOpRspDefaultTypeInternal _SLSrPolicyOpRsp_default_instance_;
class SLSrPolicyOpRsp_PolicyRsp;
struct SLSrPolicyOpRsp_PolicyRspDefaultTypeInternal;
extern SLSrPolicyOpRsp_PolicyRspDefaultTypeInternal _SLSrPolicyOpRsp_PolicyRsp_default_instance_;
class SLSrv6BindingSID;
struct SLSrv6BindingSIDDefaultTypeInternal;
extern SLSrv6BindingSIDDefaultTypeInternal _SLSrv6BindingSID_default_instance_;
}  // namespace service_layer
PROTOBUF_NAMESPACE_OPEN
template<> ::service_layer::SLSrBindingSID* Arena::CreateMaybeMessage<::service_layer::SLSrBindingSID>(Arena*);
template<> ::service_layer::SLSrCandidatePath* Arena::CreateMaybeMessage<::service_layer::SLSrCandidatePath>(Arena*);
template<> ::service_layer::SLSrConstraints* Arena::CreateMaybeMessage<::service_layer::SLSrConstraints>(Arena*);
template<> ::service_layer::SLSrConstraints_SegmentConstraints* Arena::CreateMaybeMessage<::service_layer::SLSrConstraints_SegmentConstraints>(Arena*);
template<> ::service_layer::SLSrDynamicCP* Arena::CreateMaybeMessage<::service_layer::SLSrDynamicCP>(Arena*);
template<> ::service_layer::SLSrExplicitCP* Arena::CreateMaybeMessage<::service_layer::SLSrExplicitCP>(Arena*);
template<> ::service_layer::SLSrPolicy* Arena::CreateMaybeMessage<::service_layer::SLSrPolicy>(Arena*);
template<> ::service_layer::SLSrPolicyMsg* Arena::CreateMaybeMessage<::service_layer::SLSrPolicyMsg>(Arena*);
template<> ::service_layer::SLSrPolicyOpRsp* Arena::CreateMaybeMessage<::service_layer::SLSrPolicyOpRsp>(Arena*);
template<> ::service_layer::SLSrPolicyOpRsp_PolicyRsp* Arena::CreateMaybeMessage<::service_layer::SLSrPolicyOpRsp_PolicyRsp>(Arena*);
template<> ::service_layer::SLSrv6BindingSID* Arena::CreateMaybeMessage<::service_layer::SLSrv6BindingSID>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service_layer {

enum SLSrConstraints_SegmentConstraints_ProtectionType : int {
  SLSrConstraints_SegmentConstraints_ProtectionType_PROTECTED_PREFERRED = 0,
  SLSrConstraints_SegmentConstraints_ProtectionType_PROTECTED_ONLY = 1,
  SLSrConstraints_SegmentConstraints_ProtectionType_UNPROTECTED_PREFERRED = 2,
  SLSrConstraints_SegmentConstraints_ProtectionType_UNPROTECTED_ONLY = 3,
  SLSrConstraints_SegmentConstraints_ProtectionType_SLSrConstraints_SegmentConstraints_ProtectionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLSrConstraints_SegmentConstraints_ProtectionType_SLSrConstraints_SegmentConstraints_ProtectionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLSrConstraints_SegmentConstraints_ProtectionType_IsValid(int value);
constexpr SLSrConstraints_SegmentConstraints_ProtectionType SLSrConstraints_SegmentConstraints_ProtectionType_ProtectionType_MIN = SLSrConstraints_SegmentConstraints_ProtectionType_PROTECTED_PREFERRED;
constexpr SLSrConstraints_SegmentConstraints_ProtectionType SLSrConstraints_SegmentConstraints_ProtectionType_ProtectionType_MAX = SLSrConstraints_SegmentConstraints_ProtectionType_UNPROTECTED_ONLY;
constexpr int SLSrConstraints_SegmentConstraints_ProtectionType_ProtectionType_ARRAYSIZE = SLSrConstraints_SegmentConstraints_ProtectionType_ProtectionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrConstraints_SegmentConstraints_ProtectionType_descriptor();
template<typename T>
inline const std::string& SLSrConstraints_SegmentConstraints_ProtectionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLSrConstraints_SegmentConstraints_ProtectionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLSrConstraints_SegmentConstraints_ProtectionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLSrConstraints_SegmentConstraints_ProtectionType_descriptor(), enum_t_value);
}
inline bool SLSrConstraints_SegmentConstraints_ProtectionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLSrConstraints_SegmentConstraints_ProtectionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLSrConstraints_SegmentConstraints_ProtectionType>(
    SLSrConstraints_SegmentConstraints_ProtectionType_descriptor(), name, value);
}
enum SLSrBindingSIDAllocationMode : int {
  BSID_EXPLICIT = 0,
  BSID_DYNAMIC = 1,
  SLSrBindingSIDAllocationMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SLSrBindingSIDAllocationMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SLSrBindingSIDAllocationMode_IsValid(int value);
constexpr SLSrBindingSIDAllocationMode SLSrBindingSIDAllocationMode_MIN = BSID_EXPLICIT;
constexpr SLSrBindingSIDAllocationMode SLSrBindingSIDAllocationMode_MAX = BSID_DYNAMIC;
constexpr int SLSrBindingSIDAllocationMode_ARRAYSIZE = SLSrBindingSIDAllocationMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SLSrBindingSIDAllocationMode_descriptor();
template<typename T>
inline const std::string& SLSrBindingSIDAllocationMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SLSrBindingSIDAllocationMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SLSrBindingSIDAllocationMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SLSrBindingSIDAllocationMode_descriptor(), enum_t_value);
}
inline bool SLSrBindingSIDAllocationMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SLSrBindingSIDAllocationMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SLSrBindingSIDAllocationMode>(
    SLSrBindingSIDAllocationMode_descriptor(), name, value);
}
// ===================================================================

class SLSrExplicitCP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrExplicitCP) */ {
 public:
  inline SLSrExplicitCP() : SLSrExplicitCP(nullptr) {}
  ~SLSrExplicitCP() override;
  explicit constexpr SLSrExplicitCP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrExplicitCP(const SLSrExplicitCP& from);
  SLSrExplicitCP(SLSrExplicitCP&& from) noexcept
    : SLSrExplicitCP() {
    *this = ::std::move(from);
  }

  inline SLSrExplicitCP& operator=(const SLSrExplicitCP& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrExplicitCP& operator=(SLSrExplicitCP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrExplicitCP& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrExplicitCP* internal_default_instance() {
    return reinterpret_cast<const SLSrExplicitCP*>(
               &_SLSrExplicitCP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SLSrExplicitCP& a, SLSrExplicitCP& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrExplicitCP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrExplicitCP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrExplicitCP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrExplicitCP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrExplicitCP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrExplicitCP& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrExplicitCP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrExplicitCP";
  }
  protected:
  explicit SLSrExplicitCP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentListFieldNumber = 1,
  };
  // repeated .service_layer.SLSrSegmentList segmentList = 1;
  int segmentlist_size() const;
  private:
  int _internal_segmentlist_size() const;
  public:
  void clear_segmentlist();
  ::service_layer::SLSrSegmentList* mutable_segmentlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSegmentList >*
      mutable_segmentlist();
  private:
  const ::service_layer::SLSrSegmentList& _internal_segmentlist(int index) const;
  ::service_layer::SLSrSegmentList* _internal_add_segmentlist();
  public:
  const ::service_layer::SLSrSegmentList& segmentlist(int index) const;
  ::service_layer::SLSrSegmentList* add_segmentlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSegmentList >&
      segmentlist() const;

  // @@protoc_insertion_point(class_scope:service_layer.SLSrExplicitCP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSegmentList > segmentlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrConstraints_SegmentConstraints final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrConstraints.SegmentConstraints) */ {
 public:
  inline SLSrConstraints_SegmentConstraints() : SLSrConstraints_SegmentConstraints(nullptr) {}
  ~SLSrConstraints_SegmentConstraints() override;
  explicit constexpr SLSrConstraints_SegmentConstraints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrConstraints_SegmentConstraints(const SLSrConstraints_SegmentConstraints& from);
  SLSrConstraints_SegmentConstraints(SLSrConstraints_SegmentConstraints&& from) noexcept
    : SLSrConstraints_SegmentConstraints() {
    *this = ::std::move(from);
  }

  inline SLSrConstraints_SegmentConstraints& operator=(const SLSrConstraints_SegmentConstraints& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrConstraints_SegmentConstraints& operator=(SLSrConstraints_SegmentConstraints&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrConstraints_SegmentConstraints& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrConstraints_SegmentConstraints* internal_default_instance() {
    return reinterpret_cast<const SLSrConstraints_SegmentConstraints*>(
               &_SLSrConstraints_SegmentConstraints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SLSrConstraints_SegmentConstraints& a, SLSrConstraints_SegmentConstraints& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrConstraints_SegmentConstraints* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrConstraints_SegmentConstraints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrConstraints_SegmentConstraints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrConstraints_SegmentConstraints>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrConstraints_SegmentConstraints& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrConstraints_SegmentConstraints& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrConstraints_SegmentConstraints* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrConstraints.SegmentConstraints";
  }
  protected:
  explicit SLSrConstraints_SegmentConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SLSrConstraints_SegmentConstraints_ProtectionType ProtectionType;
  static constexpr ProtectionType PROTECTED_PREFERRED =
    SLSrConstraints_SegmentConstraints_ProtectionType_PROTECTED_PREFERRED;
  static constexpr ProtectionType PROTECTED_ONLY =
    SLSrConstraints_SegmentConstraints_ProtectionType_PROTECTED_ONLY;
  static constexpr ProtectionType UNPROTECTED_PREFERRED =
    SLSrConstraints_SegmentConstraints_ProtectionType_UNPROTECTED_PREFERRED;
  static constexpr ProtectionType UNPROTECTED_ONLY =
    SLSrConstraints_SegmentConstraints_ProtectionType_UNPROTECTED_ONLY;
  static inline bool ProtectionType_IsValid(int value) {
    return SLSrConstraints_SegmentConstraints_ProtectionType_IsValid(value);
  }
  static constexpr ProtectionType ProtectionType_MIN =
    SLSrConstraints_SegmentConstraints_ProtectionType_ProtectionType_MIN;
  static constexpr ProtectionType ProtectionType_MAX =
    SLSrConstraints_SegmentConstraints_ProtectionType_ProtectionType_MAX;
  static constexpr int ProtectionType_ARRAYSIZE =
    SLSrConstraints_SegmentConstraints_ProtectionType_ProtectionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ProtectionType_descriptor() {
    return SLSrConstraints_SegmentConstraints_ProtectionType_descriptor();
  }
  template<typename T>
  static inline const std::string& ProtectionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProtectionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProtectionType_Name.");
    return SLSrConstraints_SegmentConstraints_ProtectionType_Name(enum_t_value);
  }
  static inline bool ProtectionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ProtectionType* value) {
    return SLSrConstraints_SegmentConstraints_ProtectionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kProtectionFieldNumber = 1,
    kSidalgoFieldNumber = 2,
    kMSDFieldNumber = 3,
  };
  // .service_layer.SLSrConstraints.SegmentConstraints.ProtectionType protection = 1;
  void clear_protection();
  ::service_layer::SLSrConstraints_SegmentConstraints_ProtectionType protection() const;
  void set_protection(::service_layer::SLSrConstraints_SegmentConstraints_ProtectionType value);
  private:
  ::service_layer::SLSrConstraints_SegmentConstraints_ProtectionType _internal_protection() const;
  void _internal_set_protection(::service_layer::SLSrConstraints_SegmentConstraints_ProtectionType value);
  public:

  // uint32 sidalgo = 2;
  void clear_sidalgo();
  uint32_t sidalgo() const;
  void set_sidalgo(uint32_t value);
  private:
  uint32_t _internal_sidalgo() const;
  void _internal_set_sidalgo(uint32_t value);
  public:

  // uint32 MSD = 3;
  void clear_msd();
  uint32_t msd() const;
  void set_msd(uint32_t value);
  private:
  uint32_t _internal_msd() const;
  void _internal_set_msd(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrConstraints.SegmentConstraints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int protection_;
  uint32_t sidalgo_;
  uint32_t msd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrConstraints final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrConstraints) */ {
 public:
  inline SLSrConstraints() : SLSrConstraints(nullptr) {}
  ~SLSrConstraints() override;
  explicit constexpr SLSrConstraints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrConstraints(const SLSrConstraints& from);
  SLSrConstraints(SLSrConstraints&& from) noexcept
    : SLSrConstraints() {
    *this = ::std::move(from);
  }

  inline SLSrConstraints& operator=(const SLSrConstraints& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrConstraints& operator=(SLSrConstraints&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrConstraints& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrConstraints* internal_default_instance() {
    return reinterpret_cast<const SLSrConstraints*>(
               &_SLSrConstraints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SLSrConstraints& a, SLSrConstraints& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrConstraints* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrConstraints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrConstraints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrConstraints>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrConstraints& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrConstraints& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrConstraints* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrConstraints";
  }
  protected:
  explicit SLSrConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SLSrConstraints_SegmentConstraints SegmentConstraints;

  // accessors -------------------------------------------------------

  enum : int {
    kAffinitiesFieldNumber = 1,
    kMetricBoundsFieldNumber = 2,
    kSegmentConstraintsFieldNumber = 3,
  };
  // .service_layer.SLSrAffinities affinities = 1;
  bool has_affinities() const;
  private:
  bool _internal_has_affinities() const;
  public:
  void clear_affinities();
  const ::service_layer::SLSrAffinities& affinities() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrAffinities* release_affinities();
  ::service_layer::SLSrAffinities* mutable_affinities();
  void set_allocated_affinities(::service_layer::SLSrAffinities* affinities);
  private:
  const ::service_layer::SLSrAffinities& _internal_affinities() const;
  ::service_layer::SLSrAffinities* _internal_mutable_affinities();
  public:
  void unsafe_arena_set_allocated_affinities(
      ::service_layer::SLSrAffinities* affinities);
  ::service_layer::SLSrAffinities* unsafe_arena_release_affinities();

  // .service_layer.SLSrMetricBounds metricBounds = 2;
  bool has_metricbounds() const;
  private:
  bool _internal_has_metricbounds() const;
  public:
  void clear_metricbounds();
  const ::service_layer::SLSrMetricBounds& metricbounds() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrMetricBounds* release_metricbounds();
  ::service_layer::SLSrMetricBounds* mutable_metricbounds();
  void set_allocated_metricbounds(::service_layer::SLSrMetricBounds* metricbounds);
  private:
  const ::service_layer::SLSrMetricBounds& _internal_metricbounds() const;
  ::service_layer::SLSrMetricBounds* _internal_mutable_metricbounds();
  public:
  void unsafe_arena_set_allocated_metricbounds(
      ::service_layer::SLSrMetricBounds* metricbounds);
  ::service_layer::SLSrMetricBounds* unsafe_arena_release_metricbounds();

  // .service_layer.SLSrConstraints.SegmentConstraints segmentConstraints = 3;
  bool has_segmentconstraints() const;
  private:
  bool _internal_has_segmentconstraints() const;
  public:
  void clear_segmentconstraints();
  const ::service_layer::SLSrConstraints_SegmentConstraints& segmentconstraints() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrConstraints_SegmentConstraints* release_segmentconstraints();
  ::service_layer::SLSrConstraints_SegmentConstraints* mutable_segmentconstraints();
  void set_allocated_segmentconstraints(::service_layer::SLSrConstraints_SegmentConstraints* segmentconstraints);
  private:
  const ::service_layer::SLSrConstraints_SegmentConstraints& _internal_segmentconstraints() const;
  ::service_layer::SLSrConstraints_SegmentConstraints* _internal_mutable_segmentconstraints();
  public:
  void unsafe_arena_set_allocated_segmentconstraints(
      ::service_layer::SLSrConstraints_SegmentConstraints* segmentconstraints);
  ::service_layer::SLSrConstraints_SegmentConstraints* unsafe_arena_release_segmentconstraints();

  // @@protoc_insertion_point(class_scope:service_layer.SLSrConstraints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLSrAffinities* affinities_;
  ::service_layer::SLSrMetricBounds* metricbounds_;
  ::service_layer::SLSrConstraints_SegmentConstraints* segmentconstraints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrDynamicCP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrDynamicCP) */ {
 public:
  inline SLSrDynamicCP() : SLSrDynamicCP(nullptr) {}
  ~SLSrDynamicCP() override;
  explicit constexpr SLSrDynamicCP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrDynamicCP(const SLSrDynamicCP& from);
  SLSrDynamicCP(SLSrDynamicCP&& from) noexcept
    : SLSrDynamicCP() {
    *this = ::std::move(from);
  }

  inline SLSrDynamicCP& operator=(const SLSrDynamicCP& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrDynamicCP& operator=(SLSrDynamicCP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrDynamicCP& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrDynamicCP* internal_default_instance() {
    return reinterpret_cast<const SLSrDynamicCP*>(
               &_SLSrDynamicCP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SLSrDynamicCP& a, SLSrDynamicCP& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrDynamicCP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrDynamicCP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrDynamicCP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrDynamicCP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrDynamicCP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrDynamicCP& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrDynamicCP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrDynamicCP";
  }
  protected:
  explicit SLSrDynamicCP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstraintsFieldNumber = 2,
    kMetricMarginFieldNumber = 3,
    kOmetricFieldNumber = 1,
    kDelegateFieldNumber = 4,
  };
  // .service_layer.SLSrConstraints constraints = 2;
  bool has_constraints() const;
  private:
  bool _internal_has_constraints() const;
  public:
  void clear_constraints();
  const ::service_layer::SLSrConstraints& constraints() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrConstraints* release_constraints();
  ::service_layer::SLSrConstraints* mutable_constraints();
  void set_allocated_constraints(::service_layer::SLSrConstraints* constraints);
  private:
  const ::service_layer::SLSrConstraints& _internal_constraints() const;
  ::service_layer::SLSrConstraints* _internal_mutable_constraints();
  public:
  void unsafe_arena_set_allocated_constraints(
      ::service_layer::SLSrConstraints* constraints);
  ::service_layer::SLSrConstraints* unsafe_arena_release_constraints();

  // .service_layer.SLSrMetricMargin metricMargin = 3;
  bool has_metricmargin() const;
  private:
  bool _internal_has_metricmargin() const;
  public:
  void clear_metricmargin();
  const ::service_layer::SLSrMetricMargin& metricmargin() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrMetricMargin* release_metricmargin();
  ::service_layer::SLSrMetricMargin* mutable_metricmargin();
  void set_allocated_metricmargin(::service_layer::SLSrMetricMargin* metricmargin);
  private:
  const ::service_layer::SLSrMetricMargin& _internal_metricmargin() const;
  ::service_layer::SLSrMetricMargin* _internal_mutable_metricmargin();
  public:
  void unsafe_arena_set_allocated_metricmargin(
      ::service_layer::SLSrMetricMargin* metricmargin);
  ::service_layer::SLSrMetricMargin* unsafe_arena_release_metricmargin();

  // .service_layer.SLSrMetricType ometric = 1;
  void clear_ometric();
  ::service_layer::SLSrMetricType ometric() const;
  void set_ometric(::service_layer::SLSrMetricType value);
  private:
  ::service_layer::SLSrMetricType _internal_ometric() const;
  void _internal_set_ometric(::service_layer::SLSrMetricType value);
  public:

  // bool delegate = 4;
  void clear_delegate();
  bool delegate() const;
  void set_delegate(bool value);
  private:
  bool _internal_delegate() const;
  void _internal_set_delegate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrDynamicCP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLSrConstraints* constraints_;
  ::service_layer::SLSrMetricMargin* metricmargin_;
  int ometric_;
  bool delegate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrCandidatePath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrCandidatePath) */ {
 public:
  inline SLSrCandidatePath() : SLSrCandidatePath(nullptr) {}
  ~SLSrCandidatePath() override;
  explicit constexpr SLSrCandidatePath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrCandidatePath(const SLSrCandidatePath& from);
  SLSrCandidatePath(SLSrCandidatePath&& from) noexcept
    : SLSrCandidatePath() {
    *this = ::std::move(from);
  }

  inline SLSrCandidatePath& operator=(const SLSrCandidatePath& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrCandidatePath& operator=(SLSrCandidatePath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrCandidatePath& default_instance() {
    return *internal_default_instance();
  }
  enum CPCase {
    kDynamic = 5,
    kExplicit = 6,
    CP_NOT_SET = 0,
  };

  static inline const SLSrCandidatePath* internal_default_instance() {
    return reinterpret_cast<const SLSrCandidatePath*>(
               &_SLSrCandidatePath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SLSrCandidatePath& a, SLSrCandidatePath& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrCandidatePath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrCandidatePath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrCandidatePath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrCandidatePath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrCandidatePath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrCandidatePath& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrCandidatePath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrCandidatePath";
  }
  protected:
  explicit SLSrCandidatePath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kKeyFieldNumber = 1,
    kPreferenceFieldNumber = 3,
    kDataplaneFieldNumber = 4,
    kDynamicFieldNumber = 5,
    kExplicitFieldNumber = 6,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .service_layer.SLSrCandidatePathKey key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::service_layer::SLSrCandidatePathKey& key() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrCandidatePathKey* release_key();
  ::service_layer::SLSrCandidatePathKey* mutable_key();
  void set_allocated_key(::service_layer::SLSrCandidatePathKey* key);
  private:
  const ::service_layer::SLSrCandidatePathKey& _internal_key() const;
  ::service_layer::SLSrCandidatePathKey* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::service_layer::SLSrCandidatePathKey* key);
  ::service_layer::SLSrCandidatePathKey* unsafe_arena_release_key();

  // uint32 preference = 3;
  void clear_preference();
  uint32_t preference() const;
  void set_preference(uint32_t value);
  private:
  uint32_t _internal_preference() const;
  void _internal_set_preference(uint32_t value);
  public:

  // .service_layer.SLSrDataplane dataplane = 4;
  void clear_dataplane();
  ::service_layer::SLSrDataplane dataplane() const;
  void set_dataplane(::service_layer::SLSrDataplane value);
  private:
  ::service_layer::SLSrDataplane _internal_dataplane() const;
  void _internal_set_dataplane(::service_layer::SLSrDataplane value);
  public:

  // .service_layer.SLSrDynamicCP dynamic = 5;
  bool has_dynamic() const;
  private:
  bool _internal_has_dynamic() const;
  public:
  void clear_dynamic();
  const ::service_layer::SLSrDynamicCP& dynamic() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrDynamicCP* release_dynamic();
  ::service_layer::SLSrDynamicCP* mutable_dynamic();
  void set_allocated_dynamic(::service_layer::SLSrDynamicCP* dynamic);
  private:
  const ::service_layer::SLSrDynamicCP& _internal_dynamic() const;
  ::service_layer::SLSrDynamicCP* _internal_mutable_dynamic();
  public:
  void unsafe_arena_set_allocated_dynamic(
      ::service_layer::SLSrDynamicCP* dynamic);
  ::service_layer::SLSrDynamicCP* unsafe_arena_release_dynamic();

  // .service_layer.SLSrExplicitCP explicit = 6;
  bool has_explicit_() const;
  private:
  bool _internal_has_explicit_() const;
  public:
  void clear_explicit_();
  const ::service_layer::SLSrExplicitCP& explicit_() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrExplicitCP* release_explicit_();
  ::service_layer::SLSrExplicitCP* mutable_explicit_();
  void set_allocated_explicit_(::service_layer::SLSrExplicitCP* explicit_);
  private:
  const ::service_layer::SLSrExplicitCP& _internal_explicit_() const;
  ::service_layer::SLSrExplicitCP* _internal_mutable_explicit_();
  public:
  void unsafe_arena_set_allocated_explicit_(
      ::service_layer::SLSrExplicitCP* explicit_);
  ::service_layer::SLSrExplicitCP* unsafe_arena_release_explicit_();

  void clear_CP();
  CPCase CP_case() const;
  // @@protoc_insertion_point(class_scope:service_layer.SLSrCandidatePath)
 private:
  class _Internal;
  void set_has_dynamic();
  void set_has_explicit_();

  inline bool has_CP() const;
  inline void clear_has_CP();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::service_layer::SLSrCandidatePathKey* key_;
  uint32_t preference_;
  int dataplane_;
  union CPUnion {
    constexpr CPUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::service_layer::SLSrDynamicCP* dynamic_;
    ::service_layer::SLSrExplicitCP* explicit__;
  } CP_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrv6BindingSID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrv6BindingSID) */ {
 public:
  inline SLSrv6BindingSID() : SLSrv6BindingSID(nullptr) {}
  ~SLSrv6BindingSID() override;
  explicit constexpr SLSrv6BindingSID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrv6BindingSID(const SLSrv6BindingSID& from);
  SLSrv6BindingSID(SLSrv6BindingSID&& from) noexcept
    : SLSrv6BindingSID() {
    *this = ::std::move(from);
  }

  inline SLSrv6BindingSID& operator=(const SLSrv6BindingSID& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrv6BindingSID& operator=(SLSrv6BindingSID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrv6BindingSID& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrv6BindingSID* internal_default_instance() {
    return reinterpret_cast<const SLSrv6BindingSID*>(
               &_SLSrv6BindingSID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SLSrv6BindingSID& a, SLSrv6BindingSID& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrv6BindingSID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrv6BindingSID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrv6BindingSID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrv6BindingSID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrv6BindingSID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrv6BindingSID& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrv6BindingSID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrv6BindingSID";
  }
  protected:
  explicit SLSrv6BindingSID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocatorNameFieldNumber = 1,
    kSIDFieldNumber = 3,
    kBehaviorFieldNumber = 2,
  };
  // string locatorName = 1;
  void clear_locatorname();
  const std::string& locatorname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_locatorname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_locatorname();
  PROTOBUF_NODISCARD std::string* release_locatorname();
  void set_allocated_locatorname(std::string* locatorname);
  private:
  const std::string& _internal_locatorname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locatorname(const std::string& value);
  std::string* _internal_mutable_locatorname();
  public:

  // .service_layer.SLIpv6Address SID = 3;
  bool has_sid() const;
  private:
  bool _internal_has_sid() const;
  public:
  void clear_sid();
  const ::service_layer::SLIpv6Address& sid() const;
  PROTOBUF_NODISCARD ::service_layer::SLIpv6Address* release_sid();
  ::service_layer::SLIpv6Address* mutable_sid();
  void set_allocated_sid(::service_layer::SLIpv6Address* sid);
  private:
  const ::service_layer::SLIpv6Address& _internal_sid() const;
  ::service_layer::SLIpv6Address* _internal_mutable_sid();
  public:
  void unsafe_arena_set_allocated_sid(
      ::service_layer::SLIpv6Address* sid);
  ::service_layer::SLIpv6Address* unsafe_arena_release_sid();

  // uint32 behavior = 2;
  void clear_behavior();
  uint32_t behavior() const;
  void set_behavior(uint32_t value);
  private:
  uint32_t _internal_behavior() const;
  void _internal_set_behavior(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrv6BindingSID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locatorname_;
  ::service_layer::SLIpv6Address* sid_;
  uint32_t behavior_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrBindingSID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrBindingSID) */ {
 public:
  inline SLSrBindingSID() : SLSrBindingSID(nullptr) {}
  ~SLSrBindingSID() override;
  explicit constexpr SLSrBindingSID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrBindingSID(const SLSrBindingSID& from);
  SLSrBindingSID(SLSrBindingSID&& from) noexcept
    : SLSrBindingSID() {
    *this = ::std::move(from);
  }

  inline SLSrBindingSID& operator=(const SLSrBindingSID& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrBindingSID& operator=(SLSrBindingSID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrBindingSID& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrBindingSID* internal_default_instance() {
    return reinterpret_cast<const SLSrBindingSID*>(
               &_SLSrBindingSID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SLSrBindingSID& a, SLSrBindingSID& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrBindingSID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrBindingSID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrBindingSID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrBindingSID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrBindingSID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrBindingSID& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrBindingSID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrBindingSID";
  }
  protected:
  explicit SLSrBindingSID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrv6BindingSIDFieldNumber = 3,
    kBindingSIDAllocationFieldNumber = 1,
    kMplsBindingSIDFieldNumber = 2,
  };
  // .service_layer.SLSrv6BindingSID srv6BindingSID = 3;
  bool has_srv6bindingsid() const;
  private:
  bool _internal_has_srv6bindingsid() const;
  public:
  void clear_srv6bindingsid();
  const ::service_layer::SLSrv6BindingSID& srv6bindingsid() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrv6BindingSID* release_srv6bindingsid();
  ::service_layer::SLSrv6BindingSID* mutable_srv6bindingsid();
  void set_allocated_srv6bindingsid(::service_layer::SLSrv6BindingSID* srv6bindingsid);
  private:
  const ::service_layer::SLSrv6BindingSID& _internal_srv6bindingsid() const;
  ::service_layer::SLSrv6BindingSID* _internal_mutable_srv6bindingsid();
  public:
  void unsafe_arena_set_allocated_srv6bindingsid(
      ::service_layer::SLSrv6BindingSID* srv6bindingsid);
  ::service_layer::SLSrv6BindingSID* unsafe_arena_release_srv6bindingsid();

  // .service_layer.SLSrBindingSIDAllocationMode bindingSIDAllocation = 1;
  void clear_bindingsidallocation();
  ::service_layer::SLSrBindingSIDAllocationMode bindingsidallocation() const;
  void set_bindingsidallocation(::service_layer::SLSrBindingSIDAllocationMode value);
  private:
  ::service_layer::SLSrBindingSIDAllocationMode _internal_bindingsidallocation() const;
  void _internal_set_bindingsidallocation(::service_layer::SLSrBindingSIDAllocationMode value);
  public:

  // uint32 mplsBindingSID = 2;
  void clear_mplsbindingsid();
  uint32_t mplsbindingsid() const;
  void set_mplsbindingsid(uint32_t value);
  private:
  uint32_t _internal_mplsbindingsid() const;
  void _internal_set_mplsbindingsid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrBindingSID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLSrv6BindingSID* srv6bindingsid_;
  int bindingsidallocation_;
  uint32_t mplsbindingsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrPolicy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrPolicy) */ {
 public:
  inline SLSrPolicy() : SLSrPolicy(nullptr) {}
  ~SLSrPolicy() override;
  explicit constexpr SLSrPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrPolicy(const SLSrPolicy& from);
  SLSrPolicy(SLSrPolicy&& from) noexcept
    : SLSrPolicy() {
    *this = ::std::move(from);
  }

  inline SLSrPolicy& operator=(const SLSrPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrPolicy& operator=(SLSrPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrPolicy* internal_default_instance() {
    return reinterpret_cast<const SLSrPolicy*>(
               &_SLSrPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SLSrPolicy& a, SLSrPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrPolicy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrPolicy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrPolicy& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrPolicy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrPolicy";
  }
  protected:
  explicit SLSrPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCPsFieldNumber = 3,
    kKeyFieldNumber = 1,
    kBsidFieldNumber = 4,
    kTransitEligibleFieldNumber = 2,
    kProfileIDFieldNumber = 5,
  };
  // repeated .service_layer.SLSrCandidatePath CPs = 3;
  int cps_size() const;
  private:
  int _internal_cps_size() const;
  public:
  void clear_cps();
  ::service_layer::SLSrCandidatePath* mutable_cps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrCandidatePath >*
      mutable_cps();
  private:
  const ::service_layer::SLSrCandidatePath& _internal_cps(int index) const;
  ::service_layer::SLSrCandidatePath* _internal_add_cps();
  public:
  const ::service_layer::SLSrCandidatePath& cps(int index) const;
  ::service_layer::SLSrCandidatePath* add_cps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrCandidatePath >&
      cps() const;

  // .service_layer.SLSrPolicyKey key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::service_layer::SLSrPolicyKey& key() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrPolicyKey* release_key();
  ::service_layer::SLSrPolicyKey* mutable_key();
  void set_allocated_key(::service_layer::SLSrPolicyKey* key);
  private:
  const ::service_layer::SLSrPolicyKey& _internal_key() const;
  ::service_layer::SLSrPolicyKey* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::service_layer::SLSrPolicyKey* key);
  ::service_layer::SLSrPolicyKey* unsafe_arena_release_key();

  // .service_layer.SLSrBindingSID bsid = 4;
  bool has_bsid() const;
  private:
  bool _internal_has_bsid() const;
  public:
  void clear_bsid();
  const ::service_layer::SLSrBindingSID& bsid() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrBindingSID* release_bsid();
  ::service_layer::SLSrBindingSID* mutable_bsid();
  void set_allocated_bsid(::service_layer::SLSrBindingSID* bsid);
  private:
  const ::service_layer::SLSrBindingSID& _internal_bsid() const;
  ::service_layer::SLSrBindingSID* _internal_mutable_bsid();
  public:
  void unsafe_arena_set_allocated_bsid(
      ::service_layer::SLSrBindingSID* bsid);
  ::service_layer::SLSrBindingSID* unsafe_arena_release_bsid();

  // bool transitEligible = 2;
  void clear_transiteligible();
  bool transiteligible() const;
  void set_transiteligible(bool value);
  private:
  bool _internal_transiteligible() const;
  void _internal_set_transiteligible(bool value);
  public:

  // uint32 profileID = 5;
  void clear_profileid();
  uint32_t profileid() const;
  void set_profileid(uint32_t value);
  private:
  uint32_t _internal_profileid() const;
  void _internal_set_profileid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:service_layer.SLSrPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrCandidatePath > cps_;
  ::service_layer::SLSrPolicyKey* key_;
  ::service_layer::SLSrBindingSID* bsid_;
  bool transiteligible_;
  uint32_t profileid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrPolicyMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrPolicyMsg) */ {
 public:
  inline SLSrPolicyMsg() : SLSrPolicyMsg(nullptr) {}
  ~SLSrPolicyMsg() override;
  explicit constexpr SLSrPolicyMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrPolicyMsg(const SLSrPolicyMsg& from);
  SLSrPolicyMsg(SLSrPolicyMsg&& from) noexcept
    : SLSrPolicyMsg() {
    *this = ::std::move(from);
  }

  inline SLSrPolicyMsg& operator=(const SLSrPolicyMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrPolicyMsg& operator=(SLSrPolicyMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrPolicyMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrPolicyMsg* internal_default_instance() {
    return reinterpret_cast<const SLSrPolicyMsg*>(
               &_SLSrPolicyMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SLSrPolicyMsg& a, SLSrPolicyMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrPolicyMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrPolicyMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrPolicyMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrPolicyMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrPolicyMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrPolicyMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrPolicyMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrPolicyMsg";
  }
  protected:
  explicit SLSrPolicyMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoliciesFieldNumber = 1,
  };
  // repeated .service_layer.SLSrPolicy policies = 1;
  int policies_size() const;
  private:
  int _internal_policies_size() const;
  public:
  void clear_policies();
  ::service_layer::SLSrPolicy* mutable_policies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrPolicy >*
      mutable_policies();
  private:
  const ::service_layer::SLSrPolicy& _internal_policies(int index) const;
  ::service_layer::SLSrPolicy* _internal_add_policies();
  public:
  const ::service_layer::SLSrPolicy& policies(int index) const;
  ::service_layer::SLSrPolicy* add_policies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrPolicy >&
      policies() const;

  // @@protoc_insertion_point(class_scope:service_layer.SLSrPolicyMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrPolicy > policies_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrPolicyOpRsp_PolicyRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrPolicyOpRsp.PolicyRsp) */ {
 public:
  inline SLSrPolicyOpRsp_PolicyRsp() : SLSrPolicyOpRsp_PolicyRsp(nullptr) {}
  ~SLSrPolicyOpRsp_PolicyRsp() override;
  explicit constexpr SLSrPolicyOpRsp_PolicyRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrPolicyOpRsp_PolicyRsp(const SLSrPolicyOpRsp_PolicyRsp& from);
  SLSrPolicyOpRsp_PolicyRsp(SLSrPolicyOpRsp_PolicyRsp&& from) noexcept
    : SLSrPolicyOpRsp_PolicyRsp() {
    *this = ::std::move(from);
  }

  inline SLSrPolicyOpRsp_PolicyRsp& operator=(const SLSrPolicyOpRsp_PolicyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrPolicyOpRsp_PolicyRsp& operator=(SLSrPolicyOpRsp_PolicyRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrPolicyOpRsp_PolicyRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrPolicyOpRsp_PolicyRsp* internal_default_instance() {
    return reinterpret_cast<const SLSrPolicyOpRsp_PolicyRsp*>(
               &_SLSrPolicyOpRsp_PolicyRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SLSrPolicyOpRsp_PolicyRsp& a, SLSrPolicyOpRsp_PolicyRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrPolicyOpRsp_PolicyRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrPolicyOpRsp_PolicyRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrPolicyOpRsp_PolicyRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrPolicyOpRsp_PolicyRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrPolicyOpRsp_PolicyRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrPolicyOpRsp_PolicyRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrPolicyOpRsp_PolicyRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrPolicyOpRsp.PolicyRsp";
  }
  protected:
  explicit SLSrPolicyOpRsp_PolicyRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnCodeFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // .service_layer.SLErrorStatus returnCode = 1;
  bool has_returncode() const;
  private:
  bool _internal_has_returncode() const;
  public:
  void clear_returncode();
  const ::service_layer::SLErrorStatus& returncode() const;
  PROTOBUF_NODISCARD ::service_layer::SLErrorStatus* release_returncode();
  ::service_layer::SLErrorStatus* mutable_returncode();
  void set_allocated_returncode(::service_layer::SLErrorStatus* returncode);
  private:
  const ::service_layer::SLErrorStatus& _internal_returncode() const;
  ::service_layer::SLErrorStatus* _internal_mutable_returncode();
  public:
  void unsafe_arena_set_allocated_returncode(
      ::service_layer::SLErrorStatus* returncode);
  ::service_layer::SLErrorStatus* unsafe_arena_release_returncode();

  // .service_layer.SLSrPolicyKey key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::service_layer::SLSrPolicyKey& key() const;
  PROTOBUF_NODISCARD ::service_layer::SLSrPolicyKey* release_key();
  ::service_layer::SLSrPolicyKey* mutable_key();
  void set_allocated_key(::service_layer::SLSrPolicyKey* key);
  private:
  const ::service_layer::SLSrPolicyKey& _internal_key() const;
  ::service_layer::SLSrPolicyKey* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::service_layer::SLSrPolicyKey* key);
  ::service_layer::SLSrPolicyKey* unsafe_arena_release_key();

  // @@protoc_insertion_point(class_scope:service_layer.SLSrPolicyOpRsp.PolicyRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::service_layer::SLErrorStatus* returncode_;
  ::service_layer::SLSrPolicyKey* key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class SLSrPolicyOpRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service_layer.SLSrPolicyOpRsp) */ {
 public:
  inline SLSrPolicyOpRsp() : SLSrPolicyOpRsp(nullptr) {}
  ~SLSrPolicyOpRsp() override;
  explicit constexpr SLSrPolicyOpRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLSrPolicyOpRsp(const SLSrPolicyOpRsp& from);
  SLSrPolicyOpRsp(SLSrPolicyOpRsp&& from) noexcept
    : SLSrPolicyOpRsp() {
    *this = ::std::move(from);
  }

  inline SLSrPolicyOpRsp& operator=(const SLSrPolicyOpRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLSrPolicyOpRsp& operator=(SLSrPolicyOpRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLSrPolicyOpRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLSrPolicyOpRsp* internal_default_instance() {
    return reinterpret_cast<const SLSrPolicyOpRsp*>(
               &_SLSrPolicyOpRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SLSrPolicyOpRsp& a, SLSrPolicyOpRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SLSrPolicyOpRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLSrPolicyOpRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLSrPolicyOpRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLSrPolicyOpRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLSrPolicyOpRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLSrPolicyOpRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLSrPolicyOpRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service_layer.SLSrPolicyOpRsp";
  }
  protected:
  explicit SLSrPolicyOpRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SLSrPolicyOpRsp_PolicyRsp PolicyRsp;

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 1,
  };
  // repeated .service_layer.SLSrPolicyOpRsp.PolicyRsp responses = 1;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::service_layer::SLSrPolicyOpRsp_PolicyRsp* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrPolicyOpRsp_PolicyRsp >*
      mutable_responses();
  private:
  const ::service_layer::SLSrPolicyOpRsp_PolicyRsp& _internal_responses(int index) const;
  ::service_layer::SLSrPolicyOpRsp_PolicyRsp* _internal_add_responses();
  public:
  const ::service_layer::SLSrPolicyOpRsp_PolicyRsp& responses(int index) const;
  ::service_layer::SLSrPolicyOpRsp_PolicyRsp* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrPolicyOpRsp_PolicyRsp >&
      responses() const;

  // @@protoc_insertion_point(class_scope:service_layer.SLSrPolicyOpRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrPolicyOpRsp_PolicyRsp > responses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sl_5fsrte_5fpolicy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SLSrExplicitCP

// repeated .service_layer.SLSrSegmentList segmentList = 1;
inline int SLSrExplicitCP::_internal_segmentlist_size() const {
  return segmentlist_.size();
}
inline int SLSrExplicitCP::segmentlist_size() const {
  return _internal_segmentlist_size();
}
inline ::service_layer::SLSrSegmentList* SLSrExplicitCP::mutable_segmentlist(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrExplicitCP.segmentList)
  return segmentlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSegmentList >*
SLSrExplicitCP::mutable_segmentlist() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLSrExplicitCP.segmentList)
  return &segmentlist_;
}
inline const ::service_layer::SLSrSegmentList& SLSrExplicitCP::_internal_segmentlist(int index) const {
  return segmentlist_.Get(index);
}
inline const ::service_layer::SLSrSegmentList& SLSrExplicitCP::segmentlist(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrExplicitCP.segmentList)
  return _internal_segmentlist(index);
}
inline ::service_layer::SLSrSegmentList* SLSrExplicitCP::_internal_add_segmentlist() {
  return segmentlist_.Add();
}
inline ::service_layer::SLSrSegmentList* SLSrExplicitCP::add_segmentlist() {
  ::service_layer::SLSrSegmentList* _add = _internal_add_segmentlist();
  // @@protoc_insertion_point(field_add:service_layer.SLSrExplicitCP.segmentList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrSegmentList >&
SLSrExplicitCP::segmentlist() const {
  // @@protoc_insertion_point(field_list:service_layer.SLSrExplicitCP.segmentList)
  return segmentlist_;
}

// -------------------------------------------------------------------

// SLSrConstraints_SegmentConstraints

// .service_layer.SLSrConstraints.SegmentConstraints.ProtectionType protection = 1;
inline void SLSrConstraints_SegmentConstraints::clear_protection() {
  protection_ = 0;
}
inline ::service_layer::SLSrConstraints_SegmentConstraints_ProtectionType SLSrConstraints_SegmentConstraints::_internal_protection() const {
  return static_cast< ::service_layer::SLSrConstraints_SegmentConstraints_ProtectionType >(protection_);
}
inline ::service_layer::SLSrConstraints_SegmentConstraints_ProtectionType SLSrConstraints_SegmentConstraints::protection() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrConstraints.SegmentConstraints.protection)
  return _internal_protection();
}
inline void SLSrConstraints_SegmentConstraints::_internal_set_protection(::service_layer::SLSrConstraints_SegmentConstraints_ProtectionType value) {
  
  protection_ = value;
}
inline void SLSrConstraints_SegmentConstraints::set_protection(::service_layer::SLSrConstraints_SegmentConstraints_ProtectionType value) {
  _internal_set_protection(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrConstraints.SegmentConstraints.protection)
}

// uint32 sidalgo = 2;
inline void SLSrConstraints_SegmentConstraints::clear_sidalgo() {
  sidalgo_ = 0u;
}
inline uint32_t SLSrConstraints_SegmentConstraints::_internal_sidalgo() const {
  return sidalgo_;
}
inline uint32_t SLSrConstraints_SegmentConstraints::sidalgo() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrConstraints.SegmentConstraints.sidalgo)
  return _internal_sidalgo();
}
inline void SLSrConstraints_SegmentConstraints::_internal_set_sidalgo(uint32_t value) {
  
  sidalgo_ = value;
}
inline void SLSrConstraints_SegmentConstraints::set_sidalgo(uint32_t value) {
  _internal_set_sidalgo(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrConstraints.SegmentConstraints.sidalgo)
}

// uint32 MSD = 3;
inline void SLSrConstraints_SegmentConstraints::clear_msd() {
  msd_ = 0u;
}
inline uint32_t SLSrConstraints_SegmentConstraints::_internal_msd() const {
  return msd_;
}
inline uint32_t SLSrConstraints_SegmentConstraints::msd() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrConstraints.SegmentConstraints.MSD)
  return _internal_msd();
}
inline void SLSrConstraints_SegmentConstraints::_internal_set_msd(uint32_t value) {
  
  msd_ = value;
}
inline void SLSrConstraints_SegmentConstraints::set_msd(uint32_t value) {
  _internal_set_msd(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrConstraints.SegmentConstraints.MSD)
}

// -------------------------------------------------------------------

// SLSrConstraints

// .service_layer.SLSrAffinities affinities = 1;
inline bool SLSrConstraints::_internal_has_affinities() const {
  return this != internal_default_instance() && affinities_ != nullptr;
}
inline bool SLSrConstraints::has_affinities() const {
  return _internal_has_affinities();
}
inline const ::service_layer::SLSrAffinities& SLSrConstraints::_internal_affinities() const {
  const ::service_layer::SLSrAffinities* p = affinities_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrAffinities&>(
      ::service_layer::_SLSrAffinities_default_instance_);
}
inline const ::service_layer::SLSrAffinities& SLSrConstraints::affinities() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrConstraints.affinities)
  return _internal_affinities();
}
inline void SLSrConstraints::unsafe_arena_set_allocated_affinities(
    ::service_layer::SLSrAffinities* affinities) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(affinities_);
  }
  affinities_ = affinities;
  if (affinities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrConstraints.affinities)
}
inline ::service_layer::SLSrAffinities* SLSrConstraints::release_affinities() {
  
  ::service_layer::SLSrAffinities* temp = affinities_;
  affinities_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrAffinities* SLSrConstraints::unsafe_arena_release_affinities() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrConstraints.affinities)
  
  ::service_layer::SLSrAffinities* temp = affinities_;
  affinities_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrAffinities* SLSrConstraints::_internal_mutable_affinities() {
  
  if (affinities_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrAffinities>(GetArenaForAllocation());
    affinities_ = p;
  }
  return affinities_;
}
inline ::service_layer::SLSrAffinities* SLSrConstraints::mutable_affinities() {
  ::service_layer::SLSrAffinities* _msg = _internal_mutable_affinities();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrConstraints.affinities)
  return _msg;
}
inline void SLSrConstraints::set_allocated_affinities(::service_layer::SLSrAffinities* affinities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(affinities_);
  }
  if (affinities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(affinities));
    if (message_arena != submessage_arena) {
      affinities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, affinities, submessage_arena);
    }
    
  } else {
    
  }
  affinities_ = affinities;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrConstraints.affinities)
}

// .service_layer.SLSrMetricBounds metricBounds = 2;
inline bool SLSrConstraints::_internal_has_metricbounds() const {
  return this != internal_default_instance() && metricbounds_ != nullptr;
}
inline bool SLSrConstraints::has_metricbounds() const {
  return _internal_has_metricbounds();
}
inline const ::service_layer::SLSrMetricBounds& SLSrConstraints::_internal_metricbounds() const {
  const ::service_layer::SLSrMetricBounds* p = metricbounds_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrMetricBounds&>(
      ::service_layer::_SLSrMetricBounds_default_instance_);
}
inline const ::service_layer::SLSrMetricBounds& SLSrConstraints::metricbounds() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrConstraints.metricBounds)
  return _internal_metricbounds();
}
inline void SLSrConstraints::unsafe_arena_set_allocated_metricbounds(
    ::service_layer::SLSrMetricBounds* metricbounds) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metricbounds_);
  }
  metricbounds_ = metricbounds;
  if (metricbounds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrConstraints.metricBounds)
}
inline ::service_layer::SLSrMetricBounds* SLSrConstraints::release_metricbounds() {
  
  ::service_layer::SLSrMetricBounds* temp = metricbounds_;
  metricbounds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrMetricBounds* SLSrConstraints::unsafe_arena_release_metricbounds() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrConstraints.metricBounds)
  
  ::service_layer::SLSrMetricBounds* temp = metricbounds_;
  metricbounds_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrMetricBounds* SLSrConstraints::_internal_mutable_metricbounds() {
  
  if (metricbounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrMetricBounds>(GetArenaForAllocation());
    metricbounds_ = p;
  }
  return metricbounds_;
}
inline ::service_layer::SLSrMetricBounds* SLSrConstraints::mutable_metricbounds() {
  ::service_layer::SLSrMetricBounds* _msg = _internal_mutable_metricbounds();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrConstraints.metricBounds)
  return _msg;
}
inline void SLSrConstraints::set_allocated_metricbounds(::service_layer::SLSrMetricBounds* metricbounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metricbounds_);
  }
  if (metricbounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metricbounds));
    if (message_arena != submessage_arena) {
      metricbounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metricbounds, submessage_arena);
    }
    
  } else {
    
  }
  metricbounds_ = metricbounds;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrConstraints.metricBounds)
}

// .service_layer.SLSrConstraints.SegmentConstraints segmentConstraints = 3;
inline bool SLSrConstraints::_internal_has_segmentconstraints() const {
  return this != internal_default_instance() && segmentconstraints_ != nullptr;
}
inline bool SLSrConstraints::has_segmentconstraints() const {
  return _internal_has_segmentconstraints();
}
inline void SLSrConstraints::clear_segmentconstraints() {
  if (GetArenaForAllocation() == nullptr && segmentconstraints_ != nullptr) {
    delete segmentconstraints_;
  }
  segmentconstraints_ = nullptr;
}
inline const ::service_layer::SLSrConstraints_SegmentConstraints& SLSrConstraints::_internal_segmentconstraints() const {
  const ::service_layer::SLSrConstraints_SegmentConstraints* p = segmentconstraints_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrConstraints_SegmentConstraints&>(
      ::service_layer::_SLSrConstraints_SegmentConstraints_default_instance_);
}
inline const ::service_layer::SLSrConstraints_SegmentConstraints& SLSrConstraints::segmentconstraints() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrConstraints.segmentConstraints)
  return _internal_segmentconstraints();
}
inline void SLSrConstraints::unsafe_arena_set_allocated_segmentconstraints(
    ::service_layer::SLSrConstraints_SegmentConstraints* segmentconstraints) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(segmentconstraints_);
  }
  segmentconstraints_ = segmentconstraints;
  if (segmentconstraints) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrConstraints.segmentConstraints)
}
inline ::service_layer::SLSrConstraints_SegmentConstraints* SLSrConstraints::release_segmentconstraints() {
  
  ::service_layer::SLSrConstraints_SegmentConstraints* temp = segmentconstraints_;
  segmentconstraints_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrConstraints_SegmentConstraints* SLSrConstraints::unsafe_arena_release_segmentconstraints() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrConstraints.segmentConstraints)
  
  ::service_layer::SLSrConstraints_SegmentConstraints* temp = segmentconstraints_;
  segmentconstraints_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrConstraints_SegmentConstraints* SLSrConstraints::_internal_mutable_segmentconstraints() {
  
  if (segmentconstraints_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrConstraints_SegmentConstraints>(GetArenaForAllocation());
    segmentconstraints_ = p;
  }
  return segmentconstraints_;
}
inline ::service_layer::SLSrConstraints_SegmentConstraints* SLSrConstraints::mutable_segmentconstraints() {
  ::service_layer::SLSrConstraints_SegmentConstraints* _msg = _internal_mutable_segmentconstraints();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrConstraints.segmentConstraints)
  return _msg;
}
inline void SLSrConstraints::set_allocated_segmentconstraints(::service_layer::SLSrConstraints_SegmentConstraints* segmentconstraints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete segmentconstraints_;
  }
  if (segmentconstraints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrConstraints_SegmentConstraints>::GetOwningArena(segmentconstraints);
    if (message_arena != submessage_arena) {
      segmentconstraints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, segmentconstraints, submessage_arena);
    }
    
  } else {
    
  }
  segmentconstraints_ = segmentconstraints;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrConstraints.segmentConstraints)
}

// -------------------------------------------------------------------

// SLSrDynamicCP

// .service_layer.SLSrMetricType ometric = 1;
inline void SLSrDynamicCP::clear_ometric() {
  ometric_ = 0;
}
inline ::service_layer::SLSrMetricType SLSrDynamicCP::_internal_ometric() const {
  return static_cast< ::service_layer::SLSrMetricType >(ometric_);
}
inline ::service_layer::SLSrMetricType SLSrDynamicCP::ometric() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrDynamicCP.ometric)
  return _internal_ometric();
}
inline void SLSrDynamicCP::_internal_set_ometric(::service_layer::SLSrMetricType value) {
  
  ometric_ = value;
}
inline void SLSrDynamicCP::set_ometric(::service_layer::SLSrMetricType value) {
  _internal_set_ometric(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrDynamicCP.ometric)
}

// .service_layer.SLSrConstraints constraints = 2;
inline bool SLSrDynamicCP::_internal_has_constraints() const {
  return this != internal_default_instance() && constraints_ != nullptr;
}
inline bool SLSrDynamicCP::has_constraints() const {
  return _internal_has_constraints();
}
inline void SLSrDynamicCP::clear_constraints() {
  if (GetArenaForAllocation() == nullptr && constraints_ != nullptr) {
    delete constraints_;
  }
  constraints_ = nullptr;
}
inline const ::service_layer::SLSrConstraints& SLSrDynamicCP::_internal_constraints() const {
  const ::service_layer::SLSrConstraints* p = constraints_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrConstraints&>(
      ::service_layer::_SLSrConstraints_default_instance_);
}
inline const ::service_layer::SLSrConstraints& SLSrDynamicCP::constraints() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrDynamicCP.constraints)
  return _internal_constraints();
}
inline void SLSrDynamicCP::unsafe_arena_set_allocated_constraints(
    ::service_layer::SLSrConstraints* constraints) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(constraints_);
  }
  constraints_ = constraints;
  if (constraints) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrDynamicCP.constraints)
}
inline ::service_layer::SLSrConstraints* SLSrDynamicCP::release_constraints() {
  
  ::service_layer::SLSrConstraints* temp = constraints_;
  constraints_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrConstraints* SLSrDynamicCP::unsafe_arena_release_constraints() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrDynamicCP.constraints)
  
  ::service_layer::SLSrConstraints* temp = constraints_;
  constraints_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrConstraints* SLSrDynamicCP::_internal_mutable_constraints() {
  
  if (constraints_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrConstraints>(GetArenaForAllocation());
    constraints_ = p;
  }
  return constraints_;
}
inline ::service_layer::SLSrConstraints* SLSrDynamicCP::mutable_constraints() {
  ::service_layer::SLSrConstraints* _msg = _internal_mutable_constraints();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrDynamicCP.constraints)
  return _msg;
}
inline void SLSrDynamicCP::set_allocated_constraints(::service_layer::SLSrConstraints* constraints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete constraints_;
  }
  if (constraints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrConstraints>::GetOwningArena(constraints);
    if (message_arena != submessage_arena) {
      constraints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constraints, submessage_arena);
    }
    
  } else {
    
  }
  constraints_ = constraints;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrDynamicCP.constraints)
}

// .service_layer.SLSrMetricMargin metricMargin = 3;
inline bool SLSrDynamicCP::_internal_has_metricmargin() const {
  return this != internal_default_instance() && metricmargin_ != nullptr;
}
inline bool SLSrDynamicCP::has_metricmargin() const {
  return _internal_has_metricmargin();
}
inline const ::service_layer::SLSrMetricMargin& SLSrDynamicCP::_internal_metricmargin() const {
  const ::service_layer::SLSrMetricMargin* p = metricmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrMetricMargin&>(
      ::service_layer::_SLSrMetricMargin_default_instance_);
}
inline const ::service_layer::SLSrMetricMargin& SLSrDynamicCP::metricmargin() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrDynamicCP.metricMargin)
  return _internal_metricmargin();
}
inline void SLSrDynamicCP::unsafe_arena_set_allocated_metricmargin(
    ::service_layer::SLSrMetricMargin* metricmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metricmargin_);
  }
  metricmargin_ = metricmargin;
  if (metricmargin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrDynamicCP.metricMargin)
}
inline ::service_layer::SLSrMetricMargin* SLSrDynamicCP::release_metricmargin() {
  
  ::service_layer::SLSrMetricMargin* temp = metricmargin_;
  metricmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrMetricMargin* SLSrDynamicCP::unsafe_arena_release_metricmargin() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrDynamicCP.metricMargin)
  
  ::service_layer::SLSrMetricMargin* temp = metricmargin_;
  metricmargin_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrMetricMargin* SLSrDynamicCP::_internal_mutable_metricmargin() {
  
  if (metricmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrMetricMargin>(GetArenaForAllocation());
    metricmargin_ = p;
  }
  return metricmargin_;
}
inline ::service_layer::SLSrMetricMargin* SLSrDynamicCP::mutable_metricmargin() {
  ::service_layer::SLSrMetricMargin* _msg = _internal_mutable_metricmargin();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrDynamicCP.metricMargin)
  return _msg;
}
inline void SLSrDynamicCP::set_allocated_metricmargin(::service_layer::SLSrMetricMargin* metricmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metricmargin_);
  }
  if (metricmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metricmargin));
    if (message_arena != submessage_arena) {
      metricmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metricmargin, submessage_arena);
    }
    
  } else {
    
  }
  metricmargin_ = metricmargin;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrDynamicCP.metricMargin)
}

// bool delegate = 4;
inline void SLSrDynamicCP::clear_delegate() {
  delegate_ = false;
}
inline bool SLSrDynamicCP::_internal_delegate() const {
  return delegate_;
}
inline bool SLSrDynamicCP::delegate() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrDynamicCP.delegate)
  return _internal_delegate();
}
inline void SLSrDynamicCP::_internal_set_delegate(bool value) {
  
  delegate_ = value;
}
inline void SLSrDynamicCP::set_delegate(bool value) {
  _internal_set_delegate(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrDynamicCP.delegate)
}

// -------------------------------------------------------------------

// SLSrCandidatePath

// .service_layer.SLSrCandidatePathKey key = 1;
inline bool SLSrCandidatePath::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool SLSrCandidatePath::has_key() const {
  return _internal_has_key();
}
inline const ::service_layer::SLSrCandidatePathKey& SLSrCandidatePath::_internal_key() const {
  const ::service_layer::SLSrCandidatePathKey* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrCandidatePathKey&>(
      ::service_layer::_SLSrCandidatePathKey_default_instance_);
}
inline const ::service_layer::SLSrCandidatePathKey& SLSrCandidatePath::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrCandidatePath.key)
  return _internal_key();
}
inline void SLSrCandidatePath::unsafe_arena_set_allocated_key(
    ::service_layer::SLSrCandidatePathKey* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrCandidatePath.key)
}
inline ::service_layer::SLSrCandidatePathKey* SLSrCandidatePath::release_key() {
  
  ::service_layer::SLSrCandidatePathKey* temp = key_;
  key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrCandidatePathKey* SLSrCandidatePath::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrCandidatePath.key)
  
  ::service_layer::SLSrCandidatePathKey* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrCandidatePathKey* SLSrCandidatePath::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrCandidatePathKey>(GetArenaForAllocation());
    key_ = p;
  }
  return key_;
}
inline ::service_layer::SLSrCandidatePathKey* SLSrCandidatePath::mutable_key() {
  ::service_layer::SLSrCandidatePathKey* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrCandidatePath.key)
  return _msg;
}
inline void SLSrCandidatePath::set_allocated_key(::service_layer::SLSrCandidatePathKey* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key));
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrCandidatePath.key)
}

// string name = 2;
inline void SLSrCandidatePath::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SLSrCandidatePath::name() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrCandidatePath.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLSrCandidatePath::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrCandidatePath.name)
}
inline std::string* SLSrCandidatePath::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrCandidatePath.name)
  return _s;
}
inline const std::string& SLSrCandidatePath::_internal_name() const {
  return name_.Get();
}
inline void SLSrCandidatePath::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrCandidatePath::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrCandidatePath::release_name() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrCandidatePath.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLSrCandidatePath::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrCandidatePath.name)
}

// uint32 preference = 3;
inline void SLSrCandidatePath::clear_preference() {
  preference_ = 0u;
}
inline uint32_t SLSrCandidatePath::_internal_preference() const {
  return preference_;
}
inline uint32_t SLSrCandidatePath::preference() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrCandidatePath.preference)
  return _internal_preference();
}
inline void SLSrCandidatePath::_internal_set_preference(uint32_t value) {
  
  preference_ = value;
}
inline void SLSrCandidatePath::set_preference(uint32_t value) {
  _internal_set_preference(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrCandidatePath.preference)
}

// .service_layer.SLSrDataplane dataplane = 4;
inline void SLSrCandidatePath::clear_dataplane() {
  dataplane_ = 0;
}
inline ::service_layer::SLSrDataplane SLSrCandidatePath::_internal_dataplane() const {
  return static_cast< ::service_layer::SLSrDataplane >(dataplane_);
}
inline ::service_layer::SLSrDataplane SLSrCandidatePath::dataplane() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrCandidatePath.dataplane)
  return _internal_dataplane();
}
inline void SLSrCandidatePath::_internal_set_dataplane(::service_layer::SLSrDataplane value) {
  
  dataplane_ = value;
}
inline void SLSrCandidatePath::set_dataplane(::service_layer::SLSrDataplane value) {
  _internal_set_dataplane(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrCandidatePath.dataplane)
}

// .service_layer.SLSrDynamicCP dynamic = 5;
inline bool SLSrCandidatePath::_internal_has_dynamic() const {
  return CP_case() == kDynamic;
}
inline bool SLSrCandidatePath::has_dynamic() const {
  return _internal_has_dynamic();
}
inline void SLSrCandidatePath::set_has_dynamic() {
  _oneof_case_[0] = kDynamic;
}
inline void SLSrCandidatePath::clear_dynamic() {
  if (_internal_has_dynamic()) {
    if (GetArenaForAllocation() == nullptr) {
      delete CP_.dynamic_;
    }
    clear_has_CP();
  }
}
inline ::service_layer::SLSrDynamicCP* SLSrCandidatePath::release_dynamic() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrCandidatePath.dynamic)
  if (_internal_has_dynamic()) {
    clear_has_CP();
      ::service_layer::SLSrDynamicCP* temp = CP_.dynamic_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    CP_.dynamic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLSrDynamicCP& SLSrCandidatePath::_internal_dynamic() const {
  return _internal_has_dynamic()
      ? *CP_.dynamic_
      : reinterpret_cast< ::service_layer::SLSrDynamicCP&>(::service_layer::_SLSrDynamicCP_default_instance_);
}
inline const ::service_layer::SLSrDynamicCP& SLSrCandidatePath::dynamic() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrCandidatePath.dynamic)
  return _internal_dynamic();
}
inline ::service_layer::SLSrDynamicCP* SLSrCandidatePath::unsafe_arena_release_dynamic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLSrCandidatePath.dynamic)
  if (_internal_has_dynamic()) {
    clear_has_CP();
    ::service_layer::SLSrDynamicCP* temp = CP_.dynamic_;
    CP_.dynamic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLSrCandidatePath::unsafe_arena_set_allocated_dynamic(::service_layer::SLSrDynamicCP* dynamic) {
  clear_CP();
  if (dynamic) {
    set_has_dynamic();
    CP_.dynamic_ = dynamic;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrCandidatePath.dynamic)
}
inline ::service_layer::SLSrDynamicCP* SLSrCandidatePath::_internal_mutable_dynamic() {
  if (!_internal_has_dynamic()) {
    clear_CP();
    set_has_dynamic();
    CP_.dynamic_ = CreateMaybeMessage< ::service_layer::SLSrDynamicCP >(GetArenaForAllocation());
  }
  return CP_.dynamic_;
}
inline ::service_layer::SLSrDynamicCP* SLSrCandidatePath::mutable_dynamic() {
  ::service_layer::SLSrDynamicCP* _msg = _internal_mutable_dynamic();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrCandidatePath.dynamic)
  return _msg;
}

// .service_layer.SLSrExplicitCP explicit = 6;
inline bool SLSrCandidatePath::_internal_has_explicit_() const {
  return CP_case() == kExplicit;
}
inline bool SLSrCandidatePath::has_explicit_() const {
  return _internal_has_explicit_();
}
inline void SLSrCandidatePath::set_has_explicit_() {
  _oneof_case_[0] = kExplicit;
}
inline void SLSrCandidatePath::clear_explicit_() {
  if (_internal_has_explicit_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete CP_.explicit__;
    }
    clear_has_CP();
  }
}
inline ::service_layer::SLSrExplicitCP* SLSrCandidatePath::release_explicit_() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrCandidatePath.explicit)
  if (_internal_has_explicit_()) {
    clear_has_CP();
      ::service_layer::SLSrExplicitCP* temp = CP_.explicit__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    CP_.explicit__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::service_layer::SLSrExplicitCP& SLSrCandidatePath::_internal_explicit_() const {
  return _internal_has_explicit_()
      ? *CP_.explicit__
      : reinterpret_cast< ::service_layer::SLSrExplicitCP&>(::service_layer::_SLSrExplicitCP_default_instance_);
}
inline const ::service_layer::SLSrExplicitCP& SLSrCandidatePath::explicit_() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrCandidatePath.explicit)
  return _internal_explicit_();
}
inline ::service_layer::SLSrExplicitCP* SLSrCandidatePath::unsafe_arena_release_explicit_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:service_layer.SLSrCandidatePath.explicit)
  if (_internal_has_explicit_()) {
    clear_has_CP();
    ::service_layer::SLSrExplicitCP* temp = CP_.explicit__;
    CP_.explicit__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SLSrCandidatePath::unsafe_arena_set_allocated_explicit_(::service_layer::SLSrExplicitCP* explicit_) {
  clear_CP();
  if (explicit_) {
    set_has_explicit_();
    CP_.explicit__ = explicit_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrCandidatePath.explicit)
}
inline ::service_layer::SLSrExplicitCP* SLSrCandidatePath::_internal_mutable_explicit_() {
  if (!_internal_has_explicit_()) {
    clear_CP();
    set_has_explicit_();
    CP_.explicit__ = CreateMaybeMessage< ::service_layer::SLSrExplicitCP >(GetArenaForAllocation());
  }
  return CP_.explicit__;
}
inline ::service_layer::SLSrExplicitCP* SLSrCandidatePath::mutable_explicit_() {
  ::service_layer::SLSrExplicitCP* _msg = _internal_mutable_explicit_();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrCandidatePath.explicit)
  return _msg;
}

inline bool SLSrCandidatePath::has_CP() const {
  return CP_case() != CP_NOT_SET;
}
inline void SLSrCandidatePath::clear_has_CP() {
  _oneof_case_[0] = CP_NOT_SET;
}
inline SLSrCandidatePath::CPCase SLSrCandidatePath::CP_case() const {
  return SLSrCandidatePath::CPCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SLSrv6BindingSID

// string locatorName = 1;
inline void SLSrv6BindingSID::clear_locatorname() {
  locatorname_.ClearToEmpty();
}
inline const std::string& SLSrv6BindingSID::locatorname() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6BindingSID.locatorName)
  return _internal_locatorname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLSrv6BindingSID::set_locatorname(ArgT0&& arg0, ArgT... args) {
 
 locatorname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:service_layer.SLSrv6BindingSID.locatorName)
}
inline std::string* SLSrv6BindingSID::mutable_locatorname() {
  std::string* _s = _internal_mutable_locatorname();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrv6BindingSID.locatorName)
  return _s;
}
inline const std::string& SLSrv6BindingSID::_internal_locatorname() const {
  return locatorname_.Get();
}
inline void SLSrv6BindingSID::_internal_set_locatorname(const std::string& value) {
  
  locatorname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SLSrv6BindingSID::_internal_mutable_locatorname() {
  
  return locatorname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SLSrv6BindingSID::release_locatorname() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrv6BindingSID.locatorName)
  return locatorname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SLSrv6BindingSID::set_allocated_locatorname(std::string* locatorname) {
  if (locatorname != nullptr) {
    
  } else {
    
  }
  locatorname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), locatorname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (locatorname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    locatorname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrv6BindingSID.locatorName)
}

// uint32 behavior = 2;
inline void SLSrv6BindingSID::clear_behavior() {
  behavior_ = 0u;
}
inline uint32_t SLSrv6BindingSID::_internal_behavior() const {
  return behavior_;
}
inline uint32_t SLSrv6BindingSID::behavior() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6BindingSID.behavior)
  return _internal_behavior();
}
inline void SLSrv6BindingSID::_internal_set_behavior(uint32_t value) {
  
  behavior_ = value;
}
inline void SLSrv6BindingSID::set_behavior(uint32_t value) {
  _internal_set_behavior(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrv6BindingSID.behavior)
}

// .service_layer.SLIpv6Address SID = 3;
inline bool SLSrv6BindingSID::_internal_has_sid() const {
  return this != internal_default_instance() && sid_ != nullptr;
}
inline bool SLSrv6BindingSID::has_sid() const {
  return _internal_has_sid();
}
inline const ::service_layer::SLIpv6Address& SLSrv6BindingSID::_internal_sid() const {
  const ::service_layer::SLIpv6Address* p = sid_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLIpv6Address&>(
      ::service_layer::_SLIpv6Address_default_instance_);
}
inline const ::service_layer::SLIpv6Address& SLSrv6BindingSID::sid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrv6BindingSID.SID)
  return _internal_sid();
}
inline void SLSrv6BindingSID::unsafe_arena_set_allocated_sid(
    ::service_layer::SLIpv6Address* sid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sid_);
  }
  sid_ = sid;
  if (sid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrv6BindingSID.SID)
}
inline ::service_layer::SLIpv6Address* SLSrv6BindingSID::release_sid() {
  
  ::service_layer::SLIpv6Address* temp = sid_;
  sid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLIpv6Address* SLSrv6BindingSID::unsafe_arena_release_sid() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrv6BindingSID.SID)
  
  ::service_layer::SLIpv6Address* temp = sid_;
  sid_ = nullptr;
  return temp;
}
inline ::service_layer::SLIpv6Address* SLSrv6BindingSID::_internal_mutable_sid() {
  
  if (sid_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLIpv6Address>(GetArenaForAllocation());
    sid_ = p;
  }
  return sid_;
}
inline ::service_layer::SLIpv6Address* SLSrv6BindingSID::mutable_sid() {
  ::service_layer::SLIpv6Address* _msg = _internal_mutable_sid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrv6BindingSID.SID)
  return _msg;
}
inline void SLSrv6BindingSID::set_allocated_sid(::service_layer::SLIpv6Address* sid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sid_);
  }
  if (sid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sid));
    if (message_arena != submessage_arena) {
      sid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sid, submessage_arena);
    }
    
  } else {
    
  }
  sid_ = sid;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrv6BindingSID.SID)
}

// -------------------------------------------------------------------

// SLSrBindingSID

// .service_layer.SLSrBindingSIDAllocationMode bindingSIDAllocation = 1;
inline void SLSrBindingSID::clear_bindingsidallocation() {
  bindingsidallocation_ = 0;
}
inline ::service_layer::SLSrBindingSIDAllocationMode SLSrBindingSID::_internal_bindingsidallocation() const {
  return static_cast< ::service_layer::SLSrBindingSIDAllocationMode >(bindingsidallocation_);
}
inline ::service_layer::SLSrBindingSIDAllocationMode SLSrBindingSID::bindingsidallocation() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrBindingSID.bindingSIDAllocation)
  return _internal_bindingsidallocation();
}
inline void SLSrBindingSID::_internal_set_bindingsidallocation(::service_layer::SLSrBindingSIDAllocationMode value) {
  
  bindingsidallocation_ = value;
}
inline void SLSrBindingSID::set_bindingsidallocation(::service_layer::SLSrBindingSIDAllocationMode value) {
  _internal_set_bindingsidallocation(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrBindingSID.bindingSIDAllocation)
}

// uint32 mplsBindingSID = 2;
inline void SLSrBindingSID::clear_mplsbindingsid() {
  mplsbindingsid_ = 0u;
}
inline uint32_t SLSrBindingSID::_internal_mplsbindingsid() const {
  return mplsbindingsid_;
}
inline uint32_t SLSrBindingSID::mplsbindingsid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrBindingSID.mplsBindingSID)
  return _internal_mplsbindingsid();
}
inline void SLSrBindingSID::_internal_set_mplsbindingsid(uint32_t value) {
  
  mplsbindingsid_ = value;
}
inline void SLSrBindingSID::set_mplsbindingsid(uint32_t value) {
  _internal_set_mplsbindingsid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrBindingSID.mplsBindingSID)
}

// .service_layer.SLSrv6BindingSID srv6BindingSID = 3;
inline bool SLSrBindingSID::_internal_has_srv6bindingsid() const {
  return this != internal_default_instance() && srv6bindingsid_ != nullptr;
}
inline bool SLSrBindingSID::has_srv6bindingsid() const {
  return _internal_has_srv6bindingsid();
}
inline void SLSrBindingSID::clear_srv6bindingsid() {
  if (GetArenaForAllocation() == nullptr && srv6bindingsid_ != nullptr) {
    delete srv6bindingsid_;
  }
  srv6bindingsid_ = nullptr;
}
inline const ::service_layer::SLSrv6BindingSID& SLSrBindingSID::_internal_srv6bindingsid() const {
  const ::service_layer::SLSrv6BindingSID* p = srv6bindingsid_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrv6BindingSID&>(
      ::service_layer::_SLSrv6BindingSID_default_instance_);
}
inline const ::service_layer::SLSrv6BindingSID& SLSrBindingSID::srv6bindingsid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrBindingSID.srv6BindingSID)
  return _internal_srv6bindingsid();
}
inline void SLSrBindingSID::unsafe_arena_set_allocated_srv6bindingsid(
    ::service_layer::SLSrv6BindingSID* srv6bindingsid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(srv6bindingsid_);
  }
  srv6bindingsid_ = srv6bindingsid;
  if (srv6bindingsid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrBindingSID.srv6BindingSID)
}
inline ::service_layer::SLSrv6BindingSID* SLSrBindingSID::release_srv6bindingsid() {
  
  ::service_layer::SLSrv6BindingSID* temp = srv6bindingsid_;
  srv6bindingsid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrv6BindingSID* SLSrBindingSID::unsafe_arena_release_srv6bindingsid() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrBindingSID.srv6BindingSID)
  
  ::service_layer::SLSrv6BindingSID* temp = srv6bindingsid_;
  srv6bindingsid_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrv6BindingSID* SLSrBindingSID::_internal_mutable_srv6bindingsid() {
  
  if (srv6bindingsid_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrv6BindingSID>(GetArenaForAllocation());
    srv6bindingsid_ = p;
  }
  return srv6bindingsid_;
}
inline ::service_layer::SLSrv6BindingSID* SLSrBindingSID::mutable_srv6bindingsid() {
  ::service_layer::SLSrv6BindingSID* _msg = _internal_mutable_srv6bindingsid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrBindingSID.srv6BindingSID)
  return _msg;
}
inline void SLSrBindingSID::set_allocated_srv6bindingsid(::service_layer::SLSrv6BindingSID* srv6bindingsid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete srv6bindingsid_;
  }
  if (srv6bindingsid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrv6BindingSID>::GetOwningArena(srv6bindingsid);
    if (message_arena != submessage_arena) {
      srv6bindingsid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srv6bindingsid, submessage_arena);
    }
    
  } else {
    
  }
  srv6bindingsid_ = srv6bindingsid;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrBindingSID.srv6BindingSID)
}

// -------------------------------------------------------------------

// SLSrPolicy

// .service_layer.SLSrPolicyKey key = 1;
inline bool SLSrPolicy::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool SLSrPolicy::has_key() const {
  return _internal_has_key();
}
inline const ::service_layer::SLSrPolicyKey& SLSrPolicy::_internal_key() const {
  const ::service_layer::SLSrPolicyKey* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrPolicyKey&>(
      ::service_layer::_SLSrPolicyKey_default_instance_);
}
inline const ::service_layer::SLSrPolicyKey& SLSrPolicy::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicy.key)
  return _internal_key();
}
inline void SLSrPolicy::unsafe_arena_set_allocated_key(
    ::service_layer::SLSrPolicyKey* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrPolicy.key)
}
inline ::service_layer::SLSrPolicyKey* SLSrPolicy::release_key() {
  
  ::service_layer::SLSrPolicyKey* temp = key_;
  key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrPolicyKey* SLSrPolicy::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrPolicy.key)
  
  ::service_layer::SLSrPolicyKey* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrPolicyKey* SLSrPolicy::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrPolicyKey>(GetArenaForAllocation());
    key_ = p;
  }
  return key_;
}
inline ::service_layer::SLSrPolicyKey* SLSrPolicy::mutable_key() {
  ::service_layer::SLSrPolicyKey* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrPolicy.key)
  return _msg;
}
inline void SLSrPolicy::set_allocated_key(::service_layer::SLSrPolicyKey* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key));
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrPolicy.key)
}

// bool transitEligible = 2;
inline void SLSrPolicy::clear_transiteligible() {
  transiteligible_ = false;
}
inline bool SLSrPolicy::_internal_transiteligible() const {
  return transiteligible_;
}
inline bool SLSrPolicy::transiteligible() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicy.transitEligible)
  return _internal_transiteligible();
}
inline void SLSrPolicy::_internal_set_transiteligible(bool value) {
  
  transiteligible_ = value;
}
inline void SLSrPolicy::set_transiteligible(bool value) {
  _internal_set_transiteligible(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrPolicy.transitEligible)
}

// repeated .service_layer.SLSrCandidatePath CPs = 3;
inline int SLSrPolicy::_internal_cps_size() const {
  return cps_.size();
}
inline int SLSrPolicy::cps_size() const {
  return _internal_cps_size();
}
inline void SLSrPolicy::clear_cps() {
  cps_.Clear();
}
inline ::service_layer::SLSrCandidatePath* SLSrPolicy::mutable_cps(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrPolicy.CPs)
  return cps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrCandidatePath >*
SLSrPolicy::mutable_cps() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLSrPolicy.CPs)
  return &cps_;
}
inline const ::service_layer::SLSrCandidatePath& SLSrPolicy::_internal_cps(int index) const {
  return cps_.Get(index);
}
inline const ::service_layer::SLSrCandidatePath& SLSrPolicy::cps(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicy.CPs)
  return _internal_cps(index);
}
inline ::service_layer::SLSrCandidatePath* SLSrPolicy::_internal_add_cps() {
  return cps_.Add();
}
inline ::service_layer::SLSrCandidatePath* SLSrPolicy::add_cps() {
  ::service_layer::SLSrCandidatePath* _add = _internal_add_cps();
  // @@protoc_insertion_point(field_add:service_layer.SLSrPolicy.CPs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrCandidatePath >&
SLSrPolicy::cps() const {
  // @@protoc_insertion_point(field_list:service_layer.SLSrPolicy.CPs)
  return cps_;
}

// .service_layer.SLSrBindingSID bsid = 4;
inline bool SLSrPolicy::_internal_has_bsid() const {
  return this != internal_default_instance() && bsid_ != nullptr;
}
inline bool SLSrPolicy::has_bsid() const {
  return _internal_has_bsid();
}
inline void SLSrPolicy::clear_bsid() {
  if (GetArenaForAllocation() == nullptr && bsid_ != nullptr) {
    delete bsid_;
  }
  bsid_ = nullptr;
}
inline const ::service_layer::SLSrBindingSID& SLSrPolicy::_internal_bsid() const {
  const ::service_layer::SLSrBindingSID* p = bsid_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrBindingSID&>(
      ::service_layer::_SLSrBindingSID_default_instance_);
}
inline const ::service_layer::SLSrBindingSID& SLSrPolicy::bsid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicy.bsid)
  return _internal_bsid();
}
inline void SLSrPolicy::unsafe_arena_set_allocated_bsid(
    ::service_layer::SLSrBindingSID* bsid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bsid_);
  }
  bsid_ = bsid;
  if (bsid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrPolicy.bsid)
}
inline ::service_layer::SLSrBindingSID* SLSrPolicy::release_bsid() {
  
  ::service_layer::SLSrBindingSID* temp = bsid_;
  bsid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrBindingSID* SLSrPolicy::unsafe_arena_release_bsid() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrPolicy.bsid)
  
  ::service_layer::SLSrBindingSID* temp = bsid_;
  bsid_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrBindingSID* SLSrPolicy::_internal_mutable_bsid() {
  
  if (bsid_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrBindingSID>(GetArenaForAllocation());
    bsid_ = p;
  }
  return bsid_;
}
inline ::service_layer::SLSrBindingSID* SLSrPolicy::mutable_bsid() {
  ::service_layer::SLSrBindingSID* _msg = _internal_mutable_bsid();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrPolicy.bsid)
  return _msg;
}
inline void SLSrPolicy::set_allocated_bsid(::service_layer::SLSrBindingSID* bsid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bsid_;
  }
  if (bsid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::service_layer::SLSrBindingSID>::GetOwningArena(bsid);
    if (message_arena != submessage_arena) {
      bsid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bsid, submessage_arena);
    }
    
  } else {
    
  }
  bsid_ = bsid;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrPolicy.bsid)
}

// uint32 profileID = 5;
inline void SLSrPolicy::clear_profileid() {
  profileid_ = 0u;
}
inline uint32_t SLSrPolicy::_internal_profileid() const {
  return profileid_;
}
inline uint32_t SLSrPolicy::profileid() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicy.profileID)
  return _internal_profileid();
}
inline void SLSrPolicy::_internal_set_profileid(uint32_t value) {
  
  profileid_ = value;
}
inline void SLSrPolicy::set_profileid(uint32_t value) {
  _internal_set_profileid(value);
  // @@protoc_insertion_point(field_set:service_layer.SLSrPolicy.profileID)
}

// -------------------------------------------------------------------

// SLSrPolicyMsg

// repeated .service_layer.SLSrPolicy policies = 1;
inline int SLSrPolicyMsg::_internal_policies_size() const {
  return policies_.size();
}
inline int SLSrPolicyMsg::policies_size() const {
  return _internal_policies_size();
}
inline void SLSrPolicyMsg::clear_policies() {
  policies_.Clear();
}
inline ::service_layer::SLSrPolicy* SLSrPolicyMsg::mutable_policies(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrPolicyMsg.policies)
  return policies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrPolicy >*
SLSrPolicyMsg::mutable_policies() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLSrPolicyMsg.policies)
  return &policies_;
}
inline const ::service_layer::SLSrPolicy& SLSrPolicyMsg::_internal_policies(int index) const {
  return policies_.Get(index);
}
inline const ::service_layer::SLSrPolicy& SLSrPolicyMsg::policies(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyMsg.policies)
  return _internal_policies(index);
}
inline ::service_layer::SLSrPolicy* SLSrPolicyMsg::_internal_add_policies() {
  return policies_.Add();
}
inline ::service_layer::SLSrPolicy* SLSrPolicyMsg::add_policies() {
  ::service_layer::SLSrPolicy* _add = _internal_add_policies();
  // @@protoc_insertion_point(field_add:service_layer.SLSrPolicyMsg.policies)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrPolicy >&
SLSrPolicyMsg::policies() const {
  // @@protoc_insertion_point(field_list:service_layer.SLSrPolicyMsg.policies)
  return policies_;
}

// -------------------------------------------------------------------

// SLSrPolicyOpRsp_PolicyRsp

// .service_layer.SLErrorStatus returnCode = 1;
inline bool SLSrPolicyOpRsp_PolicyRsp::_internal_has_returncode() const {
  return this != internal_default_instance() && returncode_ != nullptr;
}
inline bool SLSrPolicyOpRsp_PolicyRsp::has_returncode() const {
  return _internal_has_returncode();
}
inline const ::service_layer::SLErrorStatus& SLSrPolicyOpRsp_PolicyRsp::_internal_returncode() const {
  const ::service_layer::SLErrorStatus* p = returncode_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLErrorStatus&>(
      ::service_layer::_SLErrorStatus_default_instance_);
}
inline const ::service_layer::SLErrorStatus& SLSrPolicyOpRsp_PolicyRsp::returncode() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyOpRsp.PolicyRsp.returnCode)
  return _internal_returncode();
}
inline void SLSrPolicyOpRsp_PolicyRsp::unsafe_arena_set_allocated_returncode(
    ::service_layer::SLErrorStatus* returncode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(returncode_);
  }
  returncode_ = returncode;
  if (returncode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrPolicyOpRsp.PolicyRsp.returnCode)
}
inline ::service_layer::SLErrorStatus* SLSrPolicyOpRsp_PolicyRsp::release_returncode() {
  
  ::service_layer::SLErrorStatus* temp = returncode_;
  returncode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLErrorStatus* SLSrPolicyOpRsp_PolicyRsp::unsafe_arena_release_returncode() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrPolicyOpRsp.PolicyRsp.returnCode)
  
  ::service_layer::SLErrorStatus* temp = returncode_;
  returncode_ = nullptr;
  return temp;
}
inline ::service_layer::SLErrorStatus* SLSrPolicyOpRsp_PolicyRsp::_internal_mutable_returncode() {
  
  if (returncode_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLErrorStatus>(GetArenaForAllocation());
    returncode_ = p;
  }
  return returncode_;
}
inline ::service_layer::SLErrorStatus* SLSrPolicyOpRsp_PolicyRsp::mutable_returncode() {
  ::service_layer::SLErrorStatus* _msg = _internal_mutable_returncode();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrPolicyOpRsp.PolicyRsp.returnCode)
  return _msg;
}
inline void SLSrPolicyOpRsp_PolicyRsp::set_allocated_returncode(::service_layer::SLErrorStatus* returncode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(returncode_);
  }
  if (returncode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(returncode));
    if (message_arena != submessage_arena) {
      returncode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, returncode, submessage_arena);
    }
    
  } else {
    
  }
  returncode_ = returncode;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrPolicyOpRsp.PolicyRsp.returnCode)
}

// .service_layer.SLSrPolicyKey key = 2;
inline bool SLSrPolicyOpRsp_PolicyRsp::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool SLSrPolicyOpRsp_PolicyRsp::has_key() const {
  return _internal_has_key();
}
inline const ::service_layer::SLSrPolicyKey& SLSrPolicyOpRsp_PolicyRsp::_internal_key() const {
  const ::service_layer::SLSrPolicyKey* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::service_layer::SLSrPolicyKey&>(
      ::service_layer::_SLSrPolicyKey_default_instance_);
}
inline const ::service_layer::SLSrPolicyKey& SLSrPolicyOpRsp_PolicyRsp::key() const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyOpRsp.PolicyRsp.key)
  return _internal_key();
}
inline void SLSrPolicyOpRsp_PolicyRsp::unsafe_arena_set_allocated_key(
    ::service_layer::SLSrPolicyKey* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:service_layer.SLSrPolicyOpRsp.PolicyRsp.key)
}
inline ::service_layer::SLSrPolicyKey* SLSrPolicyOpRsp_PolicyRsp::release_key() {
  
  ::service_layer::SLSrPolicyKey* temp = key_;
  key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::service_layer::SLSrPolicyKey* SLSrPolicyOpRsp_PolicyRsp::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:service_layer.SLSrPolicyOpRsp.PolicyRsp.key)
  
  ::service_layer::SLSrPolicyKey* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::service_layer::SLSrPolicyKey* SLSrPolicyOpRsp_PolicyRsp::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::service_layer::SLSrPolicyKey>(GetArenaForAllocation());
    key_ = p;
  }
  return key_;
}
inline ::service_layer::SLSrPolicyKey* SLSrPolicyOpRsp_PolicyRsp::mutable_key() {
  ::service_layer::SLSrPolicyKey* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrPolicyOpRsp.PolicyRsp.key)
  return _msg;
}
inline void SLSrPolicyOpRsp_PolicyRsp::set_allocated_key(::service_layer::SLSrPolicyKey* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key));
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:service_layer.SLSrPolicyOpRsp.PolicyRsp.key)
}

// -------------------------------------------------------------------

// SLSrPolicyOpRsp

// repeated .service_layer.SLSrPolicyOpRsp.PolicyRsp responses = 1;
inline int SLSrPolicyOpRsp::_internal_responses_size() const {
  return responses_.size();
}
inline int SLSrPolicyOpRsp::responses_size() const {
  return _internal_responses_size();
}
inline void SLSrPolicyOpRsp::clear_responses() {
  responses_.Clear();
}
inline ::service_layer::SLSrPolicyOpRsp_PolicyRsp* SLSrPolicyOpRsp::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:service_layer.SLSrPolicyOpRsp.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrPolicyOpRsp_PolicyRsp >*
SLSrPolicyOpRsp::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:service_layer.SLSrPolicyOpRsp.responses)
  return &responses_;
}
inline const ::service_layer::SLSrPolicyOpRsp_PolicyRsp& SLSrPolicyOpRsp::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::service_layer::SLSrPolicyOpRsp_PolicyRsp& SLSrPolicyOpRsp::responses(int index) const {
  // @@protoc_insertion_point(field_get:service_layer.SLSrPolicyOpRsp.responses)
  return _internal_responses(index);
}
inline ::service_layer::SLSrPolicyOpRsp_PolicyRsp* SLSrPolicyOpRsp::_internal_add_responses() {
  return responses_.Add();
}
inline ::service_layer::SLSrPolicyOpRsp_PolicyRsp* SLSrPolicyOpRsp::add_responses() {
  ::service_layer::SLSrPolicyOpRsp_PolicyRsp* _add = _internal_add_responses();
  // @@protoc_insertion_point(field_add:service_layer.SLSrPolicyOpRsp.responses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::service_layer::SLSrPolicyOpRsp_PolicyRsp >&
SLSrPolicyOpRsp::responses() const {
  // @@protoc_insertion_point(field_list:service_layer.SLSrPolicyOpRsp.responses)
  return responses_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_layer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::service_layer::SLSrConstraints_SegmentConstraints_ProtectionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLSrConstraints_SegmentConstraints_ProtectionType>() {
  return ::service_layer::SLSrConstraints_SegmentConstraints_ProtectionType_descriptor();
}
template <> struct is_proto_enum< ::service_layer::SLSrBindingSIDAllocationMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_layer::SLSrBindingSIDAllocationMode>() {
  return ::service_layer::SLSrBindingSIDAllocationMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sl_5fsrte_5fpolicy_2eproto
