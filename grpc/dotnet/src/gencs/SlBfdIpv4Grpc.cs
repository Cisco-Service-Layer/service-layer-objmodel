// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sl_bfd_ipv4.proto
// </auto-generated>
// Original file comments:
// @file 
// @brief Client RPC proto file for BFD RPCs. 
// Declares calls for adding, deleting, updating, and getting the BFD
// sessions. 
// 
// ----------------------------------------------------------------
//  Copyright (c) 2016 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace ServiceLayer {
  /// <summary>
  ///@defgroup SLBfdIPv4Oper
  ///@ingroup BFD
  ///Used for IPv4 BFD registrations, and BFD session operations and notifications.
  ///Defines the RPC for adding, deleting, updating, and retrieving BFD sessions.
  ///@{
  /// </summary>
  public static partial class SLBfdv4Oper
  {
    static readonly string __ServiceName = "service_layer.SLBfdv4Oper";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBfdRegMsg> __Marshaller_service_layer_SLBfdRegMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBfdRegMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBfdRegMsgRsp> __Marshaller_service_layer_SLBfdRegMsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBfdRegMsgRsp.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBfdGetMsg> __Marshaller_service_layer_SLBfdGetMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBfdGetMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBfdGetMsgRsp> __Marshaller_service_layer_SLBfdGetMsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBfdGetMsgRsp.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBfdGetStatsMsgRsp> __Marshaller_service_layer_SLBfdGetStatsMsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBfdGetStatsMsgRsp.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBfdGetNotifMsg> __Marshaller_service_layer_SLBfdGetNotifMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBfdGetNotifMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBfdv4Notif> __Marshaller_service_layer_SLBfdv4Notif = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBfdv4Notif.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBfdv4Msg> __Marshaller_service_layer_SLBfdv4Msg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBfdv4Msg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBfdv4MsgRsp> __Marshaller_service_layer_SLBfdv4MsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBfdv4MsgRsp.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBfdv4GetMsg> __Marshaller_service_layer_SLBfdv4GetMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBfdv4GetMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBfdv4GetMsgRsp> __Marshaller_service_layer_SLBfdv4GetMsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBfdv4GetMsgRsp.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLBfdRegMsg, global::ServiceLayer.SLBfdRegMsgRsp> __Method_SLBfdv4RegOp = new grpc::Method<global::ServiceLayer.SLBfdRegMsg, global::ServiceLayer.SLBfdRegMsgRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLBfdv4RegOp",
        __Marshaller_service_layer_SLBfdRegMsg,
        __Marshaller_service_layer_SLBfdRegMsgRsp);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLBfdGetMsg, global::ServiceLayer.SLBfdGetMsgRsp> __Method_SLBfdv4Get = new grpc::Method<global::ServiceLayer.SLBfdGetMsg, global::ServiceLayer.SLBfdGetMsgRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLBfdv4Get",
        __Marshaller_service_layer_SLBfdGetMsg,
        __Marshaller_service_layer_SLBfdGetMsgRsp);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLBfdGetMsg, global::ServiceLayer.SLBfdGetStatsMsgRsp> __Method_SLBfdv4GetStats = new grpc::Method<global::ServiceLayer.SLBfdGetMsg, global::ServiceLayer.SLBfdGetStatsMsgRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLBfdv4GetStats",
        __Marshaller_service_layer_SLBfdGetMsg,
        __Marshaller_service_layer_SLBfdGetStatsMsgRsp);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLBfdGetNotifMsg, global::ServiceLayer.SLBfdv4Notif> __Method_SLBfdv4GetNotifStream = new grpc::Method<global::ServiceLayer.SLBfdGetNotifMsg, global::ServiceLayer.SLBfdv4Notif>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SLBfdv4GetNotifStream",
        __Marshaller_service_layer_SLBfdGetNotifMsg,
        __Marshaller_service_layer_SLBfdv4Notif);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLBfdv4Msg, global::ServiceLayer.SLBfdv4MsgRsp> __Method_SLBfdv4SessionOp = new grpc::Method<global::ServiceLayer.SLBfdv4Msg, global::ServiceLayer.SLBfdv4MsgRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLBfdv4SessionOp",
        __Marshaller_service_layer_SLBfdv4Msg,
        __Marshaller_service_layer_SLBfdv4MsgRsp);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLBfdv4GetMsg, global::ServiceLayer.SLBfdv4GetMsgRsp> __Method_SLBfdv4SessionGet = new grpc::Method<global::ServiceLayer.SLBfdv4GetMsg, global::ServiceLayer.SLBfdv4GetMsgRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLBfdv4SessionGet",
        __Marshaller_service_layer_SLBfdv4GetMsg,
        __Marshaller_service_layer_SLBfdv4GetMsgRsp);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ServiceLayer.SlBfdIpv4Reflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SLBfdv4Oper</summary>
    [grpc::BindServiceMethod(typeof(SLBfdv4Oper), "BindService")]
    public abstract partial class SLBfdv4OperBase
    {
      /// <summary>
      /// SLBfdRegMsg.Oper = SL_REGOP_REGISTER:
      ///     Global BFD registration.
      ///     A client Must Register BEFORE BFD sessions can be added/modified.
      ///
      /// SLBfdRegMsg.Oper = SL_REGOP_UNREGISTER:
      ///     Global BFD un-registration.
      ///     This call is used to end all BFD notifications and unregister any
      ///     interest in BFD session configuration.
      ///     This call cleans up all BFD sessions previously requested.
      ///
      /// SLBfdRegMsg.Oper = SL_REGOP_EOF:
      ///     BFD End Of File.
      ///     After Registration, the client is expected to send an EOF
      ///     message to convey the end of replay of the client's known objects.
      ///     This is especially useful under certain restart scenarios when the
      ///     client and the server are trying to synchronize their BFD sessions.
      ///
      /// The BFD registration operations can be used by the client to synchronize
      /// BFD sessions with the server. When the client re-registers with the
      /// server using SL_REGOP_REGISTER, server marks all BFD sessions as stale.
      /// Client can then reprogram BFD sessions. When client sends
      /// SL_REGOP_EOF, any session not reprogrammed by the client are
      /// removed from the device.
      ///
      /// The client must perform all operations (BFD registration,
      /// BFD session operations) from a single execution context.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLBfdRegMsgRsp> SLBfdv4RegOp(global::ServiceLayer.SLBfdRegMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Used to retrieve global BFD info from the server.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLBfdGetMsgRsp> SLBfdv4Get(global::ServiceLayer.SLBfdGetMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Used to retrieve global BFD stats from the server.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLBfdGetStatsMsgRsp> SLBfdv4GetStats(global::ServiceLayer.SLBfdGetMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This call is used to get a stream of session state notifications.
      /// The caller must maintain the GRPC channel as long as
      /// there is interest in BFD session notifications. Only sessions that were
      /// created through this API will be notified to caller.
      /// This call can be used to get "push" notifications for session states.
      /// It is advised that the caller register for notifications before any
      /// sessions are created to avoid any loss of notifications.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task SLBfdv4GetNotifStream(global::ServiceLayer.SLBfdGetNotifMsg request, grpc::IServerStreamWriter<global::ServiceLayer.SLBfdv4Notif> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SLBfdv4Msg.Oper = SL_OBJOP_ADD:
      ///     Add one or multiple BFD sessions.
      ///
      /// SLBfdv4Msg.Oper = SL_OBJOP_UPDATE:
      ///     Update one or multiple BFD sessions.
      ///
      /// SLBfdv4Msg.Oper = SL_OBJOP_DELETE:
      ///     Delete one or multiple BFD sessions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLBfdv4MsgRsp> SLBfdv4SessionOp(global::ServiceLayer.SLBfdv4Msg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieve BFD session attributes and state.
      /// This call can be used to "poll" the current state of a session.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLBfdv4GetMsgRsp> SLBfdv4SessionGet(global::ServiceLayer.SLBfdv4GetMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SLBfdv4Oper</summary>
    public partial class SLBfdv4OperClient : grpc::ClientBase<SLBfdv4OperClient>
    {
      /// <summary>Creates a new client for SLBfdv4Oper</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SLBfdv4OperClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SLBfdv4Oper that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SLBfdv4OperClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SLBfdv4OperClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SLBfdv4OperClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// SLBfdRegMsg.Oper = SL_REGOP_REGISTER:
      ///     Global BFD registration.
      ///     A client Must Register BEFORE BFD sessions can be added/modified.
      ///
      /// SLBfdRegMsg.Oper = SL_REGOP_UNREGISTER:
      ///     Global BFD un-registration.
      ///     This call is used to end all BFD notifications and unregister any
      ///     interest in BFD session configuration.
      ///     This call cleans up all BFD sessions previously requested.
      ///
      /// SLBfdRegMsg.Oper = SL_REGOP_EOF:
      ///     BFD End Of File.
      ///     After Registration, the client is expected to send an EOF
      ///     message to convey the end of replay of the client's known objects.
      ///     This is especially useful under certain restart scenarios when the
      ///     client and the server are trying to synchronize their BFD sessions.
      ///
      /// The BFD registration operations can be used by the client to synchronize
      /// BFD sessions with the server. When the client re-registers with the
      /// server using SL_REGOP_REGISTER, server marks all BFD sessions as stale.
      /// Client can then reprogram BFD sessions. When client sends
      /// SL_REGOP_EOF, any session not reprogrammed by the client are
      /// removed from the device.
      ///
      /// The client must perform all operations (BFD registration,
      /// BFD session operations) from a single execution context.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLBfdRegMsgRsp SLBfdv4RegOp(global::ServiceLayer.SLBfdRegMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLBfdv4RegOp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SLBfdRegMsg.Oper = SL_REGOP_REGISTER:
      ///     Global BFD registration.
      ///     A client Must Register BEFORE BFD sessions can be added/modified.
      ///
      /// SLBfdRegMsg.Oper = SL_REGOP_UNREGISTER:
      ///     Global BFD un-registration.
      ///     This call is used to end all BFD notifications and unregister any
      ///     interest in BFD session configuration.
      ///     This call cleans up all BFD sessions previously requested.
      ///
      /// SLBfdRegMsg.Oper = SL_REGOP_EOF:
      ///     BFD End Of File.
      ///     After Registration, the client is expected to send an EOF
      ///     message to convey the end of replay of the client's known objects.
      ///     This is especially useful under certain restart scenarios when the
      ///     client and the server are trying to synchronize their BFD sessions.
      ///
      /// The BFD registration operations can be used by the client to synchronize
      /// BFD sessions with the server. When the client re-registers with the
      /// server using SL_REGOP_REGISTER, server marks all BFD sessions as stale.
      /// Client can then reprogram BFD sessions. When client sends
      /// SL_REGOP_EOF, any session not reprogrammed by the client are
      /// removed from the device.
      ///
      /// The client must perform all operations (BFD registration,
      /// BFD session operations) from a single execution context.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLBfdRegMsgRsp SLBfdv4RegOp(global::ServiceLayer.SLBfdRegMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLBfdv4RegOp, null, options, request);
      }
      /// <summary>
      /// SLBfdRegMsg.Oper = SL_REGOP_REGISTER:
      ///     Global BFD registration.
      ///     A client Must Register BEFORE BFD sessions can be added/modified.
      ///
      /// SLBfdRegMsg.Oper = SL_REGOP_UNREGISTER:
      ///     Global BFD un-registration.
      ///     This call is used to end all BFD notifications and unregister any
      ///     interest in BFD session configuration.
      ///     This call cleans up all BFD sessions previously requested.
      ///
      /// SLBfdRegMsg.Oper = SL_REGOP_EOF:
      ///     BFD End Of File.
      ///     After Registration, the client is expected to send an EOF
      ///     message to convey the end of replay of the client's known objects.
      ///     This is especially useful under certain restart scenarios when the
      ///     client and the server are trying to synchronize their BFD sessions.
      ///
      /// The BFD registration operations can be used by the client to synchronize
      /// BFD sessions with the server. When the client re-registers with the
      /// server using SL_REGOP_REGISTER, server marks all BFD sessions as stale.
      /// Client can then reprogram BFD sessions. When client sends
      /// SL_REGOP_EOF, any session not reprogrammed by the client are
      /// removed from the device.
      ///
      /// The client must perform all operations (BFD registration,
      /// BFD session operations) from a single execution context.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLBfdRegMsgRsp> SLBfdv4RegOpAsync(global::ServiceLayer.SLBfdRegMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLBfdv4RegOpAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SLBfdRegMsg.Oper = SL_REGOP_REGISTER:
      ///     Global BFD registration.
      ///     A client Must Register BEFORE BFD sessions can be added/modified.
      ///
      /// SLBfdRegMsg.Oper = SL_REGOP_UNREGISTER:
      ///     Global BFD un-registration.
      ///     This call is used to end all BFD notifications and unregister any
      ///     interest in BFD session configuration.
      ///     This call cleans up all BFD sessions previously requested.
      ///
      /// SLBfdRegMsg.Oper = SL_REGOP_EOF:
      ///     BFD End Of File.
      ///     After Registration, the client is expected to send an EOF
      ///     message to convey the end of replay of the client's known objects.
      ///     This is especially useful under certain restart scenarios when the
      ///     client and the server are trying to synchronize their BFD sessions.
      ///
      /// The BFD registration operations can be used by the client to synchronize
      /// BFD sessions with the server. When the client re-registers with the
      /// server using SL_REGOP_REGISTER, server marks all BFD sessions as stale.
      /// Client can then reprogram BFD sessions. When client sends
      /// SL_REGOP_EOF, any session not reprogrammed by the client are
      /// removed from the device.
      ///
      /// The client must perform all operations (BFD registration,
      /// BFD session operations) from a single execution context.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLBfdRegMsgRsp> SLBfdv4RegOpAsync(global::ServiceLayer.SLBfdRegMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLBfdv4RegOp, null, options, request);
      }
      /// <summary>
      /// Used to retrieve global BFD info from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLBfdGetMsgRsp SLBfdv4Get(global::ServiceLayer.SLBfdGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLBfdv4Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to retrieve global BFD info from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLBfdGetMsgRsp SLBfdv4Get(global::ServiceLayer.SLBfdGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLBfdv4Get, null, options, request);
      }
      /// <summary>
      /// Used to retrieve global BFD info from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLBfdGetMsgRsp> SLBfdv4GetAsync(global::ServiceLayer.SLBfdGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLBfdv4GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to retrieve global BFD info from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLBfdGetMsgRsp> SLBfdv4GetAsync(global::ServiceLayer.SLBfdGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLBfdv4Get, null, options, request);
      }
      /// <summary>
      /// Used to retrieve global BFD stats from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLBfdGetStatsMsgRsp SLBfdv4GetStats(global::ServiceLayer.SLBfdGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLBfdv4GetStats(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to retrieve global BFD stats from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLBfdGetStatsMsgRsp SLBfdv4GetStats(global::ServiceLayer.SLBfdGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLBfdv4GetStats, null, options, request);
      }
      /// <summary>
      /// Used to retrieve global BFD stats from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLBfdGetStatsMsgRsp> SLBfdv4GetStatsAsync(global::ServiceLayer.SLBfdGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLBfdv4GetStatsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to retrieve global BFD stats from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLBfdGetStatsMsgRsp> SLBfdv4GetStatsAsync(global::ServiceLayer.SLBfdGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLBfdv4GetStats, null, options, request);
      }
      /// <summary>
      /// This call is used to get a stream of session state notifications.
      /// The caller must maintain the GRPC channel as long as
      /// there is interest in BFD session notifications. Only sessions that were
      /// created through this API will be notified to caller.
      /// This call can be used to get "push" notifications for session states.
      /// It is advised that the caller register for notifications before any
      /// sessions are created to avoid any loss of notifications.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::ServiceLayer.SLBfdv4Notif> SLBfdv4GetNotifStream(global::ServiceLayer.SLBfdGetNotifMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLBfdv4GetNotifStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This call is used to get a stream of session state notifications.
      /// The caller must maintain the GRPC channel as long as
      /// there is interest in BFD session notifications. Only sessions that were
      /// created through this API will be notified to caller.
      /// This call can be used to get "push" notifications for session states.
      /// It is advised that the caller register for notifications before any
      /// sessions are created to avoid any loss of notifications.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::ServiceLayer.SLBfdv4Notif> SLBfdv4GetNotifStream(global::ServiceLayer.SLBfdGetNotifMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SLBfdv4GetNotifStream, null, options, request);
      }
      /// <summary>
      /// SLBfdv4Msg.Oper = SL_OBJOP_ADD:
      ///     Add one or multiple BFD sessions.
      ///
      /// SLBfdv4Msg.Oper = SL_OBJOP_UPDATE:
      ///     Update one or multiple BFD sessions.
      ///
      /// SLBfdv4Msg.Oper = SL_OBJOP_DELETE:
      ///     Delete one or multiple BFD sessions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLBfdv4MsgRsp SLBfdv4SessionOp(global::ServiceLayer.SLBfdv4Msg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLBfdv4SessionOp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SLBfdv4Msg.Oper = SL_OBJOP_ADD:
      ///     Add one or multiple BFD sessions.
      ///
      /// SLBfdv4Msg.Oper = SL_OBJOP_UPDATE:
      ///     Update one or multiple BFD sessions.
      ///
      /// SLBfdv4Msg.Oper = SL_OBJOP_DELETE:
      ///     Delete one or multiple BFD sessions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLBfdv4MsgRsp SLBfdv4SessionOp(global::ServiceLayer.SLBfdv4Msg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLBfdv4SessionOp, null, options, request);
      }
      /// <summary>
      /// SLBfdv4Msg.Oper = SL_OBJOP_ADD:
      ///     Add one or multiple BFD sessions.
      ///
      /// SLBfdv4Msg.Oper = SL_OBJOP_UPDATE:
      ///     Update one or multiple BFD sessions.
      ///
      /// SLBfdv4Msg.Oper = SL_OBJOP_DELETE:
      ///     Delete one or multiple BFD sessions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLBfdv4MsgRsp> SLBfdv4SessionOpAsync(global::ServiceLayer.SLBfdv4Msg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLBfdv4SessionOpAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SLBfdv4Msg.Oper = SL_OBJOP_ADD:
      ///     Add one or multiple BFD sessions.
      ///
      /// SLBfdv4Msg.Oper = SL_OBJOP_UPDATE:
      ///     Update one or multiple BFD sessions.
      ///
      /// SLBfdv4Msg.Oper = SL_OBJOP_DELETE:
      ///     Delete one or multiple BFD sessions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLBfdv4MsgRsp> SLBfdv4SessionOpAsync(global::ServiceLayer.SLBfdv4Msg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLBfdv4SessionOp, null, options, request);
      }
      /// <summary>
      /// Retrieve BFD session attributes and state.
      /// This call can be used to "poll" the current state of a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLBfdv4GetMsgRsp SLBfdv4SessionGet(global::ServiceLayer.SLBfdv4GetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLBfdv4SessionGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve BFD session attributes and state.
      /// This call can be used to "poll" the current state of a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLBfdv4GetMsgRsp SLBfdv4SessionGet(global::ServiceLayer.SLBfdv4GetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLBfdv4SessionGet, null, options, request);
      }
      /// <summary>
      /// Retrieve BFD session attributes and state.
      /// This call can be used to "poll" the current state of a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLBfdv4GetMsgRsp> SLBfdv4SessionGetAsync(global::ServiceLayer.SLBfdv4GetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLBfdv4SessionGetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve BFD session attributes and state.
      /// This call can be used to "poll" the current state of a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLBfdv4GetMsgRsp> SLBfdv4SessionGetAsync(global::ServiceLayer.SLBfdv4GetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLBfdv4SessionGet, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override SLBfdv4OperClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SLBfdv4OperClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(SLBfdv4OperBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SLBfdv4RegOp, serviceImpl.SLBfdv4RegOp)
          .AddMethod(__Method_SLBfdv4Get, serviceImpl.SLBfdv4Get)
          .AddMethod(__Method_SLBfdv4GetStats, serviceImpl.SLBfdv4GetStats)
          .AddMethod(__Method_SLBfdv4GetNotifStream, serviceImpl.SLBfdv4GetNotifStream)
          .AddMethod(__Method_SLBfdv4SessionOp, serviceImpl.SLBfdv4SessionOp)
          .AddMethod(__Method_SLBfdv4SessionGet, serviceImpl.SLBfdv4SessionGet).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SLBfdv4OperBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SLBfdv4RegOp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLBfdRegMsg, global::ServiceLayer.SLBfdRegMsgRsp>(serviceImpl.SLBfdv4RegOp));
      serviceBinder.AddMethod(__Method_SLBfdv4Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLBfdGetMsg, global::ServiceLayer.SLBfdGetMsgRsp>(serviceImpl.SLBfdv4Get));
      serviceBinder.AddMethod(__Method_SLBfdv4GetStats, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLBfdGetMsg, global::ServiceLayer.SLBfdGetStatsMsgRsp>(serviceImpl.SLBfdv4GetStats));
      serviceBinder.AddMethod(__Method_SLBfdv4GetNotifStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::ServiceLayer.SLBfdGetNotifMsg, global::ServiceLayer.SLBfdv4Notif>(serviceImpl.SLBfdv4GetNotifStream));
      serviceBinder.AddMethod(__Method_SLBfdv4SessionOp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLBfdv4Msg, global::ServiceLayer.SLBfdv4MsgRsp>(serviceImpl.SLBfdv4SessionOp));
      serviceBinder.AddMethod(__Method_SLBfdv4SessionGet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLBfdv4GetMsg, global::ServiceLayer.SLBfdv4GetMsgRsp>(serviceImpl.SLBfdv4SessionGet));
    }

  }
}
#endregion
