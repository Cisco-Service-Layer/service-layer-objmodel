/*
 * Copyright (c) 2023 by cisco Systems, Inc. All rights reserved.
 */
// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sl_bfd_ipv6.proto
// </auto-generated>
// Original file comments:
// @file 
// @brief Client RPC proto file for BFD RPCs. 
// Declares calls for adding, deleting, updating, and getting the BFD
// sessions. 
// 
// ----------------------------------------------------------------
//  Copyright (c) 2016 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace ServiceLayer {
  /// <summary>
  ///@defgroup SLBfdIPv6Oper
  ///@ingroup BFD
  ///Used for IPv6 BFD registrations, and BFD session operations and notifications.
  ///Defines the RPC for adding, deleting, updating, and retrieving BFD sessions.
  ///@{
  /// </summary>
  public static partial class SLBfdv6Oper
  {
    static readonly string __ServiceName = "service_layer.SLBfdv6Oper";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBfdRegMsg> __Marshaller_service_layer_SLBfdRegMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBfdRegMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBfdRegMsgRsp> __Marshaller_service_layer_SLBfdRegMsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBfdRegMsgRsp.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBfdGetMsg> __Marshaller_service_layer_SLBfdGetMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBfdGetMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBfdGetMsgRsp> __Marshaller_service_layer_SLBfdGetMsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBfdGetMsgRsp.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBfdGetStatsMsgRsp> __Marshaller_service_layer_SLBfdGetStatsMsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBfdGetStatsMsgRsp.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBfdGetNotifMsg> __Marshaller_service_layer_SLBfdGetNotifMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBfdGetNotifMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBfdv6Notif> __Marshaller_service_layer_SLBfdv6Notif = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBfdv6Notif.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBfdv6Msg> __Marshaller_service_layer_SLBfdv6Msg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBfdv6Msg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBfdv6MsgRsp> __Marshaller_service_layer_SLBfdv6MsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBfdv6MsgRsp.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBfdv6GetMsg> __Marshaller_service_layer_SLBfdv6GetMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBfdv6GetMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBfdv6GetMsgRsp> __Marshaller_service_layer_SLBfdv6GetMsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBfdv6GetMsgRsp.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLBfdRegMsg, global::ServiceLayer.SLBfdRegMsgRsp> __Method_SLBfdv6RegOp = new grpc::Method<global::ServiceLayer.SLBfdRegMsg, global::ServiceLayer.SLBfdRegMsgRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLBfdv6RegOp",
        __Marshaller_service_layer_SLBfdRegMsg,
        __Marshaller_service_layer_SLBfdRegMsgRsp);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLBfdGetMsg, global::ServiceLayer.SLBfdGetMsgRsp> __Method_SLBfdv6Get = new grpc::Method<global::ServiceLayer.SLBfdGetMsg, global::ServiceLayer.SLBfdGetMsgRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLBfdv6Get",
        __Marshaller_service_layer_SLBfdGetMsg,
        __Marshaller_service_layer_SLBfdGetMsgRsp);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLBfdGetMsg, global::ServiceLayer.SLBfdGetStatsMsgRsp> __Method_SLBfdv6GetStats = new grpc::Method<global::ServiceLayer.SLBfdGetMsg, global::ServiceLayer.SLBfdGetStatsMsgRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLBfdv6GetStats",
        __Marshaller_service_layer_SLBfdGetMsg,
        __Marshaller_service_layer_SLBfdGetStatsMsgRsp);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLBfdGetNotifMsg, global::ServiceLayer.SLBfdv6Notif> __Method_SLBfdv6GetNotifStream = new grpc::Method<global::ServiceLayer.SLBfdGetNotifMsg, global::ServiceLayer.SLBfdv6Notif>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SLBfdv6GetNotifStream",
        __Marshaller_service_layer_SLBfdGetNotifMsg,
        __Marshaller_service_layer_SLBfdv6Notif);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLBfdv6Msg, global::ServiceLayer.SLBfdv6MsgRsp> __Method_SLBfdv6SessionOp = new grpc::Method<global::ServiceLayer.SLBfdv6Msg, global::ServiceLayer.SLBfdv6MsgRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLBfdv6SessionOp",
        __Marshaller_service_layer_SLBfdv6Msg,
        __Marshaller_service_layer_SLBfdv6MsgRsp);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLBfdv6GetMsg, global::ServiceLayer.SLBfdv6GetMsgRsp> __Method_SLBfdv6SessionGet = new grpc::Method<global::ServiceLayer.SLBfdv6GetMsg, global::ServiceLayer.SLBfdv6GetMsgRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLBfdv6SessionGet",
        __Marshaller_service_layer_SLBfdv6GetMsg,
        __Marshaller_service_layer_SLBfdv6GetMsgRsp);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ServiceLayer.SlBfdIpv6Reflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SLBfdv6Oper</summary>
    [grpc::BindServiceMethod(typeof(SLBfdv6Oper), "BindService")]
    public abstract partial class SLBfdv6OperBase
    {
      /// <summary>
      /// SLBfdRegMsg.Oper = SL_REGOP_REGISTER:
      ///     Global BFD registration.
      ///     A client Must Register BEFORE BFD sessions can be added/modified.
      ///
      /// SLBfdRegMsg.Oper = SL_REGOP_UNREGISTER:
      ///     Global BFD un-registration.
      ///     This call is used to end all BFD notifications and unregister any
      ///     interest in BFD session configuration.
      ///     This call cleans up all BFD sessions previously requested.
      ///
      /// SLBfdRegMsg.Oper = SL_REGOP_EOF:
      ///     BFD End Of File.
      ///     After Registration, the client is expected to send an EOF
      ///     message to convey the end of replay of the client's known objects.
      ///     This is especially useful under certain restart scenarios when the
      ///     client and the server are trying to synchronize their BFD sessions.
      ///
      /// The BFD registration operations can be used by the client to synchronize
      /// BFD sessions with the server. When the client re-registers with the
      /// server using SL_REGOP_REGISTER, server marks all BFD sessions as stale.
      /// Client can then reprogram BFD sessions. When client sends
      /// SL_REGOP_EOF, any session not reprogrammed by the client are
      /// removed from the device.
      ///
      /// The client must perform all operations (BFD registration,
      /// BFD session operations) from a single execution context.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLBfdRegMsgRsp> SLBfdv6RegOp(global::ServiceLayer.SLBfdRegMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Used to retrieve global BFD info from the server.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLBfdGetMsgRsp> SLBfdv6Get(global::ServiceLayer.SLBfdGetMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Used to retrieve global BFD stats from the server.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLBfdGetStatsMsgRsp> SLBfdv6GetStats(global::ServiceLayer.SLBfdGetMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This call is used to get a stream of session state notifications.
      /// The caller must maintain the GRPC channel as long as
      /// there is interest in BFD session notifications. Only sessions that were
      /// created through this API will be notified to caller.
      /// This call can be used to get "push" notifications for session states.
      /// It is advised that the caller register for notifications before any
      /// sessions are created to avoid any loss of notifications.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task SLBfdv6GetNotifStream(global::ServiceLayer.SLBfdGetNotifMsg request, grpc::IServerStreamWriter<global::ServiceLayer.SLBfdv6Notif> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SLBfdv6Msg.Oper = SL_OBJOP_ADD:
      ///     Add one or multiple BFD sessions.
      ///
      /// SLBfdv6Msg.Oper = SL_OBJOP_UPDATE:
      ///     Update one or multiple BFD sessions.
      ///
      /// SLBfdv6Msg.Oper = SL_OBJOP_DELETE:
      ///     Delete one or multiple BFD sessions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLBfdv6MsgRsp> SLBfdv6SessionOp(global::ServiceLayer.SLBfdv6Msg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieve BFD session attributes and state.
      /// This call can be used to "poll" the current state of a session.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLBfdv6GetMsgRsp> SLBfdv6SessionGet(global::ServiceLayer.SLBfdv6GetMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SLBfdv6Oper</summary>
    public partial class SLBfdv6OperClient : grpc::ClientBase<SLBfdv6OperClient>
    {
      /// <summary>Creates a new client for SLBfdv6Oper</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SLBfdv6OperClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SLBfdv6Oper that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SLBfdv6OperClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SLBfdv6OperClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SLBfdv6OperClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// SLBfdRegMsg.Oper = SL_REGOP_REGISTER:
      ///     Global BFD registration.
      ///     A client Must Register BEFORE BFD sessions can be added/modified.
      ///
      /// SLBfdRegMsg.Oper = SL_REGOP_UNREGISTER:
      ///     Global BFD un-registration.
      ///     This call is used to end all BFD notifications and unregister any
      ///     interest in BFD session configuration.
      ///     This call cleans up all BFD sessions previously requested.
      ///
      /// SLBfdRegMsg.Oper = SL_REGOP_EOF:
      ///     BFD End Of File.
      ///     After Registration, the client is expected to send an EOF
      ///     message to convey the end of replay of the client's known objects.
      ///     This is especially useful under certain restart scenarios when the
      ///     client and the server are trying to synchronize their BFD sessions.
      ///
      /// The BFD registration operations can be used by the client to synchronize
      /// BFD sessions with the server. When the client re-registers with the
      /// server using SL_REGOP_REGISTER, server marks all BFD sessions as stale.
      /// Client can then reprogram BFD sessions. When client sends
      /// SL_REGOP_EOF, any session not reprogrammed by the client are
      /// removed from the device.
      ///
      /// The client must perform all operations (BFD registration,
      /// BFD session operations) from a single execution context.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLBfdRegMsgRsp SLBfdv6RegOp(global::ServiceLayer.SLBfdRegMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLBfdv6RegOp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SLBfdRegMsg.Oper = SL_REGOP_REGISTER:
      ///     Global BFD registration.
      ///     A client Must Register BEFORE BFD sessions can be added/modified.
      ///
      /// SLBfdRegMsg.Oper = SL_REGOP_UNREGISTER:
      ///     Global BFD un-registration.
      ///     This call is used to end all BFD notifications and unregister any
      ///     interest in BFD session configuration.
      ///     This call cleans up all BFD sessions previously requested.
      ///
      /// SLBfdRegMsg.Oper = SL_REGOP_EOF:
      ///     BFD End Of File.
      ///     After Registration, the client is expected to send an EOF
      ///     message to convey the end of replay of the client's known objects.
      ///     This is especially useful under certain restart scenarios when the
      ///     client and the server are trying to synchronize their BFD sessions.
      ///
      /// The BFD registration operations can be used by the client to synchronize
      /// BFD sessions with the server. When the client re-registers with the
      /// server using SL_REGOP_REGISTER, server marks all BFD sessions as stale.
      /// Client can then reprogram BFD sessions. When client sends
      /// SL_REGOP_EOF, any session not reprogrammed by the client are
      /// removed from the device.
      ///
      /// The client must perform all operations (BFD registration,
      /// BFD session operations) from a single execution context.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLBfdRegMsgRsp SLBfdv6RegOp(global::ServiceLayer.SLBfdRegMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLBfdv6RegOp, null, options, request);
      }
      /// <summary>
      /// SLBfdRegMsg.Oper = SL_REGOP_REGISTER:
      ///     Global BFD registration.
      ///     A client Must Register BEFORE BFD sessions can be added/modified.
      ///
      /// SLBfdRegMsg.Oper = SL_REGOP_UNREGISTER:
      ///     Global BFD un-registration.
      ///     This call is used to end all BFD notifications and unregister any
      ///     interest in BFD session configuration.
      ///     This call cleans up all BFD sessions previously requested.
      ///
      /// SLBfdRegMsg.Oper = SL_REGOP_EOF:
      ///     BFD End Of File.
      ///     After Registration, the client is expected to send an EOF
      ///     message to convey the end of replay of the client's known objects.
      ///     This is especially useful under certain restart scenarios when the
      ///     client and the server are trying to synchronize their BFD sessions.
      ///
      /// The BFD registration operations can be used by the client to synchronize
      /// BFD sessions with the server. When the client re-registers with the
      /// server using SL_REGOP_REGISTER, server marks all BFD sessions as stale.
      /// Client can then reprogram BFD sessions. When client sends
      /// SL_REGOP_EOF, any session not reprogrammed by the client are
      /// removed from the device.
      ///
      /// The client must perform all operations (BFD registration,
      /// BFD session operations) from a single execution context.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLBfdRegMsgRsp> SLBfdv6RegOpAsync(global::ServiceLayer.SLBfdRegMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLBfdv6RegOpAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SLBfdRegMsg.Oper = SL_REGOP_REGISTER:
      ///     Global BFD registration.
      ///     A client Must Register BEFORE BFD sessions can be added/modified.
      ///
      /// SLBfdRegMsg.Oper = SL_REGOP_UNREGISTER:
      ///     Global BFD un-registration.
      ///     This call is used to end all BFD notifications and unregister any
      ///     interest in BFD session configuration.
      ///     This call cleans up all BFD sessions previously requested.
      ///
      /// SLBfdRegMsg.Oper = SL_REGOP_EOF:
      ///     BFD End Of File.
      ///     After Registration, the client is expected to send an EOF
      ///     message to convey the end of replay of the client's known objects.
      ///     This is especially useful under certain restart scenarios when the
      ///     client and the server are trying to synchronize their BFD sessions.
      ///
      /// The BFD registration operations can be used by the client to synchronize
      /// BFD sessions with the server. When the client re-registers with the
      /// server using SL_REGOP_REGISTER, server marks all BFD sessions as stale.
      /// Client can then reprogram BFD sessions. When client sends
      /// SL_REGOP_EOF, any session not reprogrammed by the client are
      /// removed from the device.
      ///
      /// The client must perform all operations (BFD registration,
      /// BFD session operations) from a single execution context.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLBfdRegMsgRsp> SLBfdv6RegOpAsync(global::ServiceLayer.SLBfdRegMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLBfdv6RegOp, null, options, request);
      }
      /// <summary>
      /// Used to retrieve global BFD info from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLBfdGetMsgRsp SLBfdv6Get(global::ServiceLayer.SLBfdGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLBfdv6Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to retrieve global BFD info from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLBfdGetMsgRsp SLBfdv6Get(global::ServiceLayer.SLBfdGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLBfdv6Get, null, options, request);
      }
      /// <summary>
      /// Used to retrieve global BFD info from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLBfdGetMsgRsp> SLBfdv6GetAsync(global::ServiceLayer.SLBfdGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLBfdv6GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to retrieve global BFD info from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLBfdGetMsgRsp> SLBfdv6GetAsync(global::ServiceLayer.SLBfdGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLBfdv6Get, null, options, request);
      }
      /// <summary>
      /// Used to retrieve global BFD stats from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLBfdGetStatsMsgRsp SLBfdv6GetStats(global::ServiceLayer.SLBfdGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLBfdv6GetStats(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to retrieve global BFD stats from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLBfdGetStatsMsgRsp SLBfdv6GetStats(global::ServiceLayer.SLBfdGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLBfdv6GetStats, null, options, request);
      }
      /// <summary>
      /// Used to retrieve global BFD stats from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLBfdGetStatsMsgRsp> SLBfdv6GetStatsAsync(global::ServiceLayer.SLBfdGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLBfdv6GetStatsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to retrieve global BFD stats from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLBfdGetStatsMsgRsp> SLBfdv6GetStatsAsync(global::ServiceLayer.SLBfdGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLBfdv6GetStats, null, options, request);
      }
      /// <summary>
      /// This call is used to get a stream of session state notifications.
      /// The caller must maintain the GRPC channel as long as
      /// there is interest in BFD session notifications. Only sessions that were
      /// created through this API will be notified to caller.
      /// This call can be used to get "push" notifications for session states.
      /// It is advised that the caller register for notifications before any
      /// sessions are created to avoid any loss of notifications.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::ServiceLayer.SLBfdv6Notif> SLBfdv6GetNotifStream(global::ServiceLayer.SLBfdGetNotifMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLBfdv6GetNotifStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This call is used to get a stream of session state notifications.
      /// The caller must maintain the GRPC channel as long as
      /// there is interest in BFD session notifications. Only sessions that were
      /// created through this API will be notified to caller.
      /// This call can be used to get "push" notifications for session states.
      /// It is advised that the caller register for notifications before any
      /// sessions are created to avoid any loss of notifications.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::ServiceLayer.SLBfdv6Notif> SLBfdv6GetNotifStream(global::ServiceLayer.SLBfdGetNotifMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SLBfdv6GetNotifStream, null, options, request);
      }
      /// <summary>
      /// SLBfdv6Msg.Oper = SL_OBJOP_ADD:
      ///     Add one or multiple BFD sessions.
      ///
      /// SLBfdv6Msg.Oper = SL_OBJOP_UPDATE:
      ///     Update one or multiple BFD sessions.
      ///
      /// SLBfdv6Msg.Oper = SL_OBJOP_DELETE:
      ///     Delete one or multiple BFD sessions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLBfdv6MsgRsp SLBfdv6SessionOp(global::ServiceLayer.SLBfdv6Msg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLBfdv6SessionOp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SLBfdv6Msg.Oper = SL_OBJOP_ADD:
      ///     Add one or multiple BFD sessions.
      ///
      /// SLBfdv6Msg.Oper = SL_OBJOP_UPDATE:
      ///     Update one or multiple BFD sessions.
      ///
      /// SLBfdv6Msg.Oper = SL_OBJOP_DELETE:
      ///     Delete one or multiple BFD sessions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLBfdv6MsgRsp SLBfdv6SessionOp(global::ServiceLayer.SLBfdv6Msg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLBfdv6SessionOp, null, options, request);
      }
      /// <summary>
      /// SLBfdv6Msg.Oper = SL_OBJOP_ADD:
      ///     Add one or multiple BFD sessions.
      ///
      /// SLBfdv6Msg.Oper = SL_OBJOP_UPDATE:
      ///     Update one or multiple BFD sessions.
      ///
      /// SLBfdv6Msg.Oper = SL_OBJOP_DELETE:
      ///     Delete one or multiple BFD sessions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLBfdv6MsgRsp> SLBfdv6SessionOpAsync(global::ServiceLayer.SLBfdv6Msg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLBfdv6SessionOpAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SLBfdv6Msg.Oper = SL_OBJOP_ADD:
      ///     Add one or multiple BFD sessions.
      ///
      /// SLBfdv6Msg.Oper = SL_OBJOP_UPDATE:
      ///     Update one or multiple BFD sessions.
      ///
      /// SLBfdv6Msg.Oper = SL_OBJOP_DELETE:
      ///     Delete one or multiple BFD sessions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLBfdv6MsgRsp> SLBfdv6SessionOpAsync(global::ServiceLayer.SLBfdv6Msg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLBfdv6SessionOp, null, options, request);
      }
      /// <summary>
      /// Retrieve BFD session attributes and state.
      /// This call can be used to "poll" the current state of a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLBfdv6GetMsgRsp SLBfdv6SessionGet(global::ServiceLayer.SLBfdv6GetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLBfdv6SessionGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve BFD session attributes and state.
      /// This call can be used to "poll" the current state of a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLBfdv6GetMsgRsp SLBfdv6SessionGet(global::ServiceLayer.SLBfdv6GetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLBfdv6SessionGet, null, options, request);
      }
      /// <summary>
      /// Retrieve BFD session attributes and state.
      /// This call can be used to "poll" the current state of a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLBfdv6GetMsgRsp> SLBfdv6SessionGetAsync(global::ServiceLayer.SLBfdv6GetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLBfdv6SessionGetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve BFD session attributes and state.
      /// This call can be used to "poll" the current state of a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLBfdv6GetMsgRsp> SLBfdv6SessionGetAsync(global::ServiceLayer.SLBfdv6GetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLBfdv6SessionGet, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override SLBfdv6OperClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SLBfdv6OperClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(SLBfdv6OperBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SLBfdv6RegOp, serviceImpl.SLBfdv6RegOp)
          .AddMethod(__Method_SLBfdv6Get, serviceImpl.SLBfdv6Get)
          .AddMethod(__Method_SLBfdv6GetStats, serviceImpl.SLBfdv6GetStats)
          .AddMethod(__Method_SLBfdv6GetNotifStream, serviceImpl.SLBfdv6GetNotifStream)
          .AddMethod(__Method_SLBfdv6SessionOp, serviceImpl.SLBfdv6SessionOp)
          .AddMethod(__Method_SLBfdv6SessionGet, serviceImpl.SLBfdv6SessionGet).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SLBfdv6OperBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SLBfdv6RegOp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLBfdRegMsg, global::ServiceLayer.SLBfdRegMsgRsp>(serviceImpl.SLBfdv6RegOp));
      serviceBinder.AddMethod(__Method_SLBfdv6Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLBfdGetMsg, global::ServiceLayer.SLBfdGetMsgRsp>(serviceImpl.SLBfdv6Get));
      serviceBinder.AddMethod(__Method_SLBfdv6GetStats, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLBfdGetMsg, global::ServiceLayer.SLBfdGetStatsMsgRsp>(serviceImpl.SLBfdv6GetStats));
      serviceBinder.AddMethod(__Method_SLBfdv6GetNotifStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::ServiceLayer.SLBfdGetNotifMsg, global::ServiceLayer.SLBfdv6Notif>(serviceImpl.SLBfdv6GetNotifStream));
      serviceBinder.AddMethod(__Method_SLBfdv6SessionOp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLBfdv6Msg, global::ServiceLayer.SLBfdv6MsgRsp>(serviceImpl.SLBfdv6SessionOp));
      serviceBinder.AddMethod(__Method_SLBfdv6SessionGet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLBfdv6GetMsg, global::ServiceLayer.SLBfdv6GetMsgRsp>(serviceImpl.SLBfdv6SessionGet));
    }

  }
}
#endregion
