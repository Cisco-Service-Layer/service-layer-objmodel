// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sl_bgpls_topology.proto
// </auto-generated>
// Original file comments:
// @file
// @brief RPC proto file for BGP-LS Topology Subscription Service.
//
// The RPCs and messages defined here are experimental and subject to
// change without notice and such changes can break backwards compatibility.
//
// ----------------------------------------------------------------
//  Copyright (c) 2024 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//
//
// @defgroup BGP-LS Topology Service
// @brief BGP-LS Topology Service definitions.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace ServiceLayer {
  /// <summary>
  /// @defgroup SLBgplsTopo
  /// Defines RPC calls for BGP-LS Topology updates.
  /// @{
  /// </summary>
  public static partial class SLBgplsTopo
  {
    static readonly string __ServiceName = "service_layer.SLBgplsTopo";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBgplsTopoNotifReqMsg> __Marshaller_service_layer_SLBgplsTopoNotifReqMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBgplsTopoNotifReqMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLBgplsTopoNotifMsg> __Marshaller_service_layer_SLBgplsTopoNotifMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLBgplsTopoNotifMsg.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLBgplsTopoNotifReqMsg, global::ServiceLayer.SLBgplsTopoNotifMsg> __Method_SLBgplsTopoNotifStream = new grpc::Method<global::ServiceLayer.SLBgplsTopoNotifReqMsg, global::ServiceLayer.SLBgplsTopoNotifMsg>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SLBgplsTopoNotifStream",
        __Marshaller_service_layer_SLBgplsTopoNotifReqMsg,
        __Marshaller_service_layer_SLBgplsTopoNotifMsg);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ServiceLayer.SlBgplsTopologyReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SLBgplsTopo</summary>
    [grpc::BindServiceMethod(typeof(SLBgplsTopo), "BindService")]
    public abstract partial class SLBgplsTopoBase
    {
      /// <summary>
      /// This call is used to get a stream of BGP-LS Topology updates.
      /// It can be used to get "push" information for BGP-LS
      /// adds/updates/deletes.
      ///
      /// The caller must close the response stream when it is no longer
      /// interested in BGP-LS Topology information.
      ///
      /// The call takes a request message with the information on Match filters
      /// to be applied while sending BGP-LS Topology updates in the response stream.
      ///
      /// The success/failure of the request is relayed in the response as error status.
      /// If the request was successful, then the initial set of BGP-LS Topology
      /// information is sent as a stream containing a Start marker, any BGP-LS
      /// Topology if present, and an End Marker. The response stream will then
      /// be maintained to send subsequent updates and terminated only when the
      /// response stream is terminated by the caller.
      ///
      /// When the backend process handling the BGP-LS Topology subscription goes
      /// for a restart and when it comes up and ready again, the caller would
      /// get a Start marker, any BGP-LS Topology if present, and an End Marker.
      /// Upon receiving the Start marker, the caller must perform a mark and
      /// sweep operation on the data it received from this subscription.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task SLBgplsTopoNotifStream(global::ServiceLayer.SLBgplsTopoNotifReqMsg request, grpc::IServerStreamWriter<global::ServiceLayer.SLBgplsTopoNotifMsg> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SLBgplsTopo</summary>
    public partial class SLBgplsTopoClient : grpc::ClientBase<SLBgplsTopoClient>
    {
      /// <summary>Creates a new client for SLBgplsTopo</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SLBgplsTopoClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SLBgplsTopo that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SLBgplsTopoClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SLBgplsTopoClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SLBgplsTopoClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// This call is used to get a stream of BGP-LS Topology updates.
      /// It can be used to get "push" information for BGP-LS
      /// adds/updates/deletes.
      ///
      /// The caller must close the response stream when it is no longer
      /// interested in BGP-LS Topology information.
      ///
      /// The call takes a request message with the information on Match filters
      /// to be applied while sending BGP-LS Topology updates in the response stream.
      ///
      /// The success/failure of the request is relayed in the response as error status.
      /// If the request was successful, then the initial set of BGP-LS Topology
      /// information is sent as a stream containing a Start marker, any BGP-LS
      /// Topology if present, and an End Marker. The response stream will then
      /// be maintained to send subsequent updates and terminated only when the
      /// response stream is terminated by the caller.
      ///
      /// When the backend process handling the BGP-LS Topology subscription goes
      /// for a restart and when it comes up and ready again, the caller would
      /// get a Start marker, any BGP-LS Topology if present, and an End Marker.
      /// Upon receiving the Start marker, the caller must perform a mark and
      /// sweep operation on the data it received from this subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::ServiceLayer.SLBgplsTopoNotifMsg> SLBgplsTopoNotifStream(global::ServiceLayer.SLBgplsTopoNotifReqMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLBgplsTopoNotifStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This call is used to get a stream of BGP-LS Topology updates.
      /// It can be used to get "push" information for BGP-LS
      /// adds/updates/deletes.
      ///
      /// The caller must close the response stream when it is no longer
      /// interested in BGP-LS Topology information.
      ///
      /// The call takes a request message with the information on Match filters
      /// to be applied while sending BGP-LS Topology updates in the response stream.
      ///
      /// The success/failure of the request is relayed in the response as error status.
      /// If the request was successful, then the initial set of BGP-LS Topology
      /// information is sent as a stream containing a Start marker, any BGP-LS
      /// Topology if present, and an End Marker. The response stream will then
      /// be maintained to send subsequent updates and terminated only when the
      /// response stream is terminated by the caller.
      ///
      /// When the backend process handling the BGP-LS Topology subscription goes
      /// for a restart and when it comes up and ready again, the caller would
      /// get a Start marker, any BGP-LS Topology if present, and an End Marker.
      /// Upon receiving the Start marker, the caller must perform a mark and
      /// sweep operation on the data it received from this subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::ServiceLayer.SLBgplsTopoNotifMsg> SLBgplsTopoNotifStream(global::ServiceLayer.SLBgplsTopoNotifReqMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SLBgplsTopoNotifStream, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override SLBgplsTopoClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SLBgplsTopoClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(SLBgplsTopoBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SLBgplsTopoNotifStream, serviceImpl.SLBgplsTopoNotifStream).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SLBgplsTopoBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SLBgplsTopoNotifStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::ServiceLayer.SLBgplsTopoNotifReqMsg, global::ServiceLayer.SLBgplsTopoNotifMsg>(serviceImpl.SLBgplsTopoNotifStream));
    }

  }
}
#endregion
