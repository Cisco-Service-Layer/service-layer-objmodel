/*
 * Copyright (c) 2023 by cisco Systems, Inc. All rights reserved.
 */
// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sl_common_types.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ServiceLayer {

  /// <summary>Holder for reflection information generated from sl_common_types.proto</summary>
  public static partial class SlCommonTypesReflection {

    #region Descriptor
    /// <summary>File descriptor for sl_common_types.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SlCommonTypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVzbF9jb21tb25fdHlwZXMucHJvdG8SDXNlcnZpY2VfbGF5ZXIitkUKDVNM",
            "RXJyb3JTdGF0dXMSNAoGU3RhdHVzGAEgASgOMiQuc2VydmljZV9sYXllci5T",
            "TEVycm9yU3RhdHVzLlNMRXJybm8i7kQKB1NMRXJybm8SDgoKU0xfU1VDQ0VT",
            "UxAAEhQKEFNMX05PVF9DT05ORUNURUQQARINCglTTF9FQUdBSU4QAhINCglT",
            "TF9FTk9NRU0QAxIMCghTTF9FQlVTWRAEEg0KCVNMX0VJTlZBTBAFEhYKElNM",
            "X1VOU1VQUE9SVEVEX1ZFUhAGEhQKEFNMX05PVF9BVkFJTEFCTEUQBxIbChdT",
            "TF9TVFJFQU1fTk9UX1NVUFBPUlRFRBAIEg4KClNMX0VOT1RTVVAQCRIPCgtT",
            "TF9TT01FX0VSUhAKEg4KClNMX1RJTUVPVVQQCxIRCg1TTF9OT1RJRl9URVJN",
            "EAwSEAoMU0xfQVVUSF9GQUlMEA0SGQoUU0xfSU5JVF9TVEFSVF9PRkZTRVQQ",
            "gAoSGAoTU0xfSU5JVF9TVEFURV9DTEVBUhCBChIYChNTTF9JTklUX1NUQVRF",
            "X1JFQURZEIIKEhwKF1NMX0lOSVRfVU5TVVBQT1JURURfVkVSEIMKEiMKHlNM",
            "X0lOSVRfU0VSVkVSX05PVF9JTklUSUFMSVpFRBCEChImCiFTTF9JTklUX1NF",
            "UlZFUl9NT0RFX0NIQU5HRV9GQUlMRUQQhQoSHAoXU0xfUlBDX1ZSRl9TVEFS",
            "VF9PRkZTRVQQgCASJQogU0xfUlBDX1ZSRl9UT09fTUFOWV9WUkZfUkVHX01T",
            "R1MQgSASJgohU0xfUlBDX1ZSRl9TRVJWRVJfTk9UX0lOSVRJQUxJWkVEEIIg",
            "EhgKE1NMX1ZSRl9TVEFSVF9PRkZTRVQQgEASGAoTU0xfVlJGX05BTUVfVE9P",
            "TE9ORxCBQBIVChBTTF9WUkZfTk9UX0ZPVU5EEIJAEhcKElNMX1ZSRl9OT19U",
            "QUJMRV9JRBCDQBImCiFTTF9WUkZfUkVHX0lOVkFMSURfQURNSU5fRElTVEFO",
            "Q0UQhEASGQoUU0xfVlJGX1RBQkxFX0FERF9FUlIQhUASIgodU0xfVlJGX1RB",
            "QkxFX1JFR0lTVFJBVElPTl9FUlIQhkASJAofU0xfVlJGX1RBQkxFX1VOUkVH",
            "SVNUUkFUSU9OX0VSUhCHQBIZChRTTF9WUkZfVEFCTEVfRU9GX0VSUhCIQBIg",
            "ChtTTF9WUkZfUkVHX1ZSRl9OQU1FX01JU1NJTkcQiUASJwoiU0xfVlJGX1Y0",
            "X1JPVVRFX1JFUExBWV9GQVRBTF9FUlJPUhCQQBInCiJTTF9WUkZfVjZfUk9V",
            "VEVfUkVQTEFZX0ZBVEFMX0VSUk9SEJFAEh4KGVNMX1ZSRl9WNF9ST1VURV9S",
            "RVBMQVlfT0sQkkASHgoZU0xfVlJGX1Y2X1JPVVRFX1JFUExBWV9PSxCTQBIe",
            "ChlTTF9SUENfUk9VVEVfU1RBUlRfT0ZGU0VUEIBgEiEKHFNMX1JQQ19ST1VU",
            "RV9UT09fTUFOWV9ST1VURVMQgWASIgodU0xfUlBDX1JPVVRFX1ZSRl9OQU1F",
            "X1RPT0xPTkcQgmASHwoaU0xfUlBDX1JPVVRFX1ZSRl9OT1RfRk9VTkQQg2AS",
            "HgoZU0xfUlBDX1JPVVRFX1ZSRl9OT19UQUJMRRCEYBIqCiVTTF9SUENfUk9V",
            "VEVfVlJGX1RBQkxFX05PVF9SRUdJU1RFUkVEEIVgEiIKHVNMX1JQQ19ST1VU",
            "RV9WUkZfTkFNRV9NSVNTSU5HEIZgEigKI1NMX1JQQ19ST1VURV9JTklUX01P",
            "REVfSU5DT01QQVRJQkxFEIdgEigKI1NMX1JQQ19ST1VURV9TRVJWRVJfTk9U",
            "X0lOSVRJQUxJWkVEEIhgEikKJFNMX1JQQ19ST1VURV9OT1RJRl9TUkNfUFJP",
            "VE9fVE9PTE9ORxCJYBItCihTTF9SUENfUk9VVEVfTk9USUZfU1JDX1BST1RP",
            "X1RBR19UT09MT05HEIpgEhsKFVNMX1JPVVRFX1NUQVJUX09GRlNFVBCAgAES",
            "GwoVU0xfUk9VVEVfQUREX05PX1BBVEhTEIGAARIeChhTTF9ST1VURV9VUERB",
            "VEVfTk9fUEFUSFMQgoABEiEKG1NMX1JPVVRFX0lOVkFMSURfUFJFRklYX0xF",
            "ThCDgAESJQofU0xfUk9VVEVfSU5WQUxJRF9BRE1JTl9ESVNUQU5DRRCEgAES",
            "IAoaU0xfUk9VVEVfSU5WQUxJRF9OVU1fUEFUSFMQhYABEiAKGlNMX1JPVVRF",
            "X0lOVkFMSURfUFJFRklYX1NaEIaAARIdChdTTF9ST1VURV9JTlZBTElEX1BS",
            "RUZJWBCHgAESKgokU0xfUk9VVEVfRVJSX1JJQl9UQUJMRV9MSU1JVF9SRUFD",
            "SEVEEIiAARIjCh1TTF9ST1VURV9FUlJfUklCX0lOVkFMSURfQVJHUxCJgAES",
            "JwohU0xfUk9VVEVfRVJSX1JJQl9QQVRIX1RBQkxFX0xJTUlUEIqAARIjCh1T",
            "TF9ST1VURV9FUlJfUklCX1RPT01BTllQQVRIUxCLgAESFQoPU0xfUk9VVEVf",
            "RUVYSVNUEIyAARIcChZTTF9ST1VURV9IT1NUX0JJVFNfU0VUEI2AARIjCh1T",
            "TF9ST1VURV9JTlZBTElEX1BSRUZJWF9NQ0FTVBCOgAESIAoaU0xfUk9VVEVf",
            "UEFUSF9BRklfTUlTTUFUQ0gQj4ABEiQKHlNMX1JPVVRFX1RPT01BTllfUFJJ",
            "TUFSWV9QQVRIUxCQgAESIwodU0xfUk9VVEVfVE9PTUFOWV9CQUNLVVBfUEFU",
            "SFMQkYABEhcKEVNMX1JPVVRFX0RCX05PTUVNEJKAARIiChxTTF9ST1VURV9J",
            "TlZBTElEX0xPQ0FMX0xBQkVMEJOAARIaChRTTF9QQVRIX1NUQVJUX09GRlNF",
            "VBCAoAESGQoTU0xfUEFUSF9OSF9OT19UQUJMRRCBoAESHwoZU0xfUEFUSF9O",
            "SF9JTlRGX05PVF9GT1VORBCCoAESIQobU0xfUEFUSF9JTlZBTElEX0xBQkVM",
            "X0NPVU5UEIOgARIYChJTTF9QQVRIX0lOVkFMSURfSUQQhKABEh4KGFNMX1BB",
            "VEhfVlJGX05BTUVfVE9PTE9ORxCFoAESIgocU0xfUEFUSF9OSF9JTlRGX05B",
            "TUVfVE9PTE9ORxCGoAESIAoaU0xfUEFUSF9OSF9JTlZBTElEX0FERFJfU1oQ",
            "h6ABEiEKG1NMX1BBVEhfTkhfSU5GX05BTUVfTUlTU0lORxCIoAESIwodU0xf",
            "UEFUSF9JTlZBTElEX05FWFRfSE9QX0FERFIQiaABEicKIVNMX1BBVEhfSU5W",
            "QUxJRF9SRU1PVEVfQUREUl9DT1VOVBCKoAESJAoeU0xfUEFUSF9SRU1PVEVf",
            "QUREUl9JTlZBTElEX1NaEIugARImCiBTTF9QQVRIX1JFTU9URV9BRERSX0FG",
            "SV9NSVNNQVRDSBCMoAESJgogU0xfUEFUSF9JTlZBTElEX1BST1RFQ1RFRF9C",
            "SVRNQVAQjaABEikKI1NMX1BBVEhfQkFDS1VQX01JU1NJTkdfUFJJTUFSWV9Q",
            "QVRIEI6gARIhChtTTF9QQVRIX1BSSU1BUllfSURfUkVQRUFURUQQj6ABEiAK",
            "GlNMX1BBVEhfQkFDS1VQX0lEX1JFUEVBVEVEEJCgARIqCiRTTF9QQVRIX1BS",
            "SU1BUllfVE9PTUFOWV9CQUNLVVBfUEFUSFMQkaABEiQKHlNMX1BBVEhfUFJJ",
            "TUFSWV9UT09NQU5ZX0xBQkVMUxCSoAESKQojU0xfUEFUSF9QUklNQVJZX1RP",
            "T01BTllfUkVNT1RFX0FERFIQk6ABEiEKG1NMX1BBVEhfUkVNT1RFX0FERFJf",
            "SU5WQUxJRBCUoAESGwoVU0xfUEFUSF9JTlZBTElEX0xBQkVMEJWgARIoCiJT",
            "TF9QQVRIX1JPVVRFUl9NQUNfQUREUl9JTlZBTElEX1NaEJagARIjCh1TTF9Q",
            "QVRIX0JBQ0tVUF9UT09NQU5ZX0xBQkVMUxCXoAESGQoTU0xfUEFUSF9JTlZB",
            "TElEX1ZOSRCYoAESIAoaU0xfUEFUSF9JTlZBTElEX0VOQ0FQX0FERFIQmaAB",
            "EigKIlNMX1BBVEhfRU5DQVBfU1JDX0RTVF9BRklfTUlTTUFUQ0gQmqABEhsK",
            "FVNMX1BBVEhfUlRSX01BQ19OT1NVUBCboAESIQobU0xfUEFUSF9FTkNBUF9U",
            "WVBFX01JU01BVENIEJygARIdChdTTF9SUENfQkZEX1NUQVJUX09GRlNFVBCA",
            "wAESJgogU0xfUlBDX0JGRF9UT09fTUFOWV9CRkRfU0VTU0lPTlMQgcABEiIK",
            "HFNMX1JQQ19CRkRfQVBJX0JBRF9QQVJBTUVURVIQgsABEioKJFNMX1JQQ19C",
            "RkRfQVBJX0NMSUVOVF9OT1RfUkVHSVNURVJFRBCDwAESIwodU0xfUlBDX0JG",
            "RF9BUElfSU5URVJOQUxfRVJST1IQhMABEicKIVNMX1JQQ19CRkRfU0VSVkVS",
            "X05PVF9JTklUSUFMSVpFRBCFwAESIgocU0xfUlBDX0JGRF9WNF9OT1RfUkVH",
            "SVNURVJFRBCGwAESIgocU0xfUlBDX0JGRF9WNl9OT1RfUkVHSVNURVJFRBCH",
            "wAESGQoTU0xfQkZEX1NUQVJUX09GRlNFVBCA4AESHgoYU0xfQkZEX0lOVEZf",
            "TkFNRV9UT09MT05HEIHgARIbChVTTF9CRkRfSU5URl9OT1RfRk9VTkQQguAB",
            "Eh4KGFNMX0JGRF9JTlZBTElEX0FUVFJJQlVURRCD4AESHgoYU0xfQkZEX0lO",
            "VEZfTkFNRV9NSVNTSU5HEITgARIeChhTTF9CRkRfSU5WQUxJRF9OQlJfTUNB",
            "U1QQheABEhgKElNMX0JGRF9JTlZBTElEX05CUhCG4AESHQoXU0xfQkZEX1ZS",
            "Rl9OQU1FX1RPT0xPTkcQh+ABEhoKFFNMX0JGRF9CQURfUEFSQU1FVEVSEIjg",
            "ARIfChlTTF9CRkRfQVBJX0lOVEVSTkFMX0VSUk9SEIngARIaChRTTF9CRkRf",
            "VlJGX05PVF9GT1VORBCK4AESIAoaU0xfQkZEX0lOVkFMSURfUFJFRklYX1NJ",
            "WkUQi+ABEiEKG1NMX0JGRF9JTlZBTElEX1NFU1NJT05fVFlQRRCM4AESGAoS",
            "U0xfQkZEX0lOVkFMSURfVlJGEI3gARIeChhTTF9CRkRfU0VTU0lPTl9OT1Rf",
            "Rk9VTkQQjuABEhsKFVNMX0JGRF9TRVNTSU9OX0VYSVNUUxCP4AESHgoYU0xf",
            "QkZEX0lOVEVSTkFMX0RCX0VSUk9SEJDgARIbChVTTF9CRkRfUkVDT1ZFUllf",
            "RVJST1IQkeABEh4KGFNMX1JQQ19NUExTX1NUQVJUX09GRlNFVBCAgAISIwod",
            "U0xfUlBDX01QTFNfSUxNX1RPT19NQU5ZX0lMTVMQgYACEigKIlNMX1JQQ19N",
            "UExTX1NFUlZFUl9OT1RfSU5JVElBTElaRUQQgoACEigKIlNMX1JQQ19NUExT",
            "X0lOSVRfTU9ERV9JTkNPTVBBVElCTEUQg4ACEi8KKVNMX1JQQ19NUExTX0xB",
            "QkVMX0JMS19UT09fTUFOWV9MQUJFTF9CTEtTEISAAhIgChpTTF9SUENfTVBM",
            "U19OT1RfUkVHSVNURVJFRBCFgAISFwoRU0xfSUxNX0VSUl9PRkZTRVQQgKAC",
            "EhcKEVNMX0lMTV9BRERfRkFJTEVEEIGgAhIbChVTTF9JTE1fTFNEX0FERF9G",
            "QUlMRUQQgqACEh4KGFNMX0lMTV9JTlZBTElEX05VTV9OSExGRRCDoAISGgoU",
            "U0xfSUxNX0lOVkFMSURfTEFCRUwQhKACEhoKFFNMX0lMTV9ERUxFVEVfRkFJ",
            "TEVEEIWgAhIeChhTTF9JTE1fTFNEX0RFTEVURV9GQUlMRUQQhqACEiMKHVNM",
            "X0lMTV9UT09NQU5ZX1BSSU1BUllfTkhMRkVTEIegAhIiChxTTF9JTE1fVE9P",
            "TUFOWV9CQUNLVVBfTkhMRkVTEIigAhInCiFTTF9JTE1fTFNEX0FERF9MQUJF",
            "TF9BTExPQ19GQUlMRUQQiaACEiUKH1NMX0lMTV9MU0RfTkhMRkVfSU5WQUxJ",
            "RF9BVFRSSUIQiqACEhMKDVNMX0lMTV9FRVhJU1QQi6ACEhUKD1NMX0lMTV9E",
            "Ql9OT01FTRCMoAISHQoXU0xfSUxNX0lOVkFMSURfRUxTUF9FWFAQjaACEikK",
            "I1NMX0lMTV9FTFNQX0VYUF9PUl9ERkxUX0FMUkVBRFlfU0VUEI6gAhIZChNT",
            "TF9JTE1fQUREX05PX1BBVEhTEI+gAhIcChZTTF9JTE1fVVBEQVRFX05PX1BB",
            "VEhTEJCgAhIdChdTTF9JTE1fVU5TVVBQT1JURURfRUxTUBCRoAISJgogU0xf",
            "SUxNX0xBQkVMX1RPT01BTllfRVhQX0NMQVNTRVMQkqACEh8KGVNMX0lMTV9S",
            "RVBMQVlfRkFUQUxfRVJST1IQk6ACEhYKEFNMX0lMTV9SRVBMQVlfT0sQlKAC",
            "Eh8KGVNMX0lMTV9JTlZBTElEX1BSRUZJWF9MRU4QlaACEhoKFFNMX0lMTV9I",
            "T1NUX0JJVFNfU0VUEJagAhIeChhTTF9JTE1fSU5WQUxJRF9QUkVGSVhfU1oQ",
            "l6ACEhsKFVNMX0lMTV9JTlZBTElEX1BSRUZJWBCYoAISIQobU0xfSUxNX0lO",
            "VkFMSURfUFJFRklYX01DQVNUEJmgAhIdChdTTF9JTE1fVlJGX05BTUVfVE9P",
            "TE9ORxCgoAISHAoWU0xfSUxNX1ZSRl9OT19UQUJMRV9JRBChoAISHQoXU0xf",
            "SUxNX1ZSRl9OQU1FX01JU1NJTkcQoqACEhkKE1NMX05ITEZFX0VSUl9PRkZT",
            "RVQQgMACEhoKFFNMX05ITEZFX05IX05PX1RBQkxFEIHAAhIhChtTTF9OSExG",
            "RV9OSF9JTlZBTElEX0FERFJfU1oQgsACEiQKHlNMX05ITEZFX0lOVkFMSURf",
            "TkVYVF9IT1BfQUREUhCDwAISHwoZU0xfTkhMRkVfVlJGX05BTUVfVE9PTE9O",
            "RxCEwAISIgocU0xfTkhMRkVfTkhfSU5GX05BTUVfTUlTU0lORxCFwAISIwod",
            "U0xfTkhMRkVfTkhfSU5URl9OQU1FX1RPT0xPTkcQhsACEiIKHFNMX05ITEZF",
            "X0lOVkFMSURfTEFCRUxfQ09VTlQQh8ACEh4KGFNMX05ITEZFX0lOVkFMSURf",
            "UEFUSF9JRBCIwAISHAoWU0xfTkhMRkVfSU5WQUxJRF9MQUJFTBCJwAISJwoh",
            "U0xfTkhMRkVfSU5WQUxJRF9QUk9URUNURURfQklUTUFQEIrAAhIoCiJTTF9O",
            "SExGRV9JTlZBTElEX1JFTU9URV9BRERSX0NPVU5UEIvAAhIlCh9TTF9OSExG",
            "RV9SRU1PVEVfQUREUl9JTlZBTElEX1NaEIzAAhIlCh9TTF9OSExGRV9QUklN",
            "QVJZX1RPT01BTllfTEFCRUxTEI3AAhIqCiRTTF9OSExGRV9QUklNQVJZX1RP",
            "T01BTllfUkVNT1RFX0FERFIQjsACEiEKG1NMX05ITEZFX0JBQ0tVUF9JRF9S",
            "RVBFQVRFRBCPwAISIgocU0xfTkhMRkVfUFJJTUFSWV9JRF9SRVBFQVRFRBCQ",
            "wAISLAomU0xfTkhMRkVfQkFDS1VQX1BST1RFQ1RFRF9CSVRNQVBfRU1QVFkQ",
            "kcACEisKJVNMX05ITEZFX1BSSU1BUllfVE9PTUFOWV9CQUNLVVBfUEFUSFMQ",
            "ksACEiIKHFNMX05ITEZFX1JFTU9URV9BRERSX0lOVkFMSUQQk8ACEioKJFNM",
            "X05ITEZFX0JBQ0tVUF9NSVNTSU5HX1BSSU1BUllfUEFUSBCUwAISHwoZU0xf",
            "TkhMRkVfTkVYVF9IT1BfTUlTU0lORxCVwAISIwodU0xfTkhMRkVfTEFCRUxf",
            "QUNUSU9OX0lOVkFMSUQQlsACEiAKGlNMX05ITEZFX05IX0lOVEZfTk9UX0ZP",
            "VU5EEJfAAhIaChRTTF9OSExGRV9PUEVSX0ZBSUxFRBCYwAISIwodU0xfTkhM",
            "RkVfTEFCRUxfQUNUSU9OX01JU1NJTkcQmcACEh0KF1NMX05ITEZFX0VYUF9T",
            "RVRfRkFJTEVEEJrAAhIqCiRTTF9OSExGRV9FTFNQX1BST1RFQ1RJT05fVU5T",
            "VVBQT1JURUQQm8ACEh8KGVNMX05ITEZFX0lOVkFMSURfRUxTUF9FWFAQnMAC",
            "EiQKHlNMX05ITEZFX0lOVkFMSURfUEFUSF9QUklPUklUWRCdwAISIgocU0xf",
            "TkhMRkVfSU5WQUxJRF9MT0FEX01FVFJJQxCewAISHAoWU0xfTkhMRkVfSU5W",
            "QUxJRF9TRVRJRBCfwAISJQofU0xfTkhMRkVfSU5WQUxJRF9TRVRJRF9QUklP",
            "UklUWRCgwAISLgooU0xfTkhMRkVfSU5WQUxJRF9NVUxUSVBMRV9QUklNQVJZ",
            "X1NFVElEUxChwAISJAoeU0xfTkhMRkVfTk9OX0NPTlRJR1VPVVNfU0VUSURT",
            "EKLAAhIhChtTTF9OSExGRV9OT05fQ09OVElHVU9VU19FWFAQo8ACEicKIVNM",
            "X05ITEZFX0lOQ09OU0lTVEVOVF9FWFBfT05fUEFUSBCkwAISHQoXU0xfTEFC",
            "RUxfQkxLX0VSUl9PRkZTRVQQgOACEiEKG1NMX0xBQkVMX0JMS19MU0RfQURE",
            "X0ZBSUxFRBCB4AISJAoeU0xfTEFCRUxfQkxLX0xTRF9ERUxFVEVfRkFJTEVE",
            "EILgAhIqCiRTTF9MQUJFTF9CTEtfTFNEX0xBQkVMX0JMS19OT1RfRk9VTkQQ",
            "g+ACEicKIVNMX0xBQkVMX0JMS19MU0RfTEFCRUxfQkxLX0lOX1VTRRCE4AIS",
            "JQofU0xfTEFCRUxfQkxLX0xTRF9JTlZBTElEX0FUVFJJQhCF4AISJQofU0xf",
            "TEFCRUxfQkxLX0lOVkFMSURfQkxPQ0tfU0laRRCG4AISJgogU0xfTEFCRUxf",
            "QkxLX0lOVkFMSURfU1RBUlRfTEFCRUwQh+ACEhkKE1NMX0xBQkVMX0JMS19F",
            "RVhJU1QQiOACEhsKFVNMX0xBQkVMX0JMS19EQl9OT01FTRCJ4AISHwoZU0xf",
            "TEFCRUxfQkxLX1RZUEVfSU5WQUxJRBCK4AISJgogU0xfTEFCRUxfQkxLX0NM",
            "SUVOVF9OQU1FX1RPT0xPTkcQi+ACEhwKFlNMX01QTFNfUkVHX0VSUl9PRkZT",
            "RVQQgIADEhUKD1NMX01QTFNfUkVHX0VSUhCBgAMSFwoRU0xfTVBMU19VTlJF",
            "R19FUlIQgoADEhUKD1NMX01QTFNfRU9GX0VSUhCDgAMSHgoYU0xfUlBDX0lO",
            "VEZfU1RBUlRfT0ZGU0VUEICgAxIlCh9TTF9SUENfSU5URl9UT09fTUFOWV9J",
            "TlRFUkZBQ0VTEIGgAxIoCiJTTF9SUENfSU5URl9TRVJWRVJfTk9UX0lOSVRJ",
            "QUxJWkVEEIKgAxIrCiVTTF9SUENfSU5URl9BUElfQ0xJRU5UX05PVF9SRUdJ",
            "U1RFUkVEEIOgAxIaChRTTF9JTlRGX1NUQVJUX09GRlNFVBCAwAMSJAoeU0xf",
            "SU5URl9JTlRFUkZBQ0VfTkFNRV9NSVNTSU5HEIHAAxIkCh5TTF9JTlRGX0lO",
            "VEVSRkFDRV9OQU1FX1RPT0xPTkcQgsADEh8KGVNMX0lOVEZfSU5URVJGQUNF",
            "X1JFR19FUlIQg8ADEh8KGVNMX0lOVEZfSU5URVJOQUxfREJfRVJST1IQhMAD",
            "EhwKFlNMX0lOVEZfUkVDT1ZFUllfRVJST1IQhcADEh4KGFNMX0lOVEZfSU5U",
            "RVJGQUNFX0VYSVNUUxCGwAMSIQobU0xfSU5URl9JTlRFUkZBQ0VfTk9UX0ZP",
            "VU5EEIfAAxIcChZTTF9MMl9SRUdfU1RBUlRfT0ZGU0VUEIDgAxIcChZTTF9M",
            "Ml9SRUdJU1RSQVRJT05fRVJSEIHgAxIeChhTTF9MMl9VTlJFR0lTVFJBVElP",
            "Tl9FUlIQguADEhMKDVNMX0wyX0VPRl9FUlIQg+ADEiYKIFNMX0wyX1JFR19J",
            "TlZBTElEX0FETUlOX0RJU1RBTkNFEITgAxIcChZTTF9MMl9SRUdfSVNfRFVQ",
            "TElDQVRFEIXgAxImCiBTTF9MMl9SRUdfU0VSVkVSX05PVF9JTklUSUFMSVpF",
            "RBCG4AMSIwodU0xfUlBDX0wyX0JEX1JFR19TVEFSVF9PRkZTRVQQgIAEEiMK",
            "HVNMX1JQQ19MMl9CRF9SRUdfTkFNRV9NSVNTSU5HEIGABBIkCh5TTF9SUENf",
            "TDJfQkRfUkVHX1RPT19NQU5ZX01TR1MQgoAEEi0KJ1NMX1JQQ19MMl9CRF9S",
            "RUdfU0VSVkVSX05PVF9JTklUSUFMSVpFRBCDgAQSLAomU0xfUlBDX0wyX0JE",
            "X1JFR19DTElFTlRfTk9UX1JFR0lTVEVSRUQQhIAEEh8KGVNMX0wyX0JEX1JF",
            "R19TVEFSVF9PRkZTRVQQgKAEEh8KGVNMX0wyX0JEX1JFR0lTVFJBVElPTl9F",
            "UlIQgaAEEiEKG1NMX0wyX0JEX1VOUkVHSVNUUkFUSU9OX0VSUhCCoAQSFgoQ",
            "U0xfTDJfQkRfRU9GX0VSUhCDoAQSIAoaU0xfTDJfQkRfUkVHX05BTUVfVE9P",
            "X0xPTkcQhKAEEh8KGVNMX0wyX0JEX1JFR19CRF9OT1RfRk9VTkQQhaAEEiIK",
            "HFNMX1JQQ19MMl9ST1VURV9TVEFSVF9PRkZTRVQQgMAEEiMKHVNMX1JQQ19M",
            "Ml9ST1VURV9UT09fTUFOWV9NU0dTEIHABBIsCiZTTF9SUENfTDJfUk9VVEVf",
            "U0VSVkVSX05PVF9JTklUSUFMSVpFRBCCwAQSKwolU0xfUlBDX0wyX1JPVVRF",
            "X0NMSUVOVF9OT1RfUkVHSVNURVJFRBCDwAQSHgoYU0xfTDJfUk9VVEVfU1RB",
            "UlRfT0ZGU0VUEIDgBBIhChtTTF9MMl9ST1VURV9CRF9OQU1FX01JU1NJTkcQ",
            "geAEEiEKG1NMX0wyX1JPVVRFX0JEX05BTUVfVE9PTE9ORxCC4AQSHgoYU0xf",
            "TDJfUk9VVEVfQkRfTk9UX0ZPVU5EEIPgBBIjCh1TTF9MMl9ST1VURV9CRF9O",
            "T1RfUkVHSVNURVJFRBCE4AQSHgoYU0xfTDJfUk9VVEVfSU5WQUxJRF9BUkdT",
            "EIXgBBIiChxTTF9SUENfTDJfTk9USUZfU1RBUlRfT0ZGU0VUEIGABRIsCiZT",
            "TF9SUENfTDJfTk9USUZfU0VSVkVSX05PVF9JTklUSUFMSVpFRBCCgAUSKwol",
            "U0xfUlBDX0wyX05PVElGX0NMSUVOVF9OT1RfUkVHSVNURVJFRBCDgAUSIAoa",
            "U0xfUlBDX0wyX05PVElGX0VOQUJMRV9FUlIQhIAFEiEKG1NMX1JQQ19MMl9O",
            "T1RJRl9ESVNBQkxFX0VSUhCFgAUSHQoXU0xfUlBDX0wyX05PVElGX0VPRl9F",
            "UlIQhoAFEiUKH1NMX1JQQ19MMl9OT1RJRl9CRF9OQU1FX01JU1NJTkcQh4AF",
            "EiUKH1NMX1JQQ19MMl9OT1RJRl9CRF9OQU1FX1RPT0xPTkcQiIAFEiIKHFNM",
            "X1JQQ19MMl9OT1RJRl9CRF9OT1RfRk9VTkQQiYAFEh4KGFNMX0lOVEVSTkFM",
            "X1NUQVJUX09GRlNFVBCAgEAiPAoLU0xJbnRlcmZhY2USDgoETmFtZRgBIAEo",
            "CUgAEhAKBkhhbmRsZRgCIAEoDUgAQgsKCUludGVyZmFjZSJCCgtTTElwQWRk",
            "cmVzcxITCglWNEFkZHJlc3MYASABKA1IABITCglWNkFkZHJlc3MYAiABKAxI",
            "AEIJCgdBZGRyZXNzKmIKB1NMUmVnT3ASFQoRU0xfUkVHT1BfUkVTRVJWRUQQ",
            "ABIVChFTTF9SRUdPUF9SRUdJU1RFUhABEhcKE1NMX1JFR09QX1VOUkVHSVNU",
            "RVIQAhIQCgxTTF9SRUdPUF9FT0YQAypfCgpTTE9iamVjdE9wEhUKEVNMX09C",
            "Sk9QX1JFU0VSVkVEEAASEAoMU0xfT0JKT1BfQUREEAESEwoPU0xfT0JKT1Bf",
            "VVBEQVRFEAISEwoPU0xfT0JKT1BfREVMRVRFEAMqUwoJU0xOb3RpZk9wEhcK",
            "E1NMX05PVElGT1BfUkVTRVJWRUQQABIVChFTTF9OT1RJRk9QX0VOQUJMRRAB",
            "EhYKElNMX05PVElGT1BfRElTQUJMRRACKksKC1NMRW5jYXBUeXBlEhUKEVNM",
            "X0VOQ0FQX1JFU0VSVkVEEAASEgoOU0xfRU5DQVBfVlhMQU4QARIRCg1TTF9F",
            "TkNBUF9NUExTEAIqngEKC1NMVGFibGVUeXBlEhoKFlNMX1RBQkxFX1RZUEVf",
            "UkVTRVJWRUQQABIXChNTTF9JUHY0X1JPVVRFX1RBQkxFEAESFwoTU0xfSVB2",
            "Nl9ST1VURV9UQUJMRRACEhcKE1NMX01QTFNfTEFCRUxfVEFCTEUQAxIXChNT",
            "TF9QQVRIX0dST1VQX1RBQkxFEAQSDwoLU0xfUEZfVEFCTEUQBUJRWk9naXRo",
            "dWIuY29tL0Npc2NvLXNlcnZpY2UtbGF5ZXIvc2VydmljZS1sYXllci1vYmpt",
            "b2RlbC9ncnBjL3Byb3RvcztzZXJ2aWNlX2xheWVyYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ServiceLayer.SLRegOp), typeof(global::ServiceLayer.SLObjectOp), typeof(global::ServiceLayer.SLNotifOp), typeof(global::ServiceLayer.SLEncapType), typeof(global::ServiceLayer.SLTableType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ServiceLayer.SLErrorStatus), global::ServiceLayer.SLErrorStatus.Parser, new[]{ "Status" }, null, new[]{ typeof(global::ServiceLayer.SLErrorStatus.Types.SLErrno) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ServiceLayer.SLInterface), global::ServiceLayer.SLInterface.Parser, new[]{ "Name", "Handle" }, new[]{ "Interface" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ServiceLayer.SLIpAddress), global::ServiceLayer.SLIpAddress.Parser, new[]{ "V4Address", "V6Address" }, new[]{ "Address" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Registration Operations.
  /// </summary>
  public enum SLRegOp {
    /// <summary>
    /// Reserved. 0x0
    /// </summary>
    [pbr::OriginalName("SL_REGOP_RESERVED")] Reserved = 0,
    /// <summary>
    /// Register. 0x1
    /// </summary>
    [pbr::OriginalName("SL_REGOP_REGISTER")] Register = 1,
    /// <summary>
    /// Un-Register. 0x2
    /// </summary>
    [pbr::OriginalName("SL_REGOP_UNREGISTER")] Unregister = 2,
    /// <summary>
    /// End Of File. 0x3
    /// </summary>
    [pbr::OriginalName("SL_REGOP_EOF")] Eof = 3,
  }

  /// <summary>
  /// Object Operations.
  /// </summary>
  public enum SLObjectOp {
    /// <summary>
    /// Reserved. 0x0
    /// </summary>
    [pbr::OriginalName("SL_OBJOP_RESERVED")] SlObjopReserved = 0,
    /// <summary>
    /// Add. 0x1
    /// </summary>
    [pbr::OriginalName("SL_OBJOP_ADD")] SlObjopAdd = 1,
    /// <summary>
    /// Update. 0x2
    /// </summary>
    [pbr::OriginalName("SL_OBJOP_UPDATE")] SlObjopUpdate = 2,
    /// <summary>
    /// Delete. 0x3
    /// </summary>
    [pbr::OriginalName("SL_OBJOP_DELETE")] SlObjopDelete = 3,
  }

  /// <summary>
  /// Notification Operations.
  /// </summary>
  public enum SLNotifOp {
    /// <summary>
    /// Reserved. 0x0
    /// </summary>
    [pbr::OriginalName("SL_NOTIFOP_RESERVED")] Reserved = 0,
    /// <summary>
    /// Enable. 0x1
    /// </summary>
    [pbr::OriginalName("SL_NOTIFOP_ENABLE")] Enable = 1,
    /// <summary>
    /// Disable. 0x2
    /// </summary>
    [pbr::OriginalName("SL_NOTIFOP_DISABLE")] Disable = 2,
  }

  /// <summary>
  /// Encapsulation Types.
  /// Specify tunnel encapsulation types.
  /// </summary>
  public enum SLEncapType {
    /// <summary>
    /// Reserved. 0x0
    /// </summary>
    [pbr::OriginalName("SL_ENCAP_RESERVED")] SlEncapReserved = 0,
    /// <summary>
    /// Vxlan encap. 0x1
    /// </summary>
    [pbr::OriginalName("SL_ENCAP_VXLAN")] SlEncapVxlan = 1,
    /// <summary>
    /// Mpls encap. 0x2
    /// </summary>
    [pbr::OriginalName("SL_ENCAP_MPLS")] SlEncapMpls = 2,
  }

  /// <summary>
  /// Table types in a VRF.
  /// </summary>
  public enum SLTableType {
    /// <summary>
    /// Reserved Table type. 0x0
    /// </summary>
    [pbr::OriginalName("SL_TABLE_TYPE_RESERVED")] Reserved = 0,
    /// <summary>
    /// IPv4 Route table. 0x1
    /// </summary>
    [pbr::OriginalName("SL_IPv4_ROUTE_TABLE")] SlIpv4RouteTable = 1,
    /// <summary>
    /// IPv6 Route table. 0x2
    /// </summary>
    [pbr::OriginalName("SL_IPv6_ROUTE_TABLE")] SlIpv6RouteTable = 2,
    /// <summary>
    /// MPLS label table. 0x3
    /// </summary>
    [pbr::OriginalName("SL_MPLS_LABEL_TABLE")] SlMplsLabelTable = 3,
    /// <summary>
    /// Path Group Table. 0x4
    /// </summary>
    [pbr::OriginalName("SL_PATH_GROUP_TABLE")] SlPathGroupTable = 4,
    /// <summary>
    /// Policy forwarding table. 0x5
    /// </summary>
    [pbr::OriginalName("SL_PF_TABLE")] SlPfTable = 5,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Status codes, including errors and success codes.  
  /// All service layer errors are defined below.
  /// </summary>
  public sealed partial class SLErrorStatus : pb::IMessage<SLErrorStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SLErrorStatus> _parser = new pb::MessageParser<SLErrorStatus>(() => new SLErrorStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SLErrorStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ServiceLayer.SlCommonTypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SLErrorStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SLErrorStatus(SLErrorStatus other) : this() {
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SLErrorStatus Clone() {
      return new SLErrorStatus(this);
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::ServiceLayer.SLErrorStatus.Types.SLErrno status_ = global::ServiceLayer.SLErrorStatus.Types.SLErrno.SlSuccess;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::ServiceLayer.SLErrorStatus.Types.SLErrno Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SLErrorStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SLErrorStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != global::ServiceLayer.SLErrorStatus.Types.SLErrno.SlSuccess) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Status != global::ServiceLayer.SLErrorStatus.Types.SLErrno.SlSuccess) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Status != global::ServiceLayer.SLErrorStatus.Types.SLErrno.SlSuccess) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Status != global::ServiceLayer.SLErrorStatus.Types.SLErrno.SlSuccess) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SLErrorStatus other) {
      if (other == null) {
        return;
      }
      if (other.Status != global::ServiceLayer.SLErrorStatus.Types.SLErrno.SlSuccess) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::ServiceLayer.SLErrorStatus.Types.SLErrno) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Status = (global::ServiceLayer.SLErrorStatus.Types.SLErrno) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SLErrorStatus message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum SLErrno {
        /// <summary>
        /// Success, no errors detected. 0x0.
        /// </summary>
        [pbr::OriginalName("SL_SUCCESS")] SlSuccess = 0,
        /// <summary>
        /// Client not connected. 0x1
        /// </summary>
        [pbr::OriginalName("SL_NOT_CONNECTED")] SlNotConnected = 1,
        /// <summary>
        /// Operation must be retried. 0x2
        /// </summary>
        [pbr::OriginalName("SL_EAGAIN")] SlEagain = 2,
        /// <summary>
        /// One or more components does not have sufficient memory. 0x3
        /// </summary>
        [pbr::OriginalName("SL_ENOMEM")] SlEnomem = 3,
        /// <summary>
        /// Too many outstanding requests. 0x4
        /// </summary>
        [pbr::OriginalName("SL_EBUSY")] SlEbusy = 4,
        /// <summary>
        /// One or more arguments are invalid. 0x5
        /// </summary>
        [pbr::OriginalName("SL_EINVAL")] SlEinval = 5,
        /// <summary>
        /// Unsupported version. 0x6
        /// </summary>
        [pbr::OriginalName("SL_UNSUPPORTED_VER")] SlUnsupportedVer = 6,
        /// <summary>
        /// Not Available. 0x7
        /// </summary>
        [pbr::OriginalName("SL_NOT_AVAILABLE")] SlNotAvailable = 7,
        /// <summary>
        /// Stream mode not supported. 0x8
        /// </summary>
        [pbr::OriginalName("SL_STREAM_NOT_SUPPORTED")] SlStreamNotSupported = 8,
        /// <summary>
        /// Operation not supported. 0x9
        /// </summary>
        [pbr::OriginalName("SL_ENOTSUP")] SlEnotsup = 9,
        /// <summary>
        /// One or more objects is errored:
        /// Each object must be individually examined. 0xa
        /// </summary>
        [pbr::OriginalName("SL_SOME_ERR")] SlSomeErr = 10,
        /// <summary>
        /// Operation Timed out.
        /// The result of the operation is undeterministic (success or fail). 0xb
        /// </summary>
        [pbr::OriginalName("SL_TIMEOUT")] SlTimeout = 11,
        /// <summary>
        /// Due to some event, the client will no longer receive notification
        /// events on this channel. 0xc
        /// Such events include:
        /// - Notification Session was hijacked by another client.
        /// </summary>
        [pbr::OriginalName("SL_NOTIF_TERM")] SlNotifTerm = 12,
        /// <summary>
        /// Authentication failure.
        /// Incorrect credentials passed in by RPC. 0xd
        /// </summary>
        [pbr::OriginalName("SL_AUTH_FAIL")] SlAuthFail = 13,
        /// <summary>
        /// Offset for INIT errors. 0x500
        /// </summary>
        [pbr::OriginalName("SL_INIT_START_OFFSET")] SlInitStartOffset = 1280,
        /// <summary>
        /// Success, no errors detected - clear state.
        /// This error is returned on the first-ever initialization, or,
        /// when a fatal event has occured and all previous state was lost. 0x501
        /// </summary>
        [pbr::OriginalName("SL_INIT_STATE_CLEAR")] SlInitStateClear = 1281,
        /// <summary>
        /// Success, no errors detected - previous state is recovered.
        /// This error is returned on a client re-initialization with
        /// successful recovery of state. Note that any unacknowledged
        /// data previously sent should be considered lost. 0x502
        /// </summary>
        [pbr::OriginalName("SL_INIT_STATE_READY")] SlInitStateReady = 1282,
        /// <summary>
        /// Server software incompatible with client software version. 0x503
        /// </summary>
        [pbr::OriginalName("SL_INIT_UNSUPPORTED_VER")] SlInitUnsupportedVer = 1283,
        /// <summary>
        /// Initialization request received while server is not ready. 0x504
        /// </summary>
        [pbr::OriginalName("SL_INIT_SERVER_NOT_INITIALIZED")] SlInitServerNotInitialized = 1284,
        /// <summary>
        /// Server operational mode change from stream to non-stream
        /// or vice-versa failed. 0x505
        /// </summary>
        [pbr::OriginalName("SL_INIT_SERVER_MODE_CHANGE_FAILED")] SlInitServerModeChangeFailed = 1285,
        /// <summary>
        /// Offset for VRF errors. 0x1000
        /// </summary>
        [pbr::OriginalName("SL_RPC_VRF_START_OFFSET")] SlRpcVrfStartOffset = 4096,
        /// <summary>
        /// Operation rejected for ALL VRFs due to too many VRF registration
        /// messages in the request. 0x1001
        /// </summary>
        [pbr::OriginalName("SL_RPC_VRF_TOO_MANY_VRF_REG_MSGS")] SlRpcVrfTooManyVrfRegMsgs = 4097,
        /// <summary>
        /// Operation rejected for all VRFs as server is not initialized. 0x1002
        /// </summary>
        [pbr::OriginalName("SL_RPC_VRF_SERVER_NOT_INITIALIZED")] SlRpcVrfServerNotInitialized = 4098,
        /// <summary>
        /// Offset for VRF errors. 0x2000
        /// </summary>
        [pbr::OriginalName("SL_VRF_START_OFFSET")] SlVrfStartOffset = 8192,
        /// <summary>
        /// VRF name in the VRF registration message is too long. 0x2001
        /// </summary>
        [pbr::OriginalName("SL_VRF_NAME_TOOLONG")] SlVrfNameToolong = 8193,
        /// <summary>
        /// VRF not found during a unregister or EOF. 0x2002
        /// </summary>
        [pbr::OriginalName("SL_VRF_NOT_FOUND")] SlVrfNotFound = 8194,
        /// <summary>
        /// On a VRF registration, Table ID for the VRF is not found. 0x2003
        /// </summary>
        [pbr::OriginalName("SL_VRF_NO_TABLE_ID")] SlVrfNoTableId = 8195,
        /// <summary>
        /// VRF add registration message with invalid administrative distance. 0x2004
        /// </summary>
        [pbr::OriginalName("SL_VRF_REG_INVALID_ADMIN_DISTANCE")] SlVrfRegInvalidAdminDistance = 8196,
        /// <summary>
        /// On a VRF registration, Table cannot be added to persistent memory. 0x2005
        /// </summary>
        [pbr::OriginalName("SL_VRF_TABLE_ADD_ERR")] SlVrfTableAddErr = 8197,
        /// <summary>
        /// VRF table cannot be registered with RIB. 0x2006
        /// </summary>
        [pbr::OriginalName("SL_VRF_TABLE_REGISTRATION_ERR")] SlVrfTableRegistrationErr = 8198,
        /// <summary>
        /// VRF table cannot be unregistered with RIB. 0x2007
        /// </summary>
        [pbr::OriginalName("SL_VRF_TABLE_UNREGISTRATION_ERR")] SlVrfTableUnregistrationErr = 8199,
        /// <summary>
        /// VRF table RIB EOF operation error. 0x2008
        /// </summary>
        [pbr::OriginalName("SL_VRF_TABLE_EOF_ERR")] SlVrfTableEofErr = 8200,
        /// <summary>
        /// VRF registration message does not have a VRF name. 0x2009
        /// </summary>
        [pbr::OriginalName("SL_VRF_REG_VRF_NAME_MISSING")] SlVrfRegVrfNameMissing = 8201,
        /// <summary>
        /// IPv4 routes in VRF cannot be played to Routing Information Base
        /// on a process restart or connection re-establishment.
        /// The Forwarding Information Base can
        /// can be inconsistent. Agent/Controller should initiate a
        /// recovery action by reloading the device. 0x2010
        /// </summary>
        [pbr::OriginalName("SL_VRF_V4_ROUTE_REPLAY_FATAL_ERROR")] SlVrfV4RouteReplayFatalError = 8208,
        /// <summary>
        /// IPv6 routes in VRF cannot be played to Routing Information Base
        /// on a process restart or connection re-establishment.
        /// The Forwarding Information Base can
        /// can be inconsistent. Agent/Controller should initiate a
        /// recovery action by reloading the device. 0x2011
        /// </summary>
        [pbr::OriginalName("SL_VRF_V6_ROUTE_REPLAY_FATAL_ERROR")] SlVrfV6RouteReplayFatalError = 8209,
        /// <summary>
        /// IPv4 routes in VRF were played to Routing Information Base
        /// on a process restart or connection re-establishment. 0x2012
        /// </summary>
        [pbr::OriginalName("SL_VRF_V4_ROUTE_REPLAY_OK")] SlVrfV4RouteReplayOk = 8210,
        /// <summary>
        /// IPv6 routes in VRF were played to Routing Information Base
        /// on a process restart or connection re-establishment. 0x2013
        /// </summary>
        [pbr::OriginalName("SL_VRF_V6_ROUTE_REPLAY_OK")] SlVrfV6RouteReplayOk = 8211,
        /// <summary>
        /// Offset for Route operation errors. 0x3000
        /// </summary>
        [pbr::OriginalName("SL_RPC_ROUTE_START_OFFSET")] SlRpcRouteStartOffset = 12288,
        /// <summary>
        /// Operation rejected for ALL routes due to too many routes in the
        /// request. 0x3001
        /// </summary>
        [pbr::OriginalName("SL_RPC_ROUTE_TOO_MANY_ROUTES")] SlRpcRouteTooManyRoutes = 12289,
        /// <summary>
        /// Operation rejected for ALL routes as the request's VRF name
        /// is too long. 0x3002
        /// </summary>
        [pbr::OriginalName("SL_RPC_ROUTE_VRF_NAME_TOOLONG")] SlRpcRouteVrfNameToolong = 12290,
        /// <summary>
        /// Operation rejected for ALL routes as VRF for the given name
        /// is not found. 0x3003
        /// </summary>
        [pbr::OriginalName("SL_RPC_ROUTE_VRF_NOT_FOUND")] SlRpcRouteVrfNotFound = 12291,
        /// <summary>
        /// Operation rejected for ALL routes as VRF's Table ID is not found.
        /// 0x3004
        /// </summary>
        [pbr::OriginalName("SL_RPC_ROUTE_VRF_NO_TABLE")] SlRpcRouteVrfNoTable = 12292,
        /// <summary>
        /// Operation rejected for ALL routes as VRF is not registered with RIB.
        /// 0x3005
        /// </summary>
        [pbr::OriginalName("SL_RPC_ROUTE_VRF_TABLE_NOT_REGISTERED")] SlRpcRouteVrfTableNotRegistered = 12293,
        /// <summary>
        /// Route Operation rejected for ALL objects as VRF name is missing.
        /// 0x3006
        /// </summary>
        [pbr::OriginalName("SL_RPC_ROUTE_VRF_NAME_MISSING")] SlRpcRouteVrfNameMissing = 12294,
        /// <summary>
        /// Operation rejected for all routes as the RPC request is
        /// not supported for the library's initialization mode. 0x3007
        /// </summary>
        [pbr::OriginalName("SL_RPC_ROUTE_INIT_MODE_INCOMPATIBLE")] SlRpcRouteInitModeIncompatible = 12295,
        /// <summary>
        /// Operation rejected for all routes as server is not initialized.
        /// 0x3008
        /// </summary>
        [pbr::OriginalName("SL_RPC_ROUTE_SERVER_NOT_INITIALIZED")] SlRpcRouteServerNotInitialized = 12296,
        /// <summary>
        /// Operation rejected as the request's SrcProto is too long. 0x3009
        /// </summary>
        [pbr::OriginalName("SL_RPC_ROUTE_NOTIF_SRC_PROTO_TOOLONG")] SlRpcRouteNotifSrcProtoToolong = 12297,
        /// <summary>
        /// Operation rejected as the request's SrcProtoTag is too long. 0x300a
        /// </summary>
        [pbr::OriginalName("SL_RPC_ROUTE_NOTIF_SRC_PROTO_TAG_TOOLONG")] SlRpcRouteNotifSrcProtoTagToolong = 12298,
        /// <summary>
        /// Offset for route errors. 0x4000
        /// </summary>
        [pbr::OriginalName("SL_ROUTE_START_OFFSET")] SlRouteStartOffset = 16384,
        /// <summary>
        /// Route add operation requested but no paths were provided. 0x4001
        /// </summary>
        [pbr::OriginalName("SL_ROUTE_ADD_NO_PATHS")] SlRouteAddNoPaths = 16385,
        /// <summary>
        /// Route update operation requested but no paths were provided. 0x4002
        /// </summary>
        [pbr::OriginalName("SL_ROUTE_UPDATE_NO_PATHS")] SlRouteUpdateNoPaths = 16386,
        /// <summary>
        /// Route's prefix length is invalid. 0x4003
        /// </summary>
        [pbr::OriginalName("SL_ROUTE_INVALID_PREFIX_LEN")] SlRouteInvalidPrefixLen = 16387,
        /// <summary>
        /// Route's admininstrative distance is invalid. 0x4004
        /// </summary>
        [pbr::OriginalName("SL_ROUTE_INVALID_ADMIN_DISTANCE")] SlRouteInvalidAdminDistance = 16388,
        /// <summary>
        /// Route's number of paths exceeds system capabilities. 0x4005
        /// </summary>
        [pbr::OriginalName("SL_ROUTE_INVALID_NUM_PATHS")] SlRouteInvalidNumPaths = 16389,
        /// <summary>
        /// Size of IPv6 prefix is invalid. 0x4006
        /// </summary>
        [pbr::OriginalName("SL_ROUTE_INVALID_PREFIX_SZ")] SlRouteInvalidPrefixSz = 16390,
        /// <summary>
        /// Route's prefix is invalid. 0x4007
        /// </summary>
        [pbr::OriginalName("SL_ROUTE_INVALID_PREFIX")] SlRouteInvalidPrefix = 16391,
        /// <summary>
        /// Route programming failed in RIB as VRF table limit reached. 0x4008
        /// </summary>
        [pbr::OriginalName("SL_ROUTE_ERR_RIB_TABLE_LIMIT_REACHED")] SlRouteErrRibTableLimitReached = 16392,
        /// <summary>
        /// RIB route programming failed in RIB due to invalid arguments. 0x4009
        /// </summary>
        [pbr::OriginalName("SL_ROUTE_ERR_RIB_INVALID_ARGS")] SlRouteErrRibInvalidArgs = 16393,
        /// <summary>
        /// One or more paths could not be programmed in RIB as VRF
        /// table limit reached. 0x400a
        /// </summary>
        [pbr::OriginalName("SL_ROUTE_ERR_RIB_PATH_TABLE_LIMIT")] SlRouteErrRibPathTableLimit = 16394,
        /// <summary>
        /// One or more paths could not be programmed in RIB as number of paths
        /// reached system limit. 0x400b
        /// </summary>
        [pbr::OriginalName("SL_ROUTE_ERR_RIB_TOOMANYPATHS")] SlRouteErrRibToomanypaths = 16395,
        /// <summary>
        /// This route already exists in the database. 0x400c  
        /// </summary>
        [pbr::OriginalName("SL_ROUTE_EEXIST")] SlRouteEexist = 16396,
        /// <summary>
        /// Route prefix has host bits set. 0x400d
        /// </summary>
        [pbr::OriginalName("SL_ROUTE_HOST_BITS_SET")] SlRouteHostBitsSet = 16397,
        /// <summary>
        /// IPv4 Route prefix is a multicast address. 0x400e
        /// </summary>
        [pbr::OriginalName("SL_ROUTE_INVALID_PREFIX_MCAST")] SlRouteInvalidPrefixMcast = 16398,
        /// <summary>
        /// Route and Path AFI does not match. 0x400f
        /// </summary>
        [pbr::OriginalName("SL_ROUTE_PATH_AFI_MISMATCH")] SlRoutePathAfiMismatch = 16399,
        /// <summary>
        /// Number of primary paths exceeds system capabilities. 0x4010
        /// </summary>
        [pbr::OriginalName("SL_ROUTE_TOOMANY_PRIMARY_PATHS")] SlRouteToomanyPrimaryPaths = 16400,
        /// <summary>
        /// Number of backup paths exceeds system capabilities. 0x4011
        /// </summary>
        [pbr::OriginalName("SL_ROUTE_TOOMANY_BACKUP_PATHS")] SlRouteToomanyBackupPaths = 16401,
        /// <summary>
        /// The route database is out of memory. 0x4012
        /// </summary>
        [pbr::OriginalName("SL_ROUTE_DB_NOMEM")] SlRouteDbNomem = 16402,
        /// <summary>
        /// The route has an invalid local label. 0x4013
        /// </summary>
        [pbr::OriginalName("SL_ROUTE_INVALID_LOCAL_LABEL")] SlRouteInvalidLocalLabel = 16403,
        /// <summary>
        /// Offset for route path errors. 0x5000
        /// </summary>
        [pbr::OriginalName("SL_PATH_START_OFFSET")] SlPathStartOffset = 20480,
        /// <summary>
        /// VRF table for the path could not be determined. 0x5001
        /// </summary>
        [pbr::OriginalName("SL_PATH_NH_NO_TABLE")] SlPathNhNoTable = 20481,
        /// <summary>
        /// Path next hop interface not found. 0x5002
        /// </summary>
        [pbr::OriginalName("SL_PATH_NH_INTF_NOT_FOUND")] SlPathNhIntfNotFound = 20482,
        /// <summary>
        /// Number of labels in the path exceeds system capabilities. 0x5003
        /// </summary>
        [pbr::OriginalName("SL_PATH_INVALID_LABEL_COUNT")] SlPathInvalidLabelCount = 20483,
        /// <summary>
        /// Path ID assigned to the path falls outside the supported range. 0x5004
        /// </summary>
        [pbr::OriginalName("SL_PATH_INVALID_ID")] SlPathInvalidId = 20484,
        /// <summary>
        /// Path VRF name exceeds supported length. 0x5005
        /// </summary>
        [pbr::OriginalName("SL_PATH_VRF_NAME_TOOLONG")] SlPathVrfNameToolong = 20485,
        /// <summary>
        /// Path next hop interface name exceeds supported length. 0x5006
        /// </summary>
        [pbr::OriginalName("SL_PATH_NH_INTF_NAME_TOOLONG")] SlPathNhIntfNameToolong = 20486,
        /// <summary>
        /// Size of next hop IPv6 address is invalid. 0x5007
        /// </summary>
        [pbr::OriginalName("SL_PATH_NH_INVALID_ADDR_SZ")] SlPathNhInvalidAddrSz = 20487,
        /// <summary>
        /// Next hop interface name is missing from path. 0x5008
        /// </summary>
        [pbr::OriginalName("SL_PATH_NH_INF_NAME_MISSING")] SlPathNhInfNameMissing = 20488,
        /// <summary>
        /// Path has an invalid next hop address. 0x5009
        /// </summary>
        [pbr::OriginalName("SL_PATH_INVALID_NEXT_HOP_ADDR")] SlPathInvalidNextHopAddr = 20489,
        /// <summary>
        /// Number of remote backup addresses in the path exceeds
        /// system capabilities. 0x500a
        /// </summary>
        [pbr::OriginalName("SL_PATH_INVALID_REMOTE_ADDR_COUNT")] SlPathInvalidRemoteAddrCount = 20490,
        /// <summary>
        /// Size of IPv6 remote backup address is invalid. 0x500b
        /// </summary>
        [pbr::OriginalName("SL_PATH_REMOTE_ADDR_INVALID_SZ")] SlPathRemoteAddrInvalidSz = 20491,
        /// <summary>
        /// Route and Path remote backup address AFI does not match. 0x500c
        /// </summary>
        [pbr::OriginalName("SL_PATH_REMOTE_ADDR_AFI_MISMATCH")] SlPathRemoteAddrAfiMismatch = 20492,
        /// <summary>
        /// Path has an invalid protection bitmap. 0x500d
        /// </summary>
        [pbr::OriginalName("SL_PATH_INVALID_PROTECTED_BITMAP")] SlPathInvalidProtectedBitmap = 20493,
        /// <summary>
        /// Protection bitmap of a backup path refers to a missing path. 0x500e
        /// </summary>
        [pbr::OriginalName("SL_PATH_BACKUP_MISSING_PRIMARY_PATH")] SlPathBackupMissingPrimaryPath = 20494,
        /// <summary>
        /// Too many primary paths with same Path ID. 0x500f
        /// </summary>
        [pbr::OriginalName("SL_PATH_PRIMARY_ID_REPEATED")] SlPathPrimaryIdRepeated = 20495,
        /// <summary>
        /// Too many pure backup paths with same Path ID. 0x5010
        /// </summary>
        [pbr::OriginalName("SL_PATH_BACKUP_ID_REPEATED")] SlPathBackupIdRepeated = 20496,
        /// <summary>
        /// A primary path has too many backup paths. 0x5011
        /// </summary>
        [pbr::OriginalName("SL_PATH_PRIMARY_TOOMANY_BACKUP_PATHS")] SlPathPrimaryToomanyBackupPaths = 20497,
        /// <summary>
        /// A primary path has too many labels. 0x5012
        /// </summary>
        [pbr::OriginalName("SL_PATH_PRIMARY_TOOMANY_LABELS")] SlPathPrimaryToomanyLabels = 20498,
        /// <summary>
        /// A primary path has too many remote addresses. 0x5013
        /// </summary>
        [pbr::OriginalName("SL_PATH_PRIMARY_TOOMANY_REMOTE_ADDR")] SlPathPrimaryToomanyRemoteAddr = 20499,
        /// <summary>
        /// A pure backup remote address is invalid. 0x5014
        /// </summary>
        [pbr::OriginalName("SL_PATH_REMOTE_ADDR_INVALID")] SlPathRemoteAddrInvalid = 20500,
        /// <summary>
        /// Path has an invalid label. 0x5015
        /// </summary>
        [pbr::OriginalName("SL_PATH_INVALID_LABEL")] SlPathInvalidLabel = 20501,
        /// <summary>
        /// Size of router mac address is invalid. 0x5016
        /// </summary>
        [pbr::OriginalName("SL_PATH_ROUTER_MAC_ADDR_INVALID_SZ")] SlPathRouterMacAddrInvalidSz = 20502,
        /// <summary>
        /// A backup path has too many labels. 0x5017
        /// </summary>
        [pbr::OriginalName("SL_PATH_BACKUP_TOOMANY_LABELS")] SlPathBackupToomanyLabels = 20503,
        /// <summary>
        /// Invalid VNI for VxLAN encap. 0x5018
        /// </summary>
        [pbr::OriginalName("SL_PATH_INVALID_VNI")] SlPathInvalidVni = 20504,
        /// <summary>
        /// Path has an invalid  encap address. 0x5019
        /// </summary>
        [pbr::OriginalName("SL_PATH_INVALID_ENCAP_ADDR")] SlPathInvalidEncapAddr = 20505,
        /// <summary>
        /// Path encapsulation source and destination AFI mismatch. 0x501a
        /// </summary>
        [pbr::OriginalName("SL_PATH_ENCAP_SRC_DST_AFI_MISMATCH")] SlPathEncapSrcDstAfiMismatch = 20506,
        /// <summary>
        /// PATH router mac is not supported with VxLAN path attributes. 0x501b
        /// </summary>
        [pbr::OriginalName("SL_PATH_RTR_MAC_NOSUP")] SlPathRtrMacNosup = 20507,
        /// <summary>
        /// Path Encap type attribute does not match specified encapsulation. 0x501c
        /// </summary>
        [pbr::OriginalName("SL_PATH_ENCAP_TYPE_MISMATCH")] SlPathEncapTypeMismatch = 20508,
        /// <summary>
        /// Offset for BFD operation errors. 0x6000
        /// </summary>
        [pbr::OriginalName("SL_RPC_BFD_START_OFFSET")] SlRpcBfdStartOffset = 24576,
        /// <summary>
        /// BFD Operation rejected for ALL Sessions as the BFD Session count
        /// is beyond supported limit. 0x6001
        /// </summary>
        [pbr::OriginalName("SL_RPC_BFD_TOO_MANY_BFD_SESSIONS")] SlRpcBfdTooManyBfdSessions = 24577,
        /// <summary>
        /// BFD Operation rejected due to one or many invalid parameters. 0x6002
        /// </summary>
        [pbr::OriginalName("SL_RPC_BFD_API_BAD_PARAMETER")] SlRpcBfdApiBadParameter = 24578,
        /// <summary>
        /// BFD Operation failed as server is not registered with BFD. 0x6003
        /// </summary>
        [pbr::OriginalName("SL_RPC_BFD_API_CLIENT_NOT_REGISTERED")] SlRpcBfdApiClientNotRegistered = 24579,
        /// <summary>
        /// BFD Operation failed with internal error. 0x6004
        /// </summary>
        [pbr::OriginalName("SL_RPC_BFD_API_INTERNAL_ERROR")] SlRpcBfdApiInternalError = 24580,
        /// <summary>
        /// BFD Operation rejected as server is not initialized. 0x6005
        /// </summary>
        [pbr::OriginalName("SL_RPC_BFD_SERVER_NOT_INITIALIZED")] SlRpcBfdServerNotInitialized = 24581,
        /// <summary>
        /// BFD IPv4 not registered. 0x6006
        /// </summary>
        [pbr::OriginalName("SL_RPC_BFD_V4_NOT_REGISTERED")] SlRpcBfdV4NotRegistered = 24582,
        /// <summary>
        /// BFD IPv6 not registered. 0x6007
        /// </summary>
        [pbr::OriginalName("SL_RPC_BFD_V6_NOT_REGISTERED")] SlRpcBfdV6NotRegistered = 24583,
        /// <summary>
        /// Offset for BFD errors. 0x7000
        /// </summary>
        [pbr::OriginalName("SL_BFD_START_OFFSET")] SlBfdStartOffset = 28672,
        /// <summary>
        /// BFD Session's interface name exceeds supported length. 0x7001
        /// </summary>
        [pbr::OriginalName("SL_BFD_INTF_NAME_TOOLONG")] SlBfdIntfNameToolong = 28673,
        /// <summary>
        /// BFD Session's interface not found. 0x7002
        /// </summary>
        [pbr::OriginalName("SL_BFD_INTF_NOT_FOUND")] SlBfdIntfNotFound = 28674,
        /// <summary>
        /// BFD Session's tx interval or multiplier are beyond the 
        /// supported range. 0x7003
        /// </summary>
        [pbr::OriginalName("SL_BFD_INVALID_ATTRIBUTE")] SlBfdInvalidAttribute = 28675,
        /// <summary>
        /// BFD Session's interface name is missing. 0x7004
        /// </summary>
        [pbr::OriginalName("SL_BFD_INTF_NAME_MISSING")] SlBfdIntfNameMissing = 28676,
        /// <summary>
        /// BFD Session's neighbor is mcast address. 0x7005
        /// </summary>
        [pbr::OriginalName("SL_BFD_INVALID_NBR_MCAST")] SlBfdInvalidNbrMcast = 28677,
        /// <summary>
        /// BFD Session's neighbor address is invalid. 0x7006
        /// </summary>
        [pbr::OriginalName("SL_BFD_INVALID_NBR")] SlBfdInvalidNbr = 28678,
        /// <summary>
        /// BFD Session's VRF Name is too long. 0x7007
        /// </summary>
        [pbr::OriginalName("SL_BFD_VRF_NAME_TOOLONG")] SlBfdVrfNameToolong = 28679,
        /// <summary>
        /// BFD Session's one or more parameters are invalid. 
        /// For example, Multihop BFD can not have the interface name set. 0x7008
        /// </summary>
        [pbr::OriginalName("SL_BFD_BAD_PARAMETER")] SlBfdBadParameter = 28680,
        /// <summary>
        /// BFD Session failed with internal error. 0x7009
        /// </summary>
        [pbr::OriginalName("SL_BFD_API_INTERNAL_ERROR")] SlBfdApiInternalError = 28681,
        /// <summary>
        /// BFD Session's VRF not found. 0x700a
        /// </summary>
        [pbr::OriginalName("SL_BFD_VRF_NOT_FOUND")] SlBfdVrfNotFound = 28682,
        /// <summary>
        /// BFD Session's neighbor IPv6 prefix size is invalid. 0x700b
        /// </summary>
        [pbr::OriginalName("SL_BFD_INVALID_PREFIX_SIZE")] SlBfdInvalidPrefixSize = 28683,
        /// <summary>
        /// BFD Session type invalid. 0x700c
        /// </summary>
        [pbr::OriginalName("SL_BFD_INVALID_SESSION_TYPE")] SlBfdInvalidSessionType = 28684,
        /// <summary>
        /// BFD Session's VRF is Invalid. 0x700d
        /// </summary>
        [pbr::OriginalName("SL_BFD_INVALID_VRF")] SlBfdInvalidVrf = 28685,
        /// <summary>
        /// BFD Session not found. 0x700e
        /// </summary>
        [pbr::OriginalName("SL_BFD_SESSION_NOT_FOUND")] SlBfdSessionNotFound = 28686,
        /// <summary>
        /// BFD Session exists. 0x700f
        /// </summary>
        [pbr::OriginalName("SL_BFD_SESSION_EXISTS")] SlBfdSessionExists = 28687,
        /// <summary>
        /// BFD Internal database error. 0x7010
        /// </summary>
        [pbr::OriginalName("SL_BFD_INTERNAL_DB_ERROR")] SlBfdInternalDbError = 28688,
        /// <summary>
        /// BFD Recovery error. 0x7011
        /// </summary>
        [pbr::OriginalName("SL_BFD_RECOVERY_ERROR")] SlBfdRecoveryError = 28689,
        /// <summary>
        /// Offset for MPLS operation errors. 0x8000
        /// </summary>
        [pbr::OriginalName("SL_RPC_MPLS_START_OFFSET")] SlRpcMplsStartOffset = 32768,
        /// <summary>
        /// Operation rejected for ALL ILMS due to too many ILMS in the
        /// request. 0x8001
        /// </summary>
        [pbr::OriginalName("SL_RPC_MPLS_ILM_TOO_MANY_ILMS")] SlRpcMplsIlmTooManyIlms = 32769,
        /// <summary>
        /// Operation rejected for all ILMs as server is not initialized.
        /// 0x0x8002
        /// </summary>
        [pbr::OriginalName("SL_RPC_MPLS_SERVER_NOT_INITIALIZED")] SlRpcMplsServerNotInitialized = 32770,
        /// <summary>
        /// Operation rejected for all ILMs as the RPC request is
        /// not supported for the library's initialization mode. 0x8003
        /// </summary>
        [pbr::OriginalName("SL_RPC_MPLS_INIT_MODE_INCOMPATIBLE")] SlRpcMplsInitModeIncompatible = 32771,
        /// <summary>
        /// Operation rejected for ALL label blocks due to too many
        /// label blocks in the request. 0x8004
        /// </summary>
        [pbr::OriginalName("SL_RPC_MPLS_LABEL_BLK_TOO_MANY_LABEL_BLKS")] SlRpcMplsLabelBlkTooManyLabelBlks = 32772,
        /// <summary>
        /// Operation rejected for ALL ILMs as MPLS layer is not registered.
        /// 0x8005
        /// </summary>
        [pbr::OriginalName("SL_RPC_MPLS_NOT_REGISTERED")] SlRpcMplsNotRegistered = 32773,
        /// <summary>
        /// Offset for MPLS ILM errors. 0x9000
        /// </summary>
        [pbr::OriginalName("SL_ILM_ERR_OFFSET")] SlIlmErrOffset = 36864,
        /// <summary>
        /// MPLS ILM add to service layer failed. 0x9001
        /// </summary>
        [pbr::OriginalName("SL_ILM_ADD_FAILED")] SlIlmAddFailed = 36865,
        /// <summary>
        /// MPLS ILM add to Label Switching Database failed. 0x9002
        /// </summary>
        [pbr::OriginalName("SL_ILM_LSD_ADD_FAILED")] SlIlmLsdAddFailed = 36866,
        /// <summary>
        /// MPLS ILM NHLFE count exceeded max supported number. 0x9003
        /// </summary>
        [pbr::OriginalName("SL_ILM_INVALID_NUM_NHLFE")] SlIlmInvalidNumNhlfe = 36867,
        /// <summary>
        /// MPLS ILM label value out of range. 0x9004
        /// </summary>
        [pbr::OriginalName("SL_ILM_INVALID_LABEL")] SlIlmInvalidLabel = 36868,
        /// <summary>
        /// MPLS ILM delete from service layer failed. 0x9005
        /// </summary>
        [pbr::OriginalName("SL_ILM_DELETE_FAILED")] SlIlmDeleteFailed = 36869,
        /// <summary>
        /// MPLS ILM delete from Label Switching Database failed. 0x9006
        /// </summary>
        [pbr::OriginalName("SL_ILM_LSD_DELETE_FAILED")] SlIlmLsdDeleteFailed = 36870,
        /// <summary>
        /// Number of primary NHLFEs exceeds system capabilities. 0x9007
        /// </summary>
        [pbr::OriginalName("SL_ILM_TOOMANY_PRIMARY_NHLFES")] SlIlmToomanyPrimaryNhlfes = 36871,
        /// <summary>
        /// Number of backup NHLFEs exceeds system capabilities. 0x9008
        /// </summary>
        [pbr::OriginalName("SL_ILM_TOOMANY_BACKUP_NHLFES")] SlIlmToomanyBackupNhlfes = 36872,
        /// <summary>
        /// MPLS ILM label alloc failed in Label switching database. 0x9009
        /// </summary>
        [pbr::OriginalName("SL_ILM_LSD_ADD_LABEL_ALLOC_FAILED")] SlIlmLsdAddLabelAllocFailed = 36873,
        /// <summary>
        /// MPLS ILM NHLFE attribute invalid. 0x900a
        /// </summary>
        [pbr::OriginalName("SL_ILM_LSD_NHLFE_INVALID_ATTRIB")] SlIlmLsdNhlfeInvalidAttrib = 36874,
        /// <summary>
        /// MPLS ILM already exists in the database. 0x900b
        /// </summary>
        [pbr::OriginalName("SL_ILM_EEXIST")] SlIlmEexist = 36875,
        /// <summary>
        /// The ILM database is out of memory. 0x900c
        /// </summary>
        [pbr::OriginalName("SL_ILM_DB_NOMEM")] SlIlmDbNomem = 36876,
        /// <summary>
        /// EXP value is outside of the valid range of &lt;0-7>. 0x900d
        /// </summary>
        [pbr::OriginalName("SL_ILM_INVALID_ELSP_EXP")] SlIlmInvalidElspExp = 36877,
        /// <summary>
        /// EXP value or Default already set. 0x900e
        /// </summary>
        [pbr::OriginalName("SL_ILM_ELSP_EXP_OR_DFLT_ALREADY_SET")] SlIlmElspExpOrDfltAlreadySet = 36878,
        /// <summary>
        /// MPLS ILM add operation requested but no paths were provided. 0x900f
        /// </summary>
        [pbr::OriginalName("SL_ILM_ADD_NO_PATHS")] SlIlmAddNoPaths = 36879,
        /// <summary>
        /// MPLS ILM update operation requested but no paths were provided. 0x9010
        /// </summary>
        [pbr::OriginalName("SL_ILM_UPDATE_NO_PATHS")] SlIlmUpdateNoPaths = 36880,
        /// <summary>
        /// LSP and ELSP on the same label not supported. 0x9011
        /// </summary>
        [pbr::OriginalName("SL_ILM_UNSUPPORTED_ELSP")] SlIlmUnsupportedElsp = 36881,
        /// <summary>
        /// Number of EXP classes on the label exceed system capabilities. 0x9012
        /// </summary>
        [pbr::OriginalName("SL_ILM_LABEL_TOOMANY_EXP_CLASSES")] SlIlmLabelToomanyExpClasses = 36882,
        /// <summary>
        /// MPLS ILMs cannot be played to Label Switching Database
        /// on a process restart or connection re-establishment.
        /// The Forwarding Information Base can
        /// can be inconsistent. Agent/Controller should initiate a
        /// recovery action by reloading the device. 0x9013
        /// </summary>
        [pbr::OriginalName("SL_ILM_REPLAY_FATAL_ERROR")] SlIlmReplayFatalError = 36883,
        /// <summary>
        /// MPLS ILMs were played to Label Switching Database
        /// on a process restart or connection re-establishment. 0x9014
        /// </summary>
        [pbr::OriginalName("SL_ILM_REPLAY_OK")] SlIlmReplayOk = 36884,
        /// <summary>
        /// ILM's prefix length is invalid. 0x9015
        /// </summary>
        [pbr::OriginalName("SL_ILM_INVALID_PREFIX_LEN")] SlIlmInvalidPrefixLen = 36885,
        /// <summary>
        /// ILM prefix has host bits set. 0x9016
        /// </summary>
        [pbr::OriginalName("SL_ILM_HOST_BITS_SET")] SlIlmHostBitsSet = 36886,
        /// <summary>
        /// Size of IPv6 prefix is invalid. 0x9017
        /// </summary>
        [pbr::OriginalName("SL_ILM_INVALID_PREFIX_SZ")] SlIlmInvalidPrefixSz = 36887,
        /// <summary>
        /// ILM's prefix is invalid. 0x9018
        /// </summary>
        [pbr::OriginalName("SL_ILM_INVALID_PREFIX")] SlIlmInvalidPrefix = 36888,
        /// <summary>
        /// ILM's IPv4 Route prefix is a multicast address. 0x9019
        /// </summary>
        [pbr::OriginalName("SL_ILM_INVALID_PREFIX_MCAST")] SlIlmInvalidPrefixMcast = 36889,
        /// <summary>
        /// VRF name is too long. 0x9020
        /// </summary>
        [pbr::OriginalName("SL_ILM_VRF_NAME_TOOLONG")] SlIlmVrfNameToolong = 36896,
        /// <summary>
        /// VRF's table ID not found. 0x9021
        /// </summary>
        [pbr::OriginalName("SL_ILM_VRF_NO_TABLE_ID")] SlIlmVrfNoTableId = 36897,
        /// <summary>
        /// VRF name of the ILM route not specified. 0x9022
        /// </summary>
        [pbr::OriginalName("SL_ILM_VRF_NAME_MISSING")] SlIlmVrfNameMissing = 36898,
        /// <summary>
        /// Offset for MPLS NHLFE errors. 0xa000
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_ERR_OFFSET")] SlNhlfeErrOffset = 40960,
        /// <summary>
        /// MPLS NHLFE vrf table could not be determined. 0xa001
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_NH_NO_TABLE")] SlNhlfeNhNoTable = 40961,
        /// <summary>
        /// Size of next hop IPv6 address is invalid. 0xa002
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_NH_INVALID_ADDR_SZ")] SlNhlfeNhInvalidAddrSz = 40962,
        /// <summary>
        /// NHLFE has an invalid next hop address. 0xa003
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_INVALID_NEXT_HOP_ADDR")] SlNhlfeInvalidNextHopAddr = 40963,
        /// <summary>
        /// Path VRF name exceeds supported length. 0xa004
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_VRF_NAME_TOOLONG")] SlNhlfeVrfNameToolong = 40964,
        /// <summary>
        /// Next hop interface name is missing from path. 0xa005
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_NH_INF_NAME_MISSING")] SlNhlfeNhInfNameMissing = 40965,
        /// <summary>
        /// Interface name exceeds supported length. 0xa006
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_NH_INTF_NAME_TOOLONG")] SlNhlfeNhIntfNameToolong = 40966,
        /// <summary>
        /// Number of labels in the path incompatible with system capabilities 
        /// for the given label action. 0xa007
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_INVALID_LABEL_COUNT")] SlNhlfeInvalidLabelCount = 40967,
        /// <summary>
        /// Path id is invalid in NHLFE. 0xa008
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_INVALID_PATH_ID")] SlNhlfeInvalidPathId = 40968,
        /// <summary>
        /// MPLS NHLFE label value out of range. 0xa009
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_INVALID_LABEL")] SlNhlfeInvalidLabel = 40969,
        /// <summary>
        /// NHLFE has an invalid protection bitmap. 0xa00a
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_INVALID_PROTECTED_BITMAP")] SlNhlfeInvalidProtectedBitmap = 40970,
        /// <summary>
        /// Number of remote backup addresses in the NHLFE exceeds
        /// system capabilities. 0xa00b
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_INVALID_REMOTE_ADDR_COUNT")] SlNhlfeInvalidRemoteAddrCount = 40971,
        /// <summary>
        /// Size of IPv6 remote backup address is invalid. 0xa00c
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_REMOTE_ADDR_INVALID_SZ")] SlNhlfeRemoteAddrInvalidSz = 40972,
        /// <summary>
        /// A primary NHLFE has too many labels. 0xa00d
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_PRIMARY_TOOMANY_LABELS")] SlNhlfePrimaryToomanyLabels = 40973,
        /// <summary>
        /// A primary NHLFE has too many remote addresses. 0xa00e
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_PRIMARY_TOOMANY_REMOTE_ADDR")] SlNhlfePrimaryToomanyRemoteAddr = 40974,
        /// <summary>
        /// Too many pure backup NHLFE with same Path ID. 0xa00f
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_BACKUP_ID_REPEATED")] SlNhlfeBackupIdRepeated = 40975,
        /// <summary>
        /// Too many primary NHLFE with same Path ID. 0xa010
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_PRIMARY_ID_REPEATED")] SlNhlfePrimaryIdRepeated = 40976,
        /// <summary>
        /// Pure backup NHLFE has a empty protected bitmap. 0xa011
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_BACKUP_PROTECTED_BITMAP_EMPTY")] SlNhlfeBackupProtectedBitmapEmpty = 40977,
        /// <summary>
        /// A primary NHLFE has too many backup paths. 0xa012
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_PRIMARY_TOOMANY_BACKUP_PATHS")] SlNhlfePrimaryToomanyBackupPaths = 40978,
        /// <summary>
        /// A pure backup remote address is invalid. 0xa013
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_REMOTE_ADDR_INVALID")] SlNhlfeRemoteAddrInvalid = 40979,
        /// <summary>
        /// Protection bitmap of a backup NHLFE refers to a missing path. 0xa014
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_BACKUP_MISSING_PRIMARY_PATH")] SlNhlfeBackupMissingPrimaryPath = 40980,
        /// <summary>
        /// NHLFE next-hop missing. 0xa015
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_NEXT_HOP_MISSING")] SlNhlfeNextHopMissing = 40981,
        /// <summary>
        /// Label action specified is invalid. 0xa016
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_LABEL_ACTION_INVALID")] SlNhlfeLabelActionInvalid = 40982,
        /// <summary>
        /// NHLFE next hop interface not found. 0xa017
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_NH_INTF_NOT_FOUND")] SlNhlfeNhIntfNotFound = 40983,
        /// <summary>
        /// MPLS NHLFE operation failed. 0xa018
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_OPER_FAILED")] SlNhlfeOperFailed = 40984,
        /// <summary>
        /// MPLS NHLFE label action missing. 0xa019
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_LABEL_ACTION_MISSING")] SlNhlfeLabelActionMissing = 40985,
        /// <summary>
        /// Setting EXP value failed. 0xa01a
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_EXP_SET_FAILED")] SlNhlfeExpSetFailed = 40986,
        /// <summary>
        /// ELSP protection is unsupported. 0xa01b
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_ELSP_PROTECTION_UNSUPPORTED")] SlNhlfeElspProtectionUnsupported = 40987,
        /// <summary>
        /// EXP value is outside of the valid range of &lt;0-7>. 0xa01c
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_INVALID_ELSP_EXP")] SlNhlfeInvalidElspExp = 40988,
        /// <summary>
        /// Path Priority is invalid (valid: 0 or 1). 0xa01d
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_INVALID_PATH_PRIORITY")] SlNhlfeInvalidPathPriority = 40989,
        /// <summary>
        /// Load metric is not zero for a down path. 0xa01e
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_INVALID_LOAD_METRIC")] SlNhlfeInvalidLoadMetric = 40990,
        /// <summary>
        /// Set ID value is outside of the valid range of &lt;0-7>. 0xa01f
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_INVALID_SETID")] SlNhlfeInvalidSetid = 40991,
        /// <summary>
        /// Two paths with the same Set ID have different path priorities. 0xa020
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_INVALID_SETID_PRIORITY")] SlNhlfeInvalidSetidPriority = 40992,
        /// <summary>
        /// Multiple Set IDs are set as the primary. 0xa021
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_INVALID_MULTIPLE_PRIMARY_SETIDS")] SlNhlfeInvalidMultiplePrimarySetids = 40993,
        /// <summary>
        /// Paths with the same SET ID are not contiguous. 0xa022
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_NON_CONTIGUOUS_SETIDS")] SlNhlfeNonContiguousSetids = 40994,
        /// <summary>
        /// Paths with same EXP classification are not contiguous. 0xa023
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_NON_CONTIGUOUS_EXP")] SlNhlfeNonContiguousExp = 40995,
        /// <summary>
        /// On a ILM, mix of NHLFE with EXP class and others without any EXP class are not allowed. 0xa024
        /// </summary>
        [pbr::OriginalName("SL_NHLFE_INCONSISTENT_EXP_ON_PATH")] SlNhlfeInconsistentExpOnPath = 40996,
        /// <summary>
        /// Offset for label block errors. 0xb000
        /// </summary>
        [pbr::OriginalName("SL_LABEL_BLK_ERR_OFFSET")] SlLabelBlkErrOffset = 45056,
        /// <summary>
        /// MPLS label block add from Label Switching Database failed. 0xb001
        /// </summary>
        [pbr::OriginalName("SL_LABEL_BLK_LSD_ADD_FAILED")] SlLabelBlkLsdAddFailed = 45057,
        /// <summary>
        /// MPLS label block delete from Label Switching Database failed. 0xb002
        /// </summary>
        [pbr::OriginalName("SL_LABEL_BLK_LSD_DELETE_FAILED")] SlLabelBlkLsdDeleteFailed = 45058,
        /// <summary>
        /// MPLS label block not found. 0xb003
        /// </summary>
        [pbr::OriginalName("SL_LABEL_BLK_LSD_LABEL_BLK_NOT_FOUND")] SlLabelBlkLsdLabelBlkNotFound = 45059,
        /// <summary>
        /// MPLS label block in use. 0xb004
        /// </summary>
        [pbr::OriginalName("SL_LABEL_BLK_LSD_LABEL_BLK_IN_USE")] SlLabelBlkLsdLabelBlkInUse = 45060,
        /// <summary>
        /// MPLS label block attribute invalid. 0xb005
        /// </summary>
        [pbr::OriginalName("SL_LABEL_BLK_LSD_INVALID_ATTRIB")] SlLabelBlkLsdInvalidAttrib = 45061,
        /// <summary>
        /// MPLS label block size > max size per block. 0xb006
        /// </summary>
        [pbr::OriginalName("SL_LABEL_BLK_INVALID_BLOCK_SIZE")] SlLabelBlkInvalidBlockSize = 45062,
        /// <summary>
        /// MPLS label start_label &lt; min label for platform . 0xb007
        /// </summary>
        [pbr::OriginalName("SL_LABEL_BLK_INVALID_START_LABEL")] SlLabelBlkInvalidStartLabel = 45063,
        /// <summary>
        /// MPLS label block already exists in the database. 0xb008
        /// </summary>
        [pbr::OriginalName("SL_LABEL_BLK_EEXIST")] SlLabelBlkEexist = 45064,
        /// <summary>
        /// MPLS label database is out of memory. 0xb009
        /// </summary>
        [pbr::OriginalName("SL_LABEL_BLK_DB_NOMEM")] SlLabelBlkDbNomem = 45065,
        /// <summary>
        /// MPLS label block type invalid. 0xb00a
        /// </summary>
        [pbr::OriginalName("SL_LABEL_BLK_TYPE_INVALID")] SlLabelBlkTypeInvalid = 45066,
        /// <summary>
        /// MPLS label block client name exceeds max length. 0xb00b
        /// </summary>
        [pbr::OriginalName("SL_LABEL_BLK_CLIENT_NAME_TOOLONG")] SlLabelBlkClientNameToolong = 45067,
        /// <summary>
        /// Offset for MPLS registration errors. 0xc000
        /// </summary>
        [pbr::OriginalName("SL_MPLS_REG_ERR_OFFSET")] SlMplsRegErrOffset = 49152,
        /// <summary>
        /// MPLS registration error. 0xc001
        /// </summary>
        [pbr::OriginalName("SL_MPLS_REG_ERR")] SlMplsRegErr = 49153,
        /// <summary>
        /// MPLS unregistration error. 0xc002
        /// </summary>
        [pbr::OriginalName("SL_MPLS_UNREG_ERR")] SlMplsUnregErr = 49154,
        /// <summary>
        /// MPLS EOF error. 0xc003
        /// </summary>
        [pbr::OriginalName("SL_MPLS_EOF_ERR")] SlMplsEofErr = 49155,
        /// <summary>
        /// Offset for Interface operation errors. 0xd000
        /// </summary>
        [pbr::OriginalName("SL_RPC_INTF_START_OFFSET")] SlRpcIntfStartOffset = 53248,
        /// <summary>
        /// Interface Operation rejected for ALL Sessions as the Interface
        /// Session count is beyond supported limit. 0xd001
        /// </summary>
        [pbr::OriginalName("SL_RPC_INTF_TOO_MANY_INTERFACES")] SlRpcIntfTooManyInterfaces = 53249,
        /// <summary>
        /// Interface Operation rejected as server is not initialized. 0xd002
        /// </summary>
        [pbr::OriginalName("SL_RPC_INTF_SERVER_NOT_INITIALIZED")] SlRpcIntfServerNotInitialized = 53250,
        /// <summary>
        /// Interface Operation failed as server is not registered with 
        /// interface manager. 0xd003
        /// </summary>
        [pbr::OriginalName("SL_RPC_INTF_API_CLIENT_NOT_REGISTERED")] SlRpcIntfApiClientNotRegistered = 53251,
        /// <summary>
        /// Offset for Interface object errors. 0xe000
        /// </summary>
        [pbr::OriginalName("SL_INTF_START_OFFSET")] SlIntfStartOffset = 57344,
        /// <summary>
        /// Interface object's interface name missing. 0xe001
        /// </summary>
        [pbr::OriginalName("SL_INTF_INTERFACE_NAME_MISSING")] SlIntfInterfaceNameMissing = 57345,
        /// <summary>
        /// Interface object's interface name exceeds supported length. 0xe002
        /// </summary>
        [pbr::OriginalName("SL_INTF_INTERFACE_NAME_TOOLONG")] SlIntfInterfaceNameToolong = 57346,
        /// <summary>
        /// Interface internal registration error. 0xe003 
        /// </summary>
        [pbr::OriginalName("SL_INTF_INTERFACE_REG_ERR")] SlIntfInterfaceRegErr = 57347,
        /// <summary>
        /// Internal database error. 0xe004
        /// </summary>
        [pbr::OriginalName("SL_INTF_INTERNAL_DB_ERROR")] SlIntfInternalDbError = 57348,
        /// <summary>
        /// Interface Recovery error. 0xe005
        /// </summary>
        [pbr::OriginalName("SL_INTF_RECOVERY_ERROR")] SlIntfRecoveryError = 57349,
        /// <summary>
        /// Interface exists. 0xe006
        /// </summary>
        [pbr::OriginalName("SL_INTF_INTERFACE_EXISTS")] SlIntfInterfaceExists = 57350,
        /// <summary>
        /// Interface not found. 0xe007
        /// </summary>
        [pbr::OriginalName("SL_INTF_INTERFACE_NOT_FOUND")] SlIntfInterfaceNotFound = 57351,
        /// <summary>
        /// Offset for Global L2 operation errors. 0xf000
        /// </summary>
        [pbr::OriginalName("SL_L2_REG_START_OFFSET")] SlL2RegStartOffset = 61440,
        /// <summary>
        /// Client cannot be registered with Layer-2 RIB. 0xf001
        /// </summary>
        [pbr::OriginalName("SL_L2_REGISTRATION_ERR")] SlL2RegistrationErr = 61441,
        /// <summary>
        /// Client cannot be unregistered with Layer-2 RIB. 0xf002
        /// </summary>
        [pbr::OriginalName("SL_L2_UNREGISTRATION_ERR")] SlL2UnregistrationErr = 61442,
        /// <summary>
        /// EOF Operation error. 0xf003
        /// </summary>
        [pbr::OriginalName("SL_L2_EOF_ERR")] SlL2EofErr = 61443,
        /// <summary>
        /// L2 registration message with invalid admin distance. 0xf004
        /// </summary>
        [pbr::OriginalName("SL_L2_REG_INVALID_ADMIN_DISTANCE")] SlL2RegInvalidAdminDistance = 61444,
        /// <summary>
        /// Duplicate L2 registration message. 0xf005
        /// </summary>
        [pbr::OriginalName("SL_L2_REG_IS_DUPLICATE")] SlL2RegIsDuplicate = 61445,
        /// <summary>
        /// L2 registration rejected as server is not initialized. 0xf006
        /// </summary>
        [pbr::OriginalName("SL_L2_REG_SERVER_NOT_INITIALIZED")] SlL2RegServerNotInitialized = 61446,
        /// <summary>
        /// Offset for L2 BD operation errors. 0x10000
        /// </summary>
        [pbr::OriginalName("SL_RPC_L2_BD_REG_START_OFFSET")] SlRpcL2BdRegStartOffset = 65536,
        /// <summary>
        /// Operation is rejected for all BDs as name is missing. 0x10001
        /// </summary>
        [pbr::OriginalName("SL_RPC_L2_BD_REG_NAME_MISSING")] SlRpcL2BdRegNameMissing = 65537,
        /// <summary>
        /// Operation rejected for all BDs due to too many BD registration
        /// messages in the request. 0x10002
        /// </summary>
        [pbr::OriginalName("SL_RPC_L2_BD_REG_TOO_MANY_MSGS")] SlRpcL2BdRegTooManyMsgs = 65538,
        /// <summary>
        /// Operation rejected for all BDs as server is not initialized.
        /// 0x10003
        /// </summary>
        [pbr::OriginalName("SL_RPC_L2_BD_REG_SERVER_NOT_INITIALIZED")] SlRpcL2BdRegServerNotInitialized = 65539,
        /// <summary>
        /// Operation rejected for all BDs as client is not registered.
        /// 0x10004
        /// </summary>
        [pbr::OriginalName("SL_RPC_L2_BD_REG_CLIENT_NOT_REGISTERED")] SlRpcL2BdRegClientNotRegistered = 65540,
        /// <summary>
        /// Offset for L2 BD object errors. 0x11000
        /// </summary>
        [pbr::OriginalName("SL_L2_BD_REG_START_OFFSET")] SlL2BdRegStartOffset = 69632,
        /// <summary>
        /// BD cannot be registered with Layer-2 RIB. 0x11001
        /// </summary>
        [pbr::OriginalName("SL_L2_BD_REGISTRATION_ERR")] SlL2BdRegistrationErr = 69633,
        /// <summary>
        /// BD cannot be unregistered with Layer-2 RIB. 0x11002
        /// </summary>
        [pbr::OriginalName("SL_L2_BD_UNREGISTRATION_ERR")] SlL2BdUnregistrationErr = 69634,
        /// <summary>
        /// BD EOF Operation error. 0x11003;
        /// </summary>
        [pbr::OriginalName("SL_L2_BD_EOF_ERR")] SlL2BdEofErr = 69635,
        /// <summary>
        /// Name is too long in BD registration message. 0x11004
        /// </summary>
        [pbr::OriginalName("SL_L2_BD_REG_NAME_TOO_LONG")] SlL2BdRegNameTooLong = 69636,
        /// <summary>
        /// BD not found in BD registration message. 0x11005
        /// </summary>
        [pbr::OriginalName("SL_L2_BD_REG_BD_NOT_FOUND")] SlL2BdRegBdNotFound = 69637,
        /// <summary>
        /// Offset for L2 Route Operation errors. 0x12000
        /// </summary>
        [pbr::OriginalName("SL_RPC_L2_ROUTE_START_OFFSET")] SlRpcL2RouteStartOffset = 73728,
        /// <summary>
        /// Operation rejected for all L2 routes due to too many messages
        /// in the request. 0x12001
        /// </summary>
        [pbr::OriginalName("SL_RPC_L2_ROUTE_TOO_MANY_MSGS")] SlRpcL2RouteTooManyMsgs = 73729,
        /// <summary>
        /// Operation rejected for all L2 routes as server is not
        /// initialized. 0x12002
        /// </summary>
        [pbr::OriginalName("SL_RPC_L2_ROUTE_SERVER_NOT_INITIALIZED")] SlRpcL2RouteServerNotInitialized = 73730,
        /// <summary>
        /// Operation rejected for all L2 routes as client is not
        /// registered. 0x12003
        /// </summary>
        [pbr::OriginalName("SL_RPC_L2_ROUTE_CLIENT_NOT_REGISTERED")] SlRpcL2RouteClientNotRegistered = 73731,
        /// <summary>
        /// Offset for L2 object errors. 0x13000
        /// </summary>
        [pbr::OriginalName("SL_L2_ROUTE_START_OFFSET")] SlL2RouteStartOffset = 77824,
        /// <summary>
        /// L2 route operation rejected as BD name is missing. 0x13001
        /// </summary>
        [pbr::OriginalName("SL_L2_ROUTE_BD_NAME_MISSING")] SlL2RouteBdNameMissing = 77825,
        /// <summary>
        /// L2 route operation rejected as BD name is too long. 0x13002
        /// </summary>
        [pbr::OriginalName("SL_L2_ROUTE_BD_NAME_TOOLONG")] SlL2RouteBdNameToolong = 77826,
        /// <summary>
        /// L2 route operation rejected as BD not found. 0x13003
        /// </summary>
        [pbr::OriginalName("SL_L2_ROUTE_BD_NOT_FOUND")] SlL2RouteBdNotFound = 77827,
        /// <summary>
        /// L2 route operation rejected as BD is not registered. 0x13004
        /// </summary>
        [pbr::OriginalName("SL_L2_ROUTE_BD_NOT_REGISTERED")] SlL2RouteBdNotRegistered = 77828,
        /// <summary>
        /// L2 route operation rejected due to one or more invalid
        /// arguments. 0x13005
        /// </summary>
        [pbr::OriginalName("SL_L2_ROUTE_INVALID_ARGS")] SlL2RouteInvalidArgs = 77829,
        /// <summary>
        /// Offset for L2 Get Notification Operation errors. 0x14000
        /// </summary>
        [pbr::OriginalName("SL_RPC_L2_NOTIF_START_OFFSET")] SlRpcL2NotifStartOffset = 81921,
        /// <summary>
        /// L2 notification request rejected as server is not initialized.
        /// 0x14002
        /// </summary>
        [pbr::OriginalName("SL_RPC_L2_NOTIF_SERVER_NOT_INITIALIZED")] SlRpcL2NotifServerNotInitialized = 81922,
        /// <summary>
        /// L2 notification request rejected as client is not registered.
        /// 0x14003
        /// </summary>
        [pbr::OriginalName("SL_RPC_L2_NOTIF_CLIENT_NOT_REGISTERED")] SlRpcL2NotifClientNotRegistered = 81923,
        /// <summary>
        /// L2 notification enable error. 0x14004
        /// </summary>
        [pbr::OriginalName("SL_RPC_L2_NOTIF_ENABLE_ERR")] SlRpcL2NotifEnableErr = 81924,
        /// <summary>
        /// L2 notification disable error. 0x14005
        /// </summary>
        [pbr::OriginalName("SL_RPC_L2_NOTIF_DISABLE_ERR")] SlRpcL2NotifDisableErr = 81925,
        /// <summary>
        /// L2 notification EOF error. 0x14006
        /// </summary>
        [pbr::OriginalName("SL_RPC_L2_NOTIF_EOF_ERR")] SlRpcL2NotifEofErr = 81926,
        /// <summary>
        /// L2 notification request rejected as BD name is missing. 0x14007
        /// </summary>
        [pbr::OriginalName("SL_RPC_L2_NOTIF_BD_NAME_MISSING")] SlRpcL2NotifBdNameMissing = 81927,
        /// <summary>
        /// L2 notification request rejected as BD name is too long.
        /// 0x14008
        /// </summary>
        [pbr::OriginalName("SL_RPC_L2_NOTIF_BD_NAME_TOOLONG")] SlRpcL2NotifBdNameToolong = 81928,
        /// <summary>
        /// L2 notification request rejected as BD not found. 0x14009
        /// </summary>
        [pbr::OriginalName("SL_RPC_L2_NOTIF_BD_NOT_FOUND")] SlRpcL2NotifBdNotFound = 81929,
        /// <summary>
        /// Offset for Internal errors. 0x100000
        /// </summary>
        [pbr::OriginalName("SL_INTERNAL_START_OFFSET")] SlInternalStartOffset = 1048576,
      }

    }
    #endregion

  }

  /// <summary>
  /// Interface info.
  /// </summary>
  public sealed partial class SLInterface : pb::IMessage<SLInterface>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SLInterface> _parser = new pb::MessageParser<SLInterface>(() => new SLInterface());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SLInterface> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ServiceLayer.SlCommonTypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SLInterface() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SLInterface(SLInterface other) : this() {
      switch (other.InterfaceCase) {
        case InterfaceOneofCase.Name:
          Name = other.Name;
          break;
        case InterfaceOneofCase.Handle:
          Handle = other.Handle;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SLInterface Clone() {
      return new SLInterface(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    /// <summary>
    /// Interface name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return interfaceCase_ == InterfaceOneofCase.Name ? (string) interface_ : ""; }
      set {
        interface_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        interfaceCase_ = InterfaceOneofCase.Name;
      }
    }

    /// <summary>Field number for the "Handle" field.</summary>
    public const int HandleFieldNumber = 2;
    /// <summary>
    /// Interface handle. Can be retrieved from Interface API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Handle {
      get { return interfaceCase_ == InterfaceOneofCase.Handle ? (uint) interface_ : 0; }
      set {
        interface_ = value;
        interfaceCase_ = InterfaceOneofCase.Handle;
      }
    }

    private object interface_;
    /// <summary>Enum of possible cases for the "Interface" oneof.</summary>
    public enum InterfaceOneofCase {
      None = 0,
      Name = 1,
      Handle = 2,
    }
    private InterfaceOneofCase interfaceCase_ = InterfaceOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InterfaceOneofCase InterfaceCase {
      get { return interfaceCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInterface() {
      interfaceCase_ = InterfaceOneofCase.None;
      interface_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SLInterface);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SLInterface other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Handle != other.Handle) return false;
      if (InterfaceCase != other.InterfaceCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (interfaceCase_ == InterfaceOneofCase.Name) hash ^= Name.GetHashCode();
      if (interfaceCase_ == InterfaceOneofCase.Handle) hash ^= Handle.GetHashCode();
      hash ^= (int) interfaceCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (interfaceCase_ == InterfaceOneofCase.Name) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (interfaceCase_ == InterfaceOneofCase.Handle) {
        output.WriteRawTag(16);
        output.WriteUInt32(Handle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (interfaceCase_ == InterfaceOneofCase.Name) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (interfaceCase_ == InterfaceOneofCase.Handle) {
        output.WriteRawTag(16);
        output.WriteUInt32(Handle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (interfaceCase_ == InterfaceOneofCase.Name) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (interfaceCase_ == InterfaceOneofCase.Handle) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Handle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SLInterface other) {
      if (other == null) {
        return;
      }
      switch (other.InterfaceCase) {
        case InterfaceOneofCase.Name:
          Name = other.Name;
          break;
        case InterfaceOneofCase.Handle:
          Handle = other.Handle;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Handle = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Handle = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// One of IPv4 or IPv6 addresses.
  /// </summary>
  public sealed partial class SLIpAddress : pb::IMessage<SLIpAddress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SLIpAddress> _parser = new pb::MessageParser<SLIpAddress>(() => new SLIpAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SLIpAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ServiceLayer.SlCommonTypesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SLIpAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SLIpAddress(SLIpAddress other) : this() {
      switch (other.AddressCase) {
        case AddressOneofCase.V4Address:
          V4Address = other.V4Address;
          break;
        case AddressOneofCase.V6Address:
          V6Address = other.V6Address;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SLIpAddress Clone() {
      return new SLIpAddress(this);
    }

    /// <summary>Field number for the "V4Address" field.</summary>
    public const int V4AddressFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint V4Address {
      get { return addressCase_ == AddressOneofCase.V4Address ? (uint) address_ : 0; }
      set {
        address_ = value;
        addressCase_ = AddressOneofCase.V4Address;
      }
    }

    /// <summary>Field number for the "V6Address" field.</summary>
    public const int V6AddressFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString V6Address {
      get { return addressCase_ == AddressOneofCase.V6Address ? (pb::ByteString) address_ : pb::ByteString.Empty; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        addressCase_ = AddressOneofCase.V6Address;
      }
    }

    private object address_;
    /// <summary>Enum of possible cases for the "Address" oneof.</summary>
    public enum AddressOneofCase {
      None = 0,
      V4Address = 1,
      V6Address = 2,
    }
    private AddressOneofCase addressCase_ = AddressOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AddressOneofCase AddressCase {
      get { return addressCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAddress() {
      addressCase_ = AddressOneofCase.None;
      address_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SLIpAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SLIpAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (V4Address != other.V4Address) return false;
      if (V6Address != other.V6Address) return false;
      if (AddressCase != other.AddressCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (addressCase_ == AddressOneofCase.V4Address) hash ^= V4Address.GetHashCode();
      if (addressCase_ == AddressOneofCase.V6Address) hash ^= V6Address.GetHashCode();
      hash ^= (int) addressCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (addressCase_ == AddressOneofCase.V4Address) {
        output.WriteRawTag(8);
        output.WriteUInt32(V4Address);
      }
      if (addressCase_ == AddressOneofCase.V6Address) {
        output.WriteRawTag(18);
        output.WriteBytes(V6Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (addressCase_ == AddressOneofCase.V4Address) {
        output.WriteRawTag(8);
        output.WriteUInt32(V4Address);
      }
      if (addressCase_ == AddressOneofCase.V6Address) {
        output.WriteRawTag(18);
        output.WriteBytes(V6Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (addressCase_ == AddressOneofCase.V4Address) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(V4Address);
      }
      if (addressCase_ == AddressOneofCase.V6Address) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(V6Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SLIpAddress other) {
      if (other == null) {
        return;
      }
      switch (other.AddressCase) {
        case AddressOneofCase.V4Address:
          V4Address = other.V4Address;
          break;
        case AddressOneofCase.V6Address:
          V6Address = other.V6Address;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            V4Address = input.ReadUInt32();
            break;
          }
          case 18: {
            V6Address = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            V4Address = input.ReadUInt32();
            break;
          }
          case 18: {
            V6Address = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
