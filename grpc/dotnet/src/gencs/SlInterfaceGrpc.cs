// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sl_interface.proto
// </auto-generated>
// Original file comments:
// @file
// @brief Server RPC proto file for Interface handles.
// Declares an RPC that gets interface details.
// ----------------------------------------------------------------
//  Copyright (c) 2016 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace ServiceLayer {
  /// <summary>
  ///@defgroup Interfaces
  ///@brief Interface service definitions.
  ///Defines the RPC for getting interface status(es).
  ///@{
  /// </summary>
  public static partial class SLInterfaceOper
  {
    static readonly string __ServiceName = "service_layer.SLInterfaceOper";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLInterfaceNotifMsg> __Marshaller_service_layer_SLInterfaceNotifMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLInterfaceNotifMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLInterfaceNotif> __Marshaller_service_layer_SLInterfaceNotif = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLInterfaceNotif.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLInterfaceNotifMsg, global::ServiceLayer.SLInterfaceNotif> __Method_SLInterfaceNotifStream = new grpc::Method<global::ServiceLayer.SLInterfaceNotifMsg, global::ServiceLayer.SLInterfaceNotif>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "SLInterfaceNotifStream",
        __Marshaller_service_layer_SLInterfaceNotifMsg,
        __Marshaller_service_layer_SLInterfaceNotif);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ServiceLayer.SlInterfaceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SLInterfaceOper</summary>
    [grpc::BindServiceMethod(typeof(SLInterfaceOper), "BindService")]
    public abstract partial class SLInterfaceOperBase
    {
      /// <summary>
      /// This call is used to get a stream of interface notifications.
      /// The caller must maintain the GRPC channel as long as
      /// there is interest in interface notifications.
      /// This call can be used to get "push" notifications for interface info.
      /// It is advised that the caller register for notifications before any
      /// interfaces are used to avoid any loss of notifications.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task SLInterfaceNotifStream(grpc::IAsyncStreamReader<global::ServiceLayer.SLInterfaceNotifMsg> requestStream, grpc::IServerStreamWriter<global::ServiceLayer.SLInterfaceNotif> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SLInterfaceOper</summary>
    public partial class SLInterfaceOperClient : grpc::ClientBase<SLInterfaceOperClient>
    {
      /// <summary>Creates a new client for SLInterfaceOper</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SLInterfaceOperClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SLInterfaceOper that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SLInterfaceOperClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SLInterfaceOperClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SLInterfaceOperClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// This call is used to get a stream of interface notifications.
      /// The caller must maintain the GRPC channel as long as
      /// there is interest in interface notifications.
      /// This call can be used to get "push" notifications for interface info.
      /// It is advised that the caller register for notifications before any
      /// interfaces are used to avoid any loss of notifications.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::ServiceLayer.SLInterfaceNotifMsg, global::ServiceLayer.SLInterfaceNotif> SLInterfaceNotifStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLInterfaceNotifStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This call is used to get a stream of interface notifications.
      /// The caller must maintain the GRPC channel as long as
      /// there is interest in interface notifications.
      /// This call can be used to get "push" notifications for interface info.
      /// It is advised that the caller register for notifications before any
      /// interfaces are used to avoid any loss of notifications.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::ServiceLayer.SLInterfaceNotifMsg, global::ServiceLayer.SLInterfaceNotif> SLInterfaceNotifStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_SLInterfaceNotifStream, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override SLInterfaceOperClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SLInterfaceOperClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(SLInterfaceOperBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SLInterfaceNotifStream, serviceImpl.SLInterfaceNotifStream).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SLInterfaceOperBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SLInterfaceNotifStream, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::ServiceLayer.SLInterfaceNotifMsg, global::ServiceLayer.SLInterfaceNotif>(serviceImpl.SLInterfaceNotifStream));
    }

  }
}
#endregion
