/*
 * Copyright (c) 2023 by cisco Systems, Inc. All rights reserved.
 */
// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sl_interface.proto
// </auto-generated>
// Original file comments:
// @file
// @brief Server RPC proto file for Interface handles.
// Declares an RPC that gets interface details.
// ----------------------------------------------------------------
//  Copyright (c) 2016 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace ServiceLayer {
  /// <summary>
  ///@defgroup Interfaces
  ///@brief Interface service definitions.
  ///Defines the RPC for getting interface status(es).
  ///@{
  /// </summary>
  public static partial class SLInterfaceOper
  {
    static readonly string __ServiceName = "service_layer.SLInterfaceOper";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLInterfaceGlobalsRegMsg> __Marshaller_service_layer_SLInterfaceGlobalsRegMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLInterfaceGlobalsRegMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLInterfaceGlobalsRegMsgRsp> __Marshaller_service_layer_SLInterfaceGlobalsRegMsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLInterfaceGlobalsRegMsgRsp.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLInterfaceGlobalsGetMsg> __Marshaller_service_layer_SLInterfaceGlobalsGetMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLInterfaceGlobalsGetMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLInterfaceGlobalsGetMsgRsp> __Marshaller_service_layer_SLInterfaceGlobalsGetMsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLInterfaceGlobalsGetMsgRsp.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLInterfaceGlobalsGetStatsMsgRsp> __Marshaller_service_layer_SLInterfaceGlobalsGetStatsMsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLInterfaceGlobalsGetStatsMsgRsp.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLInterfaceGetMsg> __Marshaller_service_layer_SLInterfaceGetMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLInterfaceGetMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLInterfaceGetMsgRsp> __Marshaller_service_layer_SLInterfaceGetMsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLInterfaceGetMsgRsp.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLInterfaceGetNotifMsg> __Marshaller_service_layer_SLInterfaceGetNotifMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLInterfaceGetNotifMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLInterfaceNotif> __Marshaller_service_layer_SLInterfaceNotif = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLInterfaceNotif.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLInterfaceNotifMsg> __Marshaller_service_layer_SLInterfaceNotifMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLInterfaceNotifMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLInterfaceNotifMsgRsp> __Marshaller_service_layer_SLInterfaceNotifMsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLInterfaceNotifMsgRsp.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLInterfaceGlobalsRegMsg, global::ServiceLayer.SLInterfaceGlobalsRegMsgRsp> __Method_SLInterfaceGlobalsRegOp = new grpc::Method<global::ServiceLayer.SLInterfaceGlobalsRegMsg, global::ServiceLayer.SLInterfaceGlobalsRegMsgRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLInterfaceGlobalsRegOp",
        __Marshaller_service_layer_SLInterfaceGlobalsRegMsg,
        __Marshaller_service_layer_SLInterfaceGlobalsRegMsgRsp);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLInterfaceGlobalsGetMsg, global::ServiceLayer.SLInterfaceGlobalsGetMsgRsp> __Method_SLInterfaceGlobalsGet = new grpc::Method<global::ServiceLayer.SLInterfaceGlobalsGetMsg, global::ServiceLayer.SLInterfaceGlobalsGetMsgRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLInterfaceGlobalsGet",
        __Marshaller_service_layer_SLInterfaceGlobalsGetMsg,
        __Marshaller_service_layer_SLInterfaceGlobalsGetMsgRsp);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLInterfaceGlobalsGetMsg, global::ServiceLayer.SLInterfaceGlobalsGetStatsMsgRsp> __Method_SLInterfaceGlobalsGetStats = new grpc::Method<global::ServiceLayer.SLInterfaceGlobalsGetMsg, global::ServiceLayer.SLInterfaceGlobalsGetStatsMsgRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLInterfaceGlobalsGetStats",
        __Marshaller_service_layer_SLInterfaceGlobalsGetMsg,
        __Marshaller_service_layer_SLInterfaceGlobalsGetStatsMsgRsp);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLInterfaceGetMsg, global::ServiceLayer.SLInterfaceGetMsgRsp> __Method_SLInterfaceGet = new grpc::Method<global::ServiceLayer.SLInterfaceGetMsg, global::ServiceLayer.SLInterfaceGetMsgRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLInterfaceGet",
        __Marshaller_service_layer_SLInterfaceGetMsg,
        __Marshaller_service_layer_SLInterfaceGetMsgRsp);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLInterfaceGetNotifMsg, global::ServiceLayer.SLInterfaceNotif> __Method_SLInterfaceGetNotifStream = new grpc::Method<global::ServiceLayer.SLInterfaceGetNotifMsg, global::ServiceLayer.SLInterfaceNotif>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SLInterfaceGetNotifStream",
        __Marshaller_service_layer_SLInterfaceGetNotifMsg,
        __Marshaller_service_layer_SLInterfaceNotif);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLInterfaceNotifMsg, global::ServiceLayer.SLInterfaceNotifMsgRsp> __Method_SLInterfaceNotifOp = new grpc::Method<global::ServiceLayer.SLInterfaceNotifMsg, global::ServiceLayer.SLInterfaceNotifMsgRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLInterfaceNotifOp",
        __Marshaller_service_layer_SLInterfaceNotifMsg,
        __Marshaller_service_layer_SLInterfaceNotifMsgRsp);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ServiceLayer.SlInterfaceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SLInterfaceOper</summary>
    [grpc::BindServiceMethod(typeof(SLInterfaceOper), "BindService")]
    public abstract partial class SLInterfaceOperBase
    {
      /// <summary>
      /// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_REGISTER:
      ///     Global Interface registration.
      ///     A client Must Register BEFORE interfaces can be modified/queried.
      ///
      /// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_UNREGISTER:
      ///     Global Interface un-registration.
      ///     This call is used to end all interface notifications.
      ///     This call cleans up all interface notifications previously requested.
      ///
      /// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_EOF:
      ///     Interface End Of File.
      ///     After Registration, the client is expected to send an EOF
      ///     message to convey the end of replay of the client's known objects.
      ///     This is especially useful under certain restart scenarios when the
      ///     client and the server are trying to synchronize their interfaces.
      ///
      /// The SLInterfaceGlobalsRegMsg operations can be used by the client to synchronize
      /// interface registrations with the server. When the client re-registers with the
      /// server using SL_REGOP_REGISTER, server marks all interface registrations as stale.
      /// Client can then reprogram interface registrations. When the client sends
      /// SL_REGOP_EOF, any interface registrations not reprogrammed by the client are
      /// removed from the device.
      ///
      /// The client must perform all operations (SLInterfaceGlobalsRegMsg,
      /// interface registration operations) from a single execution context.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLInterfaceGlobalsRegMsgRsp> SLInterfaceGlobalsRegOp(global::ServiceLayer.SLInterfaceGlobalsRegMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Used to retrieve global Interface info from the server.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLInterfaceGlobalsGetMsgRsp> SLInterfaceGlobalsGet(global::ServiceLayer.SLInterfaceGlobalsGetMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Used to retrieve global Interface stats from the server.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLInterfaceGlobalsGetStatsMsgRsp> SLInterfaceGlobalsGetStats(global::ServiceLayer.SLInterfaceGlobalsGetMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieve interface attributes and state.
      /// This call can be used to "poll" the current state of interfaces.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLInterfaceGetMsgRsp> SLInterfaceGet(global::ServiceLayer.SLInterfaceGetMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This call is used to get a stream of interface notifications.
      /// The caller must maintain the GRPC channel as long as
      /// there is interest in interface notifications.
      /// This call can be used to get "push" notifications for interface info.
      /// It is advised that the caller register for notifications before any
      /// interfaces are used to avoid any loss of notifications.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task SLInterfaceGetNotifStream(global::ServiceLayer.SLInterfaceGetNotifMsg request, grpc::IServerStreamWriter<global::ServiceLayer.SLInterfaceNotif> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Used to enable/disable event notifications for a certain interface.
      /// By default, all interface events are disabled. The user must enable
      /// notifications for the interested interfaces.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLInterfaceNotifMsgRsp> SLInterfaceNotifOp(global::ServiceLayer.SLInterfaceNotifMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SLInterfaceOper</summary>
    public partial class SLInterfaceOperClient : grpc::ClientBase<SLInterfaceOperClient>
    {
      /// <summary>Creates a new client for SLInterfaceOper</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SLInterfaceOperClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SLInterfaceOper that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SLInterfaceOperClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SLInterfaceOperClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SLInterfaceOperClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_REGISTER:
      ///     Global Interface registration.
      ///     A client Must Register BEFORE interfaces can be modified/queried.
      ///
      /// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_UNREGISTER:
      ///     Global Interface un-registration.
      ///     This call is used to end all interface notifications.
      ///     This call cleans up all interface notifications previously requested.
      ///
      /// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_EOF:
      ///     Interface End Of File.
      ///     After Registration, the client is expected to send an EOF
      ///     message to convey the end of replay of the client's known objects.
      ///     This is especially useful under certain restart scenarios when the
      ///     client and the server are trying to synchronize their interfaces.
      ///
      /// The SLInterfaceGlobalsRegMsg operations can be used by the client to synchronize
      /// interface registrations with the server. When the client re-registers with the
      /// server using SL_REGOP_REGISTER, server marks all interface registrations as stale.
      /// Client can then reprogram interface registrations. When the client sends
      /// SL_REGOP_EOF, any interface registrations not reprogrammed by the client are
      /// removed from the device.
      ///
      /// The client must perform all operations (SLInterfaceGlobalsRegMsg,
      /// interface registration operations) from a single execution context.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLInterfaceGlobalsRegMsgRsp SLInterfaceGlobalsRegOp(global::ServiceLayer.SLInterfaceGlobalsRegMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLInterfaceGlobalsRegOp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_REGISTER:
      ///     Global Interface registration.
      ///     A client Must Register BEFORE interfaces can be modified/queried.
      ///
      /// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_UNREGISTER:
      ///     Global Interface un-registration.
      ///     This call is used to end all interface notifications.
      ///     This call cleans up all interface notifications previously requested.
      ///
      /// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_EOF:
      ///     Interface End Of File.
      ///     After Registration, the client is expected to send an EOF
      ///     message to convey the end of replay of the client's known objects.
      ///     This is especially useful under certain restart scenarios when the
      ///     client and the server are trying to synchronize their interfaces.
      ///
      /// The SLInterfaceGlobalsRegMsg operations can be used by the client to synchronize
      /// interface registrations with the server. When the client re-registers with the
      /// server using SL_REGOP_REGISTER, server marks all interface registrations as stale.
      /// Client can then reprogram interface registrations. When the client sends
      /// SL_REGOP_EOF, any interface registrations not reprogrammed by the client are
      /// removed from the device.
      ///
      /// The client must perform all operations (SLInterfaceGlobalsRegMsg,
      /// interface registration operations) from a single execution context.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLInterfaceGlobalsRegMsgRsp SLInterfaceGlobalsRegOp(global::ServiceLayer.SLInterfaceGlobalsRegMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLInterfaceGlobalsRegOp, null, options, request);
      }
      /// <summary>
      /// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_REGISTER:
      ///     Global Interface registration.
      ///     A client Must Register BEFORE interfaces can be modified/queried.
      ///
      /// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_UNREGISTER:
      ///     Global Interface un-registration.
      ///     This call is used to end all interface notifications.
      ///     This call cleans up all interface notifications previously requested.
      ///
      /// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_EOF:
      ///     Interface End Of File.
      ///     After Registration, the client is expected to send an EOF
      ///     message to convey the end of replay of the client's known objects.
      ///     This is especially useful under certain restart scenarios when the
      ///     client and the server are trying to synchronize their interfaces.
      ///
      /// The SLInterfaceGlobalsRegMsg operations can be used by the client to synchronize
      /// interface registrations with the server. When the client re-registers with the
      /// server using SL_REGOP_REGISTER, server marks all interface registrations as stale.
      /// Client can then reprogram interface registrations. When the client sends
      /// SL_REGOP_EOF, any interface registrations not reprogrammed by the client are
      /// removed from the device.
      ///
      /// The client must perform all operations (SLInterfaceGlobalsRegMsg,
      /// interface registration operations) from a single execution context.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLInterfaceGlobalsRegMsgRsp> SLInterfaceGlobalsRegOpAsync(global::ServiceLayer.SLInterfaceGlobalsRegMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLInterfaceGlobalsRegOpAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_REGISTER:
      ///     Global Interface registration.
      ///     A client Must Register BEFORE interfaces can be modified/queried.
      ///
      /// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_UNREGISTER:
      ///     Global Interface un-registration.
      ///     This call is used to end all interface notifications.
      ///     This call cleans up all interface notifications previously requested.
      ///
      /// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_EOF:
      ///     Interface End Of File.
      ///     After Registration, the client is expected to send an EOF
      ///     message to convey the end of replay of the client's known objects.
      ///     This is especially useful under certain restart scenarios when the
      ///     client and the server are trying to synchronize their interfaces.
      ///
      /// The SLInterfaceGlobalsRegMsg operations can be used by the client to synchronize
      /// interface registrations with the server. When the client re-registers with the
      /// server using SL_REGOP_REGISTER, server marks all interface registrations as stale.
      /// Client can then reprogram interface registrations. When the client sends
      /// SL_REGOP_EOF, any interface registrations not reprogrammed by the client are
      /// removed from the device.
      ///
      /// The client must perform all operations (SLInterfaceGlobalsRegMsg,
      /// interface registration operations) from a single execution context.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLInterfaceGlobalsRegMsgRsp> SLInterfaceGlobalsRegOpAsync(global::ServiceLayer.SLInterfaceGlobalsRegMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLInterfaceGlobalsRegOp, null, options, request);
      }
      /// <summary>
      /// Used to retrieve global Interface info from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLInterfaceGlobalsGetMsgRsp SLInterfaceGlobalsGet(global::ServiceLayer.SLInterfaceGlobalsGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLInterfaceGlobalsGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to retrieve global Interface info from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLInterfaceGlobalsGetMsgRsp SLInterfaceGlobalsGet(global::ServiceLayer.SLInterfaceGlobalsGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLInterfaceGlobalsGet, null, options, request);
      }
      /// <summary>
      /// Used to retrieve global Interface info from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLInterfaceGlobalsGetMsgRsp> SLInterfaceGlobalsGetAsync(global::ServiceLayer.SLInterfaceGlobalsGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLInterfaceGlobalsGetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to retrieve global Interface info from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLInterfaceGlobalsGetMsgRsp> SLInterfaceGlobalsGetAsync(global::ServiceLayer.SLInterfaceGlobalsGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLInterfaceGlobalsGet, null, options, request);
      }
      /// <summary>
      /// Used to retrieve global Interface stats from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLInterfaceGlobalsGetStatsMsgRsp SLInterfaceGlobalsGetStats(global::ServiceLayer.SLInterfaceGlobalsGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLInterfaceGlobalsGetStats(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to retrieve global Interface stats from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLInterfaceGlobalsGetStatsMsgRsp SLInterfaceGlobalsGetStats(global::ServiceLayer.SLInterfaceGlobalsGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLInterfaceGlobalsGetStats, null, options, request);
      }
      /// <summary>
      /// Used to retrieve global Interface stats from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLInterfaceGlobalsGetStatsMsgRsp> SLInterfaceGlobalsGetStatsAsync(global::ServiceLayer.SLInterfaceGlobalsGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLInterfaceGlobalsGetStatsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to retrieve global Interface stats from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLInterfaceGlobalsGetStatsMsgRsp> SLInterfaceGlobalsGetStatsAsync(global::ServiceLayer.SLInterfaceGlobalsGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLInterfaceGlobalsGetStats, null, options, request);
      }
      /// <summary>
      /// Retrieve interface attributes and state.
      /// This call can be used to "poll" the current state of interfaces.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLInterfaceGetMsgRsp SLInterfaceGet(global::ServiceLayer.SLInterfaceGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLInterfaceGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve interface attributes and state.
      /// This call can be used to "poll" the current state of interfaces.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLInterfaceGetMsgRsp SLInterfaceGet(global::ServiceLayer.SLInterfaceGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLInterfaceGet, null, options, request);
      }
      /// <summary>
      /// Retrieve interface attributes and state.
      /// This call can be used to "poll" the current state of interfaces.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLInterfaceGetMsgRsp> SLInterfaceGetAsync(global::ServiceLayer.SLInterfaceGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLInterfaceGetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve interface attributes and state.
      /// This call can be used to "poll" the current state of interfaces.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLInterfaceGetMsgRsp> SLInterfaceGetAsync(global::ServiceLayer.SLInterfaceGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLInterfaceGet, null, options, request);
      }
      /// <summary>
      /// This call is used to get a stream of interface notifications.
      /// The caller must maintain the GRPC channel as long as
      /// there is interest in interface notifications.
      /// This call can be used to get "push" notifications for interface info.
      /// It is advised that the caller register for notifications before any
      /// interfaces are used to avoid any loss of notifications.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::ServiceLayer.SLInterfaceNotif> SLInterfaceGetNotifStream(global::ServiceLayer.SLInterfaceGetNotifMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLInterfaceGetNotifStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This call is used to get a stream of interface notifications.
      /// The caller must maintain the GRPC channel as long as
      /// there is interest in interface notifications.
      /// This call can be used to get "push" notifications for interface info.
      /// It is advised that the caller register for notifications before any
      /// interfaces are used to avoid any loss of notifications.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::ServiceLayer.SLInterfaceNotif> SLInterfaceGetNotifStream(global::ServiceLayer.SLInterfaceGetNotifMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SLInterfaceGetNotifStream, null, options, request);
      }
      /// <summary>
      /// Used to enable/disable event notifications for a certain interface.
      /// By default, all interface events are disabled. The user must enable
      /// notifications for the interested interfaces.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLInterfaceNotifMsgRsp SLInterfaceNotifOp(global::ServiceLayer.SLInterfaceNotifMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLInterfaceNotifOp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to enable/disable event notifications for a certain interface.
      /// By default, all interface events are disabled. The user must enable
      /// notifications for the interested interfaces.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLInterfaceNotifMsgRsp SLInterfaceNotifOp(global::ServiceLayer.SLInterfaceNotifMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLInterfaceNotifOp, null, options, request);
      }
      /// <summary>
      /// Used to enable/disable event notifications for a certain interface.
      /// By default, all interface events are disabled. The user must enable
      /// notifications for the interested interfaces.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLInterfaceNotifMsgRsp> SLInterfaceNotifOpAsync(global::ServiceLayer.SLInterfaceNotifMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLInterfaceNotifOpAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to enable/disable event notifications for a certain interface.
      /// By default, all interface events are disabled. The user must enable
      /// notifications for the interested interfaces.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLInterfaceNotifMsgRsp> SLInterfaceNotifOpAsync(global::ServiceLayer.SLInterfaceNotifMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLInterfaceNotifOp, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override SLInterfaceOperClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SLInterfaceOperClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(SLInterfaceOperBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SLInterfaceGlobalsRegOp, serviceImpl.SLInterfaceGlobalsRegOp)
          .AddMethod(__Method_SLInterfaceGlobalsGet, serviceImpl.SLInterfaceGlobalsGet)
          .AddMethod(__Method_SLInterfaceGlobalsGetStats, serviceImpl.SLInterfaceGlobalsGetStats)
          .AddMethod(__Method_SLInterfaceGet, serviceImpl.SLInterfaceGet)
          .AddMethod(__Method_SLInterfaceGetNotifStream, serviceImpl.SLInterfaceGetNotifStream)
          .AddMethod(__Method_SLInterfaceNotifOp, serviceImpl.SLInterfaceNotifOp).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SLInterfaceOperBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SLInterfaceGlobalsRegOp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLInterfaceGlobalsRegMsg, global::ServiceLayer.SLInterfaceGlobalsRegMsgRsp>(serviceImpl.SLInterfaceGlobalsRegOp));
      serviceBinder.AddMethod(__Method_SLInterfaceGlobalsGet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLInterfaceGlobalsGetMsg, global::ServiceLayer.SLInterfaceGlobalsGetMsgRsp>(serviceImpl.SLInterfaceGlobalsGet));
      serviceBinder.AddMethod(__Method_SLInterfaceGlobalsGetStats, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLInterfaceGlobalsGetMsg, global::ServiceLayer.SLInterfaceGlobalsGetStatsMsgRsp>(serviceImpl.SLInterfaceGlobalsGetStats));
      serviceBinder.AddMethod(__Method_SLInterfaceGet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLInterfaceGetMsg, global::ServiceLayer.SLInterfaceGetMsgRsp>(serviceImpl.SLInterfaceGet));
      serviceBinder.AddMethod(__Method_SLInterfaceGetNotifStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::ServiceLayer.SLInterfaceGetNotifMsg, global::ServiceLayer.SLInterfaceNotif>(serviceImpl.SLInterfaceGetNotifStream));
      serviceBinder.AddMethod(__Method_SLInterfaceNotifOp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLInterfaceNotifMsg, global::ServiceLayer.SLInterfaceNotifMsgRsp>(serviceImpl.SLInterfaceNotifOp));
    }

  }
}
#endregion
