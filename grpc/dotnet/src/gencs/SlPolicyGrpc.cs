// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sl_policy.proto
// </auto-generated>
// Original file comments:
// @file 
// @brief Client RPC proto file for Policy RPCs. 
// Declares calls for adding, replacing, deleting the policies
// and apply, unapply policies from interfaces.
// 
// ----------------------------------------------------------------
//  Copyright (c) 2024-2025 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace ServiceLayer {
  /// <summary>
  /// @defgroup SLPolicy
  /// @ingroup Policy
  /// Used for:
  /// - Policy creation, replacement, and deletion
  /// - Rule addition, and deletion from Policy
  /// - Apply and Un-apply Policy from Interfaces
  ///
  /// Defines the RPC for operations on Policy, Interface and get requests.
  /// @{ 
  /// </summary>
  public static partial class SLPolicy
  {
    static readonly string __ServiceName = "service_layer.SLPolicy";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLPolicyOpMsg> __Marshaller_service_layer_SLPolicyOpMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLPolicyOpMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLPolicyOpRsp> __Marshaller_service_layer_SLPolicyOpRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLPolicyOpRsp.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLPolicyGetMsg> __Marshaller_service_layer_SLPolicyGetMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLPolicyGetMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLPolicyGetMsgRsp> __Marshaller_service_layer_SLPolicyGetMsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLPolicyGetMsgRsp.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLPolicyGlobalGetMsg> __Marshaller_service_layer_SLPolicyGlobalGetMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLPolicyGlobalGetMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLPolicyGlobalGetMsgRsp> __Marshaller_service_layer_SLPolicyGlobalGetMsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLPolicyGlobalGetMsgRsp.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLPolicyOpMsg, global::ServiceLayer.SLPolicyOpRsp> __Method_SLPolicyOp = new grpc::Method<global::ServiceLayer.SLPolicyOpMsg, global::ServiceLayer.SLPolicyOpRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLPolicyOp",
        __Marshaller_service_layer_SLPolicyOpMsg,
        __Marshaller_service_layer_SLPolicyOpRsp);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLPolicyGetMsg, global::ServiceLayer.SLPolicyGetMsgRsp> __Method_SLPolicyGet = new grpc::Method<global::ServiceLayer.SLPolicyGetMsg, global::ServiceLayer.SLPolicyGetMsgRsp>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SLPolicyGet",
        __Marshaller_service_layer_SLPolicyGetMsg,
        __Marshaller_service_layer_SLPolicyGetMsgRsp);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLPolicyGlobalGetMsg, global::ServiceLayer.SLPolicyGlobalGetMsgRsp> __Method_SLPolicyGlobalGet = new grpc::Method<global::ServiceLayer.SLPolicyGlobalGetMsg, global::ServiceLayer.SLPolicyGlobalGetMsgRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLPolicyGlobalGet",
        __Marshaller_service_layer_SLPolicyGlobalGetMsg,
        __Marshaller_service_layer_SLPolicyGlobalGetMsgRsp);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ServiceLayer.SlPolicyReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SLPolicy</summary>
    [grpc::BindServiceMethod(typeof(SLPolicy), "BindService")]
    public abstract partial class SLPolicyBase
    {
      /// <summary>
      /// On client restart or RPC disconnects, the client has the
      /// to reconcile its new state with the state on the device
      /// by replaying the difference.
      /// 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLPolicyOpRsp> SLPolicyOp(global::ServiceLayer.SLPolicyOpMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieve all Policies and its rules and the interfaces where the  
      /// policy is applied from the server
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task SLPolicyGet(global::ServiceLayer.SLPolicyGetMsg request, grpc::IServerStreamWriter<global::ServiceLayer.SLPolicyGetMsgRsp> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieve Global Policy capabilities 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLPolicyGlobalGetMsgRsp> SLPolicyGlobalGet(global::ServiceLayer.SLPolicyGlobalGetMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SLPolicy</summary>
    public partial class SLPolicyClient : grpc::ClientBase<SLPolicyClient>
    {
      /// <summary>Creates a new client for SLPolicy</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SLPolicyClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SLPolicy that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SLPolicyClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SLPolicyClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SLPolicyClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// On client restart or RPC disconnects, the client has the
      /// to reconcile its new state with the state on the device
      /// by replaying the difference.
      /// 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLPolicyOpRsp SLPolicyOp(global::ServiceLayer.SLPolicyOpMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLPolicyOp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// On client restart or RPC disconnects, the client has the
      /// to reconcile its new state with the state on the device
      /// by replaying the difference.
      /// 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLPolicyOpRsp SLPolicyOp(global::ServiceLayer.SLPolicyOpMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLPolicyOp, null, options, request);
      }
      /// <summary>
      /// On client restart or RPC disconnects, the client has the
      /// to reconcile its new state with the state on the device
      /// by replaying the difference.
      /// 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLPolicyOpRsp> SLPolicyOpAsync(global::ServiceLayer.SLPolicyOpMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLPolicyOpAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// On client restart or RPC disconnects, the client has the
      /// to reconcile its new state with the state on the device
      /// by replaying the difference.
      /// 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLPolicyOpRsp> SLPolicyOpAsync(global::ServiceLayer.SLPolicyOpMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLPolicyOp, null, options, request);
      }
      /// <summary>
      /// Retrieve all Policies and its rules and the interfaces where the  
      /// policy is applied from the server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::ServiceLayer.SLPolicyGetMsgRsp> SLPolicyGet(global::ServiceLayer.SLPolicyGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLPolicyGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve all Policies and its rules and the interfaces where the  
      /// policy is applied from the server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::ServiceLayer.SLPolicyGetMsgRsp> SLPolicyGet(global::ServiceLayer.SLPolicyGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SLPolicyGet, null, options, request);
      }
      /// <summary>
      /// Retrieve Global Policy capabilities 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLPolicyGlobalGetMsgRsp SLPolicyGlobalGet(global::ServiceLayer.SLPolicyGlobalGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLPolicyGlobalGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve Global Policy capabilities 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLPolicyGlobalGetMsgRsp SLPolicyGlobalGet(global::ServiceLayer.SLPolicyGlobalGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLPolicyGlobalGet, null, options, request);
      }
      /// <summary>
      /// Retrieve Global Policy capabilities 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLPolicyGlobalGetMsgRsp> SLPolicyGlobalGetAsync(global::ServiceLayer.SLPolicyGlobalGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLPolicyGlobalGetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve Global Policy capabilities 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLPolicyGlobalGetMsgRsp> SLPolicyGlobalGetAsync(global::ServiceLayer.SLPolicyGlobalGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLPolicyGlobalGet, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override SLPolicyClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SLPolicyClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(SLPolicyBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SLPolicyOp, serviceImpl.SLPolicyOp)
          .AddMethod(__Method_SLPolicyGet, serviceImpl.SLPolicyGet)
          .AddMethod(__Method_SLPolicyGlobalGet, serviceImpl.SLPolicyGlobalGet).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SLPolicyBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SLPolicyOp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLPolicyOpMsg, global::ServiceLayer.SLPolicyOpRsp>(serviceImpl.SLPolicyOp));
      serviceBinder.AddMethod(__Method_SLPolicyGet, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::ServiceLayer.SLPolicyGetMsg, global::ServiceLayer.SLPolicyGetMsgRsp>(serviceImpl.SLPolicyGet));
      serviceBinder.AddMethod(__Method_SLPolicyGlobalGet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLPolicyGlobalGetMsg, global::ServiceLayer.SLPolicyGlobalGetMsgRsp>(serviceImpl.SLPolicyGlobalGet));
    }

  }
}
#endregion
