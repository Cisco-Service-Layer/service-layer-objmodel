// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sl_route_ipv6.proto
// </auto-generated>
// Original file comments:
// @file
// @brief Server RPC proto file for IPv6.
//
// ----------------------------------------------------------------
//  Copyright (c) 2016, 2023 by cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace ServiceLayer {
  /// <summary>
  /// @defgroup SLRouteIPv6Oper
  /// @ingroup AF
  /// Defines RPC calls for IPv6 route changes and VRF registration.
  /// This service declares both the Vrf Registration, as well as adding, deleting
  /// and getting IPv6 routes.
  /// All IPv6 addresses are encoded in network byte order.
  /// @{
  /// </summary>
  public static partial class SLRoutev6Oper
  {
    static readonly string __ServiceName = "service_layer.SLRoutev6Oper";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLRouteGlobalsGetMsg> __Marshaller_service_layer_SLRouteGlobalsGetMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLRouteGlobalsGetMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLRouteGlobalsGetMsgRsp> __Marshaller_service_layer_SLRouteGlobalsGetMsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLRouteGlobalsGetMsgRsp.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLRouteGlobalStatsGetMsg> __Marshaller_service_layer_SLRouteGlobalStatsGetMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLRouteGlobalStatsGetMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLRouteGlobalStatsGetMsgRsp> __Marshaller_service_layer_SLRouteGlobalStatsGetMsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLRouteGlobalStatsGetMsgRsp.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLVrfRegMsg> __Marshaller_service_layer_SLVrfRegMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLVrfRegMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLVrfRegMsgRsp> __Marshaller_service_layer_SLVrfRegMsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLVrfRegMsgRsp.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLVrfRegGetMsg> __Marshaller_service_layer_SLVrfRegGetMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLVrfRegGetMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLVrfRegGetMsgRsp> __Marshaller_service_layer_SLVrfRegGetMsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLVrfRegGetMsgRsp.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLVRFGetStatsMsgRsp> __Marshaller_service_layer_SLVRFGetStatsMsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLVRFGetStatsMsgRsp.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLRoutev6Msg> __Marshaller_service_layer_SLRoutev6Msg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLRoutev6Msg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLRoutev6MsgRsp> __Marshaller_service_layer_SLRoutev6MsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLRoutev6MsgRsp.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLRoutev6GetMsg> __Marshaller_service_layer_SLRoutev6GetMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLRoutev6GetMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLRoutev6GetMsgRsp> __Marshaller_service_layer_SLRoutev6GetMsgRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLRoutev6GetMsgRsp.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLRouteGetNotifMsg> __Marshaller_service_layer_SLRouteGetNotifMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLRouteGetNotifMsg.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ServiceLayer.SLRoutev6Notif> __Marshaller_service_layer_SLRoutev6Notif = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ServiceLayer.SLRoutev6Notif.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLRouteGlobalsGetMsg, global::ServiceLayer.SLRouteGlobalsGetMsgRsp> __Method_SLRoutev6GlobalsGet = new grpc::Method<global::ServiceLayer.SLRouteGlobalsGetMsg, global::ServiceLayer.SLRouteGlobalsGetMsgRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLRoutev6GlobalsGet",
        __Marshaller_service_layer_SLRouteGlobalsGetMsg,
        __Marshaller_service_layer_SLRouteGlobalsGetMsgRsp);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLRouteGlobalStatsGetMsg, global::ServiceLayer.SLRouteGlobalStatsGetMsgRsp> __Method_SLRoutev6GlobalStatsGet = new grpc::Method<global::ServiceLayer.SLRouteGlobalStatsGetMsg, global::ServiceLayer.SLRouteGlobalStatsGetMsgRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLRoutev6GlobalStatsGet",
        __Marshaller_service_layer_SLRouteGlobalStatsGetMsg,
        __Marshaller_service_layer_SLRouteGlobalStatsGetMsgRsp);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLVrfRegMsg, global::ServiceLayer.SLVrfRegMsgRsp> __Method_SLRoutev6VrfRegOp = new grpc::Method<global::ServiceLayer.SLVrfRegMsg, global::ServiceLayer.SLVrfRegMsgRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLRoutev6VrfRegOp",
        __Marshaller_service_layer_SLVrfRegMsg,
        __Marshaller_service_layer_SLVrfRegMsgRsp);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLVrfRegGetMsg, global::ServiceLayer.SLVrfRegGetMsgRsp> __Method_SLRoutev6VrfRegGet = new grpc::Method<global::ServiceLayer.SLVrfRegGetMsg, global::ServiceLayer.SLVrfRegGetMsgRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLRoutev6VrfRegGet",
        __Marshaller_service_layer_SLVrfRegGetMsg,
        __Marshaller_service_layer_SLVrfRegGetMsgRsp);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLVrfRegGetMsg, global::ServiceLayer.SLVRFGetStatsMsgRsp> __Method_SLRoutev6VrfGetStats = new grpc::Method<global::ServiceLayer.SLVrfRegGetMsg, global::ServiceLayer.SLVRFGetStatsMsgRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLRoutev6VrfGetStats",
        __Marshaller_service_layer_SLVrfRegGetMsg,
        __Marshaller_service_layer_SLVRFGetStatsMsgRsp);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLRoutev6Msg, global::ServiceLayer.SLRoutev6MsgRsp> __Method_SLRoutev6Op = new grpc::Method<global::ServiceLayer.SLRoutev6Msg, global::ServiceLayer.SLRoutev6MsgRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLRoutev6Op",
        __Marshaller_service_layer_SLRoutev6Msg,
        __Marshaller_service_layer_SLRoutev6MsgRsp);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLRoutev6GetMsg, global::ServiceLayer.SLRoutev6GetMsgRsp> __Method_SLRoutev6Get = new grpc::Method<global::ServiceLayer.SLRoutev6GetMsg, global::ServiceLayer.SLRoutev6GetMsgRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SLRoutev6Get",
        __Marshaller_service_layer_SLRoutev6GetMsg,
        __Marshaller_service_layer_SLRoutev6GetMsgRsp);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLRoutev6Msg, global::ServiceLayer.SLRoutev6MsgRsp> __Method_SLRoutev6OpStream = new grpc::Method<global::ServiceLayer.SLRoutev6Msg, global::ServiceLayer.SLRoutev6MsgRsp>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "SLRoutev6OpStream",
        __Marshaller_service_layer_SLRoutev6Msg,
        __Marshaller_service_layer_SLRoutev6MsgRsp);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLRoutev6GetMsg, global::ServiceLayer.SLRoutev6GetMsgRsp> __Method_SLRoutev6GetStream = new grpc::Method<global::ServiceLayer.SLRoutev6GetMsg, global::ServiceLayer.SLRoutev6GetMsgRsp>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "SLRoutev6GetStream",
        __Marshaller_service_layer_SLRoutev6GetMsg,
        __Marshaller_service_layer_SLRoutev6GetMsgRsp);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ServiceLayer.SLRouteGetNotifMsg, global::ServiceLayer.SLRoutev6Notif> __Method_SLRoutev6GetNotifStream = new grpc::Method<global::ServiceLayer.SLRouteGetNotifMsg, global::ServiceLayer.SLRoutev6Notif>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "SLRoutev6GetNotifStream",
        __Marshaller_service_layer_SLRouteGetNotifMsg,
        __Marshaller_service_layer_SLRoutev6Notif);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ServiceLayer.SlRouteIpv6Reflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SLRoutev6Oper</summary>
    [grpc::BindServiceMethod(typeof(SLRoutev6Oper), "BindService")]
    public abstract partial class SLRoutev6OperBase
    {
      /// <summary>
      /// Used to retrieve Global Route information
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLRouteGlobalsGetMsgRsp> SLRoutev6GlobalsGet(global::ServiceLayer.SLRouteGlobalsGetMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Used to retrieve Global Route Stats
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLRouteGlobalStatsGetMsgRsp> SLRoutev6GlobalStatsGet(global::ServiceLayer.SLRouteGlobalStatsGetMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SLVrfRegMsg.Oper = SL_REGOP_REGISTER:
      ///     VRF registration: Sends a list of VRF registration messages
      ///     and expects a list of registration responses.
      ///     A client Must Register a VRF BEFORE routes can be added/modified in
      ///    the associated VRF.
      ///
      /// SLVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
      ///     VRF Un-registration: Sends a list of VRF un-registration messages
      ///     and expects a list of un-registration responses.
      ///     This can be used to convey that the client is no longer interested
      ///     in these VRFs. All previously installed routes would be removed.
      ///
      /// SLVrfRegMsg.Oper = SL_REGOP_EOF:
      ///     VRF End Of File message.
      ///     After Registration, the client is expected to send an EOF
      ///     message to convey the end of replay of the client's known objects.
      ///     This is especially useful under certain restart scenarios when the
      ///     client and the server are trying to synchronize their Routes.
      ///
      /// The VRF registration operations can be used by the client to
      /// synchronize routes with the device. When the client re-registers the VRF
      /// with the server using SL_REGOP_REGISTER, server marks routes as stale.
      /// Client then must reprogram routes it is interested in.
      /// When client sends SL_REGOP_EOF, any routes not reprogrammed
      /// are removed from the device.
      ///
      /// The client must perform all operations (VRF registration, routes)
      /// from a single execution context.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLVrfRegMsgRsp> SLRoutev6VrfRegOp(global::ServiceLayer.SLVrfRegMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// VRF get. Used to retrieve VRF attributes from the server.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLVrfRegGetMsgRsp> SLRoutev6VrfRegGet(global::ServiceLayer.SLVrfRegGetMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Used to retrieve VRF Stats from the server.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLVRFGetStatsMsgRsp> SLRoutev6VrfGetStats(global::ServiceLayer.SLVrfRegGetMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SLRoutev6Msg.Oper = SL_OBJOP_ADD:
      ///     Route add. Fails if the route already exists and is not stale.
      ///     First ADD operation on a stale route is treated as implicit update
      ///     and the route is no longer considered stale.
      ///
      /// SLRoutev6Msg.Oper = SL_OBJOP_UPDATE:
      ///     Route update. Create or update the route. The RPC implements
      ///     replacement semantics, wherein if the route exists, all its
      ///     attributes are replaced with values from the new message.
      ///
      /// SLRoutev6Msg.Oper = SL_OBJOP_DELETE:
      ///     Route delete. The route's key is enough to delete the object.
      ///     Other attributes, if provided are ignored.
      ///     Delete of a non-existant route is returned as success.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLRoutev6MsgRsp> SLRoutev6Op(global::ServiceLayer.SLRoutev6Msg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves route attributes.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ServiceLayer.SLRoutev6GetMsgRsp> SLRoutev6Get(global::ServiceLayer.SLRoutev6GetMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SLRoutev6Msg.Oper = SL_OBJOP_ADD:
      ///     Route add. Fails if the route already exists and is not stale.
      ///     First ADD operation on a stale route is treated as implicit update
      ///     and the route is no longer considered stale.
      ///
      /// SLRoutev6Msg.Oper = SL_OBJOP_UPDATE:
      ///     Route update. Create or update the route. The RPC implements
      ///     replacement semantics, wherein if the route exists, all its
      ///     attributes are replaced with values from the new message.
      ///
      /// SLRoutev6Msg.Oper = SL_OBJOP_DELETE:
      ///     Route delete. The route's key is enough to delete the object.
      ///     Other attributes, if provided are ignored.
      ///     Delete of a non-existant route is returned as success.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task SLRoutev6OpStream(grpc::IAsyncStreamReader<global::ServiceLayer.SLRoutev6Msg> requestStream, grpc::IServerStreamWriter<global::ServiceLayer.SLRoutev6MsgRsp> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves route attributes.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task SLRoutev6GetStream(grpc::IAsyncStreamReader<global::ServiceLayer.SLRoutev6GetMsg> requestStream, grpc::IServerStreamWriter<global::ServiceLayer.SLRoutev6GetMsgRsp> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This call is used to get a stream of route notifications.
      /// It can be used to get "push" notifications for route
      /// adds/updates/deletes.
      /// The caller must maintain the GRPC channel as long as there is
      /// interest in route notifications.
      ///
      /// The call takes a stream of per-VRF notification requests.
      /// The success/failure of the notification request is relayed in the
      /// SLRouteNotifStatus followed by a Start marker, any routes if present,
      /// and an End Marker.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task SLRoutev6GetNotifStream(grpc::IAsyncStreamReader<global::ServiceLayer.SLRouteGetNotifMsg> requestStream, grpc::IServerStreamWriter<global::ServiceLayer.SLRoutev6Notif> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SLRoutev6Oper</summary>
    public partial class SLRoutev6OperClient : grpc::ClientBase<SLRoutev6OperClient>
    {
      /// <summary>Creates a new client for SLRoutev6Oper</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SLRoutev6OperClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SLRoutev6Oper that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SLRoutev6OperClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SLRoutev6OperClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SLRoutev6OperClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Used to retrieve Global Route information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLRouteGlobalsGetMsgRsp SLRoutev6GlobalsGet(global::ServiceLayer.SLRouteGlobalsGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLRoutev6GlobalsGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to retrieve Global Route information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLRouteGlobalsGetMsgRsp SLRoutev6GlobalsGet(global::ServiceLayer.SLRouteGlobalsGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLRoutev6GlobalsGet, null, options, request);
      }
      /// <summary>
      /// Used to retrieve Global Route information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLRouteGlobalsGetMsgRsp> SLRoutev6GlobalsGetAsync(global::ServiceLayer.SLRouteGlobalsGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLRoutev6GlobalsGetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to retrieve Global Route information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLRouteGlobalsGetMsgRsp> SLRoutev6GlobalsGetAsync(global::ServiceLayer.SLRouteGlobalsGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLRoutev6GlobalsGet, null, options, request);
      }
      /// <summary>
      /// Used to retrieve Global Route Stats
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLRouteGlobalStatsGetMsgRsp SLRoutev6GlobalStatsGet(global::ServiceLayer.SLRouteGlobalStatsGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLRoutev6GlobalStatsGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to retrieve Global Route Stats
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLRouteGlobalStatsGetMsgRsp SLRoutev6GlobalStatsGet(global::ServiceLayer.SLRouteGlobalStatsGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLRoutev6GlobalStatsGet, null, options, request);
      }
      /// <summary>
      /// Used to retrieve Global Route Stats
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLRouteGlobalStatsGetMsgRsp> SLRoutev6GlobalStatsGetAsync(global::ServiceLayer.SLRouteGlobalStatsGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLRoutev6GlobalStatsGetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to retrieve Global Route Stats
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLRouteGlobalStatsGetMsgRsp> SLRoutev6GlobalStatsGetAsync(global::ServiceLayer.SLRouteGlobalStatsGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLRoutev6GlobalStatsGet, null, options, request);
      }
      /// <summary>
      /// SLVrfRegMsg.Oper = SL_REGOP_REGISTER:
      ///     VRF registration: Sends a list of VRF registration messages
      ///     and expects a list of registration responses.
      ///     A client Must Register a VRF BEFORE routes can be added/modified in
      ///    the associated VRF.
      ///
      /// SLVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
      ///     VRF Un-registration: Sends a list of VRF un-registration messages
      ///     and expects a list of un-registration responses.
      ///     This can be used to convey that the client is no longer interested
      ///     in these VRFs. All previously installed routes would be removed.
      ///
      /// SLVrfRegMsg.Oper = SL_REGOP_EOF:
      ///     VRF End Of File message.
      ///     After Registration, the client is expected to send an EOF
      ///     message to convey the end of replay of the client's known objects.
      ///     This is especially useful under certain restart scenarios when the
      ///     client and the server are trying to synchronize their Routes.
      ///
      /// The VRF registration operations can be used by the client to
      /// synchronize routes with the device. When the client re-registers the VRF
      /// with the server using SL_REGOP_REGISTER, server marks routes as stale.
      /// Client then must reprogram routes it is interested in.
      /// When client sends SL_REGOP_EOF, any routes not reprogrammed
      /// are removed from the device.
      ///
      /// The client must perform all operations (VRF registration, routes)
      /// from a single execution context.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLVrfRegMsgRsp SLRoutev6VrfRegOp(global::ServiceLayer.SLVrfRegMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLRoutev6VrfRegOp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SLVrfRegMsg.Oper = SL_REGOP_REGISTER:
      ///     VRF registration: Sends a list of VRF registration messages
      ///     and expects a list of registration responses.
      ///     A client Must Register a VRF BEFORE routes can be added/modified in
      ///    the associated VRF.
      ///
      /// SLVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
      ///     VRF Un-registration: Sends a list of VRF un-registration messages
      ///     and expects a list of un-registration responses.
      ///     This can be used to convey that the client is no longer interested
      ///     in these VRFs. All previously installed routes would be removed.
      ///
      /// SLVrfRegMsg.Oper = SL_REGOP_EOF:
      ///     VRF End Of File message.
      ///     After Registration, the client is expected to send an EOF
      ///     message to convey the end of replay of the client's known objects.
      ///     This is especially useful under certain restart scenarios when the
      ///     client and the server are trying to synchronize their Routes.
      ///
      /// The VRF registration operations can be used by the client to
      /// synchronize routes with the device. When the client re-registers the VRF
      /// with the server using SL_REGOP_REGISTER, server marks routes as stale.
      /// Client then must reprogram routes it is interested in.
      /// When client sends SL_REGOP_EOF, any routes not reprogrammed
      /// are removed from the device.
      ///
      /// The client must perform all operations (VRF registration, routes)
      /// from a single execution context.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLVrfRegMsgRsp SLRoutev6VrfRegOp(global::ServiceLayer.SLVrfRegMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLRoutev6VrfRegOp, null, options, request);
      }
      /// <summary>
      /// SLVrfRegMsg.Oper = SL_REGOP_REGISTER:
      ///     VRF registration: Sends a list of VRF registration messages
      ///     and expects a list of registration responses.
      ///     A client Must Register a VRF BEFORE routes can be added/modified in
      ///    the associated VRF.
      ///
      /// SLVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
      ///     VRF Un-registration: Sends a list of VRF un-registration messages
      ///     and expects a list of un-registration responses.
      ///     This can be used to convey that the client is no longer interested
      ///     in these VRFs. All previously installed routes would be removed.
      ///
      /// SLVrfRegMsg.Oper = SL_REGOP_EOF:
      ///     VRF End Of File message.
      ///     After Registration, the client is expected to send an EOF
      ///     message to convey the end of replay of the client's known objects.
      ///     This is especially useful under certain restart scenarios when the
      ///     client and the server are trying to synchronize their Routes.
      ///
      /// The VRF registration operations can be used by the client to
      /// synchronize routes with the device. When the client re-registers the VRF
      /// with the server using SL_REGOP_REGISTER, server marks routes as stale.
      /// Client then must reprogram routes it is interested in.
      /// When client sends SL_REGOP_EOF, any routes not reprogrammed
      /// are removed from the device.
      ///
      /// The client must perform all operations (VRF registration, routes)
      /// from a single execution context.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLVrfRegMsgRsp> SLRoutev6VrfRegOpAsync(global::ServiceLayer.SLVrfRegMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLRoutev6VrfRegOpAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SLVrfRegMsg.Oper = SL_REGOP_REGISTER:
      ///     VRF registration: Sends a list of VRF registration messages
      ///     and expects a list of registration responses.
      ///     A client Must Register a VRF BEFORE routes can be added/modified in
      ///    the associated VRF.
      ///
      /// SLVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
      ///     VRF Un-registration: Sends a list of VRF un-registration messages
      ///     and expects a list of un-registration responses.
      ///     This can be used to convey that the client is no longer interested
      ///     in these VRFs. All previously installed routes would be removed.
      ///
      /// SLVrfRegMsg.Oper = SL_REGOP_EOF:
      ///     VRF End Of File message.
      ///     After Registration, the client is expected to send an EOF
      ///     message to convey the end of replay of the client's known objects.
      ///     This is especially useful under certain restart scenarios when the
      ///     client and the server are trying to synchronize their Routes.
      ///
      /// The VRF registration operations can be used by the client to
      /// synchronize routes with the device. When the client re-registers the VRF
      /// with the server using SL_REGOP_REGISTER, server marks routes as stale.
      /// Client then must reprogram routes it is interested in.
      /// When client sends SL_REGOP_EOF, any routes not reprogrammed
      /// are removed from the device.
      ///
      /// The client must perform all operations (VRF registration, routes)
      /// from a single execution context.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLVrfRegMsgRsp> SLRoutev6VrfRegOpAsync(global::ServiceLayer.SLVrfRegMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLRoutev6VrfRegOp, null, options, request);
      }
      /// <summary>
      /// VRF get. Used to retrieve VRF attributes from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLVrfRegGetMsgRsp SLRoutev6VrfRegGet(global::ServiceLayer.SLVrfRegGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLRoutev6VrfRegGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// VRF get. Used to retrieve VRF attributes from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLVrfRegGetMsgRsp SLRoutev6VrfRegGet(global::ServiceLayer.SLVrfRegGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLRoutev6VrfRegGet, null, options, request);
      }
      /// <summary>
      /// VRF get. Used to retrieve VRF attributes from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLVrfRegGetMsgRsp> SLRoutev6VrfRegGetAsync(global::ServiceLayer.SLVrfRegGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLRoutev6VrfRegGetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// VRF get. Used to retrieve VRF attributes from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLVrfRegGetMsgRsp> SLRoutev6VrfRegGetAsync(global::ServiceLayer.SLVrfRegGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLRoutev6VrfRegGet, null, options, request);
      }
      /// <summary>
      /// Used to retrieve VRF Stats from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLVRFGetStatsMsgRsp SLRoutev6VrfGetStats(global::ServiceLayer.SLVrfRegGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLRoutev6VrfGetStats(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to retrieve VRF Stats from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLVRFGetStatsMsgRsp SLRoutev6VrfGetStats(global::ServiceLayer.SLVrfRegGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLRoutev6VrfGetStats, null, options, request);
      }
      /// <summary>
      /// Used to retrieve VRF Stats from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLVRFGetStatsMsgRsp> SLRoutev6VrfGetStatsAsync(global::ServiceLayer.SLVrfRegGetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLRoutev6VrfGetStatsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to retrieve VRF Stats from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLVRFGetStatsMsgRsp> SLRoutev6VrfGetStatsAsync(global::ServiceLayer.SLVrfRegGetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLRoutev6VrfGetStats, null, options, request);
      }
      /// <summary>
      /// SLRoutev6Msg.Oper = SL_OBJOP_ADD:
      ///     Route add. Fails if the route already exists and is not stale.
      ///     First ADD operation on a stale route is treated as implicit update
      ///     and the route is no longer considered stale.
      ///
      /// SLRoutev6Msg.Oper = SL_OBJOP_UPDATE:
      ///     Route update. Create or update the route. The RPC implements
      ///     replacement semantics, wherein if the route exists, all its
      ///     attributes are replaced with values from the new message.
      ///
      /// SLRoutev6Msg.Oper = SL_OBJOP_DELETE:
      ///     Route delete. The route's key is enough to delete the object.
      ///     Other attributes, if provided are ignored.
      ///     Delete of a non-existant route is returned as success.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLRoutev6MsgRsp SLRoutev6Op(global::ServiceLayer.SLRoutev6Msg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLRoutev6Op(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SLRoutev6Msg.Oper = SL_OBJOP_ADD:
      ///     Route add. Fails if the route already exists and is not stale.
      ///     First ADD operation on a stale route is treated as implicit update
      ///     and the route is no longer considered stale.
      ///
      /// SLRoutev6Msg.Oper = SL_OBJOP_UPDATE:
      ///     Route update. Create or update the route. The RPC implements
      ///     replacement semantics, wherein if the route exists, all its
      ///     attributes are replaced with values from the new message.
      ///
      /// SLRoutev6Msg.Oper = SL_OBJOP_DELETE:
      ///     Route delete. The route's key is enough to delete the object.
      ///     Other attributes, if provided are ignored.
      ///     Delete of a non-existant route is returned as success.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLRoutev6MsgRsp SLRoutev6Op(global::ServiceLayer.SLRoutev6Msg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLRoutev6Op, null, options, request);
      }
      /// <summary>
      /// SLRoutev6Msg.Oper = SL_OBJOP_ADD:
      ///     Route add. Fails if the route already exists and is not stale.
      ///     First ADD operation on a stale route is treated as implicit update
      ///     and the route is no longer considered stale.
      ///
      /// SLRoutev6Msg.Oper = SL_OBJOP_UPDATE:
      ///     Route update. Create or update the route. The RPC implements
      ///     replacement semantics, wherein if the route exists, all its
      ///     attributes are replaced with values from the new message.
      ///
      /// SLRoutev6Msg.Oper = SL_OBJOP_DELETE:
      ///     Route delete. The route's key is enough to delete the object.
      ///     Other attributes, if provided are ignored.
      ///     Delete of a non-existant route is returned as success.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLRoutev6MsgRsp> SLRoutev6OpAsync(global::ServiceLayer.SLRoutev6Msg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLRoutev6OpAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SLRoutev6Msg.Oper = SL_OBJOP_ADD:
      ///     Route add. Fails if the route already exists and is not stale.
      ///     First ADD operation on a stale route is treated as implicit update
      ///     and the route is no longer considered stale.
      ///
      /// SLRoutev6Msg.Oper = SL_OBJOP_UPDATE:
      ///     Route update. Create or update the route. The RPC implements
      ///     replacement semantics, wherein if the route exists, all its
      ///     attributes are replaced with values from the new message.
      ///
      /// SLRoutev6Msg.Oper = SL_OBJOP_DELETE:
      ///     Route delete. The route's key is enough to delete the object.
      ///     Other attributes, if provided are ignored.
      ///     Delete of a non-existant route is returned as success.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLRoutev6MsgRsp> SLRoutev6OpAsync(global::ServiceLayer.SLRoutev6Msg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLRoutev6Op, null, options, request);
      }
      /// <summary>
      /// Retrieves route attributes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLRoutev6GetMsgRsp SLRoutev6Get(global::ServiceLayer.SLRoutev6GetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLRoutev6Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves route attributes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ServiceLayer.SLRoutev6GetMsgRsp SLRoutev6Get(global::ServiceLayer.SLRoutev6GetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SLRoutev6Get, null, options, request);
      }
      /// <summary>
      /// Retrieves route attributes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLRoutev6GetMsgRsp> SLRoutev6GetAsync(global::ServiceLayer.SLRoutev6GetMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLRoutev6GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves route attributes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ServiceLayer.SLRoutev6GetMsgRsp> SLRoutev6GetAsync(global::ServiceLayer.SLRoutev6GetMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SLRoutev6Get, null, options, request);
      }
      /// <summary>
      /// SLRoutev6Msg.Oper = SL_OBJOP_ADD:
      ///     Route add. Fails if the route already exists and is not stale.
      ///     First ADD operation on a stale route is treated as implicit update
      ///     and the route is no longer considered stale.
      ///
      /// SLRoutev6Msg.Oper = SL_OBJOP_UPDATE:
      ///     Route update. Create or update the route. The RPC implements
      ///     replacement semantics, wherein if the route exists, all its
      ///     attributes are replaced with values from the new message.
      ///
      /// SLRoutev6Msg.Oper = SL_OBJOP_DELETE:
      ///     Route delete. The route's key is enough to delete the object.
      ///     Other attributes, if provided are ignored.
      ///     Delete of a non-existant route is returned as success.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::ServiceLayer.SLRoutev6Msg, global::ServiceLayer.SLRoutev6MsgRsp> SLRoutev6OpStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLRoutev6OpStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SLRoutev6Msg.Oper = SL_OBJOP_ADD:
      ///     Route add. Fails if the route already exists and is not stale.
      ///     First ADD operation on a stale route is treated as implicit update
      ///     and the route is no longer considered stale.
      ///
      /// SLRoutev6Msg.Oper = SL_OBJOP_UPDATE:
      ///     Route update. Create or update the route. The RPC implements
      ///     replacement semantics, wherein if the route exists, all its
      ///     attributes are replaced with values from the new message.
      ///
      /// SLRoutev6Msg.Oper = SL_OBJOP_DELETE:
      ///     Route delete. The route's key is enough to delete the object.
      ///     Other attributes, if provided are ignored.
      ///     Delete of a non-existant route is returned as success.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::ServiceLayer.SLRoutev6Msg, global::ServiceLayer.SLRoutev6MsgRsp> SLRoutev6OpStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_SLRoutev6OpStream, null, options);
      }
      /// <summary>
      /// Retrieves route attributes.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::ServiceLayer.SLRoutev6GetMsg, global::ServiceLayer.SLRoutev6GetMsgRsp> SLRoutev6GetStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLRoutev6GetStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves route attributes.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::ServiceLayer.SLRoutev6GetMsg, global::ServiceLayer.SLRoutev6GetMsgRsp> SLRoutev6GetStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_SLRoutev6GetStream, null, options);
      }
      /// <summary>
      /// This call is used to get a stream of route notifications.
      /// It can be used to get "push" notifications for route
      /// adds/updates/deletes.
      /// The caller must maintain the GRPC channel as long as there is
      /// interest in route notifications.
      ///
      /// The call takes a stream of per-VRF notification requests.
      /// The success/failure of the notification request is relayed in the
      /// SLRouteNotifStatus followed by a Start marker, any routes if present,
      /// and an End Marker.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::ServiceLayer.SLRouteGetNotifMsg, global::ServiceLayer.SLRoutev6Notif> SLRoutev6GetNotifStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SLRoutev6GetNotifStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This call is used to get a stream of route notifications.
      /// It can be used to get "push" notifications for route
      /// adds/updates/deletes.
      /// The caller must maintain the GRPC channel as long as there is
      /// interest in route notifications.
      ///
      /// The call takes a stream of per-VRF notification requests.
      /// The success/failure of the notification request is relayed in the
      /// SLRouteNotifStatus followed by a Start marker, any routes if present,
      /// and an End Marker.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::ServiceLayer.SLRouteGetNotifMsg, global::ServiceLayer.SLRoutev6Notif> SLRoutev6GetNotifStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_SLRoutev6GetNotifStream, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override SLRoutev6OperClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SLRoutev6OperClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(SLRoutev6OperBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SLRoutev6GlobalsGet, serviceImpl.SLRoutev6GlobalsGet)
          .AddMethod(__Method_SLRoutev6GlobalStatsGet, serviceImpl.SLRoutev6GlobalStatsGet)
          .AddMethod(__Method_SLRoutev6VrfRegOp, serviceImpl.SLRoutev6VrfRegOp)
          .AddMethod(__Method_SLRoutev6VrfRegGet, serviceImpl.SLRoutev6VrfRegGet)
          .AddMethod(__Method_SLRoutev6VrfGetStats, serviceImpl.SLRoutev6VrfGetStats)
          .AddMethod(__Method_SLRoutev6Op, serviceImpl.SLRoutev6Op)
          .AddMethod(__Method_SLRoutev6Get, serviceImpl.SLRoutev6Get)
          .AddMethod(__Method_SLRoutev6OpStream, serviceImpl.SLRoutev6OpStream)
          .AddMethod(__Method_SLRoutev6GetStream, serviceImpl.SLRoutev6GetStream)
          .AddMethod(__Method_SLRoutev6GetNotifStream, serviceImpl.SLRoutev6GetNotifStream).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SLRoutev6OperBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SLRoutev6GlobalsGet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLRouteGlobalsGetMsg, global::ServiceLayer.SLRouteGlobalsGetMsgRsp>(serviceImpl.SLRoutev6GlobalsGet));
      serviceBinder.AddMethod(__Method_SLRoutev6GlobalStatsGet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLRouteGlobalStatsGetMsg, global::ServiceLayer.SLRouteGlobalStatsGetMsgRsp>(serviceImpl.SLRoutev6GlobalStatsGet));
      serviceBinder.AddMethod(__Method_SLRoutev6VrfRegOp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLVrfRegMsg, global::ServiceLayer.SLVrfRegMsgRsp>(serviceImpl.SLRoutev6VrfRegOp));
      serviceBinder.AddMethod(__Method_SLRoutev6VrfRegGet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLVrfRegGetMsg, global::ServiceLayer.SLVrfRegGetMsgRsp>(serviceImpl.SLRoutev6VrfRegGet));
      serviceBinder.AddMethod(__Method_SLRoutev6VrfGetStats, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLVrfRegGetMsg, global::ServiceLayer.SLVRFGetStatsMsgRsp>(serviceImpl.SLRoutev6VrfGetStats));
      serviceBinder.AddMethod(__Method_SLRoutev6Op, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLRoutev6Msg, global::ServiceLayer.SLRoutev6MsgRsp>(serviceImpl.SLRoutev6Op));
      serviceBinder.AddMethod(__Method_SLRoutev6Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceLayer.SLRoutev6GetMsg, global::ServiceLayer.SLRoutev6GetMsgRsp>(serviceImpl.SLRoutev6Get));
      serviceBinder.AddMethod(__Method_SLRoutev6OpStream, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::ServiceLayer.SLRoutev6Msg, global::ServiceLayer.SLRoutev6MsgRsp>(serviceImpl.SLRoutev6OpStream));
      serviceBinder.AddMethod(__Method_SLRoutev6GetStream, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::ServiceLayer.SLRoutev6GetMsg, global::ServiceLayer.SLRoutev6GetMsgRsp>(serviceImpl.SLRoutev6GetStream));
      serviceBinder.AddMethod(__Method_SLRoutev6GetNotifStream, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::ServiceLayer.SLRouteGetNotifMsg, global::ServiceLayer.SLRoutev6Notif>(serviceImpl.SLRoutev6GetNotifStream));
    }

  }
}
#endregion
