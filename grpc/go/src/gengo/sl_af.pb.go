// @file
// @brief Client RPC proto file for operations on objects in a address family.
// This file defines SL-API service and messages for operations
// on IP routes, MPLS objects, Path Groups and Policy Forwarding Entries.
//
// The RPCs and messages defined here are experimental and subject to
// change without notice and such changes can break backwards compatibility.
//
// ----------------------------------------------------------------
//  Copyright (c) 2023 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//

//@defgroup AF
//@brief Address family service definitions.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.3
// source: sl_af.proto

package service_layer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AF VRF Registration message.
type SLAFVrfReg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Registration message is applied on VRF's identified table.
	Table SLTableType `protobuf:"varint,1,opt,name=Table,proto3,enum=service_layer.SLTableType" json:"Table,omitempty"`
	// VRF registration attibutes.
	VrfReg *SLVrfReg `protobuf:"bytes,2,opt,name=VrfReg,proto3" json:"VrfReg,omitempty"`
}

func (x *SLAFVrfReg) Reset() {
	*x = SLAFVrfReg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFVrfReg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFVrfReg) ProtoMessage() {}

func (x *SLAFVrfReg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFVrfReg.ProtoReflect.Descriptor instead.
func (*SLAFVrfReg) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{0}
}

func (x *SLAFVrfReg) GetTable() SLTableType {
	if x != nil {
		return x.Table
	}
	return SLTableType_SL_TABLE_TYPE_RESERVED
}

func (x *SLAFVrfReg) GetVrfReg() *SLVrfReg {
	if x != nil {
		return x.VrfReg
	}
	return nil
}

// AF VRF Registration messages.
type SLAFVrfRegMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Registration Operation
	Oper SLRegOp `protobuf:"varint,1,opt,name=Oper,proto3,enum=service_layer.SLRegOp" json:"Oper,omitempty"`
	// List of VRF registrations
	VrfRegMsgs []*SLAFVrfReg `protobuf:"bytes,2,rep,name=VrfRegMsgs,proto3" json:"VrfRegMsgs,omitempty"`
}

func (x *SLAFVrfRegMsg) Reset() {
	*x = SLAFVrfRegMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFVrfRegMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFVrfRegMsg) ProtoMessage() {}

func (x *SLAFVrfRegMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFVrfRegMsg.ProtoReflect.Descriptor instead.
func (*SLAFVrfRegMsg) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{1}
}

func (x *SLAFVrfRegMsg) GetOper() SLRegOp {
	if x != nil {
		return x.Oper
	}
	return SLRegOp_SL_REGOP_RESERVED
}

func (x *SLAFVrfRegMsg) GetVrfRegMsgs() []*SLAFVrfReg {
	if x != nil {
		return x.VrfRegMsgs
	}
	return nil
}

// AF VRF Registration message Result
type SLAFVrfRegMsgRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Corresponding error code
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// VRF Name
	VrfName string `protobuf:"bytes,2,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// Table type
	Table SLTableType `protobuf:"varint,3,opt,name=Table,proto3,enum=service_layer.SLTableType" json:"Table,omitempty"`
}

func (x *SLAFVrfRegMsgRes) Reset() {
	*x = SLAFVrfRegMsgRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFVrfRegMsgRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFVrfRegMsgRes) ProtoMessage() {}

func (x *SLAFVrfRegMsgRes) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFVrfRegMsgRes.ProtoReflect.Descriptor instead.
func (*SLAFVrfRegMsgRes) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{2}
}

func (x *SLAFVrfRegMsgRes) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (x *SLAFVrfRegMsgRes) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SLAFVrfRegMsgRes) GetTable() SLTableType {
	if x != nil {
		return x.Table
	}
	return SLTableType_SL_TABLE_TYPE_RESERVED
}

// VRF Registration message Response.
type SLAFVrfRegMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary result of the bulk operation (refer to enum SLErrorStatus)
	// In general, the StatusSummary implies one of 3 things:
	//  1. SL_SUCCESS: signifies that the entire bulk operation was successful.
	//     In this case, the Results list is empty.
	//  2. SL_SOME_ERR: signifies that the operation failed for one or more
	//     entries. In this case, Results holds the result for
	//     each individual entry in the bulk.
	//  3. SL_RPC_XXX: signifies that the entire bulk operation failed.
	//     In this case, the Results list is empty.
	StatusSummary *SLErrorStatus `protobuf:"bytes,1,opt,name=StatusSummary,proto3" json:"StatusSummary,omitempty"`
	// In case of errors, this field indicates which entry in the bulk was
	// erroneous.
	Results []*SLAFVrfRegMsgRes `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *SLAFVrfRegMsgRsp) Reset() {
	*x = SLAFVrfRegMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFVrfRegMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFVrfRegMsgRsp) ProtoMessage() {}

func (x *SLAFVrfRegMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFVrfRegMsgRsp.ProtoReflect.Descriptor instead.
func (*SLAFVrfRegMsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{3}
}

func (x *SLAFVrfRegMsgRsp) GetStatusSummary() *SLErrorStatus {
	if x != nil {
		return x.StatusSummary
	}
	return nil
}

func (x *SLAFVrfRegMsgRsp) GetResults() []*SLAFVrfRegMsgRes {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_sl_af_proto protoreflect.FileDescriptor

var file_sl_af_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x6c, 0x5f, 0x61, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x1a, 0x15, 0x73, 0x6c,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x73, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6f, 0x0a, 0x0a, 0x53, 0x4c,
	0x41, 0x46, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x12, 0x30, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x56, 0x72,
	0x66, 0x52, 0x65, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x56, 0x72, 0x66,
	0x52, 0x65, 0x67, 0x52, 0x06, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x22, 0x76, 0x0a, 0x0d, 0x53,
	0x4c, 0x41, 0x46, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x04,
	0x4f, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x65, 0x67,
	0x4f, 0x70, 0x52, 0x04, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x56, 0x72, 0x66, 0x52,
	0x65, 0x67, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41,
	0x46, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x52, 0x0a, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x4d,
	0x73, 0x67, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x10, 0x53, 0x4c, 0x41, 0x46, 0x56, 0x72, 0x66, 0x52,
	0x65, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0x91, 0x01, 0x0a, 0x10, 0x53, 0x4c, 0x41, 0x46, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x4d,
	0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x07, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x56,
	0x72, 0x66, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x52, 0x07, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x32, 0x55, 0x0a, 0x04, 0x53, 0x4c, 0x41, 0x46, 0x12, 0x4d, 0x0a, 0x0c,
	0x53, 0x4c, 0x41, 0x46, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x4f, 0x70, 0x12, 0x1c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41,
	0x46, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x56,
	0x72, 0x66, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x42, 0x51, 0x5a, 0x4f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x69, 0x73, 0x63, 0x6f, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x6f, 0x62, 0x6a, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sl_af_proto_rawDescOnce sync.Once
	file_sl_af_proto_rawDescData = file_sl_af_proto_rawDesc
)

func file_sl_af_proto_rawDescGZIP() []byte {
	file_sl_af_proto_rawDescOnce.Do(func() {
		file_sl_af_proto_rawDescData = protoimpl.X.CompressGZIP(file_sl_af_proto_rawDescData)
	})
	return file_sl_af_proto_rawDescData
}

var file_sl_af_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_sl_af_proto_goTypes = []interface{}{
	(*SLAFVrfReg)(nil),       // 0: service_layer.SLAFVrfReg
	(*SLAFVrfRegMsg)(nil),    // 1: service_layer.SLAFVrfRegMsg
	(*SLAFVrfRegMsgRes)(nil), // 2: service_layer.SLAFVrfRegMsgRes
	(*SLAFVrfRegMsgRsp)(nil), // 3: service_layer.SLAFVrfRegMsgRsp
	(SLTableType)(0),         // 4: service_layer.SLTableType
	(*SLVrfReg)(nil),         // 5: service_layer.SLVrfReg
	(SLRegOp)(0),             // 6: service_layer.SLRegOp
	(*SLErrorStatus)(nil),    // 7: service_layer.SLErrorStatus
}
var file_sl_af_proto_depIdxs = []int32{
	4, // 0: service_layer.SLAFVrfReg.Table:type_name -> service_layer.SLTableType
	5, // 1: service_layer.SLAFVrfReg.VrfReg:type_name -> service_layer.SLVrfReg
	6, // 2: service_layer.SLAFVrfRegMsg.Oper:type_name -> service_layer.SLRegOp
	0, // 3: service_layer.SLAFVrfRegMsg.VrfRegMsgs:type_name -> service_layer.SLAFVrfReg
	7, // 4: service_layer.SLAFVrfRegMsgRes.ErrStatus:type_name -> service_layer.SLErrorStatus
	4, // 5: service_layer.SLAFVrfRegMsgRes.Table:type_name -> service_layer.SLTableType
	7, // 6: service_layer.SLAFVrfRegMsgRsp.StatusSummary:type_name -> service_layer.SLErrorStatus
	2, // 7: service_layer.SLAFVrfRegMsgRsp.Results:type_name -> service_layer.SLAFVrfRegMsgRes
	1, // 8: service_layer.SLAF.SLAFVrfRegOp:input_type -> service_layer.SLAFVrfRegMsg
	3, // 9: service_layer.SLAF.SLAFVrfRegOp:output_type -> service_layer.SLAFVrfRegMsgRsp
	9, // [9:10] is the sub-list for method output_type
	8, // [8:9] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_sl_af_proto_init() }
func file_sl_af_proto_init() {
	if File_sl_af_proto != nil {
		return
	}
	file_sl_common_types_proto_init()
	file_sl_route_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sl_af_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFVrfReg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFVrfRegMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFVrfRegMsgRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFVrfRegMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sl_af_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sl_af_proto_goTypes,
		DependencyIndexes: file_sl_af_proto_depIdxs,
		MessageInfos:      file_sl_af_proto_msgTypes,
	}.Build()
	File_sl_af_proto = out.File
	file_sl_af_proto_rawDesc = nil
	file_sl_af_proto_goTypes = nil
	file_sl_af_proto_depIdxs = nil
}
