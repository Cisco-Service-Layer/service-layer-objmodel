// @file
// @brief Client RPC proto file for operations on objects in a address family.
// This file defines SL-API service and messages for operations
// on IP routes, MPLS objects, Path Groups and Policy Forwarding Entries.
//
// The RPCs and messages defined here are experimental and subject to
// change without notice and such changes can break backwards compatibility.
//
// ----------------------------------------------------------------
//  Copyright (c) 2023 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//

//@defgroup AF
//@brief Address family service definitions.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.3
// source: sl_af.proto

package service_layer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AF VRF Registration message.
type SLAFVrfReg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Registration message is applied on VRF's identified table.
	Table SLTableType `protobuf:"varint,1,opt,name=Table,proto3,enum=service_layer.SLTableType" json:"Table,omitempty"`
	// VRF registration attibutes.
	VrfReg *SLVrfReg `protobuf:"bytes,2,opt,name=VrfReg,proto3" json:"VrfReg,omitempty"`
}

func (x *SLAFVrfReg) Reset() {
	*x = SLAFVrfReg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFVrfReg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFVrfReg) ProtoMessage() {}

func (x *SLAFVrfReg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFVrfReg.ProtoReflect.Descriptor instead.
func (*SLAFVrfReg) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{0}
}

func (x *SLAFVrfReg) GetTable() SLTableType {
	if x != nil {
		return x.Table
	}
	return SLTableType_SL_TABLE_TYPE_RESERVED
}

func (x *SLAFVrfReg) GetVrfReg() *SLVrfReg {
	if x != nil {
		return x.VrfReg
	}
	return nil
}

// AF VRF Registration messages.
type SLAFVrfRegMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Registration Operation
	Oper SLRegOp `protobuf:"varint,1,opt,name=Oper,proto3,enum=service_layer.SLRegOp" json:"Oper,omitempty"`
	// List of VRF registrations
	VrfRegMsgs []*SLAFVrfReg `protobuf:"bytes,2,rep,name=VrfRegMsgs,proto3" json:"VrfRegMsgs,omitempty"`
}

func (x *SLAFVrfRegMsg) Reset() {
	*x = SLAFVrfRegMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFVrfRegMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFVrfRegMsg) ProtoMessage() {}

func (x *SLAFVrfRegMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFVrfRegMsg.ProtoReflect.Descriptor instead.
func (*SLAFVrfRegMsg) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{1}
}

func (x *SLAFVrfRegMsg) GetOper() SLRegOp {
	if x != nil {
		return x.Oper
	}
	return SLRegOp_SL_REGOP_RESERVED
}

func (x *SLAFVrfRegMsg) GetVrfRegMsgs() []*SLAFVrfReg {
	if x != nil {
		return x.VrfRegMsgs
	}
	return nil
}

// AF VRF Registration message Result
type SLAFVrfRegMsgRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Corresponding error code
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// VRF Name
	VrfName string `protobuf:"bytes,2,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// Table type
	Table SLTableType `protobuf:"varint,3,opt,name=Table,proto3,enum=service_layer.SLTableType" json:"Table,omitempty"`
}

func (x *SLAFVrfRegMsgRes) Reset() {
	*x = SLAFVrfRegMsgRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFVrfRegMsgRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFVrfRegMsgRes) ProtoMessage() {}

func (x *SLAFVrfRegMsgRes) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFVrfRegMsgRes.ProtoReflect.Descriptor instead.
func (*SLAFVrfRegMsgRes) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{2}
}

func (x *SLAFVrfRegMsgRes) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (x *SLAFVrfRegMsgRes) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SLAFVrfRegMsgRes) GetTable() SLTableType {
	if x != nil {
		return x.Table
	}
	return SLTableType_SL_TABLE_TYPE_RESERVED
}

// VRF Registration message Response.
type SLAFVrfRegMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary result of the bulk operation (refer to enum SLErrorStatus)
	// In general, the StatusSummary implies one of 3 things:
	//  1. SL_SUCCESS: signifies that the entire bulk operation was successful.
	//     In this case, the Results list is empty.
	//  2. SL_SOME_ERR: signifies that the operation failed for one or more
	//     entries. In this case, Results holds the result for
	//     each individual entry in the bulk.
	//  3. SL_RPC_XXX: signifies that the entire bulk operation failed.
	//     In this case, the Results list is empty.
	StatusSummary *SLErrorStatus `protobuf:"bytes,1,opt,name=StatusSummary,proto3" json:"StatusSummary,omitempty"`
	// In case of errors, this field indicates which entry in the bulk was
	// erroneous.
	Results []*SLAFVrfRegMsgRes `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *SLAFVrfRegMsgRsp) Reset() {
	*x = SLAFVrfRegMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFVrfRegMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFVrfRegMsgRsp) ProtoMessage() {}

func (x *SLAFVrfRegMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFVrfRegMsgRsp.ProtoReflect.Descriptor instead.
func (*SLAFVrfRegMsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{3}
}

func (x *SLAFVrfRegMsgRsp) GetStatusSummary() *SLErrorStatus {
	if x != nil {
		return x.StatusSummary
	}
	return nil
}

func (x *SLAFVrfRegMsgRsp) GetResults() []*SLAFVrfRegMsgRes {
	if x != nil {
		return x.Results
	}
	return nil
}

// Path Group definition.
type SLPathGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path Group ID
	PathGroupId *SLObjectId `protobuf:"bytes,1,opt,name=PathGroupId,proto3" json:"PathGroupId,omitempty"`
	// Adminstrative distance of the Path Group. [0-255].
	// RIB uses this field to break the tie when multiple
	// sources install the same Path Group.
	// Lower distance is preferred over higher distance.
	// The per path group object admin distance overrides the default's admin
	// distance set at VRF registration. see SLVrfReg
	AdminDistance uint32 `protobuf:"varint,2,opt,name=AdminDistance,proto3" json:"AdminDistance,omitempty"`
	// Description of paths in the PathGroup.
	// Oneof is used here for future extensibility.
	//
	// Types that are assignable to Entry:
	//
	//	*SLPathGroup_PathList
	Entry isSLPathGroup_Entry `protobuf_oneof:"entry"`
	// Flags to control programming of the PathGroup to Routing
	// Information Base. Each flag is indicated as a bit field.
	// See SLRouteFlags for flag enumerations.
	Flags uint32 `protobuf:"varint,4,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *SLPathGroup) Reset() {
	*x = SLPathGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLPathGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLPathGroup) ProtoMessage() {}

func (x *SLPathGroup) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLPathGroup.ProtoReflect.Descriptor instead.
func (*SLPathGroup) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{4}
}

func (x *SLPathGroup) GetPathGroupId() *SLObjectId {
	if x != nil {
		return x.PathGroupId
	}
	return nil
}

func (x *SLPathGroup) GetAdminDistance() uint32 {
	if x != nil {
		return x.AdminDistance
	}
	return 0
}

func (m *SLPathGroup) GetEntry() isSLPathGroup_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *SLPathGroup) GetPathList() *SLPathGroup_SLPathList {
	if x, ok := x.GetEntry().(*SLPathGroup_PathList); ok {
		return x.PathList
	}
	return nil
}

func (x *SLPathGroup) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type isSLPathGroup_Entry interface {
	isSLPathGroup_Entry()
}

type SLPathGroup_PathList struct {
	// Path List
	PathList *SLPathGroup_SLPathList `protobuf:"bytes,3,opt,name=PathList,proto3,oneof"`
}

func (*SLPathGroup_PathList) isSLPathGroup_Entry() {}

// MPLS entry.
// This message defines an entry in the MPLS forwarding table.
type SLMplsEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Local Label.
	LocalLabel uint32 `protobuf:"varint,1,opt,name=LocalLabel,proto3" json:"LocalLabel,omitempty"`
	// Administrative distance of the MPLS label. [0-255]. RIB uses this field
	// to break the tie when multiple sources install the same incoming MPLS
	// label. Lower distance is preferred over higher distance. The per MPLS
	// label object admin distance overrides the default's admin distance set
	// at VRF registration. see SLVrfReg
	AdminDistance uint32 `protobuf:"varint,2,opt,name=AdminDistance,proto3" json:"AdminDistance,omitempty"`
	// List of paths for a particular MPLS label.
	// Specifying more than one path is allowed for ECMP/UCMP cases
	PathList []*SLRoutePath `protobuf:"bytes,3,rep,name=PathList,proto3" json:"PathList,omitempty"`
	// Path Group the key forwards to
	//
	// Types that are assignable to Entry:
	//
	//	*SLMplsEntry_PathGroupKey
	Entry isSLMplsEntry_Entry `protobuf_oneof:"entry"`
	// Flags to control programming of the MPLS Entry to Routing
	// Information Base. Each flag is indicated as a bit field.
	// See SLRouteFlags for flag enumerations.
	Flags uint32 `protobuf:"varint,5,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *SLMplsEntry) Reset() {
	*x = SLMplsEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLMplsEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLMplsEntry) ProtoMessage() {}

func (x *SLMplsEntry) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLMplsEntry.ProtoReflect.Descriptor instead.
func (*SLMplsEntry) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{5}
}

func (x *SLMplsEntry) GetLocalLabel() uint32 {
	if x != nil {
		return x.LocalLabel
	}
	return 0
}

func (x *SLMplsEntry) GetAdminDistance() uint32 {
	if x != nil {
		return x.AdminDistance
	}
	return 0
}

func (x *SLMplsEntry) GetPathList() []*SLRoutePath {
	if x != nil {
		return x.PathList
	}
	return nil
}

func (m *SLMplsEntry) GetEntry() isSLMplsEntry_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *SLMplsEntry) GetPathGroupKey() *SLPathGroupRefKey {
	if x, ok := x.GetEntry().(*SLMplsEntry_PathGroupKey); ok {
		return x.PathGroupKey
	}
	return nil
}

func (x *SLMplsEntry) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type isSLMplsEntry_Entry interface {
	isSLMplsEntry_Entry()
}

type SLMplsEntry_PathGroupKey struct {
	// Path group reference key
	PathGroupKey *SLPathGroupRefKey `protobuf:"bytes,4,opt,name=PathGroupKey,proto3,oneof"`
}

func (*SLMplsEntry_PathGroupKey) isSLMplsEntry_Entry() {}

// One of AF objects
type SLAFObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entry:
	//
	//	*SLAFObject_IPv4Route
	//	*SLAFObject_IPv6Route
	//	*SLAFObject_MplsLabel
	//	*SLAFObject_PathGroup
	Entry isSLAFObject_Entry `protobuf_oneof:"entry"`
}

func (x *SLAFObject) Reset() {
	*x = SLAFObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFObject) ProtoMessage() {}

func (x *SLAFObject) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFObject.ProtoReflect.Descriptor instead.
func (*SLAFObject) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{6}
}

func (m *SLAFObject) GetEntry() isSLAFObject_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *SLAFObject) GetIPv4Route() *SLRoutev4 {
	if x, ok := x.GetEntry().(*SLAFObject_IPv4Route); ok {
		return x.IPv4Route
	}
	return nil
}

func (x *SLAFObject) GetIPv6Route() *SLRoutev6 {
	if x, ok := x.GetEntry().(*SLAFObject_IPv6Route); ok {
		return x.IPv6Route
	}
	return nil
}

func (x *SLAFObject) GetMplsLabel() *SLMplsEntry {
	if x, ok := x.GetEntry().(*SLAFObject_MplsLabel); ok {
		return x.MplsLabel
	}
	return nil
}

func (x *SLAFObject) GetPathGroup() *SLPathGroup {
	if x, ok := x.GetEntry().(*SLAFObject_PathGroup); ok {
		return x.PathGroup
	}
	return nil
}

type isSLAFObject_Entry interface {
	isSLAFObject_Entry()
}

type SLAFObject_IPv4Route struct {
	IPv4Route *SLRoutev4 `protobuf:"bytes,1,opt,name=IPv4Route,proto3,oneof"`
}

type SLAFObject_IPv6Route struct {
	IPv6Route *SLRoutev6 `protobuf:"bytes,2,opt,name=IPv6Route,proto3,oneof"`
}

type SLAFObject_MplsLabel struct {
	MplsLabel *SLMplsEntry `protobuf:"bytes,3,opt,name=MplsLabel,proto3,oneof"`
}

type SLAFObject_PathGroup struct {
	PathGroup *SLPathGroup `protobuf:"bytes,4,opt,name=PathGroup,proto3,oneof"`
}

func (*SLAFObject_IPv4Route) isSLAFObject_Entry() {}

func (*SLAFObject_IPv6Route) isSLAFObject_Entry() {}

func (*SLAFObject_MplsLabel) isSLAFObject_Entry() {}

func (*SLAFObject_PathGroup) isSLAFObject_Entry() {}

// Operation on a forwarding table object
type SLAFOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AFObject *SLAFObject `protobuf:"bytes,1,opt,name=AFObject,proto3" json:"AFObject,omitempty"`
	// Unique operationID sent by the client to corelate the responses.
	// The responses from network element can be out of order, and client can
	// use operation ID to correlate the response for the operation on the object.
	// Operation Id should be monotonically increasing for the life of the client.
	OperationID uint64 `protobuf:"varint,2,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
}

func (x *SLAFOp) Reset() {
	*x = SLAFOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFOp) ProtoMessage() {}

func (x *SLAFOp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFOp.ProtoReflect.Descriptor instead.
func (*SLAFOp) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{7}
}

func (x *SLAFOp) GetAFObject() *SLAFObject {
	if x != nil {
		return x.AFObject
	}
	return nil
}

func (x *SLAFOp) GetOperationID() uint64 {
	if x != nil {
		return x.OperationID
	}
	return 0
}

// Operation on the address family. The objects are programmed
// in the given VRF's corresponding table.
type SLAFMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Route Object Operations
	Oper SLObjectOp `protobuf:"varint,1,opt,name=Oper,proto3,enum=service_layer.SLObjectOp" json:"Oper,omitempty"`
	// VRF name. VRF name is ignored for MPLS ILM operations.
	VrfName string `protobuf:"bytes,2,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// Client's desired acknowledgement type
	AckType SLRspACKType `protobuf:"varint,3,opt,name=AckType,proto3,enum=service_layer.SLRspACKType" json:"AckType,omitempty"`
	// List of operations.
	OpList []*SLAFOp `protobuf:"bytes,4,rep,name=OpList,proto3" json:"OpList,omitempty"`
}

func (x *SLAFMsg) Reset() {
	*x = SLAFMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFMsg) ProtoMessage() {}

func (x *SLAFMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFMsg.ProtoReflect.Descriptor instead.
func (*SLAFMsg) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{8}
}

func (x *SLAFMsg) GetOper() SLObjectOp {
	if x != nil {
		return x.Oper
	}
	return SLObjectOp_SL_OBJOP_RESERVED
}

func (x *SLAFMsg) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SLAFMsg) GetAckType() SLRspACKType {
	if x != nil {
		return x.AckType
	}
	return SLRspACKType_RIB_ACK
}

func (x *SLAFMsg) GetOpList() []*SLAFOp {
	if x != nil {
		return x.OpList
	}
	return nil
}

// Result of an operation on the object.
type SLAFRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Corresponding error code
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// The operation ID and object are returned.
	// Only attributes describing an object's key
	// are returned.
	Operation *SLAFOp `protobuf:"bytes,2,opt,name=Operation,proto3" json:"Operation,omitempty"`
}

func (x *SLAFRes) Reset() {
	*x = SLAFRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFRes) ProtoMessage() {}

func (x *SLAFRes) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFRes.ProtoReflect.Descriptor instead.
func (*SLAFRes) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{9}
}

func (x *SLAFRes) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (x *SLAFRes) GetOperation() *SLAFOp {
	if x != nil {
		return x.Operation
	}
	return nil
}

// Route operations result status
type SLAFMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VRF name.
	VrfName string `protobuf:"bytes,1,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// In case of errors, this field indicates which entry in the bulk was
	// erroneous.
	Results []*SLAFRes `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *SLAFMsgRsp) Reset() {
	*x = SLAFMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFMsgRsp) ProtoMessage() {}

func (x *SLAFMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFMsgRsp.ProtoReflect.Descriptor instead.
func (*SLAFMsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{10}
}

func (x *SLAFMsgRsp) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SLAFMsgRsp) GetResults() []*SLAFRes {
	if x != nil {
		return x.Results
	}
	return nil
}

type SLPathGroup_SLPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primary path.
	Path *SLRoutePath `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
}

func (x *SLPathGroup_SLPath) Reset() {
	*x = SLPathGroup_SLPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLPathGroup_SLPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLPathGroup_SLPath) ProtoMessage() {}

func (x *SLPathGroup_SLPath) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLPathGroup_SLPath.ProtoReflect.Descriptor instead.
func (*SLPathGroup_SLPath) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{4, 0}
}

func (x *SLPathGroup_SLPath) GetPath() *SLRoutePath {
	if x != nil {
		return x.Path
	}
	return nil
}

// A list of SLPathList
type SLPathGroup_SLPathList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths []*SLPathGroup_SLPath `protobuf:"bytes,1,rep,name=Paths,proto3" json:"Paths,omitempty"`
}

func (x *SLPathGroup_SLPathList) Reset() {
	*x = SLPathGroup_SLPathList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLPathGroup_SLPathList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLPathGroup_SLPathList) ProtoMessage() {}

func (x *SLPathGroup_SLPathList) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLPathGroup_SLPathList.ProtoReflect.Descriptor instead.
func (*SLPathGroup_SLPathList) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{4, 1}
}

func (x *SLPathGroup_SLPathList) GetPaths() []*SLPathGroup_SLPath {
	if x != nil {
		return x.Paths
	}
	return nil
}

var File_sl_af_proto protoreflect.FileDescriptor

var file_sl_af_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x6c, 0x5f, 0x61, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x1a, 0x15, 0x73, 0x6c,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x73, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x6c, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x13, 0x73, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6f, 0x0a, 0x0a, 0x53, 0x4c, 0x41, 0x46, 0x56, 0x72, 0x66, 0x52,
	0x65, 0x67, 0x12, 0x30, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x52, 0x06, 0x56,
	0x72, 0x66, 0x52, 0x65, 0x67, 0x22, 0x76, 0x0a, 0x0d, 0x53, 0x4c, 0x41, 0x46, 0x56, 0x72, 0x66,
	0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x65, 0x67, 0x4f, 0x70, 0x52, 0x04, 0x4f, 0x70,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x56, 0x72, 0x66, 0x52, 0x65,
	0x67, 0x52, 0x0a, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x73, 0x22, 0x9a, 0x01,
	0x0a, 0x10, 0x53, 0x4c, 0x41, 0x46, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x10, 0x53,
	0x4c, 0x41, 0x46, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12,
	0x42, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x73, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xd5,
	0x02, 0x0a, 0x0b, 0x53, 0x4c, 0x50, 0x61, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3b,
	0x0a, 0x0b, 0x50, 0x61, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x0b,
	0x50, 0x61, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x43, 0x0a, 0x08, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x50, 0x61, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x53, 0x4c, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x50, 0x61,
	0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x1a, 0x38, 0x0a, 0x06,
	0x53, 0x4c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x45, 0x0a, 0x0a, 0x53, 0x4c, 0x50, 0x61, 0x74, 0x68,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x50, 0x61, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x53, 0x4c, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x42, 0x07, 0x0a,
	0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xf2, 0x01, 0x0a, 0x0b, 0x53, 0x4c, 0x4d, 0x70, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x08,
	0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x08, 0x50, 0x61, 0x74, 0x68,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x50, 0x61, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x50, 0x61, 0x74,
	0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x66, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0c,
	0x50, 0x61, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x81, 0x02, 0x0a, 0x0a,
	0x53, 0x4c, 0x41, 0x46, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x49, 0x50,
	0x76, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x34, 0x48, 0x00, 0x52, 0x09, 0x49, 0x50, 0x76, 0x34, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x49, 0x50, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76,
	0x36, 0x48, 0x00, 0x52, 0x09, 0x49, 0x50, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x3a,
	0x0a, 0x09, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x4d, 0x70, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x09, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x09, 0x50, 0x61,
	0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x50, 0x61, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x09, 0x50, 0x61, 0x74,
	0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22,
	0x61, 0x0a, 0x06, 0x53, 0x4c, 0x41, 0x46, 0x4f, 0x70, 0x12, 0x35, 0x0a, 0x08, 0x41, 0x46, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x41, 0x46, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x22, 0xb8, 0x01, 0x0a, 0x07, 0x53, 0x4c, 0x41, 0x46, 0x4d, 0x73, 0x67, 0x12, 0x2d,
	0x0a, 0x04, 0x4f, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x52, 0x04, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x41, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x73, 0x70, 0x41, 0x43,
	0x4b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x41, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d,
	0x0a, 0x06, 0x4f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x41, 0x46, 0x4f, 0x70, 0x52, 0x06, 0x4f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x7a, 0x0a,
	0x07, 0x53, 0x4c, 0x41, 0x46, 0x52, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x4f, 0x70, 0x52, 0x09,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x0a, 0x53, 0x4c, 0x41,
	0x46, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x72, 0x66, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x52, 0x65, 0x73, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x32, 0xd9, 0x01, 0x0a, 0x04, 0x53, 0x4c, 0x41, 0x46, 0x12, 0x4d, 0x0a, 0x0c,
	0x53, 0x4c, 0x41, 0x46, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x4f, 0x70, 0x12, 0x1c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41,
	0x46, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x56,
	0x72, 0x66, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x06, 0x53,
	0x4c, 0x41, 0x46, 0x4f, 0x70, 0x12, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x4d, 0x73, 0x67, 0x1a, 0x19, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x41, 0x46, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x0c, 0x53, 0x4c, 0x41, 0x46,
	0x4f, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x4d, 0x73, 0x67,
	0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x41, 0x46, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x51, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x69,
	0x73, 0x63, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d,
	0x6f, 0x62, 0x6a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sl_af_proto_rawDescOnce sync.Once
	file_sl_af_proto_rawDescData = file_sl_af_proto_rawDesc
)

func file_sl_af_proto_rawDescGZIP() []byte {
	file_sl_af_proto_rawDescOnce.Do(func() {
		file_sl_af_proto_rawDescData = protoimpl.X.CompressGZIP(file_sl_af_proto_rawDescData)
	})
	return file_sl_af_proto_rawDescData
}

var file_sl_af_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_sl_af_proto_goTypes = []interface{}{
	(*SLAFVrfReg)(nil),             // 0: service_layer.SLAFVrfReg
	(*SLAFVrfRegMsg)(nil),          // 1: service_layer.SLAFVrfRegMsg
	(*SLAFVrfRegMsgRes)(nil),       // 2: service_layer.SLAFVrfRegMsgRes
	(*SLAFVrfRegMsgRsp)(nil),       // 3: service_layer.SLAFVrfRegMsgRsp
	(*SLPathGroup)(nil),            // 4: service_layer.SLPathGroup
	(*SLMplsEntry)(nil),            // 5: service_layer.SLMplsEntry
	(*SLAFObject)(nil),             // 6: service_layer.SLAFObject
	(*SLAFOp)(nil),                 // 7: service_layer.SLAFOp
	(*SLAFMsg)(nil),                // 8: service_layer.SLAFMsg
	(*SLAFRes)(nil),                // 9: service_layer.SLAFRes
	(*SLAFMsgRsp)(nil),             // 10: service_layer.SLAFMsgRsp
	(*SLPathGroup_SLPath)(nil),     // 11: service_layer.SLPathGroup.SLPath
	(*SLPathGroup_SLPathList)(nil), // 12: service_layer.SLPathGroup.SLPathList
	(SLTableType)(0),               // 13: service_layer.SLTableType
	(*SLVrfReg)(nil),               // 14: service_layer.SLVrfReg
	(SLRegOp)(0),                   // 15: service_layer.SLRegOp
	(*SLErrorStatus)(nil),          // 16: service_layer.SLErrorStatus
	(*SLObjectId)(nil),             // 17: service_layer.SLObjectId
	(*SLRoutePath)(nil),            // 18: service_layer.SLRoutePath
	(*SLPathGroupRefKey)(nil),      // 19: service_layer.SLPathGroupRefKey
	(*SLRoutev4)(nil),              // 20: service_layer.SLRoutev4
	(*SLRoutev6)(nil),              // 21: service_layer.SLRoutev6
	(SLObjectOp)(0),                // 22: service_layer.SLObjectOp
	(SLRspACKType)(0),              // 23: service_layer.SLRspACKType
}
var file_sl_af_proto_depIdxs = []int32{
	13, // 0: service_layer.SLAFVrfReg.Table:type_name -> service_layer.SLTableType
	14, // 1: service_layer.SLAFVrfReg.VrfReg:type_name -> service_layer.SLVrfReg
	15, // 2: service_layer.SLAFVrfRegMsg.Oper:type_name -> service_layer.SLRegOp
	0,  // 3: service_layer.SLAFVrfRegMsg.VrfRegMsgs:type_name -> service_layer.SLAFVrfReg
	16, // 4: service_layer.SLAFVrfRegMsgRes.ErrStatus:type_name -> service_layer.SLErrorStatus
	13, // 5: service_layer.SLAFVrfRegMsgRes.Table:type_name -> service_layer.SLTableType
	16, // 6: service_layer.SLAFVrfRegMsgRsp.StatusSummary:type_name -> service_layer.SLErrorStatus
	2,  // 7: service_layer.SLAFVrfRegMsgRsp.Results:type_name -> service_layer.SLAFVrfRegMsgRes
	17, // 8: service_layer.SLPathGroup.PathGroupId:type_name -> service_layer.SLObjectId
	12, // 9: service_layer.SLPathGroup.PathList:type_name -> service_layer.SLPathGroup.SLPathList
	18, // 10: service_layer.SLMplsEntry.PathList:type_name -> service_layer.SLRoutePath
	19, // 11: service_layer.SLMplsEntry.PathGroupKey:type_name -> service_layer.SLPathGroupRefKey
	20, // 12: service_layer.SLAFObject.IPv4Route:type_name -> service_layer.SLRoutev4
	21, // 13: service_layer.SLAFObject.IPv6Route:type_name -> service_layer.SLRoutev6
	5,  // 14: service_layer.SLAFObject.MplsLabel:type_name -> service_layer.SLMplsEntry
	4,  // 15: service_layer.SLAFObject.PathGroup:type_name -> service_layer.SLPathGroup
	6,  // 16: service_layer.SLAFOp.AFObject:type_name -> service_layer.SLAFObject
	22, // 17: service_layer.SLAFMsg.Oper:type_name -> service_layer.SLObjectOp
	23, // 18: service_layer.SLAFMsg.AckType:type_name -> service_layer.SLRspACKType
	7,  // 19: service_layer.SLAFMsg.OpList:type_name -> service_layer.SLAFOp
	16, // 20: service_layer.SLAFRes.ErrStatus:type_name -> service_layer.SLErrorStatus
	7,  // 21: service_layer.SLAFRes.Operation:type_name -> service_layer.SLAFOp
	9,  // 22: service_layer.SLAFMsgRsp.Results:type_name -> service_layer.SLAFRes
	18, // 23: service_layer.SLPathGroup.SLPath.Path:type_name -> service_layer.SLRoutePath
	11, // 24: service_layer.SLPathGroup.SLPathList.Paths:type_name -> service_layer.SLPathGroup.SLPath
	1,  // 25: service_layer.SLAF.SLAFVrfRegOp:input_type -> service_layer.SLAFVrfRegMsg
	8,  // 26: service_layer.SLAF.SLAFOp:input_type -> service_layer.SLAFMsg
	8,  // 27: service_layer.SLAF.SLAFOpStream:input_type -> service_layer.SLAFMsg
	3,  // 28: service_layer.SLAF.SLAFVrfRegOp:output_type -> service_layer.SLAFVrfRegMsgRsp
	10, // 29: service_layer.SLAF.SLAFOp:output_type -> service_layer.SLAFMsgRsp
	10, // 30: service_layer.SLAF.SLAFOpStream:output_type -> service_layer.SLAFMsgRsp
	28, // [28:31] is the sub-list for method output_type
	25, // [25:28] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_sl_af_proto_init() }
func file_sl_af_proto_init() {
	if File_sl_af_proto != nil {
		return
	}
	file_sl_common_types_proto_init()
	file_sl_route_common_proto_init()
	file_sl_route_ipv4_proto_init()
	file_sl_route_ipv6_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sl_af_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFVrfReg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFVrfRegMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFVrfRegMsgRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFVrfRegMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLPathGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLMplsEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLPathGroup_SLPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLPathGroup_SLPathList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sl_af_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*SLPathGroup_PathList)(nil),
	}
	file_sl_af_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*SLMplsEntry_PathGroupKey)(nil),
	}
	file_sl_af_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*SLAFObject_IPv4Route)(nil),
		(*SLAFObject_IPv6Route)(nil),
		(*SLAFObject_MplsLabel)(nil),
		(*SLAFObject_PathGroup)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sl_af_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sl_af_proto_goTypes,
		DependencyIndexes: file_sl_af_proto_depIdxs,
		MessageInfos:      file_sl_af_proto_msgTypes,
	}.Build()
	File_sl_af_proto = out.File
	file_sl_af_proto_rawDesc = nil
	file_sl_af_proto_goTypes = nil
	file_sl_af_proto_depIdxs = nil
}
