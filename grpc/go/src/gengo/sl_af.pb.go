// @file
// @brief Client RPC proto file for operations on objects in a address family.
// This file defines SL-API service and messages for operations
// on IP routes, MPLS objects and Path Groups objects.
//
// The RPCs and messages defined here are experimental and subject to
// change without notice and such changes can break backwards compatibility.
//
// ----------------------------------------------------------------
//  Copyright (c) 2023 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//

//@defgroup AF
//@brief Address family service definitions.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.3
// source: sl_af.proto

package service_layer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AF VRF Registration message.
type SLAFVrfReg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Registration message is applied on VRF's identified table.
	Table SLTableType `protobuf:"varint,1,opt,name=Table,proto3,enum=service_layer.SLTableType" json:"Table,omitempty"`
	// VRF registration attibutes.
	VrfReg *SLVrfReg `protobuf:"bytes,2,opt,name=VrfReg,proto3" json:"VrfReg,omitempty"`
}

func (x *SLAFVrfReg) Reset() {
	*x = SLAFVrfReg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFVrfReg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFVrfReg) ProtoMessage() {}

func (x *SLAFVrfReg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFVrfReg.ProtoReflect.Descriptor instead.
func (*SLAFVrfReg) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{0}
}

func (x *SLAFVrfReg) GetTable() SLTableType {
	if x != nil {
		return x.Table
	}
	return SLTableType_SL_TABLE_TYPE_RESERVED
}

func (x *SLAFVrfReg) GetVrfReg() *SLVrfReg {
	if x != nil {
		return x.VrfReg
	}
	return nil
}

// AF VRF Registration messages.
type SLAFVrfRegMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Registration Operation
	Oper SLRegOp `protobuf:"varint,1,opt,name=Oper,proto3,enum=service_layer.SLRegOp" json:"Oper,omitempty"`
	// List of VRF registrations
	VrfRegMsgs []*SLAFVrfReg `protobuf:"bytes,2,rep,name=VrfRegMsgs,proto3" json:"VrfRegMsgs,omitempty"`
}

func (x *SLAFVrfRegMsg) Reset() {
	*x = SLAFVrfRegMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFVrfRegMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFVrfRegMsg) ProtoMessage() {}

func (x *SLAFVrfRegMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFVrfRegMsg.ProtoReflect.Descriptor instead.
func (*SLAFVrfRegMsg) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{1}
}

func (x *SLAFVrfRegMsg) GetOper() SLRegOp {
	if x != nil {
		return x.Oper
	}
	return SLRegOp_SL_REGOP_RESERVED
}

func (x *SLAFVrfRegMsg) GetVrfRegMsgs() []*SLAFVrfReg {
	if x != nil {
		return x.VrfRegMsgs
	}
	return nil
}

// AF VRF Registration message Result
type SLAFVrfRegMsgRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Corresponding error code
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// VRF Name
	VrfName string `protobuf:"bytes,2,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// Table type
	Table SLTableType `protobuf:"varint,3,opt,name=Table,proto3,enum=service_layer.SLTableType" json:"Table,omitempty"`
}

func (x *SLAFVrfRegMsgRes) Reset() {
	*x = SLAFVrfRegMsgRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFVrfRegMsgRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFVrfRegMsgRes) ProtoMessage() {}

func (x *SLAFVrfRegMsgRes) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFVrfRegMsgRes.ProtoReflect.Descriptor instead.
func (*SLAFVrfRegMsgRes) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{2}
}

func (x *SLAFVrfRegMsgRes) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (x *SLAFVrfRegMsgRes) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SLAFVrfRegMsgRes) GetTable() SLTableType {
	if x != nil {
		return x.Table
	}
	return SLTableType_SL_TABLE_TYPE_RESERVED
}

// VRF Registration message Response.
type SLAFVrfRegMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary result of the bulk operation (refer to enum SLErrorStatus)
	// In general, the StatusSummary implies one of 3 things:
	//  1. SL_SUCCESS: signifies that the entire bulk operation was successful.
	//     In this case, the Results list is empty.
	//  2. SL_SOME_ERR: signifies that the operation failed for one or more
	//     entries. In this case, Results holds the result for
	//     each individual entry in the bulk.
	//  3. SL_RPC_XXX: signifies that the entire bulk operation failed.
	//     In this case, the Results list is empty.
	StatusSummary *SLErrorStatus `protobuf:"bytes,1,opt,name=StatusSummary,proto3" json:"StatusSummary,omitempty"`
	// In case of errors, this field indicates which entry in the bulk was
	// erroneous.
	Results []*SLAFVrfRegMsgRes `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *SLAFVrfRegMsgRsp) Reset() {
	*x = SLAFVrfRegMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFVrfRegMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFVrfRegMsgRsp) ProtoMessage() {}

func (x *SLAFVrfRegMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFVrfRegMsgRsp.ProtoReflect.Descriptor instead.
func (*SLAFVrfRegMsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{3}
}

func (x *SLAFVrfRegMsgRsp) GetStatusSummary() *SLErrorStatus {
	if x != nil {
		return x.StatusSummary
	}
	return nil
}

func (x *SLAFVrfRegMsgRsp) GetResults() []*SLAFVrfRegMsgRes {
	if x != nil {
		return x.Results
	}
	return nil
}

// VRF Reg Get Request Message.
// Returns the VRF registrations done for all table types
type SLAFVrfRegGetMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true,  returns VRF registrations for all clients.
	// If false, returns VRF registrations for this client as identified by the gRPC metadata
	GetAll bool `protobuf:"varint,1,opt,name=GetAll,proto3" json:"GetAll,omitempty"`
}

func (x *SLAFVrfRegGetMsg) Reset() {
	*x = SLAFVrfRegGetMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFVrfRegGetMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFVrfRegGetMsg) ProtoMessage() {}

func (x *SLAFVrfRegGetMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFVrfRegGetMsg.ProtoReflect.Descriptor instead.
func (*SLAFVrfRegGetMsg) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{4}
}

func (x *SLAFVrfRegGetMsg) GetGetAll() bool {
	if x != nil {
		return x.GetAll
	}
	return false
}

// VRF Reg Get Message Response
type SLAFVrfRegGetMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the Get operation
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// Client that performed this registration
	ClientID uint64 `protobuf:"varint,2,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	// if ErrStatus is SL_SUCCESS, Table and Entries
	// contain the table in which the VRF registration
	// operation was previously applied.
	Table SLTableType `protobuf:"varint,3,opt,name=Table,proto3,enum=service_layer.SLTableType" json:"Table,omitempty"`
	// VRF registration operation
	Entries []*SLVrfReg `protobuf:"bytes,4,rep,name=Entries,proto3" json:"Entries,omitempty"`
}

func (x *SLAFVrfRegGetMsgRsp) Reset() {
	*x = SLAFVrfRegGetMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFVrfRegGetMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFVrfRegGetMsgRsp) ProtoMessage() {}

func (x *SLAFVrfRegGetMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFVrfRegGetMsgRsp.ProtoReflect.Descriptor instead.
func (*SLAFVrfRegGetMsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{5}
}

func (x *SLAFVrfRegGetMsgRsp) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (x *SLAFVrfRegGetMsgRsp) GetClientID() uint64 {
	if x != nil {
		return x.ClientID
	}
	return 0
}

func (x *SLAFVrfRegGetMsgRsp) GetTable() SLTableType {
	if x != nil {
		return x.Table
	}
	return SLTableType_SL_TABLE_TYPE_RESERVED
}

func (x *SLAFVrfRegGetMsgRsp) GetEntries() []*SLVrfReg {
	if x != nil {
		return x.Entries
	}
	return nil
}

// Path Group definition.
type SLPathGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path Group ID
	PathGroupId *SLObjectId `protobuf:"bytes,1,opt,name=PathGroupId,proto3" json:"PathGroupId,omitempty"`
	// Adminstrative distance of the Path Group. [0-255].
	// RIB uses this field to break the tie when multiple
	// sources install the same Path Group.
	// Lower distance is preferred over higher distance.
	// The per path group object admin distance overrides the default's admin
	// distance set at VRF registration. see SLVrfReg
	AdminDistance uint32 `protobuf:"varint,2,opt,name=AdminDistance,proto3" json:"AdminDistance,omitempty"`
	// Description of paths in the PathGroup.
	// Oneof is used here for future extensibility.
	//
	// Types that are assignable to Entry:
	//
	//	*SLPathGroup_PathList
	Entry isSLPathGroup_Entry `protobuf_oneof:"entry"`
	// Flags to control programming of the PathGroup to Routing
	// Information Base. Each flag is indicated as a bit field.
	// See SLRouteFlags for flag enumerations.
	Flags uint32 `protobuf:"varint,4,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *SLPathGroup) Reset() {
	*x = SLPathGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLPathGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLPathGroup) ProtoMessage() {}

func (x *SLPathGroup) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLPathGroup.ProtoReflect.Descriptor instead.
func (*SLPathGroup) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{6}
}

func (x *SLPathGroup) GetPathGroupId() *SLObjectId {
	if x != nil {
		return x.PathGroupId
	}
	return nil
}

func (x *SLPathGroup) GetAdminDistance() uint32 {
	if x != nil {
		return x.AdminDistance
	}
	return 0
}

func (m *SLPathGroup) GetEntry() isSLPathGroup_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *SLPathGroup) GetPathList() *SLPathGroup_SLPathList {
	if x, ok := x.GetEntry().(*SLPathGroup_PathList); ok {
		return x.PathList
	}
	return nil
}

func (x *SLPathGroup) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type isSLPathGroup_Entry interface {
	isSLPathGroup_Entry()
}

type SLPathGroup_PathList struct {
	// Path List
	PathList *SLPathGroup_SLPathList `protobuf:"bytes,3,opt,name=PathList,proto3,oneof"`
}

func (*SLPathGroup_PathList) isSLPathGroup_Entry() {}

// MPLS entry.
// This message defines an entry in the MPLS forwarding table.
type SLMplsEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Local Label.
	LocalLabel uint32 `protobuf:"varint,1,opt,name=LocalLabel,proto3" json:"LocalLabel,omitempty"`
	// Administrative distance of the MPLS label. [0-255]. RIB uses this field
	// to break the tie when multiple sources install the same incoming MPLS
	// label. Lower distance is preferred over higher distance. The per MPLS
	// label object admin distance overrides the default's admin distance set
	// at VRF registration. see SLVrfReg
	AdminDistance uint32 `protobuf:"varint,2,opt,name=AdminDistance,proto3" json:"AdminDistance,omitempty"`
	// List of paths for this MPLS label entry.
	// Specifying more than one path is allowed for ECMP/UCMP cases
	PathList []*SLRoutePath `protobuf:"bytes,3,rep,name=PathList,proto3" json:"PathList,omitempty"`
	// Reference to the Path Group for this MPLS label entry.
	// The attribute is oneof to allow for future extension.
	//
	// Types that are assignable to Entry:
	//
	//	*SLMplsEntry_PathGroupKey
	Entry isSLMplsEntry_Entry `protobuf_oneof:"entry"`
	// Flags to control programming of the MPLS Entry to Routing
	// Information Base. Each flag is indicated as a bit field.
	// See SLRouteFlags for flag enumerations.
	Flags uint32 `protobuf:"varint,5,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *SLMplsEntry) Reset() {
	*x = SLMplsEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLMplsEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLMplsEntry) ProtoMessage() {}

func (x *SLMplsEntry) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLMplsEntry.ProtoReflect.Descriptor instead.
func (*SLMplsEntry) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{7}
}

func (x *SLMplsEntry) GetLocalLabel() uint32 {
	if x != nil {
		return x.LocalLabel
	}
	return 0
}

func (x *SLMplsEntry) GetAdminDistance() uint32 {
	if x != nil {
		return x.AdminDistance
	}
	return 0
}

func (x *SLMplsEntry) GetPathList() []*SLRoutePath {
	if x != nil {
		return x.PathList
	}
	return nil
}

func (m *SLMplsEntry) GetEntry() isSLMplsEntry_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *SLMplsEntry) GetPathGroupKey() *SLPathGroupRefKey {
	if x, ok := x.GetEntry().(*SLMplsEntry_PathGroupKey); ok {
		return x.PathGroupKey
	}
	return nil
}

func (x *SLMplsEntry) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type isSLMplsEntry_Entry interface {
	isSLMplsEntry_Entry()
}

type SLMplsEntry_PathGroupKey struct {
	// Path group reference key
	PathGroupKey *SLPathGroupRefKey `protobuf:"bytes,4,opt,name=PathGroupKey,proto3,oneof"`
}

func (*SLMplsEntry_PathGroupKey) isSLMplsEntry_Entry() {}

// One of AF objects
type SLAFObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entry:
	//
	//	*SLAFObject_IPv4Route
	//	*SLAFObject_IPv6Route
	//	*SLAFObject_MplsLabel
	//	*SLAFObject_PathGroup
	Entry isSLAFObject_Entry `protobuf_oneof:"entry"`
}

func (x *SLAFObject) Reset() {
	*x = SLAFObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFObject) ProtoMessage() {}

func (x *SLAFObject) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFObject.ProtoReflect.Descriptor instead.
func (*SLAFObject) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{8}
}

func (m *SLAFObject) GetEntry() isSLAFObject_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *SLAFObject) GetIPv4Route() *SLRoutev4 {
	if x, ok := x.GetEntry().(*SLAFObject_IPv4Route); ok {
		return x.IPv4Route
	}
	return nil
}

func (x *SLAFObject) GetIPv6Route() *SLRoutev6 {
	if x, ok := x.GetEntry().(*SLAFObject_IPv6Route); ok {
		return x.IPv6Route
	}
	return nil
}

func (x *SLAFObject) GetMplsLabel() *SLMplsEntry {
	if x, ok := x.GetEntry().(*SLAFObject_MplsLabel); ok {
		return x.MplsLabel
	}
	return nil
}

func (x *SLAFObject) GetPathGroup() *SLPathGroup {
	if x, ok := x.GetEntry().(*SLAFObject_PathGroup); ok {
		return x.PathGroup
	}
	return nil
}

type isSLAFObject_Entry interface {
	isSLAFObject_Entry()
}

type SLAFObject_IPv4Route struct {
	IPv4Route *SLRoutev4 `protobuf:"bytes,1,opt,name=IPv4Route,proto3,oneof"`
}

type SLAFObject_IPv6Route struct {
	IPv6Route *SLRoutev6 `protobuf:"bytes,2,opt,name=IPv6Route,proto3,oneof"`
}

type SLAFObject_MplsLabel struct {
	MplsLabel *SLMplsEntry `protobuf:"bytes,3,opt,name=MplsLabel,proto3,oneof"`
}

type SLAFObject_PathGroup struct {
	PathGroup *SLPathGroup `protobuf:"bytes,4,opt,name=PathGroup,proto3,oneof"`
}

func (*SLAFObject_IPv4Route) isSLAFObject_Entry() {}

func (*SLAFObject_IPv6Route) isSLAFObject_Entry() {}

func (*SLAFObject_MplsLabel) isSLAFObject_Entry() {}

func (*SLAFObject_PathGroup) isSLAFObject_Entry() {}

// Operation on a forwarding table object
type SLAFOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AFObject *SLAFObject `protobuf:"bytes,1,opt,name=AFObject,proto3" json:"AFObject,omitempty"`
	// Unique operationID sent by the client to corelate the responses.
	// The responses from network element can be out of order, and client can
	// use operation ID to correlate the response for the operation on the object.
	// Operation Id should be monotonically increasing for the life of the client.
	OperationID uint64 `protobuf:"varint,2,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	// The type of Acknowledgment that the controller or agent expects from
	// the network element.
	AckType SLRspACKType `protobuf:"varint,3,opt,name=AckType,proto3,enum=service_layer.SLRspACKType" json:"AckType,omitempty"`
}

func (x *SLAFOp) Reset() {
	*x = SLAFOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFOp) ProtoMessage() {}

func (x *SLAFOp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFOp.ProtoReflect.Descriptor instead.
func (*SLAFOp) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{9}
}

func (x *SLAFOp) GetAFObject() *SLAFObject {
	if x != nil {
		return x.AFObject
	}
	return nil
}

func (x *SLAFOp) GetOperationID() uint64 {
	if x != nil {
		return x.OperationID
	}
	return 0
}

func (x *SLAFOp) GetAckType() SLRspACKType {
	if x != nil {
		return x.AckType
	}
	return SLRspACKType_RIB_ACK
}

// Used to retrieve objects in a VRF table.
// Only objects produced by this client (as indicated in the RPC's metadata)
// are returned unless the GetAllClients is set to true. In that case, all
// the objects produced by all the clients is returned.
type SLAFGetMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VRF name. If VRF name is not specified or is nil, get objects from
	// all VRFs.
	VrfName string `protobuf:"bytes,1,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// If Table is set to SL_TABLE_TYPE_RESERVED, or is unset, objects from
	// all tables for selected VRFs are returned.
	Table SLTableType `protobuf:"varint,2,opt,name=Table,proto3,enum=service_layer.SLTableType" json:"Table,omitempty"`
	// Get objects programmed by all clients, ignoring any RPC ClientID
	// metadata.
	GetAllClients bool `protobuf:"varint,3,opt,name=GetAllClients,proto3" json:"GetAllClients,omitempty"`
}

func (x *SLAFGetMsg) Reset() {
	*x = SLAFGetMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFGetMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFGetMsg) ProtoMessage() {}

func (x *SLAFGetMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFGetMsg.ProtoReflect.Descriptor instead.
func (*SLAFGetMsg) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{10}
}

func (x *SLAFGetMsg) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SLAFGetMsg) GetTable() SLTableType {
	if x != nil {
		return x.Table
	}
	return SLTableType_SL_TABLE_TYPE_RESERVED
}

func (x *SLAFGetMsg) GetGetAllClients() bool {
	if x != nil {
		return x.GetAllClients
	}
	return false
}

type SLAFFibStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error code associated with hardware programming
	ErrorCode *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	// Operation ID associated with hardware programming.
	OperationID uint64 `protobuf:"varint,2,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	// Version associated with hardware programming. A valid version is
	// a non-zero positive number
	Version uint64 `protobuf:"varint,3,opt,name=Version,proto3" json:"Version,omitempty"`
	// Descriptive string describing error if any, on the hardware programming
	ErrorString string `protobuf:"bytes,4,opt,name=ErrorString,proto3" json:"ErrorString,omitempty"`
	// DepResult is the result of any operation that this operation depends on.
	// For example: if this OperationID is about programming an ipv4 or ipv6
	// route that is pointing to a Path Group, then DepResult will carry
	// the Result of operation that programmed that Path Group.
	// *NOTE*: DepResult is not supported on Get Operations
	DepResult []*SLAFFibStatus `protobuf:"bytes,5,rep,name=DepResult,proto3" json:"DepResult,omitempty"`
}

func (x *SLAFFibStatus) Reset() {
	*x = SLAFFibStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFFibStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFFibStatus) ProtoMessage() {}

func (x *SLAFFibStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFFibStatus.ProtoReflect.Descriptor instead.
func (*SLAFFibStatus) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{11}
}

func (x *SLAFFibStatus) GetErrorCode() *SLErrorStatus {
	if x != nil {
		return x.ErrorCode
	}
	return nil
}

func (x *SLAFFibStatus) GetOperationID() uint64 {
	if x != nil {
		return x.OperationID
	}
	return 0
}

func (x *SLAFFibStatus) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SLAFFibStatus) GetErrorString() string {
	if x != nil {
		return x.ErrorString
	}
	return ""
}

func (x *SLAFFibStatus) GetDepResult() []*SLAFFibStatus {
	if x != nil {
		return x.DepResult
	}
	return nil
}

// Object and its programming status returned on Get.
type SLAFGetMsgRspEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Object
	AFOp *SLAFOp `protobuf:"bytes,1,opt,name=AFOp,proto3" json:"AFOp,omitempty"`
	// if the operation was programmed with ACK type set to RIB_AND_FIB_ACK,
	// then FIBStatus indicates status of hardware programming of the
	// operation
	FIBStatus *SLAFFibStatus `protobuf:"bytes,2,opt,name=FIBStatus,proto3" json:"FIBStatus,omitempty"`
}

func (x *SLAFGetMsgRspEntry) Reset() {
	*x = SLAFGetMsgRspEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFGetMsgRspEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFGetMsgRspEntry) ProtoMessage() {}

func (x *SLAFGetMsgRspEntry) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFGetMsgRspEntry.ProtoReflect.Descriptor instead.
func (*SLAFGetMsgRspEntry) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{12}
}

func (x *SLAFGetMsgRspEntry) GetAFOp() *SLAFOp {
	if x != nil {
		return x.AFOp
	}
	return nil
}

func (x *SLAFGetMsgRspEntry) GetFIBStatus() *SLAFFibStatus {
	if x != nil {
		return x.FIBStatus
	}
	return nil
}

// Get AF message response. The objects can be returned in
// any order.
type SLAFGetMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the Get Stats operation
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// VRF name.
	VrfName string `protobuf:"bytes,2,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// Client ID. If the client requested read of all clients' objects,
	// the Client ID field can be used by the client to determine
	// if the object was previously programmed by this client or some
	// other client.
	ClientID uint64 `protobuf:"varint,3,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	// Returned entries as requested in the Get operation.
	// if ErrStatus is SL_SUCCESS, entry contains the list
	// of objects from the specified Table.
	AFList []*SLAFGetMsgRspEntry `protobuf:"bytes,4,rep,name=AFList,proto3" json:"AFList,omitempty"`
}

func (x *SLAFGetMsgRsp) Reset() {
	*x = SLAFGetMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFGetMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFGetMsgRsp) ProtoMessage() {}

func (x *SLAFGetMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFGetMsgRsp.ProtoReflect.Descriptor instead.
func (*SLAFGetMsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{13}
}

func (x *SLAFGetMsgRsp) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (x *SLAFGetMsgRsp) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SLAFGetMsgRsp) GetClientID() uint64 {
	if x != nil {
		return x.ClientID
	}
	return 0
}

func (x *SLAFGetMsgRsp) GetAFList() []*SLAFGetMsgRspEntry {
	if x != nil {
		return x.AFList
	}
	return nil
}

// Operation on the address family. The objects are programmed
// in the given VRF's corresponding table.
type SLAFMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Route Object Operations
	Oper SLObjectOp `protobuf:"varint,1,opt,name=Oper,proto3,enum=service_layer.SLObjectOp" json:"Oper,omitempty"`
	// VRF name. VRF name is ignored for MPLS ILM operations.
	VrfName string `protobuf:"bytes,2,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// List of operations.
	OpList []*SLAFOp `protobuf:"bytes,3,rep,name=OpList,proto3" json:"OpList,omitempty"`
}

func (x *SLAFMsg) Reset() {
	*x = SLAFMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFMsg) ProtoMessage() {}

func (x *SLAFMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFMsg.ProtoReflect.Descriptor instead.
func (*SLAFMsg) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{14}
}

func (x *SLAFMsg) GetOper() SLObjectOp {
	if x != nil {
		return x.Oper
	}
	return SLObjectOp_SL_OBJOP_RESERVED
}

func (x *SLAFMsg) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SLAFMsg) GetOpList() []*SLAFOp {
	if x != nil {
		return x.OpList
	}
	return nil
}

// Result of an operation on the object.
type SLAFRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error code
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// The operation, expected to carry only the part that is considered
	// the key to uniquely identify the object that is programmed
	Operation *SLAFOp `protobuf:"bytes,2,opt,name=Operation,proto3" json:"Operation,omitempty"`
	// if the operation was programmed with ACK type set to RIB_AND_FIB_ACK,
	// then FIBStatus indicates status of hardware programming of the
	// operation
	FIBStatus *SLAFFibStatus `protobuf:"bytes,3,opt,name=FIBStatus,proto3" json:"FIBStatus,omitempty"`
}

func (x *SLAFRes) Reset() {
	*x = SLAFRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFRes) ProtoMessage() {}

func (x *SLAFRes) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFRes.ProtoReflect.Descriptor instead.
func (*SLAFRes) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{15}
}

func (x *SLAFRes) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (x *SLAFRes) GetOperation() *SLAFOp {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *SLAFRes) GetFIBStatus() *SLAFFibStatus {
	if x != nil {
		return x.FIBStatus
	}
	return nil
}

// Route operations result status
type SLAFMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VRF name.
	VrfName string `protobuf:"bytes,1,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// In case of errors, this field indicates which entry in the bulk was
	// erroneous.
	Results []*SLAFRes `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *SLAFMsgRsp) Reset() {
	*x = SLAFMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFMsgRsp) ProtoMessage() {}

func (x *SLAFMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFMsgRsp.ProtoReflect.Descriptor instead.
func (*SLAFMsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{16}
}

func (x *SLAFMsgRsp) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SLAFMsgRsp) GetResults() []*SLAFRes {
	if x != nil {
		return x.Results
	}
	return nil
}

// Request message for route redistribution registration.
type SLAFRedistRegMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source Protocol.
	// Only routes with specified source protocol and protocol tag will be
	// notified.
	// Contact Cisco for supported protocol string names.
	// This field is mandatory.
	SrcProto string `protobuf:"bytes,1,opt,name=SrcProto,proto3" json:"SrcProto,omitempty"`
	// Source Protocol Tag. This can be empty if N/A.
	// Contact Cisco for supported protocol tags.
	// This field is optional.
	SrcProtoTag string `protobuf:"bytes,2,opt,name=SrcProtoTag,proto3" json:"SrcProtoTag,omitempty"`
	// Table type the client is interested in.
	// This field is mandatory.
	Table SLTableType `protobuf:"varint,3,opt,name=Table,proto3,enum=service_layer.SLTableType" json:"Table,omitempty"`
}

func (x *SLAFRedistRegMsg) Reset() {
	*x = SLAFRedistRegMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFRedistRegMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFRedistRegMsg) ProtoMessage() {}

func (x *SLAFRedistRegMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFRedistRegMsg.ProtoReflect.Descriptor instead.
func (*SLAFRedistRegMsg) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{17}
}

func (x *SLAFRedistRegMsg) GetSrcProto() string {
	if x != nil {
		return x.SrcProto
	}
	return ""
}

func (x *SLAFRedistRegMsg) GetSrcProtoTag() string {
	if x != nil {
		return x.SrcProtoTag
	}
	return ""
}

func (x *SLAFRedistRegMsg) GetTable() SLTableType {
	if x != nil {
		return x.Table
	}
	return SLTableType_SL_TABLE_TYPE_RESERVED
}

// Next hop registration request key.
type SLAFNextHopRegKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Notification request key.
	//
	// Types that are assignable to Nexthopkey:
	//
	//	*SLAFNextHopRegKey_NextHop
	Nexthopkey isSLAFNextHopRegKey_Nexthopkey `protobuf_oneof:"nexthopkey"`
}

func (x *SLAFNextHopRegKey) Reset() {
	*x = SLAFNextHopRegKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFNextHopRegKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFNextHopRegKey) ProtoMessage() {}

func (x *SLAFNextHopRegKey) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFNextHopRegKey.ProtoReflect.Descriptor instead.
func (*SLAFNextHopRegKey) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{18}
}

func (m *SLAFNextHopRegKey) GetNexthopkey() isSLAFNextHopRegKey_Nexthopkey {
	if m != nil {
		return m.Nexthopkey
	}
	return nil
}

func (x *SLAFNextHopRegKey) GetNextHop() *SLAFNextHopRegKey_SLNextHopKey {
	if x, ok := x.GetNexthopkey().(*SLAFNextHopRegKey_NextHop); ok {
		return x.NextHop
	}
	return nil
}

type isSLAFNextHopRegKey_Nexthopkey interface {
	isSLAFNextHopRegKey_Nexthopkey()
}

type SLAFNextHopRegKey_NextHop struct {
	// A next hop IP address.
	NextHop *SLAFNextHopRegKey_SLNextHopKey `protobuf:"bytes,1,opt,name=NextHop,proto3,oneof"`
}

func (*SLAFNextHopRegKey_NextHop) isSLAFNextHopRegKey_Nexthopkey() {}

// Next hop registration message.
type SLAFNextHopRegMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next hop registration key.
	NextHopKey *SLAFNextHopRegKey `protobuf:"bytes,1,opt,name=NextHopKey,proto3" json:"NextHopKey,omitempty"`
}

func (x *SLAFNextHopRegMsg) Reset() {
	*x = SLAFNextHopRegMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFNextHopRegMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFNextHopRegMsg) ProtoMessage() {}

func (x *SLAFNextHopRegMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFNextHopRegMsg.ProtoReflect.Descriptor instead.
func (*SLAFNextHopRegMsg) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{19}
}

func (x *SLAFNextHopRegMsg) GetNextHopKey() *SLAFNextHopRegKey {
	if x != nil {
		return x.NextHopKey
	}
	return nil
}

// Notification request message for a single item.
type SLAFNotifRegReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*SLAFNotifRegReq_RedistReq
	//	*SLAFNotifRegReq_NextHopReq
	Request isSLAFNotifRegReq_Request `protobuf_oneof:"request"`
	// Unique OperationID sent by the client to correlate the
	// registration request with the response.
	// When this change registration request is applied
	// in the server, the result of this registration operation is returned
	// to the client along with Operation ID to allow the client correlate
	// responses with the requests. Note, server reflects the OperationID
	// only in registration responses, and not in the corresponding
	// notifications.
	OperationID uint64 `protobuf:"varint,3,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
}

func (x *SLAFNotifRegReq) Reset() {
	*x = SLAFNotifRegReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFNotifRegReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFNotifRegReq) ProtoMessage() {}

func (x *SLAFNotifRegReq) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFNotifRegReq.ProtoReflect.Descriptor instead.
func (*SLAFNotifRegReq) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{20}
}

func (m *SLAFNotifRegReq) GetRequest() isSLAFNotifRegReq_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *SLAFNotifRegReq) GetRedistReq() *SLAFRedistRegMsg {
	if x, ok := x.GetRequest().(*SLAFNotifRegReq_RedistReq); ok {
		return x.RedistReq
	}
	return nil
}

func (x *SLAFNotifRegReq) GetNextHopReq() *SLAFNextHopRegMsg {
	if x, ok := x.GetRequest().(*SLAFNotifRegReq_NextHopReq); ok {
		return x.NextHopReq
	}
	return nil
}

func (x *SLAFNotifRegReq) GetOperationID() uint64 {
	if x != nil {
		return x.OperationID
	}
	return 0
}

type isSLAFNotifRegReq_Request interface {
	isSLAFNotifRegReq_Request()
}

type SLAFNotifRegReq_RedistReq struct {
	// Route redistribution request.
	RedistReq *SLAFRedistRegMsg `protobuf:"bytes,1,opt,name=RedistReq,proto3,oneof"`
}

type SLAFNotifRegReq_NextHopReq struct {
	// Next hop notification request.
	NextHopReq *SLAFNextHopRegMsg `protobuf:"bytes,2,opt,name=NextHopReq,proto3,oneof"`
}

func (*SLAFNotifRegReq_RedistReq) isSLAFNotifRegReq_Request() {}

func (*SLAFNotifRegReq_NextHopReq) isSLAFNotifRegReq_Request() {}

// RPC Notification request - either a route redistribution
// request or a next hop change notification request.
type SLAFNotifReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Oper = SL_NOTIFOP_ENABLE
	//
	//	This is to enable route notifications in a VRF or
	//	 the next hop change notification.
	//
	// Oper = SL_NOTIFOP_DISABLE
	//
	//	This is to disable route notifications in a VRF or
	//	the next hop change notification.
	Oper SLNotifOp `protobuf:"varint,1,opt,name=Oper,proto3,enum=service_layer.SLNotifOp" json:"Oper,omitempty"`
	// Vrf that the client is interested in.
	VrfName string `protobuf:"bytes,2,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// Notification request.
	NotifReq []*SLAFNotifRegReq `protobuf:"bytes,3,rep,name=NotifReq,proto3" json:"NotifReq,omitempty"`
}

func (x *SLAFNotifReq) Reset() {
	*x = SLAFNotifReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFNotifReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFNotifReq) ProtoMessage() {}

func (x *SLAFNotifReq) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFNotifReq.ProtoReflect.Descriptor instead.
func (*SLAFNotifReq) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{21}
}

func (x *SLAFNotifReq) GetOper() SLNotifOp {
	if x != nil {
		return x.Oper
	}
	return SLNotifOp_SL_NOTIFOP_RESERVED
}

func (x *SLAFNotifReq) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SLAFNotifReq) GetNotifReq() []*SLAFNotifRegReq {
	if x != nil {
		return x.NotifReq
	}
	return nil
}

// Notification response message for a single item.
type SLAFNotifRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Corresponding request.
	NotifReq *SLAFNotifRegReq `protobuf:"bytes,1,opt,name=NotifReq,proto3" json:"NotifReq,omitempty"`
	// The NotifStatus implies one of 2 things:
	// SL_SUCCESS: signifies that the notification request was successful
	// SL_XXX: signifies an error in setting up a notification for the Vrf.
	NotifStatus *SLErrorStatus `protobuf:"bytes,2,opt,name=NotifStatus,proto3" json:"NotifStatus,omitempty"`
}

func (x *SLAFNotifRsp) Reset() {
	*x = SLAFNotifRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFNotifRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFNotifRsp) ProtoMessage() {}

func (x *SLAFNotifRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFNotifRsp.ProtoReflect.Descriptor instead.
func (*SLAFNotifRsp) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{22}
}

func (x *SLAFNotifRsp) GetNotifReq() *SLAFNotifRegReq {
	if x != nil {
		return x.NotifReq
	}
	return nil
}

func (x *SLAFNotifRsp) GetNotifStatus() *SLErrorStatus {
	if x != nil {
		return x.NotifStatus
	}
	return nil
}

// Next hop Notification
type SLNextHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next hop registration key.
	NextHopKey *SLAFNextHopRegKey `protobuf:"bytes,1,opt,name=NextHopKey,proto3" json:"NextHopKey,omitempty"`
	// Prefix of the route resolving the nexthop
	ResolvingRoute *SLIpAddress `protobuf:"bytes,2,opt,name=ResolvingRoute,proto3" json:"ResolvingRoute,omitempty"`
	// Resolving route's prefix length
	ResolvingRouteLen uint32 `protobuf:"varint,3,opt,name=ResolvingRouteLen,proto3" json:"ResolvingRouteLen,omitempty"`
	// Source Protocol.
	// Contact Cisco for supported protocol string names.
	SrcProto string `protobuf:"bytes,4,opt,name=SrcProto,proto3" json:"SrcProto,omitempty"`
	// Nexthop route distance
	AdminDistance uint32 `protobuf:"varint,5,opt,name=admin_distance,json=adminDistance,proto3" json:"admin_distance,omitempty"`
	// Nexthop route metric
	Metric uint32 `protobuf:"varint,6,opt,name=metric,proto3" json:"metric,omitempty"`
	// Nexthop's path list. Paths indicate paths available
	// for the next hop. In case of recursive next hop resolution,
	// the returned path list consists of flattened directly connected
	// paths.
	//
	// If this field is not present,
	// then no viable path to the next hop exist.
	Paths []*SLRoutePath `protobuf:"bytes,7,rep,name=Paths,proto3" json:"Paths,omitempty"`
}

func (x *SLNextHop) Reset() {
	*x = SLNextHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLNextHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLNextHop) ProtoMessage() {}

func (x *SLNextHop) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLNextHop.ProtoReflect.Descriptor instead.
func (*SLNextHop) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{23}
}

func (x *SLNextHop) GetNextHopKey() *SLAFNextHopRegKey {
	if x != nil {
		return x.NextHopKey
	}
	return nil
}

func (x *SLNextHop) GetResolvingRoute() *SLIpAddress {
	if x != nil {
		return x.ResolvingRoute
	}
	return nil
}

func (x *SLNextHop) GetResolvingRouteLen() uint32 {
	if x != nil {
		return x.ResolvingRouteLen
	}
	return 0
}

func (x *SLNextHop) GetSrcProto() string {
	if x != nil {
		return x.SrcProto
	}
	return ""
}

func (x *SLNextHop) GetAdminDistance() uint32 {
	if x != nil {
		return x.AdminDistance
	}
	return 0
}

func (x *SLNextHop) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *SLNextHop) GetPaths() []*SLRoutePath {
	if x != nil {
		return x.Paths
	}
	return nil
}

// AF Notification message.
type SLAFNotif struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*SLAFNotif_NotifStatus
	//	*SLAFNotif_RedistObject
	//	*SLAFNotif_NextHop
	Event isSLAFNotif_Event `protobuf_oneof:"Event"`
}

func (x *SLAFNotif) Reset() {
	*x = SLAFNotif{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFNotif) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFNotif) ProtoMessage() {}

func (x *SLAFNotif) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFNotif.ProtoReflect.Descriptor instead.
func (*SLAFNotif) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{24}
}

func (m *SLAFNotif) GetEvent() isSLAFNotif_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *SLAFNotif) GetNotifStatus() *SLAFNotifRsp {
	if x, ok := x.GetEvent().(*SLAFNotif_NotifStatus); ok {
		return x.NotifStatus
	}
	return nil
}

func (x *SLAFNotif) GetRedistObject() *SLAFObject {
	if x, ok := x.GetEvent().(*SLAFNotif_RedistObject); ok {
		return x.RedistObject
	}
	return nil
}

func (x *SLAFNotif) GetNextHop() *SLNextHop {
	if x, ok := x.GetEvent().(*SLAFNotif_NextHop); ok {
		return x.NextHop
	}
	return nil
}

type isSLAFNotif_Event interface {
	isSLAFNotif_Event()
}

type SLAFNotif_NotifStatus struct {
	// This field carries the status of the SLAFNotifReq message.
	NotifStatus *SLAFNotifRsp `protobuf:"bytes,1,opt,name=NotifStatus,proto3,oneof"`
}

type SLAFNotif_RedistObject struct {
	// Route redistribution notification.
	RedistObject *SLAFObject `protobuf:"bytes,4,opt,name=RedistObject,proto3,oneof"`
}

type SLAFNotif_NextHop struct {
	// Next hop change notification.
	NextHop *SLNextHop `protobuf:"bytes,5,opt,name=NextHop,proto3,oneof"`
}

func (*SLAFNotif_NotifStatus) isSLAFNotif_Event() {}

func (*SLAFNotif_RedistObject) isSLAFNotif_Event() {}

func (*SLAFNotif_NextHop) isSLAFNotif_Event() {}

// RPC Notification message.
type SLAFNotifMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VRF name.
	VrfName string `protobuf:"bytes,1,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// Notifications.
	AFNotifs []*SLAFNotif `protobuf:"bytes,3,rep,name=AFNotifs,proto3" json:"AFNotifs,omitempty"`
}

func (x *SLAFNotifMsg) Reset() {
	*x = SLAFNotifMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFNotifMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFNotifMsg) ProtoMessage() {}

func (x *SLAFNotifMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFNotifMsg.ProtoReflect.Descriptor instead.
func (*SLAFNotifMsg) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{25}
}

func (x *SLAFNotifMsg) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SLAFNotifMsg) GetAFNotifs() []*SLAFNotif {
	if x != nil {
		return x.AFNotifs
	}
	return nil
}

type SLPathGroup_SLPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primary path.
	Path *SLRoutePath `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
}

func (x *SLPathGroup_SLPath) Reset() {
	*x = SLPathGroup_SLPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLPathGroup_SLPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLPathGroup_SLPath) ProtoMessage() {}

func (x *SLPathGroup_SLPath) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLPathGroup_SLPath.ProtoReflect.Descriptor instead.
func (*SLPathGroup_SLPath) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{6, 0}
}

func (x *SLPathGroup_SLPath) GetPath() *SLRoutePath {
	if x != nil {
		return x.Path
	}
	return nil
}

// A list of SLPathList
type SLPathGroup_SLPathList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths []*SLPathGroup_SLPath `protobuf:"bytes,1,rep,name=Paths,proto3" json:"Paths,omitempty"`
}

func (x *SLPathGroup_SLPathList) Reset() {
	*x = SLPathGroup_SLPathList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLPathGroup_SLPathList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLPathGroup_SLPathList) ProtoMessage() {}

func (x *SLPathGroup_SLPathList) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLPathGroup_SLPathList.ProtoReflect.Descriptor instead.
func (*SLPathGroup_SLPathList) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{6, 1}
}

func (x *SLPathGroup_SLPathList) GetPaths() []*SLPathGroup_SLPath {
	if x != nil {
		return x.Paths
	}
	return nil
}

type SLAFNextHopRegKey_SLNextHopKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next Hop IP to resolve
	NextHop *SLIpAddress `protobuf:"bytes,1,opt,name=NextHop,proto3" json:"NextHop,omitempty"`
	// Length of Next Hop IP address to use for resolution
	NextHopLen uint32 `protobuf:"varint,2,opt,name=NextHopLen,proto3" json:"NextHopLen,omitempty"`
	// Chose exact vs. best match
	ExactMatch bool `protobuf:"varint,3,opt,name=ExactMatch,proto3" json:"ExactMatch,omitempty"`
	// Allow default route to be returned
	AllowDefault bool `protobuf:"varint,4,opt,name=AllowDefault,proto3" json:"AllowDefault,omitempty"`
	// If this flag is not set or set to False, only the immediate
	// viable path list is returned. If set to True, recursively resolve
	// the next hop’s paths and return the flattened path list.
	// If the list exceeds MaxPathsInNexthopNotif, then only the
	// first MaxPathsInNexthopNotif will be returned.
	Recurse bool `protobuf:"varint,5,opt,name=Recurse,proto3" json:"Recurse,omitempty"`
}

func (x *SLAFNextHopRegKey_SLNextHopKey) Reset() {
	*x = SLAFNextHopRegKey_SLNextHopKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_af_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLAFNextHopRegKey_SLNextHopKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLAFNextHopRegKey_SLNextHopKey) ProtoMessage() {}

func (x *SLAFNextHopRegKey_SLNextHopKey) ProtoReflect() protoreflect.Message {
	mi := &file_sl_af_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLAFNextHopRegKey_SLNextHopKey.ProtoReflect.Descriptor instead.
func (*SLAFNextHopRegKey_SLNextHopKey) Descriptor() ([]byte, []int) {
	return file_sl_af_proto_rawDescGZIP(), []int{18, 0}
}

func (x *SLAFNextHopRegKey_SLNextHopKey) GetNextHop() *SLIpAddress {
	if x != nil {
		return x.NextHop
	}
	return nil
}

func (x *SLAFNextHopRegKey_SLNextHopKey) GetNextHopLen() uint32 {
	if x != nil {
		return x.NextHopLen
	}
	return 0
}

func (x *SLAFNextHopRegKey_SLNextHopKey) GetExactMatch() bool {
	if x != nil {
		return x.ExactMatch
	}
	return false
}

func (x *SLAFNextHopRegKey_SLNextHopKey) GetAllowDefault() bool {
	if x != nil {
		return x.AllowDefault
	}
	return false
}

func (x *SLAFNextHopRegKey_SLNextHopKey) GetRecurse() bool {
	if x != nil {
		return x.Recurse
	}
	return false
}

var File_sl_af_proto protoreflect.FileDescriptor

var file_sl_af_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x6c, 0x5f, 0x61, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x1a, 0x15, 0x73, 0x6c,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x73, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x6c, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x13, 0x73, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6f, 0x0a, 0x0a, 0x53, 0x4c, 0x41, 0x46, 0x56, 0x72, 0x66, 0x52,
	0x65, 0x67, 0x12, 0x30, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x52, 0x06, 0x56,
	0x72, 0x66, 0x52, 0x65, 0x67, 0x22, 0x76, 0x0a, 0x0d, 0x53, 0x4c, 0x41, 0x46, 0x56, 0x72, 0x66,
	0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x65, 0x67, 0x4f, 0x70, 0x52, 0x04, 0x4f, 0x70,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x56, 0x72, 0x66, 0x52, 0x65,
	0x67, 0x52, 0x0a, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x73, 0x22, 0x9a, 0x01,
	0x0a, 0x10, 0x53, 0x4c, 0x41, 0x46, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x10, 0x53,
	0x4c, 0x41, 0x46, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12,
	0x42, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x73, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x2a,
	0x0a, 0x10, 0x53, 0x4c, 0x41, 0x46, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x47, 0x65, 0x74, 0x4d,
	0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x22, 0xd2, 0x01, 0x0a, 0x13, 0x53,
	0x4c, 0x41, 0x46, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52,
	0x73, 0x70, 0x12, 0x3a, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x05, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x07,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x52, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22,
	0xd5, 0x02, 0x0a, 0x0b, 0x53, 0x4c, 0x50, 0x61, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x3b, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52,
	0x0b, 0x50, 0x61, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x50, 0x61, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x53, 0x4c, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x50,
	0x61, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x1a, 0x38, 0x0a,
	0x06, 0x53, 0x4c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x45, 0x0a, 0x0a, 0x53, 0x4c, 0x50, 0x61, 0x74,
	0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x50, 0x61, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x53, 0x4c, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x42, 0x07,
	0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xf2, 0x01, 0x0a, 0x0b, 0x53, 0x4c, 0x4d, 0x70,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a,
	0x08, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x08, 0x50, 0x61, 0x74,
	0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x50, 0x61, 0x74, 0x68, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x50, 0x61,
	0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x66, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52,
	0x0c, 0x50, 0x61, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x81, 0x02, 0x0a,
	0x0a, 0x53, 0x4c, 0x41, 0x46, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x49,
	0x50, 0x76, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x34, 0x48, 0x00, 0x52, 0x09, 0x49, 0x50, 0x76, 0x34,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x49, 0x50, 0x76, 0x36, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x76, 0x36, 0x48, 0x00, 0x52, 0x09, 0x49, 0x50, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x3a, 0x0a, 0x09, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4d, 0x70, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x09, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x09, 0x50,
	0x61, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x50, 0x61, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x09, 0x50, 0x61,
	0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x22, 0x98, 0x01, 0x0a, 0x06, 0x53, 0x4c, 0x41, 0x46, 0x4f, 0x70, 0x12, 0x35, 0x0a, 0x08, 0x41,
	0x46, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x41, 0x46, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x41, 0x46, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x07, 0x41, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x73, 0x70, 0x41, 0x43, 0x4b, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x41, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7e, 0x0a, 0x0a, 0x53,
	0x4c, 0x41, 0x46, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x72, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x72, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x0d,
	0x53, 0x4c, 0x41, 0x46, 0x46, 0x69, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x09, 0x44, 0x65, 0x70, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x46,
	0x69, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x44, 0x65, 0x70, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x7b, 0x0a, 0x12, 0x53, 0x4c, 0x41, 0x46, 0x47, 0x65, 0x74, 0x4d, 0x73,
	0x67, 0x52, 0x73, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x41, 0x46, 0x4f,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x4f, 0x70, 0x52, 0x04,
	0x41, 0x46, 0x4f, 0x70, 0x12, 0x3a, 0x0a, 0x09, 0x46, 0x49, 0x42, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x46, 0x69, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x46, 0x49, 0x42, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xbc, 0x01, 0x0a, 0x0d, 0x53, 0x4c, 0x41, 0x46, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52,
	0x73, 0x70, 0x12, 0x3a, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x06, 0x41, 0x46, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52,
	0x73, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x41, 0x46, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x81, 0x01, 0x0a, 0x07, 0x53, 0x4c, 0x41, 0x46, 0x4d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x04, 0x4f,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4f, 0x70, 0x52, 0x04, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x72,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x72, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x4f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x4f, 0x70, 0x52, 0x06, 0x4f, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x07, 0x53, 0x4c, 0x41, 0x46, 0x52, 0x65, 0x73, 0x12,
	0x3a, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x41, 0x46, 0x4f, 0x70, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x09, 0x46, 0x49, 0x42, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x46, 0x69, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x09, 0x46, 0x49, 0x42, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x58, 0x0a, 0x0a,
	0x53, 0x4c, 0x41, 0x46, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x72,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x72, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x52, 0x65, 0x73, 0x52, 0x07, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x10, 0x53, 0x4c, 0x41, 0x46, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x72, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53,
	0x72, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x72, 0x63, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x54, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x72,
	0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x67, 0x12, 0x30, 0x0a, 0x05, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xb1, 0x02, 0x0a, 0x11,
	0x53, 0x4c, 0x41, 0x46, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x67, 0x4b, 0x65,
	0x79, 0x12, 0x49, 0x0a, 0x07, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65,
	0x67, 0x4b, 0x65, 0x79, 0x2e, 0x53, 0x4c, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x4b, 0x65,
	0x79, 0x48, 0x00, 0x52, 0x07, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x1a, 0xc2, 0x01, 0x0a,
	0x0c, 0x53, 0x4c, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a,
	0x07, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x4c, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x4c, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x45, 0x78, 0x61, 0x63, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x75, 0x72,
	0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x6b, 0x65, 0x79, 0x22,
	0x55, 0x0a, 0x11, 0x53, 0x4c, 0x41, 0x46, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65,
	0x67, 0x4d, 0x73, 0x67, 0x12, 0x40, 0x0a, 0x0a, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x4b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x4b, 0x65, 0x79, 0x22, 0xc3, 0x01, 0x0a, 0x0f, 0x53, 0x4c, 0x41, 0x46, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x52, 0x65, 0x67, 0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a, 0x09, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x41, 0x46, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x48, 0x00,
	0x52, 0x09, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x42, 0x0a, 0x0a, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x41, 0x46, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x67, 0x4d, 0x73,
	0x67, 0x48, 0x00, 0x52, 0x0a, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x12,
	0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x92, 0x01, 0x0a,
	0x0c, 0x53, 0x4c, 0x41, 0x46, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a,
	0x04, 0x4f, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x4f, 0x70, 0x52, 0x04, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x56,
	0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x72,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x65,
	0x71, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x52, 0x65, 0x67, 0x52, 0x65, 0x71, 0x52, 0x08, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x65,
	0x71, 0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x53, 0x4c, 0x41, 0x46, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52,
	0x73, 0x70, 0x12, 0x3a, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x65, 0x71, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x65,
	0x67, 0x52, 0x65, 0x71, 0x52, 0x08, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x65, 0x71, 0x12, 0x3e,
	0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xcc,
	0x02, 0x0a, 0x09, 0x53, 0x4c, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x40, 0x0a, 0x0a,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x41, 0x46, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x67, 0x4b,
	0x65, 0x79, 0x52, 0x0a, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x42,
	0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x4c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4c, 0x65, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x72, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x53, 0x72, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x30, 0x0a, 0x05, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x22, 0xcc, 0x01,
	0x0a, 0x09, 0x53, 0x4c, 0x41, 0x46, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x12, 0x3f, 0x0a, 0x0b, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x41, 0x46, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x73, 0x70, 0x48, 0x00, 0x52,
	0x0b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0c,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x0c, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x34, 0x0a,
	0x07, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x07, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x5e, 0x0a, 0x0c,
	0x53, 0x4c, 0x41, 0x46, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56,
	0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x41, 0x46, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x52, 0x08, 0x41, 0x46, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x73, 0x32, 0xc8, 0x03, 0x0a,
	0x04, 0x53, 0x4c, 0x41, 0x46, 0x12, 0x4d, 0x0a, 0x0c, 0x53, 0x4c, 0x41, 0x46, 0x56, 0x72, 0x66,
	0x52, 0x65, 0x67, 0x4f, 0x70, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67,
	0x4d, 0x73, 0x67, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x4d, 0x73,
	0x67, 0x52, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x0d, 0x53, 0x4c, 0x41, 0x46, 0x56, 0x72, 0x66, 0x52,
	0x65, 0x67, 0x47, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67,
	0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x56, 0x72, 0x66, 0x52, 0x65,
	0x67, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x06,
	0x53, 0x4c, 0x41, 0x46, 0x4f, 0x70, 0x12, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x4d, 0x73, 0x67, 0x1a, 0x19,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x41, 0x46, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x0c, 0x53, 0x4c, 0x41,
	0x46, 0x4f, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x4d, 0x73,
	0x67, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x44, 0x0a, 0x07, 0x53, 0x4c, 0x41, 0x46, 0x47, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46,
	0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x47, 0x65, 0x74, 0x4d, 0x73,
	0x67, 0x52, 0x73, 0x70, 0x30, 0x01, 0x12, 0x4f, 0x0a, 0x0f, 0x53, 0x4c, 0x41, 0x46, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x46, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x4d, 0x73, 0x67, 0x28, 0x01, 0x30, 0x01, 0x42, 0x51, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x69, 0x73, 0x63, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x6f, 0x62, 0x6a, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x3b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_sl_af_proto_rawDescOnce sync.Once
	file_sl_af_proto_rawDescData = file_sl_af_proto_rawDesc
)

func file_sl_af_proto_rawDescGZIP() []byte {
	file_sl_af_proto_rawDescOnce.Do(func() {
		file_sl_af_proto_rawDescData = protoimpl.X.CompressGZIP(file_sl_af_proto_rawDescData)
	})
	return file_sl_af_proto_rawDescData
}

var file_sl_af_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_sl_af_proto_goTypes = []interface{}{
	(*SLAFVrfReg)(nil),                     // 0: service_layer.SLAFVrfReg
	(*SLAFVrfRegMsg)(nil),                  // 1: service_layer.SLAFVrfRegMsg
	(*SLAFVrfRegMsgRes)(nil),               // 2: service_layer.SLAFVrfRegMsgRes
	(*SLAFVrfRegMsgRsp)(nil),               // 3: service_layer.SLAFVrfRegMsgRsp
	(*SLAFVrfRegGetMsg)(nil),               // 4: service_layer.SLAFVrfRegGetMsg
	(*SLAFVrfRegGetMsgRsp)(nil),            // 5: service_layer.SLAFVrfRegGetMsgRsp
	(*SLPathGroup)(nil),                    // 6: service_layer.SLPathGroup
	(*SLMplsEntry)(nil),                    // 7: service_layer.SLMplsEntry
	(*SLAFObject)(nil),                     // 8: service_layer.SLAFObject
	(*SLAFOp)(nil),                         // 9: service_layer.SLAFOp
	(*SLAFGetMsg)(nil),                     // 10: service_layer.SLAFGetMsg
	(*SLAFFibStatus)(nil),                  // 11: service_layer.SLAFFibStatus
	(*SLAFGetMsgRspEntry)(nil),             // 12: service_layer.SLAFGetMsgRspEntry
	(*SLAFGetMsgRsp)(nil),                  // 13: service_layer.SLAFGetMsgRsp
	(*SLAFMsg)(nil),                        // 14: service_layer.SLAFMsg
	(*SLAFRes)(nil),                        // 15: service_layer.SLAFRes
	(*SLAFMsgRsp)(nil),                     // 16: service_layer.SLAFMsgRsp
	(*SLAFRedistRegMsg)(nil),               // 17: service_layer.SLAFRedistRegMsg
	(*SLAFNextHopRegKey)(nil),              // 18: service_layer.SLAFNextHopRegKey
	(*SLAFNextHopRegMsg)(nil),              // 19: service_layer.SLAFNextHopRegMsg
	(*SLAFNotifRegReq)(nil),                // 20: service_layer.SLAFNotifRegReq
	(*SLAFNotifReq)(nil),                   // 21: service_layer.SLAFNotifReq
	(*SLAFNotifRsp)(nil),                   // 22: service_layer.SLAFNotifRsp
	(*SLNextHop)(nil),                      // 23: service_layer.SLNextHop
	(*SLAFNotif)(nil),                      // 24: service_layer.SLAFNotif
	(*SLAFNotifMsg)(nil),                   // 25: service_layer.SLAFNotifMsg
	(*SLPathGroup_SLPath)(nil),             // 26: service_layer.SLPathGroup.SLPath
	(*SLPathGroup_SLPathList)(nil),         // 27: service_layer.SLPathGroup.SLPathList
	(*SLAFNextHopRegKey_SLNextHopKey)(nil), // 28: service_layer.SLAFNextHopRegKey.SLNextHopKey
	(SLTableType)(0),                       // 29: service_layer.SLTableType
	(*SLVrfReg)(nil),                       // 30: service_layer.SLVrfReg
	(SLRegOp)(0),                           // 31: service_layer.SLRegOp
	(*SLErrorStatus)(nil),                  // 32: service_layer.SLErrorStatus
	(*SLObjectId)(nil),                     // 33: service_layer.SLObjectId
	(*SLRoutePath)(nil),                    // 34: service_layer.SLRoutePath
	(*SLPathGroupRefKey)(nil),              // 35: service_layer.SLPathGroupRefKey
	(*SLRoutev4)(nil),                      // 36: service_layer.SLRoutev4
	(*SLRoutev6)(nil),                      // 37: service_layer.SLRoutev6
	(SLRspACKType)(0),                      // 38: service_layer.SLRspACKType
	(SLObjectOp)(0),                        // 39: service_layer.SLObjectOp
	(SLNotifOp)(0),                         // 40: service_layer.SLNotifOp
	(*SLIpAddress)(nil),                    // 41: service_layer.SLIpAddress
}
var file_sl_af_proto_depIdxs = []int32{
	29, // 0: service_layer.SLAFVrfReg.Table:type_name -> service_layer.SLTableType
	30, // 1: service_layer.SLAFVrfReg.VrfReg:type_name -> service_layer.SLVrfReg
	31, // 2: service_layer.SLAFVrfRegMsg.Oper:type_name -> service_layer.SLRegOp
	0,  // 3: service_layer.SLAFVrfRegMsg.VrfRegMsgs:type_name -> service_layer.SLAFVrfReg
	32, // 4: service_layer.SLAFVrfRegMsgRes.ErrStatus:type_name -> service_layer.SLErrorStatus
	29, // 5: service_layer.SLAFVrfRegMsgRes.Table:type_name -> service_layer.SLTableType
	32, // 6: service_layer.SLAFVrfRegMsgRsp.StatusSummary:type_name -> service_layer.SLErrorStatus
	2,  // 7: service_layer.SLAFVrfRegMsgRsp.Results:type_name -> service_layer.SLAFVrfRegMsgRes
	32, // 8: service_layer.SLAFVrfRegGetMsgRsp.ErrStatus:type_name -> service_layer.SLErrorStatus
	29, // 9: service_layer.SLAFVrfRegGetMsgRsp.Table:type_name -> service_layer.SLTableType
	30, // 10: service_layer.SLAFVrfRegGetMsgRsp.Entries:type_name -> service_layer.SLVrfReg
	33, // 11: service_layer.SLPathGroup.PathGroupId:type_name -> service_layer.SLObjectId
	27, // 12: service_layer.SLPathGroup.PathList:type_name -> service_layer.SLPathGroup.SLPathList
	34, // 13: service_layer.SLMplsEntry.PathList:type_name -> service_layer.SLRoutePath
	35, // 14: service_layer.SLMplsEntry.PathGroupKey:type_name -> service_layer.SLPathGroupRefKey
	36, // 15: service_layer.SLAFObject.IPv4Route:type_name -> service_layer.SLRoutev4
	37, // 16: service_layer.SLAFObject.IPv6Route:type_name -> service_layer.SLRoutev6
	7,  // 17: service_layer.SLAFObject.MplsLabel:type_name -> service_layer.SLMplsEntry
	6,  // 18: service_layer.SLAFObject.PathGroup:type_name -> service_layer.SLPathGroup
	8,  // 19: service_layer.SLAFOp.AFObject:type_name -> service_layer.SLAFObject
	38, // 20: service_layer.SLAFOp.AckType:type_name -> service_layer.SLRspACKType
	29, // 21: service_layer.SLAFGetMsg.Table:type_name -> service_layer.SLTableType
	32, // 22: service_layer.SLAFFibStatus.ErrorCode:type_name -> service_layer.SLErrorStatus
	11, // 23: service_layer.SLAFFibStatus.DepResult:type_name -> service_layer.SLAFFibStatus
	9,  // 24: service_layer.SLAFGetMsgRspEntry.AFOp:type_name -> service_layer.SLAFOp
	11, // 25: service_layer.SLAFGetMsgRspEntry.FIBStatus:type_name -> service_layer.SLAFFibStatus
	32, // 26: service_layer.SLAFGetMsgRsp.ErrStatus:type_name -> service_layer.SLErrorStatus
	12, // 27: service_layer.SLAFGetMsgRsp.AFList:type_name -> service_layer.SLAFGetMsgRspEntry
	39, // 28: service_layer.SLAFMsg.Oper:type_name -> service_layer.SLObjectOp
	9,  // 29: service_layer.SLAFMsg.OpList:type_name -> service_layer.SLAFOp
	32, // 30: service_layer.SLAFRes.ErrStatus:type_name -> service_layer.SLErrorStatus
	9,  // 31: service_layer.SLAFRes.Operation:type_name -> service_layer.SLAFOp
	11, // 32: service_layer.SLAFRes.FIBStatus:type_name -> service_layer.SLAFFibStatus
	15, // 33: service_layer.SLAFMsgRsp.Results:type_name -> service_layer.SLAFRes
	29, // 34: service_layer.SLAFRedistRegMsg.Table:type_name -> service_layer.SLTableType
	28, // 35: service_layer.SLAFNextHopRegKey.NextHop:type_name -> service_layer.SLAFNextHopRegKey.SLNextHopKey
	18, // 36: service_layer.SLAFNextHopRegMsg.NextHopKey:type_name -> service_layer.SLAFNextHopRegKey
	17, // 37: service_layer.SLAFNotifRegReq.RedistReq:type_name -> service_layer.SLAFRedistRegMsg
	19, // 38: service_layer.SLAFNotifRegReq.NextHopReq:type_name -> service_layer.SLAFNextHopRegMsg
	40, // 39: service_layer.SLAFNotifReq.Oper:type_name -> service_layer.SLNotifOp
	20, // 40: service_layer.SLAFNotifReq.NotifReq:type_name -> service_layer.SLAFNotifRegReq
	20, // 41: service_layer.SLAFNotifRsp.NotifReq:type_name -> service_layer.SLAFNotifRegReq
	32, // 42: service_layer.SLAFNotifRsp.NotifStatus:type_name -> service_layer.SLErrorStatus
	18, // 43: service_layer.SLNextHop.NextHopKey:type_name -> service_layer.SLAFNextHopRegKey
	41, // 44: service_layer.SLNextHop.ResolvingRoute:type_name -> service_layer.SLIpAddress
	34, // 45: service_layer.SLNextHop.Paths:type_name -> service_layer.SLRoutePath
	22, // 46: service_layer.SLAFNotif.NotifStatus:type_name -> service_layer.SLAFNotifRsp
	8,  // 47: service_layer.SLAFNotif.RedistObject:type_name -> service_layer.SLAFObject
	23, // 48: service_layer.SLAFNotif.NextHop:type_name -> service_layer.SLNextHop
	24, // 49: service_layer.SLAFNotifMsg.AFNotifs:type_name -> service_layer.SLAFNotif
	34, // 50: service_layer.SLPathGroup.SLPath.Path:type_name -> service_layer.SLRoutePath
	26, // 51: service_layer.SLPathGroup.SLPathList.Paths:type_name -> service_layer.SLPathGroup.SLPath
	41, // 52: service_layer.SLAFNextHopRegKey.SLNextHopKey.NextHop:type_name -> service_layer.SLIpAddress
	1,  // 53: service_layer.SLAF.SLAFVrfRegOp:input_type -> service_layer.SLAFVrfRegMsg
	4,  // 54: service_layer.SLAF.SLAFVrfRegGet:input_type -> service_layer.SLAFVrfRegGetMsg
	14, // 55: service_layer.SLAF.SLAFOp:input_type -> service_layer.SLAFMsg
	14, // 56: service_layer.SLAF.SLAFOpStream:input_type -> service_layer.SLAFMsg
	10, // 57: service_layer.SLAF.SLAFGet:input_type -> service_layer.SLAFGetMsg
	21, // 58: service_layer.SLAF.SLAFNotifStream:input_type -> service_layer.SLAFNotifReq
	3,  // 59: service_layer.SLAF.SLAFVrfRegOp:output_type -> service_layer.SLAFVrfRegMsgRsp
	5,  // 60: service_layer.SLAF.SLAFVrfRegGet:output_type -> service_layer.SLAFVrfRegGetMsgRsp
	16, // 61: service_layer.SLAF.SLAFOp:output_type -> service_layer.SLAFMsgRsp
	16, // 62: service_layer.SLAF.SLAFOpStream:output_type -> service_layer.SLAFMsgRsp
	13, // 63: service_layer.SLAF.SLAFGet:output_type -> service_layer.SLAFGetMsgRsp
	25, // 64: service_layer.SLAF.SLAFNotifStream:output_type -> service_layer.SLAFNotifMsg
	59, // [59:65] is the sub-list for method output_type
	53, // [53:59] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_sl_af_proto_init() }
func file_sl_af_proto_init() {
	if File_sl_af_proto != nil {
		return
	}
	file_sl_common_types_proto_init()
	file_sl_route_common_proto_init()
	file_sl_route_ipv4_proto_init()
	file_sl_route_ipv6_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sl_af_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFVrfReg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFVrfRegMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFVrfRegMsgRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFVrfRegMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFVrfRegGetMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFVrfRegGetMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLPathGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLMplsEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFGetMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFFibStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFGetMsgRspEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFGetMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFRedistRegMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFNextHopRegKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFNextHopRegMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFNotifRegReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFNotifReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFNotifRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLNextHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFNotif); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFNotifMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLPathGroup_SLPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLPathGroup_SLPathList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_af_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLAFNextHopRegKey_SLNextHopKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sl_af_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*SLPathGroup_PathList)(nil),
	}
	file_sl_af_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*SLMplsEntry_PathGroupKey)(nil),
	}
	file_sl_af_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*SLAFObject_IPv4Route)(nil),
		(*SLAFObject_IPv6Route)(nil),
		(*SLAFObject_MplsLabel)(nil),
		(*SLAFObject_PathGroup)(nil),
	}
	file_sl_af_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*SLAFNextHopRegKey_NextHop)(nil),
	}
	file_sl_af_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*SLAFNotifRegReq_RedistReq)(nil),
		(*SLAFNotifRegReq_NextHopReq)(nil),
	}
	file_sl_af_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*SLAFNotif_NotifStatus)(nil),
		(*SLAFNotif_RedistObject)(nil),
		(*SLAFNotif_NextHop)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sl_af_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sl_af_proto_goTypes,
		DependencyIndexes: file_sl_af_proto_depIdxs,
		MessageInfos:      file_sl_af_proto_msgTypes,
	}.Build()
	File_sl_af_proto = out.File
	file_sl_af_proto_rawDesc = nil
	file_sl_af_proto_goTypes = nil
	file_sl_af_proto_depIdxs = nil
}
