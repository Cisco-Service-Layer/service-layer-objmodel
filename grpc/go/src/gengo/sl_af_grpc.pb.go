// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.3
// source: sl_af.proto

package service_layer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SLAFClient is the client API for SLAF service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SLAFClient interface {
	// VRF registration operations. The client must register with
	// the corresponding VRF table before programming objects in that table.
	//
	// For Path VRF registration operations, only SLVrfReg.VrfName is used.
	// Other attributes, if present are ignored.
	//
	// For MPLS VRF SL_REGOP_REGISTER operation, only PurgeInterval is used.
	// Other attributes, if present are ignored. For Other MPLS VRF registration
	// operations, attributes if present are ignored.
	//
	// SLAFVrfRegMsg.Oper = SL_REGOP_REGISTER:
	//
	//	VRF registration: Sends a list of VRF registration messages
	//	and expects a list of registration responses.
	//	A client Must Register a VRF BEFORE objects can be added/modified in
	//	the associated VRF.
	//
	// SLAFVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
	//
	//	VRF Un-registration: Sends a list of VRF un-registration messages
	//	and expects a list of un-registration responses.
	//	This can be used to convey that the client is no longer interested
	//	in these VRFs. All previously installed objects would be remove.
	//
	// SLAFVrfRegMsg.Oper = SL_REGOP_EOF:
	//
	//	VRF End Of File message.
	//	After Registration, the client is expected to send an EOF
	//	message to convey the end of replay of the client's known objects.
	//	This is especially useful under certain restart scenarios when the
	//	client and the server are trying to synchronize their objects.
	//
	// The VRF registration operations can be used by the client to
	// synchronize objects with the device. When the client re-registers the VRF
	// with the server using SL_REGOP_REGISTER, server marks objects as stale.
	// Client then must reprogram objects it is interested in.
	// When client sends SL_REGOP_EOF, any objects not reprogrammed
	// are removed from the device.
	//
	// The client must perform all operations (VRF registration, objects)
	// from a single execution context.
	SLAFVrfRegOp(ctx context.Context, in *SLAFVrfRegMsg, opts ...grpc.CallOption) (*SLAFVrfRegMsgRsp, error)
}

type sLAFClient struct {
	cc grpc.ClientConnInterface
}

func NewSLAFClient(cc grpc.ClientConnInterface) SLAFClient {
	return &sLAFClient{cc}
}

func (c *sLAFClient) SLAFVrfRegOp(ctx context.Context, in *SLAFVrfRegMsg, opts ...grpc.CallOption) (*SLAFVrfRegMsgRsp, error) {
	out := new(SLAFVrfRegMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLAF/SLAFVrfRegOp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SLAFServer is the server API for SLAF service.
// All implementations must embed UnimplementedSLAFServer
// for forward compatibility
type SLAFServer interface {
	// VRF registration operations. The client must register with
	// the corresponding VRF table before programming objects in that table.
	//
	// For Path VRF registration operations, only SLVrfReg.VrfName is used.
	// Other attributes, if present are ignored.
	//
	// For MPLS VRF SL_REGOP_REGISTER operation, only PurgeInterval is used.
	// Other attributes, if present are ignored. For Other MPLS VRF registration
	// operations, attributes if present are ignored.
	//
	// SLAFVrfRegMsg.Oper = SL_REGOP_REGISTER:
	//
	//	VRF registration: Sends a list of VRF registration messages
	//	and expects a list of registration responses.
	//	A client Must Register a VRF BEFORE objects can be added/modified in
	//	the associated VRF.
	//
	// SLAFVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
	//
	//	VRF Un-registration: Sends a list of VRF un-registration messages
	//	and expects a list of un-registration responses.
	//	This can be used to convey that the client is no longer interested
	//	in these VRFs. All previously installed objects would be remove.
	//
	// SLAFVrfRegMsg.Oper = SL_REGOP_EOF:
	//
	//	VRF End Of File message.
	//	After Registration, the client is expected to send an EOF
	//	message to convey the end of replay of the client's known objects.
	//	This is especially useful under certain restart scenarios when the
	//	client and the server are trying to synchronize their objects.
	//
	// The VRF registration operations can be used by the client to
	// synchronize objects with the device. When the client re-registers the VRF
	// with the server using SL_REGOP_REGISTER, server marks objects as stale.
	// Client then must reprogram objects it is interested in.
	// When client sends SL_REGOP_EOF, any objects not reprogrammed
	// are removed from the device.
	//
	// The client must perform all operations (VRF registration, objects)
	// from a single execution context.
	SLAFVrfRegOp(context.Context, *SLAFVrfRegMsg) (*SLAFVrfRegMsgRsp, error)
	mustEmbedUnimplementedSLAFServer()
}

// UnimplementedSLAFServer must be embedded to have forward compatible implementations.
type UnimplementedSLAFServer struct {
}

func (UnimplementedSLAFServer) SLAFVrfRegOp(context.Context, *SLAFVrfRegMsg) (*SLAFVrfRegMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLAFVrfRegOp not implemented")
}
func (UnimplementedSLAFServer) mustEmbedUnimplementedSLAFServer() {}

// UnsafeSLAFServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SLAFServer will
// result in compilation errors.
type UnsafeSLAFServer interface {
	mustEmbedUnimplementedSLAFServer()
}

func RegisterSLAFServer(s grpc.ServiceRegistrar, srv SLAFServer) {
	s.RegisterService(&SLAF_ServiceDesc, srv)
}

func _SLAF_SLAFVrfRegOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLAFVrfRegMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLAFServer).SLAFVrfRegOp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLAF/SLAFVrfRegOp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLAFServer).SLAFVrfRegOp(ctx, req.(*SLAFVrfRegMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// SLAF_ServiceDesc is the grpc.ServiceDesc for SLAF service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SLAF_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service_layer.SLAF",
	HandlerType: (*SLAFServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SLAFVrfRegOp",
			Handler:    _SLAF_SLAFVrfRegOp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sl_af.proto",
}
