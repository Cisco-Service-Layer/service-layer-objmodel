// Code generated by protoc-gen-go.
// source: sl_bfd_common.proto
// DO NOT EDIT!

/*
Package service_layer is a generated protocol buffer package.

It is generated from these files:
	sl_bfd_common.proto
	sl_bfd_ipv4.proto
	sl_bfd_ipv6.proto
	sl_common_types.proto
	sl_global.proto
	sl_interface.proto
	sl_mpls.proto
	sl_route_common.proto
	sl_route_ipv4.proto
	sl_route_ipv6.proto
	sl_version.proto

It has these top-level messages:
	SLBfdRegMsg
	SLBfdRegMsgRsp
	SLBfdGetMsg
	SLBfdGetMsgRsp
	SLBfdGetStatsMsgRsp
	SLBfdGetNotifMsg
	SLBfdConfigCommon
	SLBfdCommonState
	SLBfdv4Key
	SLBfdv4SessionCfg
	SLBfdv4Msg
	SLBfdv4Res
	SLBfdv4MsgRsp
	SLBfdv4GetMsg
	SLBfdv4SessionCfgState
	SLBfdv4GetMsgRsp
	SLBfdv4SessionState
	SLBfdv4Notif
	SLBfdv6Key
	SLBfdv6SessionCfg
	SLBfdv6Msg
	SLBfdv6Res
	SLBfdv6MsgRsp
	SLBfdv6GetMsg
	SLBfdv6SessionCfgState
	SLBfdv6GetMsgRsp
	SLBfdv6SessionState
	SLBfdv6Notif
	SLErrorStatus
	SLInterface
	SLIpAddress
	SLInitMsg
	SLInitMsgRsp
	SLGlobalNotif
	SLGlobalsGetMsg
	SLGlobalsGetMsgRsp
	SLInterfaceGlobalsRegMsg
	SLInterfaceGlobalsRegMsgRsp
	SLInterfaceGlobalsGetMsg
	SLInterfaceGlobalsGetMsgRsp
	SLInterfaceGlobalsGetStatsMsgRsp
	SLInterfaceGetMsg
	SLInterfaceInfoMsg
	SLInterfaceGetMsgRsp
	SLInterfaceGetNotifMsg
	SLInterfaceNotif
	SLInterfaceNotifMsg
	SLInterfaceNotifMsgRes
	SLInterfaceNotifMsgRsp
	SLMplsLabelBlockKey
	SLMplsLabelBlockMsg
	SLMplsLabelBlockMsgRes
	SLMplsLabelBlockMsgRsp
	SLMplsLabelBlockGetMsg
	SLMplsLabelBlockGetMsgRsp
	SLMplsRegMsg
	SLMplsRegMsgRsp
	SLMplsGetMsg
	SLMplsGetMsgRsp
	SLMplsGetStatsMsgRsp
	SLMplsPath
	SLMplsIlmKey
	SLMplsIlmEntry
	SLMplsIlmMsg
	SLMplsIlmRes
	SLMplsIlmMsgRsp
	SLMplsIlmGetMsg
	SLMplsIlmGetMsgRsp
	SLRouteGlobalsGetMsg
	SLRouteGlobalsGetMsgRsp
	SLRouteGlobalStatsGetMsg
	SLRouteGlobalStatsGetMsgRsp
	SLVrfReg
	SLVrfRegMsg
	SLVrfRegMsgRes
	SLVrfRegMsgRsp
	SLVrfRegGetMsg
	SLVrfRegGetMsgRsp
	SLVRFGetStatsMsgRes
	SLVRFGetStatsMsgRsp
	SLRouteCommon
	SLRoutePath
	SLRoutev4
	SLRoutev4Msg
	SLRoutev4Res
	SLRoutev4MsgRsp
	SLRoutev4GetMsg
	SLRoutev4GetMsgRsp
	SLRoutev6
	SLRoutev6Msg
	SLRoutev6Res
	SLRoutev6MsgRsp
	SLRoutev6GetMsg
	SLRoutev6GetMsgRsp
*/
package service_layer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type SLBfdType int32

const (
	// Reserved. 0x0
	SLBfdType_SL_BFD_RESERVED SLBfdType = 0
	// Single Hop. 0x1
	SLBfdType_SL_BFD_SINGLE_HOP SLBfdType = 1
	// Multi Hop. 0x2
	SLBfdType_SL_BFD_MULTI_HOP SLBfdType = 2
)

var SLBfdType_name = map[int32]string{
	0: "SL_BFD_RESERVED",
	1: "SL_BFD_SINGLE_HOP",
	2: "SL_BFD_MULTI_HOP",
}
var SLBfdType_value = map[string]int32{
	"SL_BFD_RESERVED":   0,
	"SL_BFD_SINGLE_HOP": 1,
	"SL_BFD_MULTI_HOP":  2,
}

func (x SLBfdType) String() string {
	return proto.EnumName(SLBfdType_name, int32(x))
}
func (SLBfdType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// BFD Event Notification types
type SLBfdNotifType int32

const (
	// Reserved. 0x0
	SLBfdNotifType_SL_BFD_EVENT_TYPE_RESERVED SLBfdNotifType = 0
	// Error - ErrStatus field elaborates on the error. 0x1
	SLBfdNotifType_SL_BFD_EVENT_TYPE_ERROR SLBfdNotifType = 1
	// BFD Session state event. 0x2
	SLBfdNotifType_SL_BFD_EVENT_TYPE_SESSION_STATE SLBfdNotifType = 2
)

var SLBfdNotifType_name = map[int32]string{
	0: "SL_BFD_EVENT_TYPE_RESERVED",
	1: "SL_BFD_EVENT_TYPE_ERROR",
	2: "SL_BFD_EVENT_TYPE_SESSION_STATE",
}
var SLBfdNotifType_value = map[string]int32{
	"SL_BFD_EVENT_TYPE_RESERVED":      0,
	"SL_BFD_EVENT_TYPE_ERROR":         1,
	"SL_BFD_EVENT_TYPE_SESSION_STATE": 2,
}

func (x SLBfdNotifType) String() string {
	return proto.EnumName(SLBfdNotifType_name, int32(x))
}
func (SLBfdNotifType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// BFD state information.
type SLBfdCommonState_SLBfdStateEnum int32

const (
	// Session never established
	SLBfdCommonState_SL_BFD_SESSION_STATE_UNKNOWN SLBfdCommonState_SLBfdStateEnum = 0
	// Session state UP
	SLBfdCommonState_SL_BFD_SESSION_UP SLBfdCommonState_SLBfdStateEnum = 1
	// Session state is down
	SLBfdCommonState_SL_BFD_SESSION_DOWN SLBfdCommonState_SLBfdStateEnum = 2
	// Neighbor's config was removed
	SLBfdCommonState_SL_BFD_NEIGHBOR_UNCONFIG SLBfdCommonState_SLBfdStateEnum = 3
)

var SLBfdCommonState_SLBfdStateEnum_name = map[int32]string{
	0: "SL_BFD_SESSION_STATE_UNKNOWN",
	1: "SL_BFD_SESSION_UP",
	2: "SL_BFD_SESSION_DOWN",
	3: "SL_BFD_NEIGHBOR_UNCONFIG",
}
var SLBfdCommonState_SLBfdStateEnum_value = map[string]int32{
	"SL_BFD_SESSION_STATE_UNKNOWN": 0,
	"SL_BFD_SESSION_UP":            1,
	"SL_BFD_SESSION_DOWN":          2,
	"SL_BFD_NEIGHBOR_UNCONFIG":     3,
}

func (x SLBfdCommonState_SLBfdStateEnum) String() string {
	return proto.EnumName(SLBfdCommonState_SLBfdStateEnum_name, int32(x))
}
func (SLBfdCommonState_SLBfdStateEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7, 0}
}

// BFD diagnostic indicates the reason for the last transition of
// the local protocol from up to some other state.
type SLBfdCommonState_SLBfdDiagStateEnum int32

const (
	// Diag Value -- Value Meaning
	// No diagnostic
	SLBfdCommonState_SL_BFD_DIAG_NONE SLBfdCommonState_SLBfdDiagStateEnum = 0
	// Control detection time expired
	SLBfdCommonState_SL_BFD_DIAG_DETECT_EXPIRED SLBfdCommonState_SLBfdDiagStateEnum = 1
	// Neighbor signaled session down
	SLBfdCommonState_SL_BFD_DIAG_NBR_DOWN SLBfdCommonState_SLBfdDiagStateEnum = 2
	// Path down
	SLBfdCommonState_SL_BFD_DIAG_PATH_DOWN SLBfdCommonState_SLBfdDiagStateEnum = 3
	// Forwarding plane reset
	SLBfdCommonState_SL_BFD_DIAG_FWDING_PLANE_RESET SLBfdCommonState_SLBfdDiagStateEnum = 4
	// Administratively down
	SLBfdCommonState_SL_BFD_DIAG_ADMIN_DOWN SLBfdCommonState_SLBfdDiagStateEnum = 5
	// Reverse Concatenated Path Down
	SLBfdCommonState_SL_BFD_DIAG_REV_CONC_PATH_DOWN SLBfdCommonState_SLBfdDiagStateEnum = 6
	// Echo Function Failed
	SLBfdCommonState_SL_BFD_DIAG_ECHO_FUNCTION_FAILED SLBfdCommonState_SLBfdDiagStateEnum = 7
	// Concatenated Path Down
	SLBfdCommonState_SL_BFD_DIAG_CONC_PATH_DOWN SLBfdCommonState_SLBfdDiagStateEnum = 8
)

var SLBfdCommonState_SLBfdDiagStateEnum_name = map[int32]string{
	0: "SL_BFD_DIAG_NONE",
	1: "SL_BFD_DIAG_DETECT_EXPIRED",
	2: "SL_BFD_DIAG_NBR_DOWN",
	3: "SL_BFD_DIAG_PATH_DOWN",
	4: "SL_BFD_DIAG_FWDING_PLANE_RESET",
	5: "SL_BFD_DIAG_ADMIN_DOWN",
	6: "SL_BFD_DIAG_REV_CONC_PATH_DOWN",
	7: "SL_BFD_DIAG_ECHO_FUNCTION_FAILED",
	8: "SL_BFD_DIAG_CONC_PATH_DOWN",
}
var SLBfdCommonState_SLBfdDiagStateEnum_value = map[string]int32{
	"SL_BFD_DIAG_NONE":                 0,
	"SL_BFD_DIAG_DETECT_EXPIRED":       1,
	"SL_BFD_DIAG_NBR_DOWN":             2,
	"SL_BFD_DIAG_PATH_DOWN":            3,
	"SL_BFD_DIAG_FWDING_PLANE_RESET":   4,
	"SL_BFD_DIAG_ADMIN_DOWN":           5,
	"SL_BFD_DIAG_REV_CONC_PATH_DOWN":   6,
	"SL_BFD_DIAG_ECHO_FUNCTION_FAILED": 7,
	"SL_BFD_DIAG_CONC_PATH_DOWN":       8,
}

func (x SLBfdCommonState_SLBfdDiagStateEnum) String() string {
	return proto.EnumName(SLBfdCommonState_SLBfdDiagStateEnum_name, int32(x))
}
func (SLBfdCommonState_SLBfdDiagStateEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7, 1}
}

// BFD Registration message.
type SLBfdRegMsg struct {
	// Registration Operation
	Oper SLRegOp `protobuf:"varint,1,opt,name=Oper,json=oper,enum=service_layer.SLRegOp" json:"Oper,omitempty"`
}

func (m *SLBfdRegMsg) Reset()                    { *m = SLBfdRegMsg{} }
func (m *SLBfdRegMsg) String() string            { return proto.CompactTextString(m) }
func (*SLBfdRegMsg) ProtoMessage()               {}
func (*SLBfdRegMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// BFD Registration response message.
type SLBfdRegMsgRsp struct {
	// Error code
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,json=errStatus" json:"ErrStatus,omitempty"`
}

func (m *SLBfdRegMsgRsp) Reset()                    { *m = SLBfdRegMsgRsp{} }
func (m *SLBfdRegMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*SLBfdRegMsgRsp) ProtoMessage()               {}
func (*SLBfdRegMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SLBfdRegMsgRsp) GetErrStatus() *SLErrorStatus {
	if m != nil {
		return m.ErrStatus
	}
	return nil
}

// BFD Globals Get message.
type SLBfdGetMsg struct {
}

func (m *SLBfdGetMsg) Reset()                    { *m = SLBfdGetMsg{} }
func (m *SLBfdGetMsg) String() string            { return proto.CompactTextString(m) }
func (*SLBfdGetMsg) ProtoMessage()               {}
func (*SLBfdGetMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// BFD Get Global info response message.
type SLBfdGetMsgRsp struct {
	// Error code
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,json=errStatus" json:"ErrStatus,omitempty"`
	// Max BFD objects within a single BfdMsg message.
	MaxBfdSessionCfgPerSLBfdMsg uint32 `protobuf:"varint,2,opt,name=MaxBfdSessionCfgPerSLBfdMsg,json=maxBfdSessionCfgPerSLBfdMsg" json:"MaxBfdSessionCfgPerSLBfdMsg,omitempty"`
	// Min BFD Transmit Interval for single hop sessions.
	MinBfdTxIntervalSingleHop uint32 `protobuf:"varint,3,opt,name=MinBfdTxIntervalSingleHop,json=minBfdTxIntervalSingleHop" json:"MinBfdTxIntervalSingleHop,omitempty"`
	// Min BFD session Transmit Interval for multi hop sessions.
	MinBfdTxIntervalMultiHop uint32 `protobuf:"varint,4,opt,name=MinBfdTxIntervalMultiHop,json=minBfdTxIntervalMultiHop" json:"MinBfdTxIntervalMultiHop,omitempty"`
	// Min BFD detection multiplier for single hop sessions.
	MinBfdDetectMultiplierSingleHop uint32 `protobuf:"varint,5,opt,name=MinBfdDetectMultiplierSingleHop,json=minBfdDetectMultiplierSingleHop" json:"MinBfdDetectMultiplierSingleHop,omitempty"`
	// Min BFD detection multiplier for multi hop sessions.
	MinBfdDetectMultiplierMultiHop uint32 `protobuf:"varint,6,opt,name=MinBfdDetectMultiplierMultiHop,json=minBfdDetectMultiplierMultiHop" json:"MinBfdDetectMultiplierMultiHop,omitempty"`
}

func (m *SLBfdGetMsgRsp) Reset()                    { *m = SLBfdGetMsgRsp{} }
func (m *SLBfdGetMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*SLBfdGetMsgRsp) ProtoMessage()               {}
func (*SLBfdGetMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SLBfdGetMsgRsp) GetErrStatus() *SLErrorStatus {
	if m != nil {
		return m.ErrStatus
	}
	return nil
}

// BFD Get Global Stats response message.
type SLBfdGetStatsMsgRsp struct {
	// Error code
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,json=errStatus" json:"ErrStatus,omitempty"`
	// Global BFD event sequence number. This is used to order various events
	// The sequence number is equivalent to a timestamp
	// This field contains the latest global BFD event sequence number
	SeqNum uint64 `protobuf:"varint,2,opt,name=SeqNum,json=seqNum" json:"SeqNum,omitempty"`
	// Num BFD sessions added through the service layer.
	BfdCount uint32 `protobuf:"varint,3,opt,name=BfdCount,json=bfdCount" json:"BfdCount,omitempty"`
}

func (m *SLBfdGetStatsMsgRsp) Reset()                    { *m = SLBfdGetStatsMsgRsp{} }
func (m *SLBfdGetStatsMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*SLBfdGetStatsMsgRsp) ProtoMessage()               {}
func (*SLBfdGetStatsMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SLBfdGetStatsMsgRsp) GetErrStatus() *SLErrorStatus {
	if m != nil {
		return m.ErrStatus
	}
	return nil
}

// BFD Get Notifications message.
type SLBfdGetNotifMsg struct {
}

func (m *SLBfdGetNotifMsg) Reset()                    { *m = SLBfdGetNotifMsg{} }
func (m *SLBfdGetNotifMsg) String() string            { return proto.CompactTextString(m) }
func (*SLBfdGetNotifMsg) ProtoMessage()               {}
func (*SLBfdGetNotifMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// Common bidirectional forwarding detection attributes.
type SLBfdConfigCommon struct {
	// Desired Tx interval in micro seconds.
	// This is the minimum interval that the local system would like to
	// use when transmitting BFD control packets.
	// The value zero is reserved.
	// This can be changed at anytime.
	DesiredTxIntUsec uint32 `protobuf:"varint,1,opt,name=DesiredTxIntUsec,json=desiredTxIntUsec" json:"DesiredTxIntUsec,omitempty"`
	// Detection time = DesiredTxIntUsec *
	//                  DetectMultiplier
	// Detection time is the period of time without receiving BFD
	// packets after which the session is determined to have failed.
	// Note: there may be a different detection time in each direction.
	DetectMultiplier uint32 `protobuf:"varint,2,opt,name=DetectMultiplier,json=detectMultiplier" json:"DetectMultiplier,omitempty"`
}

func (m *SLBfdConfigCommon) Reset()                    { *m = SLBfdConfigCommon{} }
func (m *SLBfdConfigCommon) String() string            { return proto.CompactTextString(m) }
func (*SLBfdConfigCommon) ProtoMessage()               {}
func (*SLBfdConfigCommon) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// BFD state information.
type SLBfdCommonState struct {
	// Global BFD event sequence number. This is used to order various events
	// The sequence number is equivalent to a timestamp
	SeqNum uint64                              `protobuf:"varint,1,opt,name=SeqNum,json=seqNum" json:"SeqNum,omitempty"`
	Status SLBfdCommonState_SLBfdStateEnum     `protobuf:"varint,2,opt,name=Status,json=status,enum=service_layer.SLBfdCommonState_SLBfdStateEnum" json:"Status,omitempty"`
	Diag   SLBfdCommonState_SLBfdDiagStateEnum `protobuf:"varint,3,opt,name=Diag,json=diag,enum=service_layer.SLBfdCommonState_SLBfdDiagStateEnum" json:"Diag,omitempty"`
}

func (m *SLBfdCommonState) Reset()                    { *m = SLBfdCommonState{} }
func (m *SLBfdCommonState) String() string            { return proto.CompactTextString(m) }
func (*SLBfdCommonState) ProtoMessage()               {}
func (*SLBfdCommonState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*SLBfdRegMsg)(nil), "service_layer.SLBfdRegMsg")
	proto.RegisterType((*SLBfdRegMsgRsp)(nil), "service_layer.SLBfdRegMsgRsp")
	proto.RegisterType((*SLBfdGetMsg)(nil), "service_layer.SLBfdGetMsg")
	proto.RegisterType((*SLBfdGetMsgRsp)(nil), "service_layer.SLBfdGetMsgRsp")
	proto.RegisterType((*SLBfdGetStatsMsgRsp)(nil), "service_layer.SLBfdGetStatsMsgRsp")
	proto.RegisterType((*SLBfdGetNotifMsg)(nil), "service_layer.SLBfdGetNotifMsg")
	proto.RegisterType((*SLBfdConfigCommon)(nil), "service_layer.SLBfdConfigCommon")
	proto.RegisterType((*SLBfdCommonState)(nil), "service_layer.SLBfdCommonState")
	proto.RegisterEnum("service_layer.SLBfdType", SLBfdType_name, SLBfdType_value)
	proto.RegisterEnum("service_layer.SLBfdNotifType", SLBfdNotifType_name, SLBfdNotifType_value)
	proto.RegisterEnum("service_layer.SLBfdCommonState_SLBfdStateEnum", SLBfdCommonState_SLBfdStateEnum_name, SLBfdCommonState_SLBfdStateEnum_value)
	proto.RegisterEnum("service_layer.SLBfdCommonState_SLBfdDiagStateEnum", SLBfdCommonState_SLBfdDiagStateEnum_name, SLBfdCommonState_SLBfdDiagStateEnum_value)
}

var fileDescriptor0 = []byte{
	// 757 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x72, 0xda, 0x48,
	0x10, 0x5e, 0x40, 0x66, 0xed, 0x71, 0xe1, 0xd5, 0x8e, 0xff, 0xf0, 0x4f, 0x61, 0x97, 0x76, 0x0f,
	0x5b, 0x3e, 0x70, 0x60, 0x4f, 0x49, 0xe5, 0x10, 0x90, 0x46, 0xa0, 0x8a, 0x90, 0xa8, 0x91, 0xb0,
	0x93, 0x93, 0x0a, 0xc3, 0x40, 0xa9, 0x82, 0x24, 0x22, 0x89, 0x94, 0x7d, 0xcb, 0x25, 0x2f, 0x91,
	0x37, 0xc8, 0xa3, 0xe5, 0x2d, 0xd2, 0x1a, 0x09, 0x5b, 0x82, 0xd8, 0x95, 0xaa, 0xe4, 0xe6, 0xe9,
	0xfe, 0xfa, 0xeb, 0xaf, 0xbf, 0x6e, 0x19, 0xb4, 0x1f, 0xcd, 0x9d, 0xdb, 0xe9, 0xc4, 0x19, 0x07,
	0x9e, 0x17, 0xf8, 0xcd, 0x45, 0x18, 0xc4, 0x01, 0xae, 0x45, 0x2c, 0xfc, 0xe8, 0x8e, 0x99, 0x33,
	0x1f, 0xdd, 0xb3, 0xf0, 0xf4, 0x10, 0x30, 0x69, 0xde, 0x89, 0xef, 0x17, 0x2c, 0x4a, 0x51, 0xd2,
	0x0b, 0xb4, 0x6b, 0xe9, 0x9d, 0xe9, 0x84, 0xb2, 0x59, 0x3f, 0x9a, 0xe1, 0x2b, 0x24, 0x98, 0x0b,
	0x16, 0xd6, 0x4b, 0x97, 0xa5, 0xff, 0xf6, 0x5a, 0x47, 0xcd, 0x02, 0x47, 0xd3, 0xd2, 0x01, 0x66,
	0x2e, 0xa8, 0x10, 0x00, 0x46, 0xd2, 0xd1, 0x5e, 0xae, 0x94, 0x46, 0x0b, 0xfc, 0x12, 0xed, 0x90,
	0x30, 0xb4, 0xe2, 0x51, 0xbc, 0x8c, 0x38, 0xc5, 0x6e, 0xeb, 0x7c, 0x83, 0x02, 0x10, 0x41, 0x86,
	0xa1, 0x3b, 0x6c, 0x05, 0x97, 0x6a, 0x99, 0x90, 0x2e, 0x8b, 0x81, 0x4d, 0xfa, 0x52, 0xc9, 0xd8,
	0xd3, 0xf7, 0x2f, 0xb2, 0xe3, 0xd7, 0xe8, 0xac, 0x3f, 0xba, 0x03, 0x3a, 0x8b, 0x45, 0x91, 0x1b,
	0xf8, 0xf2, 0x74, 0x36, 0x60, 0x21, 0x6f, 0x00, 0xec, 0xf5, 0x32, 0xb0, 0xd5, 0xe8, 0x99, 0xf7,
	0x34, 0x04, 0xbf, 0x42, 0x27, 0x7d, 0xd7, 0x87, 0x87, 0x7d, 0xa7, 0xf9, 0x31, 0x74, 0x1d, 0xcd,
	0x2d, 0xd7, 0x9f, 0xcd, 0x59, 0x2f, 0x58, 0xd4, 0x2b, 0xbc, 0xfe, 0xc4, 0x7b, 0x0a, 0x00, 0xda,
	0xeb, 0xeb, 0xd5, 0xfd, 0xe5, 0x3c, 0x76, 0x93, 0x62, 0x81, 0x17, 0xd7, 0xbd, 0x27, 0xf2, 0xb8,
	0x87, 0x2e, 0xd2, 0x5a, 0x85, 0xc5, 0x6c, 0x1c, 0xf3, 0xf8, 0x62, 0xee, 0x82, 0xb6, 0x87, 0xfe,
	0x5b, 0x9c, 0xe2, 0xc2, 0x7b, 0x1e, 0x86, 0x55, 0xd4, 0xf8, 0x31, 0xd3, 0x83, 0x96, 0x2a, 0x27,
	0x6a, 0x78, 0xcf, 0xa2, 0xa4, 0xcf, 0x25, 0xb4, 0xbf, 0x5a, 0x4e, 0x62, 0x70, 0xf4, 0x1b, 0x36,
	0x74, 0x84, 0xaa, 0x16, 0xfb, 0x60, 0x2c, 0x3d, 0xbe, 0x0c, 0x81, 0x56, 0x23, 0xfe, 0xc2, 0xa7,
	0x68, 0x1b, 0x1a, 0xc9, 0xc1, 0xd2, 0x8f, 0x33, 0x9b, 0xb7, 0x6f, 0xb3, 0xb7, 0x84, 0x91, 0xb8,
	0x92, 0x61, 0x04, 0xb1, 0x3b, 0x4d, 0x0e, 0xe7, 0x3d, 0xfa, 0x9b, 0xc7, 0xe4, 0xc0, 0x9f, 0xba,
	0x33, 0x99, 0x5f, 0x3c, 0x9c, 0xb5, 0xa8, 0xb0, 0xc8, 0x0d, 0x59, 0xea, 0xef, 0x30, 0x62, 0x63,
	0xae, 0xaf, 0x46, 0xc5, 0xc9, 0x5a, 0x3c, 0xc5, 0x16, 0x07, 0xcf, 0xee, 0x03, 0xb0, 0xc5, 0xb8,
	0xf4, 0x4d, 0xc8, 0x14, 0xa4, 0x7d, 0x92, 0x51, 0x58, 0x6e, 0x92, 0x52, 0x61, 0x12, 0x15, 0xe2,
	0xa9, 0x35, 0x65, 0xfe, 0x75, 0x35, 0x37, 0xac, 0x29, 0x12, 0xa5, 0x01, 0xfe, 0x27, 0xf1, 0x97,
	0x1e, 0xf0, 0xa4, 0x4e, 0xa9, 0x48, 0x50, 0xdc, 0xd1, 0x8c, 0xbb, 0xb1, 0xd7, 0x6a, 0xfd, 0x14,
	0x4b, 0x52, 0xf0, 0xc8, 0x24, 0x4c, 0xe0, 0x29, 0x7d, 0x2a, 0x65, 0x9f, 0xd8, 0x43, 0x02, 0x5f,
	0xa2, 0x73, 0x4b, 0x77, 0x3a, 0xaa, 0xe2, 0x58, 0xc4, 0xb2, 0x34, 0xd3, 0x70, 0x2c, 0xbb, 0x6d,
	0x13, 0x67, 0x68, 0xbc, 0x31, 0xcc, 0x1b, 0x43, 0xfc, 0x03, 0x1f, 0x26, 0xf6, 0x16, 0x10, 0xc3,
	0x81, 0x58, 0xc2, 0xc7, 0xc9, 0x41, 0x14, 0xc2, 0x4a, 0x82, 0x2f, 0xe3, 0x73, 0x54, 0xcf, 0x12,
	0x06, 0xd1, 0xba, 0xbd, 0x8e, 0x49, 0x81, 0x4c, 0x36, 0x0d, 0x55, 0xeb, 0x8a, 0x15, 0xe9, 0x6b,
	0x19, 0xe1, 0x4d, 0x7d, 0xf8, 0x20, 0x71, 0x95, 0x17, 0x29, 0x5a, 0xbb, 0xeb, 0x18, 0xa6, 0x41,
	0xa0, 0x75, 0x03, 0x9d, 0xe6, 0xa3, 0x0a, 0xb1, 0x89, 0x6c, 0x3b, 0xe4, 0xed, 0x40, 0xa3, 0x44,
	0x01, 0x0d, 0x75, 0x74, 0x50, 0xa8, 0xea, 0xd0, 0x95, 0x88, 0x13, 0x74, 0x98, 0xcf, 0x0c, 0xda,
	0x76, 0x2f, 0x4d, 0x55, 0xb0, 0x84, 0x1a, 0xf9, 0x94, 0x7a, 0xa3, 0x68, 0x06, 0x20, 0xf4, 0xb6,
	0x41, 0x1c, 0x4a, 0x2c, 0x62, 0x8b, 0x02, 0x9c, 0xe0, 0x51, 0x1e, 0xd3, 0x56, 0xfa, 0x5a, 0x36,
	0xdf, 0xd6, 0x7a, 0x3d, 0x25, 0xd7, 0x0e, 0x4c, 0x27, 0xe7, 0x7a, 0x54, 0xf1, 0xbf, 0xe8, 0x32,
	0x8f, 0x21, 0x72, 0xcf, 0x74, 0x54, 0x70, 0xc1, 0x4e, 0x7c, 0x52, 0xdb, 0x9a, 0x0e, 0xf2, 0xff,
	0x5c, 0x1f, 0x6f, 0x8d, 0x65, 0xfb, 0xaa, 0x8f, 0x76, 0xb8, 0x55, 0x36, 0xfc, 0xf7, 0xc6, 0xfb,
	0xe8, 0xaf, 0x0c, 0x9c, 0x88, 0xa4, 0xd7, 0xc0, 0x50, 0xd8, 0x0d, 0x0c, 0xa1, 0x13, 0xa7, 0x67,
	0x26, 0xbb, 0x79, 0x74, 0xb3, 0x3f, 0xd4, 0x6d, 0x8d, 0x47, 0xcb, 0x57, 0x61, 0xb6, 0x7c, 0xfe,
	0xe1, 0x70, 0xce, 0x47, 0x01, 0xe4, 0x9a, 0x18, 0xb6, 0x63, 0xbf, 0x1b, 0x90, 0x3c, 0xfd, 0x19,
	0x3a, 0xde, 0xcc, 0x13, 0x4a, 0x4d, 0x0a, 0x4d, 0xfe, 0x41, 0x17, 0x9b, 0xc9, 0xc2, 0x11, 0x89,
	0xe5, 0xdb, 0x2a, 0xff, 0xcd, 0xf9, 0xff, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe4, 0xcb, 0xfa,
	0x83, 0xb0, 0x06, 0x00, 0x00,
}
