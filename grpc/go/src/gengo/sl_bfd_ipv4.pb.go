// @file
// @brief Client RPC proto file for BFD RPCs.
// Declares calls for adding, deleting, updating, and getting the BFD
// sessions.
//
// ----------------------------------------------------------------
//  Copyright (c) 2016, 2023 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.3
// source: sl_bfd_ipv4.proto

package service_layer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BFD unique key identifier.
type SLBfdv4Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BFD Session Type
	Type SLBfdType `protobuf:"varint,1,opt,name=Type,proto3,enum=service_layer.SLBfdType" json:"Type,omitempty"`
	// VRF name.
	VrfName string `protobuf:"bytes,2,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// Neighbor Ipv4 address.
	NbrAddr uint32 `protobuf:"varint,3,opt,name=NbrAddr,proto3" json:"NbrAddr,omitempty"`
	// Interface name and handle, needed for single-hop BFD
	Interface *SLInterface `protobuf:"bytes,4,opt,name=Interface,proto3" json:"Interface,omitempty"`
	// Source Ipv4 address, needed for multi-hop BFD
	SourceAddr uint32 `protobuf:"varint,5,opt,name=SourceAddr,proto3" json:"SourceAddr,omitempty"`
}

func (x *SLBfdv4Key) Reset() {
	*x = SLBfdv4Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bfd_ipv4_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBfdv4Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBfdv4Key) ProtoMessage() {}

func (x *SLBfdv4Key) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bfd_ipv4_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBfdv4Key.ProtoReflect.Descriptor instead.
func (*SLBfdv4Key) Descriptor() ([]byte, []int) {
	return file_sl_bfd_ipv4_proto_rawDescGZIP(), []int{0}
}

func (x *SLBfdv4Key) GetType() SLBfdType {
	if x != nil {
		return x.Type
	}
	return SLBfdType_SL_BFD_RESERVED
}

func (x *SLBfdv4Key) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SLBfdv4Key) GetNbrAddr() uint32 {
	if x != nil {
		return x.NbrAddr
	}
	return 0
}

func (x *SLBfdv4Key) GetInterface() *SLInterface {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *SLBfdv4Key) GetSourceAddr() uint32 {
	if x != nil {
		return x.SourceAddr
	}
	return 0
}

// BFD session information.
type SLBfdv4SessionCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BFD unique key identifier.
	Key *SLBfdv4Key `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	// BFD common features.
	Config *SLBfdConfigCommon `protobuf:"bytes,2,opt,name=Config,proto3" json:"Config,omitempty"`
}

func (x *SLBfdv4SessionCfg) Reset() {
	*x = SLBfdv4SessionCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bfd_ipv4_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBfdv4SessionCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBfdv4SessionCfg) ProtoMessage() {}

func (x *SLBfdv4SessionCfg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bfd_ipv4_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBfdv4SessionCfg.ProtoReflect.Descriptor instead.
func (*SLBfdv4SessionCfg) Descriptor() ([]byte, []int) {
	return file_sl_bfd_ipv4_proto_rawDescGZIP(), []int{1}
}

func (x *SLBfdv4SessionCfg) GetKey() *SLBfdv4Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SLBfdv4SessionCfg) GetConfig() *SLBfdConfigCommon {
	if x != nil {
		return x.Config
	}
	return nil
}

// Contains a List of BFD session objects.
type SLBfdv4Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BFD Object Operations
	Oper SLObjectOp `protobuf:"varint,1,opt,name=Oper,proto3,enum=service_layer.SLObjectOp" json:"Oper,omitempty"`
	// List of BFD session objects
	Sessions []*SLBfdv4SessionCfg `protobuf:"bytes,2,rep,name=Sessions,proto3" json:"Sessions,omitempty"`
}

func (x *SLBfdv4Msg) Reset() {
	*x = SLBfdv4Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bfd_ipv4_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBfdv4Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBfdv4Msg) ProtoMessage() {}

func (x *SLBfdv4Msg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bfd_ipv4_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBfdv4Msg.ProtoReflect.Descriptor instead.
func (*SLBfdv4Msg) Descriptor() ([]byte, []int) {
	return file_sl_bfd_ipv4_proto_rawDescGZIP(), []int{2}
}

func (x *SLBfdv4Msg) GetOper() SLObjectOp {
	if x != nil {
		return x.Oper
	}
	return SLObjectOp_SL_OBJOP_RESERVED
}

func (x *SLBfdv4Msg) GetSessions() []*SLBfdv4SessionCfg {
	if x != nil {
		return x.Sessions
	}
	return nil
}

// BFD result
type SLBfdv4Res struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Corresponding error code
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// BFD unique key.
	Key *SLBfdv4Key `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *SLBfdv4Res) Reset() {
	*x = SLBfdv4Res{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bfd_ipv4_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBfdv4Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBfdv4Res) ProtoMessage() {}

func (x *SLBfdv4Res) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bfd_ipv4_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBfdv4Res.ProtoReflect.Descriptor instead.
func (*SLBfdv4Res) Descriptor() ([]byte, []int) {
	return file_sl_bfd_ipv4_proto_rawDescGZIP(), []int{3}
}

func (x *SLBfdv4Res) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (x *SLBfdv4Res) GetKey() *SLBfdv4Key {
	if x != nil {
		return x.Key
	}
	return nil
}

// BFD bulk result
type SLBfdv4MsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary result of the bulk operation (refer to enum SLErrorStatus)
	// In general, the StatusSummary implies one of 3 things:
	//  1. SL_SUCCESS: signifies that the entire bulk operation was successful.
	//     In this case, the Results list is empty.
	//  2. SL_SOME_ERR: signifies that the operation failed for one or more
	//     entries. In this case, Results holds the result for
	//     each individual entry in the bulk.
	//  3. SL_RPC_XXX: signifies that the entire bulk operation failed.
	//     In this case, the Results list is empty.
	StatusSummary *SLErrorStatus `protobuf:"bytes,1,opt,name=StatusSummary,proto3" json:"StatusSummary,omitempty"`
	// In case of errors, this field indicates which entry in the bulk was
	// erroneous.
	Results []*SLBfdv4Res `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *SLBfdv4MsgRsp) Reset() {
	*x = SLBfdv4MsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bfd_ipv4_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBfdv4MsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBfdv4MsgRsp) ProtoMessage() {}

func (x *SLBfdv4MsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bfd_ipv4_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBfdv4MsgRsp.ProtoReflect.Descriptor instead.
func (*SLBfdv4MsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_bfd_ipv4_proto_rawDescGZIP(), []int{4}
}

func (x *SLBfdv4MsgRsp) GetStatusSummary() *SLErrorStatus {
	if x != nil {
		return x.StatusSummary
	}
	return nil
}

func (x *SLBfdv4MsgRsp) GetResults() []*SLBfdv4Res {
	if x != nil {
		return x.Results
	}
	return nil
}

// BFD Get Message
type SLBfdv4GetMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BFD key.
	// If the Key is not specified, then request up to the first
	// 'EntriesCount' entries.
	Key *SLBfdv4Key `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	// Global BFD event sequence number.
	// Return all BFD sessions with sequence number >= SeqNum.
	SeqNum uint64 `protobuf:"varint,2,opt,name=SeqNum,proto3" json:"SeqNum,omitempty"`
	// Number of entries requested
	EntriesCount uint32 `protobuf:"varint,3,opt,name=EntriesCount,proto3" json:"EntriesCount,omitempty"`
	// if GetNext is FALSE:
	//
	//	request up to 'EntriesCount' entries starting from the key
	//
	// If GetNext is TRUE, or if the key exact match is not found:
	//
	//	request up to 'EntriesCount' entries starting from the key's next
	GetNext bool `protobuf:"varint,4,opt,name=GetNext,proto3" json:"GetNext,omitempty"`
}

func (x *SLBfdv4GetMsg) Reset() {
	*x = SLBfdv4GetMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bfd_ipv4_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBfdv4GetMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBfdv4GetMsg) ProtoMessage() {}

func (x *SLBfdv4GetMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bfd_ipv4_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBfdv4GetMsg.ProtoReflect.Descriptor instead.
func (*SLBfdv4GetMsg) Descriptor() ([]byte, []int) {
	return file_sl_bfd_ipv4_proto_rawDescGZIP(), []int{5}
}

func (x *SLBfdv4GetMsg) GetKey() *SLBfdv4Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SLBfdv4GetMsg) GetSeqNum() uint64 {
	if x != nil {
		return x.SeqNum
	}
	return 0
}

func (x *SLBfdv4GetMsg) GetEntriesCount() uint32 {
	if x != nil {
		return x.EntriesCount
	}
	return 0
}

func (x *SLBfdv4GetMsg) GetGetNext() bool {
	if x != nil {
		return x.GetNext
	}
	return false
}

// BFD Session Config and State info
type SLBfdv4SessionCfgState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BFD unique key identifier.
	Key *SLBfdv4Key `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	// BFD common features.
	Config *SLBfdConfigCommon `protobuf:"bytes,2,opt,name=Config,proto3" json:"Config,omitempty"`
	// BFD session State
	State *SLBfdCommonState `protobuf:"bytes,3,opt,name=State,proto3" json:"State,omitempty"`
}

func (x *SLBfdv4SessionCfgState) Reset() {
	*x = SLBfdv4SessionCfgState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bfd_ipv4_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBfdv4SessionCfgState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBfdv4SessionCfgState) ProtoMessage() {}

func (x *SLBfdv4SessionCfgState) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bfd_ipv4_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBfdv4SessionCfgState.ProtoReflect.Descriptor instead.
func (*SLBfdv4SessionCfgState) Descriptor() ([]byte, []int) {
	return file_sl_bfd_ipv4_proto_rawDescGZIP(), []int{6}
}

func (x *SLBfdv4SessionCfgState) GetKey() *SLBfdv4Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SLBfdv4SessionCfgState) GetConfig() *SLBfdConfigCommon {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *SLBfdv4SessionCfgState) GetState() *SLBfdCommonState {
	if x != nil {
		return x.State
	}
	return nil
}

// BFD Get Message Response
type SLBfdv4GetMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// End Of File.
	// When set to True, it indicates that the server has returned M, where
	// M < N, of the original N requested Entries.
	Eof bool `protobuf:"varint,1,opt,name=Eof,proto3" json:"Eof,omitempty"`
	// Status of the Get operation
	ErrStatus *SLErrorStatus `protobuf:"bytes,2,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// Returned entries as requested in the Get operation.
	// if Error is SL_SUCCESS, Entries contains the info requested
	Entries []*SLBfdv4SessionCfgState `protobuf:"bytes,3,rep,name=Entries,proto3" json:"Entries,omitempty"`
}

func (x *SLBfdv4GetMsgRsp) Reset() {
	*x = SLBfdv4GetMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bfd_ipv4_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBfdv4GetMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBfdv4GetMsgRsp) ProtoMessage() {}

func (x *SLBfdv4GetMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bfd_ipv4_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBfdv4GetMsgRsp.ProtoReflect.Descriptor instead.
func (*SLBfdv4GetMsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_bfd_ipv4_proto_rawDescGZIP(), []int{7}
}

func (x *SLBfdv4GetMsgRsp) GetEof() bool {
	if x != nil {
		return x.Eof
	}
	return false
}

func (x *SLBfdv4GetMsgRsp) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (x *SLBfdv4GetMsgRsp) GetEntries() []*SLBfdv4SessionCfgState {
	if x != nil {
		return x.Entries
	}
	return nil
}

// BFD Session and State info
type SLBfdv4SessionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BFD unique key identifier.
	Key *SLBfdv4Key `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	// BFD session State
	State *SLBfdCommonState `protobuf:"bytes,2,opt,name=State,proto3" json:"State,omitempty"`
}

func (x *SLBfdv4SessionState) Reset() {
	*x = SLBfdv4SessionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bfd_ipv4_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBfdv4SessionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBfdv4SessionState) ProtoMessage() {}

func (x *SLBfdv4SessionState) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bfd_ipv4_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBfdv4SessionState.ProtoReflect.Descriptor instead.
func (*SLBfdv4SessionState) Descriptor() ([]byte, []int) {
	return file_sl_bfd_ipv4_proto_rawDescGZIP(), []int{8}
}

func (x *SLBfdv4SessionState) GetKey() *SLBfdv4Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SLBfdv4SessionState) GetState() *SLBfdCommonState {
	if x != nil {
		return x.State
	}
	return nil
}

// BFD Session and State info Message
type SLBfdv4Notif struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event Type
	EventType SLBfdNotifType `protobuf:"varint,1,opt,name=EventType,proto3,enum=service_layer.SLBfdNotifType" json:"EventType,omitempty"`
	// Further info based on EventType
	//
	// Types that are assignable to Event:
	//
	//	*SLBfdv4Notif_ErrStatus
	//	*SLBfdv4Notif_Session
	Event isSLBfdv4Notif_Event `protobuf_oneof:"Event"`
}

func (x *SLBfdv4Notif) Reset() {
	*x = SLBfdv4Notif{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bfd_ipv4_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBfdv4Notif) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBfdv4Notif) ProtoMessage() {}

func (x *SLBfdv4Notif) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bfd_ipv4_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBfdv4Notif.ProtoReflect.Descriptor instead.
func (*SLBfdv4Notif) Descriptor() ([]byte, []int) {
	return file_sl_bfd_ipv4_proto_rawDescGZIP(), []int{9}
}

func (x *SLBfdv4Notif) GetEventType() SLBfdNotifType {
	if x != nil {
		return x.EventType
	}
	return SLBfdNotifType_SL_BFD_EVENT_TYPE_RESERVED
}

func (m *SLBfdv4Notif) GetEvent() isSLBfdv4Notif_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *SLBfdv4Notif) GetErrStatus() *SLErrorStatus {
	if x, ok := x.GetEvent().(*SLBfdv4Notif_ErrStatus); ok {
		return x.ErrStatus
	}
	return nil
}

func (x *SLBfdv4Notif) GetSession() *SLBfdv4SessionState {
	if x, ok := x.GetEvent().(*SLBfdv4Notif_Session); ok {
		return x.Session
	}
	return nil
}

type isSLBfdv4Notif_Event interface {
	isSLBfdv4Notif_Event()
}

type SLBfdv4Notif_ErrStatus struct {
	// case EventType == SL_BFD_EVENT_TYPE_ERROR:
	//
	//	=> This field carries error info, if any error occurs during
	//	   notification subscription.
	ErrStatus *SLErrorStatus `protobuf:"bytes,2,opt,name=ErrStatus,proto3,oneof"`
}

type SLBfdv4Notif_Session struct {
	// case EventType == SL_BFD_EVENT_TYPE_SESSION_STATE:
	//
	//	=> this field carries the session state info
	Session *SLBfdv4SessionState `protobuf:"bytes,3,opt,name=Session,proto3,oneof"`
}

func (*SLBfdv4Notif_ErrStatus) isSLBfdv4Notif_Event() {}

func (*SLBfdv4Notif_Session) isSLBfdv4Notif_Event() {}

var File_sl_bfd_ipv4_proto protoreflect.FileDescriptor

var file_sl_bfd_ipv4_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x6c, 0x5f, 0x62, 0x66, 0x64, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x1a, 0x15, 0x73, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x6c, 0x5f, 0x62, 0x66,
	0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8,
	0x01, 0x0a, 0x0a, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x34, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56,
	0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x72,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x62, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x4e, 0x62, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x38, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x22, 0x7a, 0x0a, 0x11, 0x53, 0x4c, 0x42,
	0x66, 0x64, 0x76, 0x34, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x12, 0x2b,
	0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66,
	0x64, 0x76, 0x34, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x79, 0x0a, 0x0a, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x34,
	0x4d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x52, 0x04, 0x4f, 0x70,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x08, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x34, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x52, 0x08, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x75, 0x0a, 0x0a, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x34, 0x52, 0x65, 0x73, 0x12, 0x3a,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x03, 0x4b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x34, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0x88, 0x01, 0x0a, 0x0d, 0x53, 0x4c, 0x42, 0x66,
	0x64, 0x76, 0x34, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x33, 0x0a,
	0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x66, 0x64, 0x76, 0x34, 0x52, 0x65, 0x73, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x0d, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x34, 0x47, 0x65,
	0x74, 0x4d, 0x73, 0x67, 0x12, 0x2b, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x34, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x4b, 0x65,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x16, 0x53, 0x4c, 0x42, 0x66,
	0x64, 0x76, 0x34, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x34, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12,
	0x38, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x42, 0x66, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0xa1, 0x01, 0x0a, 0x10, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x34, 0x47, 0x65, 0x74, 0x4d,
	0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x45, 0x6f, 0x66, 0x12, 0x3a, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x34, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x79, 0x0a, 0x13, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x34, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x4b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x34,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0xd2, 0x01, 0x0a, 0x0c, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x34, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x12, 0x3b, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x66, 0x64, 0x76, 0x34, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x32, 0xee, 0x03, 0x0a, 0x0b, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x34,
	0x4f, 0x70, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0c, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x34, 0x52,
	0x65, 0x67, 0x4f, 0x70, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67,
	0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12,
	0x47, 0x0a, 0x0a, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x34, 0x47, 0x65, 0x74, 0x12, 0x1a, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x42, 0x66, 0x64, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x47,
	0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0f, 0x53, 0x4c, 0x42, 0x66,
	0x64, 0x76, 0x34, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66,
	0x64, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x15, 0x53,
	0x4c, 0x42, 0x66, 0x64, 0x76, 0x34, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x4d, 0x73, 0x67, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x34, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x10, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x34, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x12, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x34,
	0x4d, 0x73, 0x67, 0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x34, 0x4d, 0x73, 0x67, 0x52, 0x73,
	0x70, 0x12, 0x52, 0x0a, 0x11, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x34, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x34, 0x47, 0x65,
	0x74, 0x4d, 0x73, 0x67, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x34, 0x47, 0x65, 0x74, 0x4d,
	0x73, 0x67, 0x52, 0x73, 0x70, 0x42, 0x51, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x69, 0x73, 0x63, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x6f, 0x62, 0x6a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sl_bfd_ipv4_proto_rawDescOnce sync.Once
	file_sl_bfd_ipv4_proto_rawDescData = file_sl_bfd_ipv4_proto_rawDesc
)

func file_sl_bfd_ipv4_proto_rawDescGZIP() []byte {
	file_sl_bfd_ipv4_proto_rawDescOnce.Do(func() {
		file_sl_bfd_ipv4_proto_rawDescData = protoimpl.X.CompressGZIP(file_sl_bfd_ipv4_proto_rawDescData)
	})
	return file_sl_bfd_ipv4_proto_rawDescData
}

var file_sl_bfd_ipv4_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_sl_bfd_ipv4_proto_goTypes = []interface{}{
	(*SLBfdv4Key)(nil),             // 0: service_layer.SLBfdv4Key
	(*SLBfdv4SessionCfg)(nil),      // 1: service_layer.SLBfdv4SessionCfg
	(*SLBfdv4Msg)(nil),             // 2: service_layer.SLBfdv4Msg
	(*SLBfdv4Res)(nil),             // 3: service_layer.SLBfdv4Res
	(*SLBfdv4MsgRsp)(nil),          // 4: service_layer.SLBfdv4MsgRsp
	(*SLBfdv4GetMsg)(nil),          // 5: service_layer.SLBfdv4GetMsg
	(*SLBfdv4SessionCfgState)(nil), // 6: service_layer.SLBfdv4SessionCfgState
	(*SLBfdv4GetMsgRsp)(nil),       // 7: service_layer.SLBfdv4GetMsgRsp
	(*SLBfdv4SessionState)(nil),    // 8: service_layer.SLBfdv4SessionState
	(*SLBfdv4Notif)(nil),           // 9: service_layer.SLBfdv4Notif
	(SLBfdType)(0),                 // 10: service_layer.SLBfdType
	(*SLInterface)(nil),            // 11: service_layer.SLInterface
	(*SLBfdConfigCommon)(nil),      // 12: service_layer.SLBfdConfigCommon
	(SLObjectOp)(0),                // 13: service_layer.SLObjectOp
	(*SLErrorStatus)(nil),          // 14: service_layer.SLErrorStatus
	(*SLBfdCommonState)(nil),       // 15: service_layer.SLBfdCommonState
	(SLBfdNotifType)(0),            // 16: service_layer.SLBfdNotifType
	(*SLBfdRegMsg)(nil),            // 17: service_layer.SLBfdRegMsg
	(*SLBfdGetMsg)(nil),            // 18: service_layer.SLBfdGetMsg
	(*SLBfdGetNotifMsg)(nil),       // 19: service_layer.SLBfdGetNotifMsg
	(*SLBfdRegMsgRsp)(nil),         // 20: service_layer.SLBfdRegMsgRsp
	(*SLBfdGetMsgRsp)(nil),         // 21: service_layer.SLBfdGetMsgRsp
	(*SLBfdGetStatsMsgRsp)(nil),    // 22: service_layer.SLBfdGetStatsMsgRsp
}
var file_sl_bfd_ipv4_proto_depIdxs = []int32{
	10, // 0: service_layer.SLBfdv4Key.Type:type_name -> service_layer.SLBfdType
	11, // 1: service_layer.SLBfdv4Key.Interface:type_name -> service_layer.SLInterface
	0,  // 2: service_layer.SLBfdv4SessionCfg.Key:type_name -> service_layer.SLBfdv4Key
	12, // 3: service_layer.SLBfdv4SessionCfg.Config:type_name -> service_layer.SLBfdConfigCommon
	13, // 4: service_layer.SLBfdv4Msg.Oper:type_name -> service_layer.SLObjectOp
	1,  // 5: service_layer.SLBfdv4Msg.Sessions:type_name -> service_layer.SLBfdv4SessionCfg
	14, // 6: service_layer.SLBfdv4Res.ErrStatus:type_name -> service_layer.SLErrorStatus
	0,  // 7: service_layer.SLBfdv4Res.Key:type_name -> service_layer.SLBfdv4Key
	14, // 8: service_layer.SLBfdv4MsgRsp.StatusSummary:type_name -> service_layer.SLErrorStatus
	3,  // 9: service_layer.SLBfdv4MsgRsp.Results:type_name -> service_layer.SLBfdv4Res
	0,  // 10: service_layer.SLBfdv4GetMsg.Key:type_name -> service_layer.SLBfdv4Key
	0,  // 11: service_layer.SLBfdv4SessionCfgState.Key:type_name -> service_layer.SLBfdv4Key
	12, // 12: service_layer.SLBfdv4SessionCfgState.Config:type_name -> service_layer.SLBfdConfigCommon
	15, // 13: service_layer.SLBfdv4SessionCfgState.State:type_name -> service_layer.SLBfdCommonState
	14, // 14: service_layer.SLBfdv4GetMsgRsp.ErrStatus:type_name -> service_layer.SLErrorStatus
	6,  // 15: service_layer.SLBfdv4GetMsgRsp.Entries:type_name -> service_layer.SLBfdv4SessionCfgState
	0,  // 16: service_layer.SLBfdv4SessionState.Key:type_name -> service_layer.SLBfdv4Key
	15, // 17: service_layer.SLBfdv4SessionState.State:type_name -> service_layer.SLBfdCommonState
	16, // 18: service_layer.SLBfdv4Notif.EventType:type_name -> service_layer.SLBfdNotifType
	14, // 19: service_layer.SLBfdv4Notif.ErrStatus:type_name -> service_layer.SLErrorStatus
	8,  // 20: service_layer.SLBfdv4Notif.Session:type_name -> service_layer.SLBfdv4SessionState
	17, // 21: service_layer.SLBfdv4Oper.SLBfdv4RegOp:input_type -> service_layer.SLBfdRegMsg
	18, // 22: service_layer.SLBfdv4Oper.SLBfdv4Get:input_type -> service_layer.SLBfdGetMsg
	18, // 23: service_layer.SLBfdv4Oper.SLBfdv4GetStats:input_type -> service_layer.SLBfdGetMsg
	19, // 24: service_layer.SLBfdv4Oper.SLBfdv4GetNotifStream:input_type -> service_layer.SLBfdGetNotifMsg
	2,  // 25: service_layer.SLBfdv4Oper.SLBfdv4SessionOp:input_type -> service_layer.SLBfdv4Msg
	5,  // 26: service_layer.SLBfdv4Oper.SLBfdv4SessionGet:input_type -> service_layer.SLBfdv4GetMsg
	20, // 27: service_layer.SLBfdv4Oper.SLBfdv4RegOp:output_type -> service_layer.SLBfdRegMsgRsp
	21, // 28: service_layer.SLBfdv4Oper.SLBfdv4Get:output_type -> service_layer.SLBfdGetMsgRsp
	22, // 29: service_layer.SLBfdv4Oper.SLBfdv4GetStats:output_type -> service_layer.SLBfdGetStatsMsgRsp
	9,  // 30: service_layer.SLBfdv4Oper.SLBfdv4GetNotifStream:output_type -> service_layer.SLBfdv4Notif
	4,  // 31: service_layer.SLBfdv4Oper.SLBfdv4SessionOp:output_type -> service_layer.SLBfdv4MsgRsp
	7,  // 32: service_layer.SLBfdv4Oper.SLBfdv4SessionGet:output_type -> service_layer.SLBfdv4GetMsgRsp
	27, // [27:33] is the sub-list for method output_type
	21, // [21:27] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_sl_bfd_ipv4_proto_init() }
func file_sl_bfd_ipv4_proto_init() {
	if File_sl_bfd_ipv4_proto != nil {
		return
	}
	file_sl_common_types_proto_init()
	file_sl_bfd_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sl_bfd_ipv4_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBfdv4Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bfd_ipv4_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBfdv4SessionCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bfd_ipv4_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBfdv4Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bfd_ipv4_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBfdv4Res); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bfd_ipv4_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBfdv4MsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bfd_ipv4_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBfdv4GetMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bfd_ipv4_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBfdv4SessionCfgState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bfd_ipv4_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBfdv4GetMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bfd_ipv4_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBfdv4SessionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bfd_ipv4_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBfdv4Notif); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sl_bfd_ipv4_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*SLBfdv4Notif_ErrStatus)(nil),
		(*SLBfdv4Notif_Session)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sl_bfd_ipv4_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sl_bfd_ipv4_proto_goTypes,
		DependencyIndexes: file_sl_bfd_ipv4_proto_depIdxs,
		MessageInfos:      file_sl_bfd_ipv4_proto_msgTypes,
	}.Build()
	File_sl_bfd_ipv4_proto = out.File
	file_sl_bfd_ipv4_proto_rawDesc = nil
	file_sl_bfd_ipv4_proto_goTypes = nil
	file_sl_bfd_ipv4_proto_depIdxs = nil
}
