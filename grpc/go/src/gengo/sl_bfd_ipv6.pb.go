// Code generated by protoc-gen-go.
// source: sl_bfd_ipv6.proto
// DO NOT EDIT!

package service_layer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// BFD unique key identifier.
type SLBfdv6Key struct {
	// BFD Session Type
	Type SLBfdType `protobuf:"varint,1,opt,name=Type,json=type,enum=service_layer.SLBfdType" json:"Type,omitempty"`
	// VRF name.
	VrfName string `protobuf:"bytes,2,opt,name=VrfName,json=vrfName" json:"VrfName,omitempty"`
	// Neighbor Ipv6 address.
	NbrAddr []byte `protobuf:"bytes,3,opt,name=NbrAddr,json=nbrAddr,proto3" json:"NbrAddr,omitempty"`
	// Interface name and handle, needed for single-hop BFD
	Interface *SLInterface `protobuf:"bytes,4,opt,name=Interface,json=interface" json:"Interface,omitempty"`
	// Source Ipv6 address, needed for multi-hop BFD
	SourceAddr []byte `protobuf:"bytes,5,opt,name=SourceAddr,json=sourceAddr,proto3" json:"SourceAddr,omitempty"`
}

func (m *SLBfdv6Key) Reset()                    { *m = SLBfdv6Key{} }
func (m *SLBfdv6Key) String() string            { return proto.CompactTextString(m) }
func (*SLBfdv6Key) ProtoMessage()               {}
func (*SLBfdv6Key) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *SLBfdv6Key) GetInterface() *SLInterface {
	if m != nil {
		return m.Interface
	}
	return nil
}

// BFD session information.
type SLBfdv6SessionCfg struct {
	// BFD unique key identifier.
	Key *SLBfdv6Key `protobuf:"bytes,1,opt,name=Key,json=key" json:"Key,omitempty"`
	// BFD common features.
	Config *SLBfdConfigCommon `protobuf:"bytes,2,opt,name=Config,json=config" json:"Config,omitempty"`
}

func (m *SLBfdv6SessionCfg) Reset()                    { *m = SLBfdv6SessionCfg{} }
func (m *SLBfdv6SessionCfg) String() string            { return proto.CompactTextString(m) }
func (*SLBfdv6SessionCfg) ProtoMessage()               {}
func (*SLBfdv6SessionCfg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *SLBfdv6SessionCfg) GetKey() *SLBfdv6Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SLBfdv6SessionCfg) GetConfig() *SLBfdConfigCommon {
	if m != nil {
		return m.Config
	}
	return nil
}

// Contains a List of BFD session objects.
type SLBfdv6Msg struct {
	// BFD Object Operations
	Oper SLObjectOp `protobuf:"varint,1,opt,name=Oper,json=oper,enum=service_layer.SLObjectOp" json:"Oper,omitempty"`
	// List of BFD session objects
	Sessions []*SLBfdv6SessionCfg `protobuf:"bytes,2,rep,name=Sessions,json=sessions" json:"Sessions,omitempty"`
}

func (m *SLBfdv6Msg) Reset()                    { *m = SLBfdv6Msg{} }
func (m *SLBfdv6Msg) String() string            { return proto.CompactTextString(m) }
func (*SLBfdv6Msg) ProtoMessage()               {}
func (*SLBfdv6Msg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *SLBfdv6Msg) GetSessions() []*SLBfdv6SessionCfg {
	if m != nil {
		return m.Sessions
	}
	return nil
}

// BFD result
type SLBfdv6Res struct {
	// Corresponding error code
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,json=errStatus" json:"ErrStatus,omitempty"`
	// BFD unique key.
	Key *SLBfdv6Key `protobuf:"bytes,2,opt,name=Key,json=key" json:"Key,omitempty"`
}

func (m *SLBfdv6Res) Reset()                    { *m = SLBfdv6Res{} }
func (m *SLBfdv6Res) String() string            { return proto.CompactTextString(m) }
func (*SLBfdv6Res) ProtoMessage()               {}
func (*SLBfdv6Res) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *SLBfdv6Res) GetErrStatus() *SLErrorStatus {
	if m != nil {
		return m.ErrStatus
	}
	return nil
}

func (m *SLBfdv6Res) GetKey() *SLBfdv6Key {
	if m != nil {
		return m.Key
	}
	return nil
}

// BFD bulk result
type SLBfdv6MsgRsp struct {
	// Summary result of the bulk operation (refer to enum SLErrorStatus)
	// In general, the StatusSummary implies one of 3 things:
	// 1. SL_SUCCESS: signifies that the entire bulk operation was successful.
	//         In this case, the Results list is empty.
	// 2. SL_SOME_ERR: signifies that the operation failed for one or more
	//         entries. In this case, Results holds the result for
	//         each individual entry in the bulk.
	// 3. SL_RPC_XXX: signifies that the entire bulk operation failed.
	//         In this case, the Results list is empty.
	StatusSummary *SLErrorStatus `protobuf:"bytes,1,opt,name=StatusSummary,json=statusSummary" json:"StatusSummary,omitempty"`
	// In case of errors, this field indicates which entry in the bulk was
	// erroneous.
	Results []*SLBfdv6Res `protobuf:"bytes,2,rep,name=Results,json=results" json:"Results,omitempty"`
}

func (m *SLBfdv6MsgRsp) Reset()                    { *m = SLBfdv6MsgRsp{} }
func (m *SLBfdv6MsgRsp) String() string            { return proto.CompactTextString(m) }
func (*SLBfdv6MsgRsp) ProtoMessage()               {}
func (*SLBfdv6MsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *SLBfdv6MsgRsp) GetStatusSummary() *SLErrorStatus {
	if m != nil {
		return m.StatusSummary
	}
	return nil
}

func (m *SLBfdv6MsgRsp) GetResults() []*SLBfdv6Res {
	if m != nil {
		return m.Results
	}
	return nil
}

// BFD Get Message
type SLBfdv6GetMsg struct {
	// BFD key.
	// If the Key is not specified, then request up to the first
	// 'EntriesCount' entries.
	Key *SLBfdv6Key `protobuf:"bytes,1,opt,name=Key,json=key" json:"Key,omitempty"`
	// Global BFD event sequence number.
	// Return all BFD sessions with sequence number >= SeqNum.
	SeqNum uint64 `protobuf:"varint,2,opt,name=SeqNum,json=seqNum" json:"SeqNum,omitempty"`
	// Number of entries requested
	EntriesCount uint32 `protobuf:"varint,3,opt,name=EntriesCount,json=entriesCount" json:"EntriesCount,omitempty"`
	// if GetNext is FALSE:
	//     request up to 'EntriesCount' entries starting from the key
	// If GetNext is TRUE, or if the key exact match is not found:
	//     request up to 'EntriesCount' entries starting from the key's next
	GetNext bool `protobuf:"varint,4,opt,name=GetNext,json=getNext" json:"GetNext,omitempty"`
}

func (m *SLBfdv6GetMsg) Reset()                    { *m = SLBfdv6GetMsg{} }
func (m *SLBfdv6GetMsg) String() string            { return proto.CompactTextString(m) }
func (*SLBfdv6GetMsg) ProtoMessage()               {}
func (*SLBfdv6GetMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *SLBfdv6GetMsg) GetKey() *SLBfdv6Key {
	if m != nil {
		return m.Key
	}
	return nil
}

// BFD Session Config and State info
type SLBfdv6SessionCfgState struct {
	// BFD unique key identifier.
	Key *SLBfdv6Key `protobuf:"bytes,1,opt,name=Key,json=key" json:"Key,omitempty"`
	// BFD common features.
	Config *SLBfdConfigCommon `protobuf:"bytes,2,opt,name=Config,json=config" json:"Config,omitempty"`
	// BFD session State
	State *SLBfdCommonState `protobuf:"bytes,3,opt,name=State,json=state" json:"State,omitempty"`
}

func (m *SLBfdv6SessionCfgState) Reset()                    { *m = SLBfdv6SessionCfgState{} }
func (m *SLBfdv6SessionCfgState) String() string            { return proto.CompactTextString(m) }
func (*SLBfdv6SessionCfgState) ProtoMessage()               {}
func (*SLBfdv6SessionCfgState) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *SLBfdv6SessionCfgState) GetKey() *SLBfdv6Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SLBfdv6SessionCfgState) GetConfig() *SLBfdConfigCommon {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *SLBfdv6SessionCfgState) GetState() *SLBfdCommonState {
	if m != nil {
		return m.State
	}
	return nil
}

// BFD Get Message Response
type SLBfdv6GetMsgRsp struct {
	// End Of File.
	// When set to True, it indicates that the server has returned M, where
	// M < N, of the original N requested Entries.
	Eof bool `protobuf:"varint,1,opt,name=Eof,json=eof" json:"Eof,omitempty"`
	// Status of the Get operation
	ErrStatus *SLErrorStatus `protobuf:"bytes,2,opt,name=ErrStatus,json=errStatus" json:"ErrStatus,omitempty"`
	// Returned entries as requested in the Get operation.
	// if Error is SL_SUCCESS, Entries contains the info requested
	Entries []*SLBfdv6SessionCfgState `protobuf:"bytes,3,rep,name=Entries,json=entries" json:"Entries,omitempty"`
}

func (m *SLBfdv6GetMsgRsp) Reset()                    { *m = SLBfdv6GetMsgRsp{} }
func (m *SLBfdv6GetMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*SLBfdv6GetMsgRsp) ProtoMessage()               {}
func (*SLBfdv6GetMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *SLBfdv6GetMsgRsp) GetErrStatus() *SLErrorStatus {
	if m != nil {
		return m.ErrStatus
	}
	return nil
}

func (m *SLBfdv6GetMsgRsp) GetEntries() []*SLBfdv6SessionCfgState {
	if m != nil {
		return m.Entries
	}
	return nil
}

// BFD Session and State info
type SLBfdv6SessionState struct {
	// BFD unique key identifier.
	Key *SLBfdv6Key `protobuf:"bytes,1,opt,name=Key,json=key" json:"Key,omitempty"`
	// BFD session State
	State *SLBfdCommonState `protobuf:"bytes,2,opt,name=State,json=state" json:"State,omitempty"`
}

func (m *SLBfdv6SessionState) Reset()                    { *m = SLBfdv6SessionState{} }
func (m *SLBfdv6SessionState) String() string            { return proto.CompactTextString(m) }
func (*SLBfdv6SessionState) ProtoMessage()               {}
func (*SLBfdv6SessionState) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *SLBfdv6SessionState) GetKey() *SLBfdv6Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SLBfdv6SessionState) GetState() *SLBfdCommonState {
	if m != nil {
		return m.State
	}
	return nil
}

// BFD Session and State info Message
type SLBfdv6Notif struct {
	// Event Type
	EventType SLBfdNotifType `protobuf:"varint,1,opt,name=EventType,json=eventType,enum=service_layer.SLBfdNotifType" json:"EventType,omitempty"`
	// Further info based on EventType
	//
	// Types that are valid to be assigned to Event:
	//	*SLBfdv6Notif_ErrStatus
	//	*SLBfdv6Notif_Session
	Event isSLBfdv6Notif_Event `protobuf_oneof:"Event"`
}

func (m *SLBfdv6Notif) Reset()                    { *m = SLBfdv6Notif{} }
func (m *SLBfdv6Notif) String() string            { return proto.CompactTextString(m) }
func (*SLBfdv6Notif) ProtoMessage()               {}
func (*SLBfdv6Notif) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

type isSLBfdv6Notif_Event interface {
	isSLBfdv6Notif_Event()
}

type SLBfdv6Notif_ErrStatus struct {
	ErrStatus *SLErrorStatus `protobuf:"bytes,2,opt,name=ErrStatus,json=errStatus,oneof"`
}
type SLBfdv6Notif_Session struct {
	Session *SLBfdv6SessionState `protobuf:"bytes,3,opt,name=Session,json=session,oneof"`
}

func (*SLBfdv6Notif_ErrStatus) isSLBfdv6Notif_Event() {}
func (*SLBfdv6Notif_Session) isSLBfdv6Notif_Event()   {}

func (m *SLBfdv6Notif) GetEvent() isSLBfdv6Notif_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *SLBfdv6Notif) GetErrStatus() *SLErrorStatus {
	if x, ok := m.GetEvent().(*SLBfdv6Notif_ErrStatus); ok {
		return x.ErrStatus
	}
	return nil
}

func (m *SLBfdv6Notif) GetSession() *SLBfdv6SessionState {
	if x, ok := m.GetEvent().(*SLBfdv6Notif_Session); ok {
		return x.Session
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SLBfdv6Notif) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SLBfdv6Notif_OneofMarshaler, _SLBfdv6Notif_OneofUnmarshaler, _SLBfdv6Notif_OneofSizer, []interface{}{
		(*SLBfdv6Notif_ErrStatus)(nil),
		(*SLBfdv6Notif_Session)(nil),
	}
}

func _SLBfdv6Notif_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SLBfdv6Notif)
	// Event
	switch x := m.Event.(type) {
	case *SLBfdv6Notif_ErrStatus:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ErrStatus); err != nil {
			return err
		}
	case *SLBfdv6Notif_Session:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Session); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SLBfdv6Notif.Event has unexpected type %T", x)
	}
	return nil
}

func _SLBfdv6Notif_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SLBfdv6Notif)
	switch tag {
	case 2: // Event.ErrStatus
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SLErrorStatus)
		err := b.DecodeMessage(msg)
		m.Event = &SLBfdv6Notif_ErrStatus{msg}
		return true, err
	case 3: // Event.Session
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SLBfdv6SessionState)
		err := b.DecodeMessage(msg)
		m.Event = &SLBfdv6Notif_Session{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SLBfdv6Notif_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SLBfdv6Notif)
	// Event
	switch x := m.Event.(type) {
	case *SLBfdv6Notif_ErrStatus:
		s := proto.Size(x.ErrStatus)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SLBfdv6Notif_Session:
		s := proto.Size(x.Session)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*SLBfdv6Key)(nil), "service_layer.SLBfdv6Key")
	proto.RegisterType((*SLBfdv6SessionCfg)(nil), "service_layer.SLBfdv6SessionCfg")
	proto.RegisterType((*SLBfdv6Msg)(nil), "service_layer.SLBfdv6Msg")
	proto.RegisterType((*SLBfdv6Res)(nil), "service_layer.SLBfdv6Res")
	proto.RegisterType((*SLBfdv6MsgRsp)(nil), "service_layer.SLBfdv6MsgRsp")
	proto.RegisterType((*SLBfdv6GetMsg)(nil), "service_layer.SLBfdv6GetMsg")
	proto.RegisterType((*SLBfdv6SessionCfgState)(nil), "service_layer.SLBfdv6SessionCfgState")
	proto.RegisterType((*SLBfdv6GetMsgRsp)(nil), "service_layer.SLBfdv6GetMsgRsp")
	proto.RegisterType((*SLBfdv6SessionState)(nil), "service_layer.SLBfdv6SessionState")
	proto.RegisterType((*SLBfdv6Notif)(nil), "service_layer.SLBfdv6Notif")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for SLBfdv6Oper service

type SLBfdv6OperClient interface {
	// SLBfdRegMsg.Oper = SL_REGOP_REGISTER:
	//     Global BFD registration.
	//     A client Must Register BEFORE BFD sessions can be added/modified.
	//
	// SLBfdRegMsg.Oper = SL_REGOP_UNREGISTER:
	//     Global BFD un-registration.
	//     This call is used to end all BFD notifications and unregister any
	//     interest in BFD session configuration.
	//     This call cleans up all BFD sessions previously requested.
	//
	// SLBfdRegMsg.Oper = SL_REGOP_EOF:
	//     BFD End Of File.
	//     After Registration, the client is expected to send an EOF
	//     message to convey the end of replay of the client's known objects.
	//     This is especially useful under certain restart scenarios when the
	//     client and the server are trying to synchronize their BFD sessions.
	SLBfdv6RegOp(ctx context.Context, in *SLBfdRegMsg, opts ...grpc.CallOption) (*SLBfdRegMsgRsp, error)
	// Used to retrieve global BFD info from the server.
	SLBfdv6Get(ctx context.Context, in *SLBfdGetMsg, opts ...grpc.CallOption) (*SLBfdGetMsgRsp, error)
	// Used to retrieve global BFD stats from the server.
	SLBfdv6GetStats(ctx context.Context, in *SLBfdGetMsg, opts ...grpc.CallOption) (*SLBfdGetStatsMsgRsp, error)
	// This call is used to get a stream of session state notifications.
	// The caller must maintain the GRPC channel as long as
	// there is interest in BFD session notifications. Only sessions that were
	// created through this API will be notified to caller.
	// This call can be used to get "push" notifications for session states.
	// It is advised that the caller register for notifications before any
	// sessions are created to avoid any loss of notifications.
	SLBfdv6GetNotifStream(ctx context.Context, in *SLBfdGetNotifMsg, opts ...grpc.CallOption) (SLBfdv6Oper_SLBfdv6GetNotifStreamClient, error)
	// SLBfdv6Msg.Oper = SL_OBJOP_ADD:
	//     Add one or multiple BFD sessions.
	//
	// SLBfdv6Msg.Oper = SL_OBJOP_UPDATE:
	//     Update one or multiple BFD sessions.
	//
	// SLBfdv6Msg.Oper = SL_OBJOP_DELETE:
	//     Delete one or multiple BFD sessions.
	SLBfdv6SessionOp(ctx context.Context, in *SLBfdv6Msg, opts ...grpc.CallOption) (*SLBfdv6MsgRsp, error)
	// Retrieve BFD session attributes and state.
	// This call can be used to "poll" the current state of a session.
	SLBfdv6SessionGet(ctx context.Context, in *SLBfdv6GetMsg, opts ...grpc.CallOption) (*SLBfdv6GetMsgRsp, error)
}

type sLBfdv6OperClient struct {
	cc *grpc.ClientConn
}

func NewSLBfdv6OperClient(cc *grpc.ClientConn) SLBfdv6OperClient {
	return &sLBfdv6OperClient{cc}
}

func (c *sLBfdv6OperClient) SLBfdv6RegOp(ctx context.Context, in *SLBfdRegMsg, opts ...grpc.CallOption) (*SLBfdRegMsgRsp, error) {
	out := new(SLBfdRegMsgRsp)
	err := grpc.Invoke(ctx, "/service_layer.SLBfdv6Oper/SLBfdv6RegOp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLBfdv6OperClient) SLBfdv6Get(ctx context.Context, in *SLBfdGetMsg, opts ...grpc.CallOption) (*SLBfdGetMsgRsp, error) {
	out := new(SLBfdGetMsgRsp)
	err := grpc.Invoke(ctx, "/service_layer.SLBfdv6Oper/SLBfdv6Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLBfdv6OperClient) SLBfdv6GetStats(ctx context.Context, in *SLBfdGetMsg, opts ...grpc.CallOption) (*SLBfdGetStatsMsgRsp, error) {
	out := new(SLBfdGetStatsMsgRsp)
	err := grpc.Invoke(ctx, "/service_layer.SLBfdv6Oper/SLBfdv6GetStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLBfdv6OperClient) SLBfdv6GetNotifStream(ctx context.Context, in *SLBfdGetNotifMsg, opts ...grpc.CallOption) (SLBfdv6Oper_SLBfdv6GetNotifStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SLBfdv6Oper_serviceDesc.Streams[0], c.cc, "/service_layer.SLBfdv6Oper/SLBfdv6GetNotifStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sLBfdv6OperSLBfdv6GetNotifStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SLBfdv6Oper_SLBfdv6GetNotifStreamClient interface {
	Recv() (*SLBfdv6Notif, error)
	grpc.ClientStream
}

type sLBfdv6OperSLBfdv6GetNotifStreamClient struct {
	grpc.ClientStream
}

func (x *sLBfdv6OperSLBfdv6GetNotifStreamClient) Recv() (*SLBfdv6Notif, error) {
	m := new(SLBfdv6Notif)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sLBfdv6OperClient) SLBfdv6SessionOp(ctx context.Context, in *SLBfdv6Msg, opts ...grpc.CallOption) (*SLBfdv6MsgRsp, error) {
	out := new(SLBfdv6MsgRsp)
	err := grpc.Invoke(ctx, "/service_layer.SLBfdv6Oper/SLBfdv6SessionOp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLBfdv6OperClient) SLBfdv6SessionGet(ctx context.Context, in *SLBfdv6GetMsg, opts ...grpc.CallOption) (*SLBfdv6GetMsgRsp, error) {
	out := new(SLBfdv6GetMsgRsp)
	err := grpc.Invoke(ctx, "/service_layer.SLBfdv6Oper/SLBfdv6SessionGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SLBfdv6Oper service

type SLBfdv6OperServer interface {
	// SLBfdRegMsg.Oper = SL_REGOP_REGISTER:
	//     Global BFD registration.
	//     A client Must Register BEFORE BFD sessions can be added/modified.
	//
	// SLBfdRegMsg.Oper = SL_REGOP_UNREGISTER:
	//     Global BFD un-registration.
	//     This call is used to end all BFD notifications and unregister any
	//     interest in BFD session configuration.
	//     This call cleans up all BFD sessions previously requested.
	//
	// SLBfdRegMsg.Oper = SL_REGOP_EOF:
	//     BFD End Of File.
	//     After Registration, the client is expected to send an EOF
	//     message to convey the end of replay of the client's known objects.
	//     This is especially useful under certain restart scenarios when the
	//     client and the server are trying to synchronize their BFD sessions.
	SLBfdv6RegOp(context.Context, *SLBfdRegMsg) (*SLBfdRegMsgRsp, error)
	// Used to retrieve global BFD info from the server.
	SLBfdv6Get(context.Context, *SLBfdGetMsg) (*SLBfdGetMsgRsp, error)
	// Used to retrieve global BFD stats from the server.
	SLBfdv6GetStats(context.Context, *SLBfdGetMsg) (*SLBfdGetStatsMsgRsp, error)
	// This call is used to get a stream of session state notifications.
	// The caller must maintain the GRPC channel as long as
	// there is interest in BFD session notifications. Only sessions that were
	// created through this API will be notified to caller.
	// This call can be used to get "push" notifications for session states.
	// It is advised that the caller register for notifications before any
	// sessions are created to avoid any loss of notifications.
	SLBfdv6GetNotifStream(*SLBfdGetNotifMsg, SLBfdv6Oper_SLBfdv6GetNotifStreamServer) error
	// SLBfdv6Msg.Oper = SL_OBJOP_ADD:
	//     Add one or multiple BFD sessions.
	//
	// SLBfdv6Msg.Oper = SL_OBJOP_UPDATE:
	//     Update one or multiple BFD sessions.
	//
	// SLBfdv6Msg.Oper = SL_OBJOP_DELETE:
	//     Delete one or multiple BFD sessions.
	SLBfdv6SessionOp(context.Context, *SLBfdv6Msg) (*SLBfdv6MsgRsp, error)
	// Retrieve BFD session attributes and state.
	// This call can be used to "poll" the current state of a session.
	SLBfdv6SessionGet(context.Context, *SLBfdv6GetMsg) (*SLBfdv6GetMsgRsp, error)
}

func RegisterSLBfdv6OperServer(s *grpc.Server, srv SLBfdv6OperServer) {
	s.RegisterService(&_SLBfdv6Oper_serviceDesc, srv)
}

func _SLBfdv6Oper_SLBfdv6RegOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SLBfdRegMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SLBfdv6OperServer).SLBfdv6RegOp(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SLBfdv6Oper_SLBfdv6Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SLBfdGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SLBfdv6OperServer).SLBfdv6Get(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SLBfdv6Oper_SLBfdv6GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SLBfdGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SLBfdv6OperServer).SLBfdv6GetStats(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SLBfdv6Oper_SLBfdv6GetNotifStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SLBfdGetNotifMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SLBfdv6OperServer).SLBfdv6GetNotifStream(m, &sLBfdv6OperSLBfdv6GetNotifStreamServer{stream})
}

type SLBfdv6Oper_SLBfdv6GetNotifStreamServer interface {
	Send(*SLBfdv6Notif) error
	grpc.ServerStream
}

type sLBfdv6OperSLBfdv6GetNotifStreamServer struct {
	grpc.ServerStream
}

func (x *sLBfdv6OperSLBfdv6GetNotifStreamServer) Send(m *SLBfdv6Notif) error {
	return x.ServerStream.SendMsg(m)
}

func _SLBfdv6Oper_SLBfdv6SessionOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SLBfdv6Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SLBfdv6OperServer).SLBfdv6SessionOp(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SLBfdv6Oper_SLBfdv6SessionGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SLBfdv6GetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SLBfdv6OperServer).SLBfdv6SessionGet(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _SLBfdv6Oper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service_layer.SLBfdv6Oper",
	HandlerType: (*SLBfdv6OperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SLBfdv6RegOp",
			Handler:    _SLBfdv6Oper_SLBfdv6RegOp_Handler,
		},
		{
			MethodName: "SLBfdv6Get",
			Handler:    _SLBfdv6Oper_SLBfdv6Get_Handler,
		},
		{
			MethodName: "SLBfdv6GetStats",
			Handler:    _SLBfdv6Oper_SLBfdv6GetStats_Handler,
		},
		{
			MethodName: "SLBfdv6SessionOp",
			Handler:    _SLBfdv6Oper_SLBfdv6SessionOp_Handler,
		},
		{
			MethodName: "SLBfdv6SessionGet",
			Handler:    _SLBfdv6Oper_SLBfdv6SessionGet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SLBfdv6GetNotifStream",
			Handler:       _SLBfdv6Oper_SLBfdv6GetNotifStream_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor2 = []byte{
	// 746 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x55, 0xdd, 0x6e, 0x13, 0x3d,
	0x10, 0xfd, 0x36, 0x7f, 0x9b, 0x4c, 0x92, 0x8f, 0xd6, 0x55, 0xab, 0x10, 0x5a, 0x5a, 0xad, 0x84,
	0x84, 0x04, 0x54, 0x28, 0x15, 0x55, 0x05, 0x08, 0x44, 0xa3, 0xaa, 0x54, 0x85, 0x44, 0x38, 0x08,
	0x2e, 0xa3, 0xfc, 0x78, 0xa3, 0x85, 0xee, 0x0f, 0xb6, 0x37, 0x22, 0x3c, 0x01, 0xd7, 0xbc, 0x01,
	0x2f, 0xc1, 0x33, 0x70, 0xcd, 0x83, 0xf0, 0x0c, 0xd8, 0x5e, 0x67, 0x93, 0x90, 0xdd, 0xd2, 0x70,
	0xc1, 0x5d, 0xec, 0x39, 0x73, 0x66, 0xce, 0x99, 0x59, 0x07, 0xd6, 0xd9, 0x45, 0xb7, 0x6f, 0x0f,
	0xbb, 0x4e, 0x30, 0x3e, 0xdc, 0x0f, 0xa8, 0xcf, 0x7d, 0x54, 0x65, 0x84, 0x8e, 0x9d, 0x01, 0xe9,
	0x5e, 0xf4, 0x26, 0x84, 0xd6, 0x37, 0x05, 0x62, 0xe0, 0xbb, 0xae, 0xef, 0x75, 0xf9, 0x24, 0x20,
	0x2c, 0x42, 0xd5, 0x37, 0x74, 0x62, 0x14, 0x8a, 0x2e, 0xad, 0xef, 0x06, 0x40, 0xe7, 0xc5, 0xb1,
	0x3d, 0x1c, 0x1f, 0x9e, 0x93, 0x09, 0xba, 0x0b, 0xb9, 0xd7, 0x22, 0xa5, 0x66, 0xec, 0x19, 0xb7,
	0xff, 0x6f, 0xd4, 0xf6, 0x17, 0x88, 0xf7, 0x15, 0x50, 0xc6, 0x71, 0x4e, 0x12, 0xa3, 0x1a, 0x98,
	0x6f, 0xa8, 0xdd, 0xea, 0xb9, 0xa4, 0x96, 0x11, 0x09, 0x25, 0x6c, 0x8e, 0xa3, 0xa3, 0x8c, 0xb4,
	0xfa, 0xf4, 0xd9, 0x70, 0x48, 0x6b, 0x59, 0x11, 0xa9, 0x60, 0xd3, 0x8b, 0x8e, 0xe8, 0x08, 0x4a,
	0x67, 0x1e, 0x27, 0xd4, 0xee, 0x0d, 0x48, 0x2d, 0x27, 0x62, 0xe5, 0x46, 0x7d, 0xa9, 0x4c, 0x8c,
	0xc0, 0x25, 0x67, 0xfa, 0x13, 0xdd, 0x14, 0x9d, 0xfa, 0x21, 0x1d, 0x10, 0x45, 0x9b, 0x57, 0xb4,
	0xc0, 0xe2, 0x1b, 0xeb, 0x13, 0xac, 0x6b, 0x25, 0x1d, 0xc2, 0x98, 0xe3, 0x7b, 0x4d, 0x7b, 0x84,
	0xee, 0x40, 0x56, 0xe8, 0x52, 0x7a, 0xca, 0x8d, 0xeb, 0x49, 0x7a, 0x94, 0x70, 0x9c, 0x7d, 0x2f,
	0xd4, 0x1f, 0x41, 0xa1, 0xe9, 0x7b, 0xb6, 0x33, 0x52, 0x72, 0xca, 0x8d, 0xbd, 0x24, 0x7c, 0x84,
	0x68, 0x2a, 0x13, 0x71, 0x61, 0xa0, 0x4e, 0xd6, 0x24, 0x76, 0xf1, 0x25, 0x1b, 0xa1, 0x7b, 0x90,
	0x6b, 0x07, 0x84, 0x6a, 0x17, 0x97, 0xab, 0xb6, 0xfb, 0xef, 0xc8, 0x80, 0xb7, 0x03, 0x9c, 0xf3,
	0x05, 0x0c, 0x3d, 0x86, 0xa2, 0xee, 0x98, 0x89, 0xc2, 0xd9, 0xb4, 0xc2, 0xf3, 0xba, 0x70, 0x91,
	0xe9, 0x0c, 0x2b, 0x8c, 0x4b, 0x63, 0xc2, 0xd0, 0x43, 0x28, 0x9d, 0x50, 0xda, 0xe1, 0x3d, 0x1e,
	0x32, 0xad, 0x7a, 0x7b, 0x89, 0x4c, 0x20, 0x7c, 0x8d, 0xc1, 0x25, 0x32, 0x85, 0x4f, 0xbd, 0xca,
	0x5c, 0xc5, 0x2b, 0xeb, 0xb3, 0x01, 0xd5, 0x99, 0x64, 0xcc, 0x02, 0x74, 0x2c, 0x2e, 0x14, 0x51,
	0x27, 0x74, 0xdd, 0x1e, 0x9d, 0x5c, 0xa9, 0x7c, 0x95, 0xcd, 0xa7, 0xa0, 0x03, 0x30, 0x85, 0x8a,
	0xf0, 0x82, 0x4f, 0x9d, 0x48, 0x69, 0x43, 0x80, 0xb0, 0x49, 0x23, 0xa4, 0xf5, 0x65, 0xd6, 0xca,
	0x29, 0xe1, 0x72, 0x00, 0x2b, 0x4d, 0x7d, 0x0b, 0x0a, 0x1d, 0xf2, 0xa1, 0x15, 0xba, 0x4a, 0x79,
	0x0e, 0x17, 0x98, 0x3a, 0x21, 0x0b, 0x2a, 0x27, 0x1e, 0xa7, 0x0e, 0x61, 0x4d, 0x3f, 0xf4, 0xb8,
	0x5a, 0xe4, 0x2a, 0xae, 0x90, 0xb9, 0x3b, 0xb9, 0xe7, 0xa2, 0x64, 0x8b, 0x7c, 0xe4, 0x6a, 0x97,
	0x8b, 0xd8, 0x1c, 0x45, 0x47, 0xeb, 0x9b, 0x01, 0x5b, 0x4b, 0x63, 0x93, 0xa2, 0xc9, 0x3f, 0xda,
	0x49, 0xf4, 0x00, 0xf2, 0xaa, 0x9e, 0x6a, 0xbc, 0xdc, 0xd8, 0x4d, 0x4e, 0x94, 0x29, 0x0a, 0x86,
	0xf3, 0x72, 0x14, 0xc4, 0xfa, 0x6a, 0xc0, 0xda, 0x82, 0x9b, 0x72, 0xb6, 0x6b, 0x90, 0x3d, 0xf1,
	0x6d, 0xd5, 0x72, 0x11, 0x67, 0x89, 0x6f, 0x2f, 0x2e, 0x5a, 0x66, 0xb5, 0x45, 0x7b, 0x0a, 0xa6,
	0x76, 0x56, 0xf4, 0x26, 0xa7, 0x7c, 0xeb, 0x4f, 0xfb, 0x1e, 0x75, 0x68, 0x6a, 0xef, 0xc5, 0xe7,
	0xb6, 0xb1, 0x08, 0xf9, 0x0b, 0x63, 0x63, 0x7b, 0x32, 0x2b, 0xd9, 0xf3, 0xc3, 0x80, 0x8a, 0xa6,
	0x6a, 0xf9, 0xdc, 0xb1, 0xd1, 0x23, 0x61, 0xc4, 0x58, 0x34, 0x36, 0xf7, 0x6e, 0xee, 0x24, 0x71,
	0x29, 0xb4, 0x7a, 0x3c, 0x4b, 0x64, 0x8a, 0x17, 0x9f, 0xfe, 0x6a, 0x2e, 0x3e, 0xff, 0x6f, 0xde,
	0xc7, 0x27, 0x60, 0x6a, 0xfd, 0x7a, 0xc6, 0xd6, 0xa5, 0x3e, 0x2a, 0x1d, 0x82, 0xc1, 0xd4, 0x6f,
	0xc7, 0xb1, 0x09, 0x79, 0xd5, 0x7a, 0xe3, 0x67, 0x16, 0xca, 0x1a, 0x2b, 0x1f, 0x2e, 0x74, 0x16,
	0x6b, 0xc4, 0x64, 0xd4, 0x0e, 0x50, 0x3d, 0x89, 0x57, 0x84, 0xc4, 0x76, 0xd4, 0x77, 0xd2, 0x63,
	0x72, 0x73, 0x4e, 0xe3, 0xe7, 0x49, 0x6c, 0x53, 0x32, 0x51, 0xb4, 0x66, 0xc9, 0x44, 0xb3, 0x15,
	0x7c, 0x05, 0xd7, 0x66, 0x44, 0x52, 0x0a, 0xbb, 0x94, 0xcd, 0x4a, 0x89, 0xa9, 0x4c, 0x4d, 0xf9,
	0x16, 0x36, 0x67, 0x94, 0x6a, 0x3e, 0x1d, 0x4e, 0x49, 0xcf, 0x45, 0xbb, 0x29, 0xc9, 0x0a, 0x23,
	0xd9, 0x6f, 0x24, 0x1b, 0xad, 0xe2, 0xf7, 0x0d, 0x74, 0x1e, 0x7f, 0x42, 0xda, 0x7a, 0xe1, 0x61,
	0xca, 0x3e, 0x4a, 0xb6, 0xed, 0xd4, 0x90, 0xec, 0x12, 0xff, 0xfe, 0xbf, 0x26, 0x8d, 0x4c, 0x49,
	0xd1, 0xe2, 0x77, 0x2f, 0x8b, 0x0a, 0xce, 0x7e, 0x41, 0xfd, 0xfb, 0x1f, 0xfc, 0x0a, 0x00, 0x00,
	0xff, 0xff, 0x6f, 0xbd, 0x3c, 0x13, 0x4d, 0x08, 0x00, 0x00,
}
