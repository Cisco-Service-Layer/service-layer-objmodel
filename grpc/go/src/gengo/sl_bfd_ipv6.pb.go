// @file
// @brief Client RPC proto file for BFD RPCs.
// Declares calls for adding, deleting, updating, and getting the BFD
// sessions.
//
// ----------------------------------------------------------------
//  Copyright (c) 2016 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.12.1
// source: sl_bfd_ipv6.proto

package service_layer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BFD unique key identifier.
type SLBfdv6Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BFD Session Type
	Type SLBfdType `protobuf:"varint,1,opt,name=Type,proto3,enum=service_layer.SLBfdType" json:"Type,omitempty"`
	// VRF name.
	VrfName string `protobuf:"bytes,2,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// Neighbor Ipv6 address.
	NbrAddr []byte `protobuf:"bytes,3,opt,name=NbrAddr,proto3" json:"NbrAddr,omitempty"`
	// Interface name and handle, needed for single-hop BFD
	Interface *SLInterface `protobuf:"bytes,4,opt,name=Interface,proto3" json:"Interface,omitempty"`
	// Source Ipv6 address, needed for multi-hop BFD
	SourceAddr []byte `protobuf:"bytes,5,opt,name=SourceAddr,proto3" json:"SourceAddr,omitempty"`
}

func (x *SLBfdv6Key) Reset() {
	*x = SLBfdv6Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bfd_ipv6_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBfdv6Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBfdv6Key) ProtoMessage() {}

func (x *SLBfdv6Key) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bfd_ipv6_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBfdv6Key.ProtoReflect.Descriptor instead.
func (*SLBfdv6Key) Descriptor() ([]byte, []int) {
	return file_sl_bfd_ipv6_proto_rawDescGZIP(), []int{0}
}

func (x *SLBfdv6Key) GetType() SLBfdType {
	if x != nil {
		return x.Type
	}
	return SLBfdType_SL_BFD_RESERVED
}

func (x *SLBfdv6Key) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SLBfdv6Key) GetNbrAddr() []byte {
	if x != nil {
		return x.NbrAddr
	}
	return nil
}

func (x *SLBfdv6Key) GetInterface() *SLInterface {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *SLBfdv6Key) GetSourceAddr() []byte {
	if x != nil {
		return x.SourceAddr
	}
	return nil
}

// BFD session information.
type SLBfdv6SessionCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BFD unique key identifier.
	Key *SLBfdv6Key `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	// BFD common features.
	Config *SLBfdConfigCommon `protobuf:"bytes,2,opt,name=Config,proto3" json:"Config,omitempty"`
}

func (x *SLBfdv6SessionCfg) Reset() {
	*x = SLBfdv6SessionCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bfd_ipv6_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBfdv6SessionCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBfdv6SessionCfg) ProtoMessage() {}

func (x *SLBfdv6SessionCfg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bfd_ipv6_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBfdv6SessionCfg.ProtoReflect.Descriptor instead.
func (*SLBfdv6SessionCfg) Descriptor() ([]byte, []int) {
	return file_sl_bfd_ipv6_proto_rawDescGZIP(), []int{1}
}

func (x *SLBfdv6SessionCfg) GetKey() *SLBfdv6Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SLBfdv6SessionCfg) GetConfig() *SLBfdConfigCommon {
	if x != nil {
		return x.Config
	}
	return nil
}

// Contains a List of BFD session objects.
type SLBfdv6Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BFD Object Operations
	Oper SLObjectOp `protobuf:"varint,1,opt,name=Oper,proto3,enum=service_layer.SLObjectOp" json:"Oper,omitempty"`
	// List of BFD session objects
	Sessions []*SLBfdv6SessionCfg `protobuf:"bytes,2,rep,name=Sessions,proto3" json:"Sessions,omitempty"`
}

func (x *SLBfdv6Msg) Reset() {
	*x = SLBfdv6Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bfd_ipv6_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBfdv6Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBfdv6Msg) ProtoMessage() {}

func (x *SLBfdv6Msg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bfd_ipv6_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBfdv6Msg.ProtoReflect.Descriptor instead.
func (*SLBfdv6Msg) Descriptor() ([]byte, []int) {
	return file_sl_bfd_ipv6_proto_rawDescGZIP(), []int{2}
}

func (x *SLBfdv6Msg) GetOper() SLObjectOp {
	if x != nil {
		return x.Oper
	}
	return SLObjectOp_SL_OBJOP_RESERVED
}

func (x *SLBfdv6Msg) GetSessions() []*SLBfdv6SessionCfg {
	if x != nil {
		return x.Sessions
	}
	return nil
}

// BFD result
type SLBfdv6Res struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Corresponding error code
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// BFD unique key.
	Key *SLBfdv6Key `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *SLBfdv6Res) Reset() {
	*x = SLBfdv6Res{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bfd_ipv6_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBfdv6Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBfdv6Res) ProtoMessage() {}

func (x *SLBfdv6Res) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bfd_ipv6_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBfdv6Res.ProtoReflect.Descriptor instead.
func (*SLBfdv6Res) Descriptor() ([]byte, []int) {
	return file_sl_bfd_ipv6_proto_rawDescGZIP(), []int{3}
}

func (x *SLBfdv6Res) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (x *SLBfdv6Res) GetKey() *SLBfdv6Key {
	if x != nil {
		return x.Key
	}
	return nil
}

// BFD bulk result
type SLBfdv6MsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary result of the bulk operation (refer to enum SLErrorStatus)
	// In general, the StatusSummary implies one of 3 things:
	// 1. SL_SUCCESS: signifies that the entire bulk operation was successful.
	//         In this case, the Results list is empty.
	// 2. SL_SOME_ERR: signifies that the operation failed for one or more
	//         entries. In this case, Results holds the result for
	//         each individual entry in the bulk.
	// 3. SL_RPC_XXX: signifies that the entire bulk operation failed.
	//         In this case, the Results list is empty.
	StatusSummary *SLErrorStatus `protobuf:"bytes,1,opt,name=StatusSummary,proto3" json:"StatusSummary,omitempty"`
	// In case of errors, this field indicates which entry in the bulk was
	// erroneous.
	Results []*SLBfdv6Res `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *SLBfdv6MsgRsp) Reset() {
	*x = SLBfdv6MsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bfd_ipv6_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBfdv6MsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBfdv6MsgRsp) ProtoMessage() {}

func (x *SLBfdv6MsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bfd_ipv6_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBfdv6MsgRsp.ProtoReflect.Descriptor instead.
func (*SLBfdv6MsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_bfd_ipv6_proto_rawDescGZIP(), []int{4}
}

func (x *SLBfdv6MsgRsp) GetStatusSummary() *SLErrorStatus {
	if x != nil {
		return x.StatusSummary
	}
	return nil
}

func (x *SLBfdv6MsgRsp) GetResults() []*SLBfdv6Res {
	if x != nil {
		return x.Results
	}
	return nil
}

// BFD Get Message
type SLBfdv6GetMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BFD key.
	// If the Key is not specified, then request up to the first
	// 'EntriesCount' entries.
	Key *SLBfdv6Key `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	// Global BFD event sequence number.
	// Return all BFD sessions with sequence number >= SeqNum.
	SeqNum uint64 `protobuf:"varint,2,opt,name=SeqNum,proto3" json:"SeqNum,omitempty"`
	// Number of entries requested
	EntriesCount uint32 `protobuf:"varint,3,opt,name=EntriesCount,proto3" json:"EntriesCount,omitempty"`
	// if GetNext is FALSE:
	//     request up to 'EntriesCount' entries starting from the key
	// If GetNext is TRUE, or if the key exact match is not found:
	//     request up to 'EntriesCount' entries starting from the key's next
	GetNext bool `protobuf:"varint,4,opt,name=GetNext,proto3" json:"GetNext,omitempty"`
}

func (x *SLBfdv6GetMsg) Reset() {
	*x = SLBfdv6GetMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bfd_ipv6_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBfdv6GetMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBfdv6GetMsg) ProtoMessage() {}

func (x *SLBfdv6GetMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bfd_ipv6_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBfdv6GetMsg.ProtoReflect.Descriptor instead.
func (*SLBfdv6GetMsg) Descriptor() ([]byte, []int) {
	return file_sl_bfd_ipv6_proto_rawDescGZIP(), []int{5}
}

func (x *SLBfdv6GetMsg) GetKey() *SLBfdv6Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SLBfdv6GetMsg) GetSeqNum() uint64 {
	if x != nil {
		return x.SeqNum
	}
	return 0
}

func (x *SLBfdv6GetMsg) GetEntriesCount() uint32 {
	if x != nil {
		return x.EntriesCount
	}
	return 0
}

func (x *SLBfdv6GetMsg) GetGetNext() bool {
	if x != nil {
		return x.GetNext
	}
	return false
}

// BFD Session Config and State info
type SLBfdv6SessionCfgState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BFD unique key identifier.
	Key *SLBfdv6Key `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	// BFD common features.
	Config *SLBfdConfigCommon `protobuf:"bytes,2,opt,name=Config,proto3" json:"Config,omitempty"`
	// BFD session State
	State *SLBfdCommonState `protobuf:"bytes,3,opt,name=State,proto3" json:"State,omitempty"`
}

func (x *SLBfdv6SessionCfgState) Reset() {
	*x = SLBfdv6SessionCfgState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bfd_ipv6_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBfdv6SessionCfgState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBfdv6SessionCfgState) ProtoMessage() {}

func (x *SLBfdv6SessionCfgState) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bfd_ipv6_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBfdv6SessionCfgState.ProtoReflect.Descriptor instead.
func (*SLBfdv6SessionCfgState) Descriptor() ([]byte, []int) {
	return file_sl_bfd_ipv6_proto_rawDescGZIP(), []int{6}
}

func (x *SLBfdv6SessionCfgState) GetKey() *SLBfdv6Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SLBfdv6SessionCfgState) GetConfig() *SLBfdConfigCommon {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *SLBfdv6SessionCfgState) GetState() *SLBfdCommonState {
	if x != nil {
		return x.State
	}
	return nil
}

// BFD Get Message Response
type SLBfdv6GetMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// End Of File.
	// When set to True, it indicates that the server has returned M, where
	// M < N, of the original N requested Entries.
	Eof bool `protobuf:"varint,1,opt,name=Eof,proto3" json:"Eof,omitempty"`
	// Status of the Get operation
	ErrStatus *SLErrorStatus `protobuf:"bytes,2,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// Returned entries as requested in the Get operation.
	// if Error is SL_SUCCESS, Entries contains the info requested
	Entries []*SLBfdv6SessionCfgState `protobuf:"bytes,3,rep,name=Entries,proto3" json:"Entries,omitempty"`
}

func (x *SLBfdv6GetMsgRsp) Reset() {
	*x = SLBfdv6GetMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bfd_ipv6_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBfdv6GetMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBfdv6GetMsgRsp) ProtoMessage() {}

func (x *SLBfdv6GetMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bfd_ipv6_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBfdv6GetMsgRsp.ProtoReflect.Descriptor instead.
func (*SLBfdv6GetMsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_bfd_ipv6_proto_rawDescGZIP(), []int{7}
}

func (x *SLBfdv6GetMsgRsp) GetEof() bool {
	if x != nil {
		return x.Eof
	}
	return false
}

func (x *SLBfdv6GetMsgRsp) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (x *SLBfdv6GetMsgRsp) GetEntries() []*SLBfdv6SessionCfgState {
	if x != nil {
		return x.Entries
	}
	return nil
}

// BFD Session and State info
type SLBfdv6SessionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BFD unique key identifier.
	Key *SLBfdv6Key `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	// BFD session State
	State *SLBfdCommonState `protobuf:"bytes,2,opt,name=State,proto3" json:"State,omitempty"`
}

func (x *SLBfdv6SessionState) Reset() {
	*x = SLBfdv6SessionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bfd_ipv6_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBfdv6SessionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBfdv6SessionState) ProtoMessage() {}

func (x *SLBfdv6SessionState) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bfd_ipv6_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBfdv6SessionState.ProtoReflect.Descriptor instead.
func (*SLBfdv6SessionState) Descriptor() ([]byte, []int) {
	return file_sl_bfd_ipv6_proto_rawDescGZIP(), []int{8}
}

func (x *SLBfdv6SessionState) GetKey() *SLBfdv6Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SLBfdv6SessionState) GetState() *SLBfdCommonState {
	if x != nil {
		return x.State
	}
	return nil
}

// BFD Session and State info Message
type SLBfdv6Notif struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event Type
	EventType SLBfdNotifType `protobuf:"varint,1,opt,name=EventType,proto3,enum=service_layer.SLBfdNotifType" json:"EventType,omitempty"`
	// Further info based on EventType
	//
	// Types that are assignable to Event:
	//	*SLBfdv6Notif_ErrStatus
	//	*SLBfdv6Notif_Session
	Event isSLBfdv6Notif_Event `protobuf_oneof:"Event"`
}

func (x *SLBfdv6Notif) Reset() {
	*x = SLBfdv6Notif{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bfd_ipv6_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBfdv6Notif) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBfdv6Notif) ProtoMessage() {}

func (x *SLBfdv6Notif) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bfd_ipv6_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBfdv6Notif.ProtoReflect.Descriptor instead.
func (*SLBfdv6Notif) Descriptor() ([]byte, []int) {
	return file_sl_bfd_ipv6_proto_rawDescGZIP(), []int{9}
}

func (x *SLBfdv6Notif) GetEventType() SLBfdNotifType {
	if x != nil {
		return x.EventType
	}
	return SLBfdNotifType_SL_BFD_EVENT_TYPE_RESERVED
}

func (m *SLBfdv6Notif) GetEvent() isSLBfdv6Notif_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *SLBfdv6Notif) GetErrStatus() *SLErrorStatus {
	if x, ok := x.GetEvent().(*SLBfdv6Notif_ErrStatus); ok {
		return x.ErrStatus
	}
	return nil
}

func (x *SLBfdv6Notif) GetSession() *SLBfdv6SessionState {
	if x, ok := x.GetEvent().(*SLBfdv6Notif_Session); ok {
		return x.Session
	}
	return nil
}

type isSLBfdv6Notif_Event interface {
	isSLBfdv6Notif_Event()
}

type SLBfdv6Notif_ErrStatus struct {
	// case EventType == SL_BFD_EVENT_TYPE_ERROR:
	//    => This field carries error info, if any error occurs during
	//       notification subscription.
	ErrStatus *SLErrorStatus `protobuf:"bytes,2,opt,name=ErrStatus,proto3,oneof"`
}

type SLBfdv6Notif_Session struct {
	// case EventType == SL_BFD_EVENT_TYPE_SESSION_STATE:
	//     => this field carries the session state info
	Session *SLBfdv6SessionState `protobuf:"bytes,3,opt,name=Session,proto3,oneof"`
}

func (*SLBfdv6Notif_ErrStatus) isSLBfdv6Notif_Event() {}

func (*SLBfdv6Notif_Session) isSLBfdv6Notif_Event() {}

var File_sl_bfd_ipv6_proto protoreflect.FileDescriptor

var file_sl_bfd_ipv6_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x6c, 0x5f, 0x62, 0x66, 0x64, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x1a, 0x15, 0x73, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x6c, 0x5f, 0x62, 0x66,
	0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8,
	0x01, 0x0a, 0x0a, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x36, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56,
	0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x72,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x62, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x4e, 0x62, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x38, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x22, 0x7a, 0x0a, 0x11, 0x53, 0x4c, 0x42,
	0x66, 0x64, 0x76, 0x36, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x12, 0x2b,
	0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66,
	0x64, 0x76, 0x36, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x79, 0x0a, 0x0a, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x36,
	0x4d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x52, 0x04, 0x4f, 0x70,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x08, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x36, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x52, 0x08, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x75, 0x0a, 0x0a, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x36, 0x52, 0x65, 0x73, 0x12, 0x3a,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x03, 0x4b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x36, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0x88, 0x01, 0x0a, 0x0d, 0x53, 0x4c, 0x42, 0x66,
	0x64, 0x76, 0x36, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x33, 0x0a,
	0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x66, 0x64, 0x76, 0x36, 0x52, 0x65, 0x73, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x0d, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x36, 0x47, 0x65,
	0x74, 0x4d, 0x73, 0x67, 0x12, 0x2b, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x36, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x4b, 0x65,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x16, 0x53, 0x4c, 0x42, 0x66,
	0x64, 0x76, 0x36, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x36, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12,
	0x38, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x42, 0x66, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0xa1, 0x01, 0x0a, 0x10, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x36, 0x47, 0x65, 0x74, 0x4d,
	0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x45, 0x6f, 0x66, 0x12, 0x3a, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x36, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x79, 0x0a, 0x13, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x36, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x4b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x36,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0xd2, 0x01, 0x0a, 0x0c, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x36, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x12, 0x3b, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x66, 0x64, 0x76, 0x36, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x32, 0xee, 0x03, 0x0a, 0x0b, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x36,
	0x4f, 0x70, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0c, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x36, 0x52,
	0x65, 0x67, 0x4f, 0x70, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67,
	0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12,
	0x47, 0x0a, 0x0a, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x36, 0x47, 0x65, 0x74, 0x12, 0x1a, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x42, 0x66, 0x64, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x47,
	0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0f, 0x53, 0x4c, 0x42, 0x66,
	0x64, 0x76, 0x36, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66,
	0x64, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x15, 0x53,
	0x4c, 0x42, 0x66, 0x64, 0x76, 0x36, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x4d, 0x73, 0x67, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x36, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x10, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x36, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x12, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x36,
	0x4d, 0x73, 0x67, 0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x36, 0x4d, 0x73, 0x67, 0x52, 0x73,
	0x70, 0x12, 0x52, 0x0a, 0x11, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x36, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x36, 0x47, 0x65,
	0x74, 0x4d, 0x73, 0x67, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x66, 0x64, 0x76, 0x36, 0x47, 0x65, 0x74, 0x4d,
	0x73, 0x67, 0x52, 0x73, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sl_bfd_ipv6_proto_rawDescOnce sync.Once
	file_sl_bfd_ipv6_proto_rawDescData = file_sl_bfd_ipv6_proto_rawDesc
)

func file_sl_bfd_ipv6_proto_rawDescGZIP() []byte {
	file_sl_bfd_ipv6_proto_rawDescOnce.Do(func() {
		file_sl_bfd_ipv6_proto_rawDescData = protoimpl.X.CompressGZIP(file_sl_bfd_ipv6_proto_rawDescData)
	})
	return file_sl_bfd_ipv6_proto_rawDescData
}

var file_sl_bfd_ipv6_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_sl_bfd_ipv6_proto_goTypes = []interface{}{
	(*SLBfdv6Key)(nil),             // 0: service_layer.SLBfdv6Key
	(*SLBfdv6SessionCfg)(nil),      // 1: service_layer.SLBfdv6SessionCfg
	(*SLBfdv6Msg)(nil),             // 2: service_layer.SLBfdv6Msg
	(*SLBfdv6Res)(nil),             // 3: service_layer.SLBfdv6Res
	(*SLBfdv6MsgRsp)(nil),          // 4: service_layer.SLBfdv6MsgRsp
	(*SLBfdv6GetMsg)(nil),          // 5: service_layer.SLBfdv6GetMsg
	(*SLBfdv6SessionCfgState)(nil), // 6: service_layer.SLBfdv6SessionCfgState
	(*SLBfdv6GetMsgRsp)(nil),       // 7: service_layer.SLBfdv6GetMsgRsp
	(*SLBfdv6SessionState)(nil),    // 8: service_layer.SLBfdv6SessionState
	(*SLBfdv6Notif)(nil),           // 9: service_layer.SLBfdv6Notif
	(SLBfdType)(0),                 // 10: service_layer.SLBfdType
	(*SLInterface)(nil),            // 11: service_layer.SLInterface
	(*SLBfdConfigCommon)(nil),      // 12: service_layer.SLBfdConfigCommon
	(SLObjectOp)(0),                // 13: service_layer.SLObjectOp
	(*SLErrorStatus)(nil),          // 14: service_layer.SLErrorStatus
	(*SLBfdCommonState)(nil),       // 15: service_layer.SLBfdCommonState
	(SLBfdNotifType)(0),            // 16: service_layer.SLBfdNotifType
	(*SLBfdRegMsg)(nil),            // 17: service_layer.SLBfdRegMsg
	(*SLBfdGetMsg)(nil),            // 18: service_layer.SLBfdGetMsg
	(*SLBfdGetNotifMsg)(nil),       // 19: service_layer.SLBfdGetNotifMsg
	(*SLBfdRegMsgRsp)(nil),         // 20: service_layer.SLBfdRegMsgRsp
	(*SLBfdGetMsgRsp)(nil),         // 21: service_layer.SLBfdGetMsgRsp
	(*SLBfdGetStatsMsgRsp)(nil),    // 22: service_layer.SLBfdGetStatsMsgRsp
}
var file_sl_bfd_ipv6_proto_depIdxs = []int32{
	10, // 0: service_layer.SLBfdv6Key.Type:type_name -> service_layer.SLBfdType
	11, // 1: service_layer.SLBfdv6Key.Interface:type_name -> service_layer.SLInterface
	0,  // 2: service_layer.SLBfdv6SessionCfg.Key:type_name -> service_layer.SLBfdv6Key
	12, // 3: service_layer.SLBfdv6SessionCfg.Config:type_name -> service_layer.SLBfdConfigCommon
	13, // 4: service_layer.SLBfdv6Msg.Oper:type_name -> service_layer.SLObjectOp
	1,  // 5: service_layer.SLBfdv6Msg.Sessions:type_name -> service_layer.SLBfdv6SessionCfg
	14, // 6: service_layer.SLBfdv6Res.ErrStatus:type_name -> service_layer.SLErrorStatus
	0,  // 7: service_layer.SLBfdv6Res.Key:type_name -> service_layer.SLBfdv6Key
	14, // 8: service_layer.SLBfdv6MsgRsp.StatusSummary:type_name -> service_layer.SLErrorStatus
	3,  // 9: service_layer.SLBfdv6MsgRsp.Results:type_name -> service_layer.SLBfdv6Res
	0,  // 10: service_layer.SLBfdv6GetMsg.Key:type_name -> service_layer.SLBfdv6Key
	0,  // 11: service_layer.SLBfdv6SessionCfgState.Key:type_name -> service_layer.SLBfdv6Key
	12, // 12: service_layer.SLBfdv6SessionCfgState.Config:type_name -> service_layer.SLBfdConfigCommon
	15, // 13: service_layer.SLBfdv6SessionCfgState.State:type_name -> service_layer.SLBfdCommonState
	14, // 14: service_layer.SLBfdv6GetMsgRsp.ErrStatus:type_name -> service_layer.SLErrorStatus
	6,  // 15: service_layer.SLBfdv6GetMsgRsp.Entries:type_name -> service_layer.SLBfdv6SessionCfgState
	0,  // 16: service_layer.SLBfdv6SessionState.Key:type_name -> service_layer.SLBfdv6Key
	15, // 17: service_layer.SLBfdv6SessionState.State:type_name -> service_layer.SLBfdCommonState
	16, // 18: service_layer.SLBfdv6Notif.EventType:type_name -> service_layer.SLBfdNotifType
	14, // 19: service_layer.SLBfdv6Notif.ErrStatus:type_name -> service_layer.SLErrorStatus
	8,  // 20: service_layer.SLBfdv6Notif.Session:type_name -> service_layer.SLBfdv6SessionState
	17, // 21: service_layer.SLBfdv6Oper.SLBfdv6RegOp:input_type -> service_layer.SLBfdRegMsg
	18, // 22: service_layer.SLBfdv6Oper.SLBfdv6Get:input_type -> service_layer.SLBfdGetMsg
	18, // 23: service_layer.SLBfdv6Oper.SLBfdv6GetStats:input_type -> service_layer.SLBfdGetMsg
	19, // 24: service_layer.SLBfdv6Oper.SLBfdv6GetNotifStream:input_type -> service_layer.SLBfdGetNotifMsg
	2,  // 25: service_layer.SLBfdv6Oper.SLBfdv6SessionOp:input_type -> service_layer.SLBfdv6Msg
	5,  // 26: service_layer.SLBfdv6Oper.SLBfdv6SessionGet:input_type -> service_layer.SLBfdv6GetMsg
	20, // 27: service_layer.SLBfdv6Oper.SLBfdv6RegOp:output_type -> service_layer.SLBfdRegMsgRsp
	21, // 28: service_layer.SLBfdv6Oper.SLBfdv6Get:output_type -> service_layer.SLBfdGetMsgRsp
	22, // 29: service_layer.SLBfdv6Oper.SLBfdv6GetStats:output_type -> service_layer.SLBfdGetStatsMsgRsp
	9,  // 30: service_layer.SLBfdv6Oper.SLBfdv6GetNotifStream:output_type -> service_layer.SLBfdv6Notif
	4,  // 31: service_layer.SLBfdv6Oper.SLBfdv6SessionOp:output_type -> service_layer.SLBfdv6MsgRsp
	7,  // 32: service_layer.SLBfdv6Oper.SLBfdv6SessionGet:output_type -> service_layer.SLBfdv6GetMsgRsp
	27, // [27:33] is the sub-list for method output_type
	21, // [21:27] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_sl_bfd_ipv6_proto_init() }
func file_sl_bfd_ipv6_proto_init() {
	if File_sl_bfd_ipv6_proto != nil {
		return
	}
	file_sl_common_types_proto_init()
	file_sl_bfd_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sl_bfd_ipv6_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBfdv6Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bfd_ipv6_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBfdv6SessionCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bfd_ipv6_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBfdv6Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bfd_ipv6_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBfdv6Res); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bfd_ipv6_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBfdv6MsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bfd_ipv6_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBfdv6GetMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bfd_ipv6_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBfdv6SessionCfgState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bfd_ipv6_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBfdv6GetMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bfd_ipv6_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBfdv6SessionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bfd_ipv6_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBfdv6Notif); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sl_bfd_ipv6_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*SLBfdv6Notif_ErrStatus)(nil),
		(*SLBfdv6Notif_Session)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sl_bfd_ipv6_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sl_bfd_ipv6_proto_goTypes,
		DependencyIndexes: file_sl_bfd_ipv6_proto_depIdxs,
		MessageInfos:      file_sl_bfd_ipv6_proto_msgTypes,
	}.Build()
	File_sl_bfd_ipv6_proto = out.File
	file_sl_bfd_ipv6_proto_rawDesc = nil
	file_sl_bfd_ipv6_proto_goTypes = nil
	file_sl_bfd_ipv6_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SLBfdv6OperClient is the client API for SLBfdv6Oper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SLBfdv6OperClient interface {
	// SLBfdRegMsg.Oper = SL_REGOP_REGISTER:
	//     Global BFD registration.
	//     A client Must Register BEFORE BFD sessions can be added/modified.
	//
	// SLBfdRegMsg.Oper = SL_REGOP_UNREGISTER:
	//     Global BFD un-registration.
	//     This call is used to end all BFD notifications and unregister any
	//     interest in BFD session configuration.
	//     This call cleans up all BFD sessions previously requested.
	//
	// SLBfdRegMsg.Oper = SL_REGOP_EOF:
	//     BFD End Of File.
	//     After Registration, the client is expected to send an EOF
	//     message to convey the end of replay of the client's known objects.
	//     This is especially useful under certain restart scenarios when the
	//     client and the server are trying to synchronize their BFD sessions.
	SLBfdv6RegOp(ctx context.Context, in *SLBfdRegMsg, opts ...grpc.CallOption) (*SLBfdRegMsgRsp, error)
	// Used to retrieve global BFD info from the server.
	SLBfdv6Get(ctx context.Context, in *SLBfdGetMsg, opts ...grpc.CallOption) (*SLBfdGetMsgRsp, error)
	// Used to retrieve global BFD stats from the server.
	SLBfdv6GetStats(ctx context.Context, in *SLBfdGetMsg, opts ...grpc.CallOption) (*SLBfdGetStatsMsgRsp, error)
	// This call is used to get a stream of session state notifications.
	// The caller must maintain the GRPC channel as long as
	// there is interest in BFD session notifications. Only sessions that were
	// created through this API will be notified to caller.
	// This call can be used to get "push" notifications for session states.
	// It is advised that the caller register for notifications before any
	// sessions are created to avoid any loss of notifications.
	SLBfdv6GetNotifStream(ctx context.Context, in *SLBfdGetNotifMsg, opts ...grpc.CallOption) (SLBfdv6Oper_SLBfdv6GetNotifStreamClient, error)
	// SLBfdv6Msg.Oper = SL_OBJOP_ADD:
	//     Add one or multiple BFD sessions.
	//
	// SLBfdv6Msg.Oper = SL_OBJOP_UPDATE:
	//     Update one or multiple BFD sessions.
	//
	// SLBfdv6Msg.Oper = SL_OBJOP_DELETE:
	//     Delete one or multiple BFD sessions.
	SLBfdv6SessionOp(ctx context.Context, in *SLBfdv6Msg, opts ...grpc.CallOption) (*SLBfdv6MsgRsp, error)
	// Retrieve BFD session attributes and state.
	// This call can be used to "poll" the current state of a session.
	SLBfdv6SessionGet(ctx context.Context, in *SLBfdv6GetMsg, opts ...grpc.CallOption) (*SLBfdv6GetMsgRsp, error)
}

type sLBfdv6OperClient struct {
	cc grpc.ClientConnInterface
}

func NewSLBfdv6OperClient(cc grpc.ClientConnInterface) SLBfdv6OperClient {
	return &sLBfdv6OperClient{cc}
}

func (c *sLBfdv6OperClient) SLBfdv6RegOp(ctx context.Context, in *SLBfdRegMsg, opts ...grpc.CallOption) (*SLBfdRegMsgRsp, error) {
	out := new(SLBfdRegMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLBfdv6Oper/SLBfdv6RegOp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLBfdv6OperClient) SLBfdv6Get(ctx context.Context, in *SLBfdGetMsg, opts ...grpc.CallOption) (*SLBfdGetMsgRsp, error) {
	out := new(SLBfdGetMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLBfdv6Oper/SLBfdv6Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLBfdv6OperClient) SLBfdv6GetStats(ctx context.Context, in *SLBfdGetMsg, opts ...grpc.CallOption) (*SLBfdGetStatsMsgRsp, error) {
	out := new(SLBfdGetStatsMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLBfdv6Oper/SLBfdv6GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLBfdv6OperClient) SLBfdv6GetNotifStream(ctx context.Context, in *SLBfdGetNotifMsg, opts ...grpc.CallOption) (SLBfdv6Oper_SLBfdv6GetNotifStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SLBfdv6Oper_serviceDesc.Streams[0], "/service_layer.SLBfdv6Oper/SLBfdv6GetNotifStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sLBfdv6OperSLBfdv6GetNotifStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SLBfdv6Oper_SLBfdv6GetNotifStreamClient interface {
	Recv() (*SLBfdv6Notif, error)
	grpc.ClientStream
}

type sLBfdv6OperSLBfdv6GetNotifStreamClient struct {
	grpc.ClientStream
}

func (x *sLBfdv6OperSLBfdv6GetNotifStreamClient) Recv() (*SLBfdv6Notif, error) {
	m := new(SLBfdv6Notif)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sLBfdv6OperClient) SLBfdv6SessionOp(ctx context.Context, in *SLBfdv6Msg, opts ...grpc.CallOption) (*SLBfdv6MsgRsp, error) {
	out := new(SLBfdv6MsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLBfdv6Oper/SLBfdv6SessionOp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLBfdv6OperClient) SLBfdv6SessionGet(ctx context.Context, in *SLBfdv6GetMsg, opts ...grpc.CallOption) (*SLBfdv6GetMsgRsp, error) {
	out := new(SLBfdv6GetMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLBfdv6Oper/SLBfdv6SessionGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SLBfdv6OperServer is the server API for SLBfdv6Oper service.
type SLBfdv6OperServer interface {
	// SLBfdRegMsg.Oper = SL_REGOP_REGISTER:
	//     Global BFD registration.
	//     A client Must Register BEFORE BFD sessions can be added/modified.
	//
	// SLBfdRegMsg.Oper = SL_REGOP_UNREGISTER:
	//     Global BFD un-registration.
	//     This call is used to end all BFD notifications and unregister any
	//     interest in BFD session configuration.
	//     This call cleans up all BFD sessions previously requested.
	//
	// SLBfdRegMsg.Oper = SL_REGOP_EOF:
	//     BFD End Of File.
	//     After Registration, the client is expected to send an EOF
	//     message to convey the end of replay of the client's known objects.
	//     This is especially useful under certain restart scenarios when the
	//     client and the server are trying to synchronize their BFD sessions.
	SLBfdv6RegOp(context.Context, *SLBfdRegMsg) (*SLBfdRegMsgRsp, error)
	// Used to retrieve global BFD info from the server.
	SLBfdv6Get(context.Context, *SLBfdGetMsg) (*SLBfdGetMsgRsp, error)
	// Used to retrieve global BFD stats from the server.
	SLBfdv6GetStats(context.Context, *SLBfdGetMsg) (*SLBfdGetStatsMsgRsp, error)
	// This call is used to get a stream of session state notifications.
	// The caller must maintain the GRPC channel as long as
	// there is interest in BFD session notifications. Only sessions that were
	// created through this API will be notified to caller.
	// This call can be used to get "push" notifications for session states.
	// It is advised that the caller register for notifications before any
	// sessions are created to avoid any loss of notifications.
	SLBfdv6GetNotifStream(*SLBfdGetNotifMsg, SLBfdv6Oper_SLBfdv6GetNotifStreamServer) error
	// SLBfdv6Msg.Oper = SL_OBJOP_ADD:
	//     Add one or multiple BFD sessions.
	//
	// SLBfdv6Msg.Oper = SL_OBJOP_UPDATE:
	//     Update one or multiple BFD sessions.
	//
	// SLBfdv6Msg.Oper = SL_OBJOP_DELETE:
	//     Delete one or multiple BFD sessions.
	SLBfdv6SessionOp(context.Context, *SLBfdv6Msg) (*SLBfdv6MsgRsp, error)
	// Retrieve BFD session attributes and state.
	// This call can be used to "poll" the current state of a session.
	SLBfdv6SessionGet(context.Context, *SLBfdv6GetMsg) (*SLBfdv6GetMsgRsp, error)
}

// UnimplementedSLBfdv6OperServer can be embedded to have forward compatible implementations.
type UnimplementedSLBfdv6OperServer struct {
}

func (*UnimplementedSLBfdv6OperServer) SLBfdv6RegOp(context.Context, *SLBfdRegMsg) (*SLBfdRegMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLBfdv6RegOp not implemented")
}
func (*UnimplementedSLBfdv6OperServer) SLBfdv6Get(context.Context, *SLBfdGetMsg) (*SLBfdGetMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLBfdv6Get not implemented")
}
func (*UnimplementedSLBfdv6OperServer) SLBfdv6GetStats(context.Context, *SLBfdGetMsg) (*SLBfdGetStatsMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLBfdv6GetStats not implemented")
}
func (*UnimplementedSLBfdv6OperServer) SLBfdv6GetNotifStream(*SLBfdGetNotifMsg, SLBfdv6Oper_SLBfdv6GetNotifStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SLBfdv6GetNotifStream not implemented")
}
func (*UnimplementedSLBfdv6OperServer) SLBfdv6SessionOp(context.Context, *SLBfdv6Msg) (*SLBfdv6MsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLBfdv6SessionOp not implemented")
}
func (*UnimplementedSLBfdv6OperServer) SLBfdv6SessionGet(context.Context, *SLBfdv6GetMsg) (*SLBfdv6GetMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLBfdv6SessionGet not implemented")
}

func RegisterSLBfdv6OperServer(s *grpc.Server, srv SLBfdv6OperServer) {
	s.RegisterService(&_SLBfdv6Oper_serviceDesc, srv)
}

func _SLBfdv6Oper_SLBfdv6RegOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLBfdRegMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLBfdv6OperServer).SLBfdv6RegOp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLBfdv6Oper/SLBfdv6RegOp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLBfdv6OperServer).SLBfdv6RegOp(ctx, req.(*SLBfdRegMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLBfdv6Oper_SLBfdv6Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLBfdGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLBfdv6OperServer).SLBfdv6Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLBfdv6Oper/SLBfdv6Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLBfdv6OperServer).SLBfdv6Get(ctx, req.(*SLBfdGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLBfdv6Oper_SLBfdv6GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLBfdGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLBfdv6OperServer).SLBfdv6GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLBfdv6Oper/SLBfdv6GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLBfdv6OperServer).SLBfdv6GetStats(ctx, req.(*SLBfdGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLBfdv6Oper_SLBfdv6GetNotifStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SLBfdGetNotifMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SLBfdv6OperServer).SLBfdv6GetNotifStream(m, &sLBfdv6OperSLBfdv6GetNotifStreamServer{stream})
}

type SLBfdv6Oper_SLBfdv6GetNotifStreamServer interface {
	Send(*SLBfdv6Notif) error
	grpc.ServerStream
}

type sLBfdv6OperSLBfdv6GetNotifStreamServer struct {
	grpc.ServerStream
}

func (x *sLBfdv6OperSLBfdv6GetNotifStreamServer) Send(m *SLBfdv6Notif) error {
	return x.ServerStream.SendMsg(m)
}

func _SLBfdv6Oper_SLBfdv6SessionOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLBfdv6Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLBfdv6OperServer).SLBfdv6SessionOp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLBfdv6Oper/SLBfdv6SessionOp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLBfdv6OperServer).SLBfdv6SessionOp(ctx, req.(*SLBfdv6Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLBfdv6Oper_SLBfdv6SessionGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLBfdv6GetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLBfdv6OperServer).SLBfdv6SessionGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLBfdv6Oper/SLBfdv6SessionGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLBfdv6OperServer).SLBfdv6SessionGet(ctx, req.(*SLBfdv6GetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _SLBfdv6Oper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service_layer.SLBfdv6Oper",
	HandlerType: (*SLBfdv6OperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SLBfdv6RegOp",
			Handler:    _SLBfdv6Oper_SLBfdv6RegOp_Handler,
		},
		{
			MethodName: "SLBfdv6Get",
			Handler:    _SLBfdv6Oper_SLBfdv6Get_Handler,
		},
		{
			MethodName: "SLBfdv6GetStats",
			Handler:    _SLBfdv6Oper_SLBfdv6GetStats_Handler,
		},
		{
			MethodName: "SLBfdv6SessionOp",
			Handler:    _SLBfdv6Oper_SLBfdv6SessionOp_Handler,
		},
		{
			MethodName: "SLBfdv6SessionGet",
			Handler:    _SLBfdv6Oper_SLBfdv6SessionGet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SLBfdv6GetNotifStream",
			Handler:       _SLBfdv6Oper_SLBfdv6GetNotifStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sl_bfd_ipv6.proto",
}
