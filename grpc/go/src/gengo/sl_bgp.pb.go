// @file
// @brief Server RPC proto file for BGP API.
//
// ----------------------------------------------------------------
//  Copyright (c) 2024 by cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.3
// source: sl_bgp.proto

package service_layer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SLBgpBwUnit int32

const (
	// Reserved
	SLBgpBwUnit_SL_BGP_UNIT_RESERVED SLBgpBwUnit = 0
	// Bps
	SLBgpBwUnit_SL_BGP_BYTES_PER_SEC SLBgpBwUnit = 1
	// Gbps
	SLBgpBwUnit_SL_BGP_GIGA_BITS_PER_SEC SLBgpBwUnit = 2
)

// Enum value maps for SLBgpBwUnit.
var (
	SLBgpBwUnit_name = map[int32]string{
		0: "SL_BGP_UNIT_RESERVED",
		1: "SL_BGP_BYTES_PER_SEC",
		2: "SL_BGP_GIGA_BITS_PER_SEC",
	}
	SLBgpBwUnit_value = map[string]int32{
		"SL_BGP_UNIT_RESERVED":     0,
		"SL_BGP_BYTES_PER_SEC":     1,
		"SL_BGP_GIGA_BITS_PER_SEC": 2,
	}
)

func (x SLBgpBwUnit) Enum() *SLBgpBwUnit {
	p := new(SLBgpBwUnit)
	*p = x
	return p
}

func (x SLBgpBwUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgpBwUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgp_proto_enumTypes[0].Descriptor()
}

func (SLBgpBwUnit) Type() protoreflect.EnumType {
	return &file_sl_bgp_proto_enumTypes[0]
}

func (x SLBgpBwUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgpBwUnit.Descriptor instead.
func (SLBgpBwUnit) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{0}
}

type SLBgpAfi int32

const (
	// Reserved
	SLBgpAfi_SL_BGP_AFI_RESERVED SLBgpAfi = 0
	// IPv4
	SLBgpAfi_SL_BGP_AFI_IPV4 SLBgpAfi = 1
	// IPv6
	SLBgpAfi_SL_BGP_AFI_IPV6 SLBgpAfi = 2
)

// Enum value maps for SLBgpAfi.
var (
	SLBgpAfi_name = map[int32]string{
		0: "SL_BGP_AFI_RESERVED",
		1: "SL_BGP_AFI_IPV4",
		2: "SL_BGP_AFI_IPV6",
	}
	SLBgpAfi_value = map[string]int32{
		"SL_BGP_AFI_RESERVED": 0,
		"SL_BGP_AFI_IPV4":     1,
		"SL_BGP_AFI_IPV6":     2,
	}
)

func (x SLBgpAfi) Enum() *SLBgpAfi {
	p := new(SLBgpAfi)
	*p = x
	return p
}

func (x SLBgpAfi) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgpAfi) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgp_proto_enumTypes[1].Descriptor()
}

func (SLBgpAfi) Type() protoreflect.EnumType {
	return &file_sl_bgp_proto_enumTypes[1]
}

func (x SLBgpAfi) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgpAfi.Descriptor instead.
func (SLBgpAfi) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{1}
}

type SLBgpSafi int32

const (
	// Reserved
	SLBgpSafi_SL_BGP_SAFI_RESERVED SLBgpSafi = 0
	// Unicast SAFI
	SLBgpSafi_SL_BGP_SAFI_UNICAST SLBgpSafi = 1
)

// Enum value maps for SLBgpSafi.
var (
	SLBgpSafi_name = map[int32]string{
		0: "SL_BGP_SAFI_RESERVED",
		1: "SL_BGP_SAFI_UNICAST",
	}
	SLBgpSafi_value = map[string]int32{
		"SL_BGP_SAFI_RESERVED": 0,
		"SL_BGP_SAFI_UNICAST":  1,
	}
)

func (x SLBgpSafi) Enum() *SLBgpSafi {
	p := new(SLBgpSafi)
	*p = x
	return p
}

func (x SLBgpSafi) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgpSafi) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgp_proto_enumTypes[2].Descriptor()
}

func (SLBgpSafi) Type() protoreflect.EnumType {
	return &file_sl_bgp_proto_enumTypes[2]
}

func (x SLBgpSafi) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgpSafi.Descriptor instead.
func (SLBgpSafi) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{2}
}

// BGP Object type like neighbors
type SLBgpApiObjectType int32

const (
	// Reserved
	SLBgpApiObjectType_SL_BGP_API_RESERVED_OBJECT_TYPE SLBgpApiObjectType = 0
	// BGP Neighbor Object Type
	SLBgpApiObjectType_SL_BGP_API_NEIGHBOR_OBJECT_TYPE SLBgpApiObjectType = 1
)

// Enum value maps for SLBgpApiObjectType.
var (
	SLBgpApiObjectType_name = map[int32]string{
		0: "SL_BGP_API_RESERVED_OBJECT_TYPE",
		1: "SL_BGP_API_NEIGHBOR_OBJECT_TYPE",
	}
	SLBgpApiObjectType_value = map[string]int32{
		"SL_BGP_API_RESERVED_OBJECT_TYPE": 0,
		"SL_BGP_API_NEIGHBOR_OBJECT_TYPE": 1,
	}
)

func (x SLBgpApiObjectType) Enum() *SLBgpApiObjectType {
	p := new(SLBgpApiObjectType)
	*p = x
	return p
}

func (x SLBgpApiObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgpApiObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgp_proto_enumTypes[3].Descriptor()
}

func (SLBgpApiObjectType) Type() protoreflect.EnumType {
	return &file_sl_bgp_proto_enumTypes[3]
}

func (x SLBgpApiObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgpApiObjectType.Descriptor instead.
func (SLBgpApiObjectType) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{3}
}

// enumeration of operation on BGP objects
type SLBgpApiObjectOp int32

const (
	// Reserved
	SLBgpApiObjectOp_SL_BGP_OP_RESERVED SLBgpApiObjectOp = 0
	// Update operation on BGP API Objects
	SLBgpApiObjectOp_SL_BGP_OP_UPDATE SLBgpApiObjectOp = 1
	// Delete operation on BGP API Objects
	SLBgpApiObjectOp_SL_BGP_OP_DELETE SLBgpApiObjectOp = 2
)

// Enum value maps for SLBgpApiObjectOp.
var (
	SLBgpApiObjectOp_name = map[int32]string{
		0: "SL_BGP_OP_RESERVED",
		1: "SL_BGP_OP_UPDATE",
		2: "SL_BGP_OP_DELETE",
	}
	SLBgpApiObjectOp_value = map[string]int32{
		"SL_BGP_OP_RESERVED": 0,
		"SL_BGP_OP_UPDATE":   1,
		"SL_BGP_OP_DELETE":   2,
	}
)

func (x SLBgpApiObjectOp) Enum() *SLBgpApiObjectOp {
	p := new(SLBgpApiObjectOp)
	*p = x
	return p
}

func (x SLBgpApiObjectOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgpApiObjectOp) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgp_proto_enumTypes[4].Descriptor()
}

func (SLBgpApiObjectOp) Type() protoreflect.EnumType {
	return &file_sl_bgp_proto_enumTypes[4]
}

func (x SLBgpApiObjectOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgpApiObjectOp.Descriptor instead.
func (SLBgpApiObjectOp) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{4}
}

// BGP object state on the device
type SLBgpApiStateType int32

const (
	// BGP object like neighbors may not be configured on the device.
	// Parameters under such object are forward referenced i.e. stored without usage on the device.
	// Such parameters are used when objects are configured on the device.
	// This could be state at BgpInstanceName, Neighbor, Neighbor AfiSafi hierarchy.
	SLBgpApiStateType_SL_BGP_API_FORWARD_REF SLBgpApiStateType = 0
	// Parameter under the BGP object are usable
	SLBgpApiStateType_SL_BGP_API_APPLIED SLBgpApiStateType = 1
	// Unknown state
	SLBgpApiStateType_SL_BGP_API_STATE_UNKNOWN SLBgpApiStateType = 2
)

// Enum value maps for SLBgpApiStateType.
var (
	SLBgpApiStateType_name = map[int32]string{
		0: "SL_BGP_API_FORWARD_REF",
		1: "SL_BGP_API_APPLIED",
		2: "SL_BGP_API_STATE_UNKNOWN",
	}
	SLBgpApiStateType_value = map[string]int32{
		"SL_BGP_API_FORWARD_REF":   0,
		"SL_BGP_API_APPLIED":       1,
		"SL_BGP_API_STATE_UNKNOWN": 2,
	}
)

func (x SLBgpApiStateType) Enum() *SLBgpApiStateType {
	p := new(SLBgpApiStateType)
	*p = x
	return p
}

func (x SLBgpApiStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgpApiStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgp_proto_enumTypes[5].Descriptor()
}

func (SLBgpApiStateType) Type() protoreflect.EnumType {
	return &file_sl_bgp_proto_enumTypes[5]
}

func (x SLBgpApiStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgpApiStateType.Descriptor instead.
func (SLBgpApiStateType) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{5}
}

// Message structures
// This is filled in response.
type SLBgpApiStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Oper Status in response message
	Status *SLErrorStatus `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	// SL BGP API Neighbor or object parameter state on the Server
	// When Status = SL_SUCCESS, check BgpStatus
	// in the response
	State SLBgpApiStateType `protobuf:"varint,2,opt,name=State,proto3,enum=service_layer.SLBgpApiStateType" json:"State,omitempty"`
	// Operation ID on SLBgpApiObjectReq message that performed
	// last UPDATE on the parameter.
	OperationId uint64 `protobuf:"varint,3,opt,name=OperationId,proto3" json:"OperationId,omitempty"`
}

func (x *SLBgpApiStatus) Reset() {
	*x = SLBgpApiStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgpApiStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgpApiStatus) ProtoMessage() {}

func (x *SLBgpApiStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgpApiStatus.ProtoReflect.Descriptor instead.
func (*SLBgpApiStatus) Descriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{0}
}

func (x *SLBgpApiStatus) GetStatus() *SLErrorStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SLBgpApiStatus) GetState() SLBgpApiStateType {
	if x != nil {
		return x.State
	}
	return SLBgpApiStateType_SL_BGP_API_FORWARD_REF
}

func (x *SLBgpApiStatus) GetOperationId() uint64 {
	if x != nil {
		return x.OperationId
	}
	return 0
}

// BGP AFI SAFI message
type SLBgpAfiSafi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BGP AFI
	Afi SLBgpAfi `protobuf:"varint,1,opt,name=Afi,proto3,enum=service_layer.SLBgpAfi" json:"Afi,omitempty"`
	// BGP SAFI
	Safi SLBgpSafi `protobuf:"varint,2,opt,name=Safi,proto3,enum=service_layer.SLBgpSafi" json:"Safi,omitempty"`
}

func (x *SLBgpAfiSafi) Reset() {
	*x = SLBgpAfiSafi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgpAfiSafi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgpAfiSafi) ProtoMessage() {}

func (x *SLBgpAfiSafi) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgpAfiSafi.ProtoReflect.Descriptor instead.
func (*SLBgpAfiSafi) Descriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{1}
}

func (x *SLBgpAfiSafi) GetAfi() SLBgpAfi {
	if x != nil {
		return x.Afi
	}
	return SLBgpAfi_SL_BGP_AFI_RESERVED
}

func (x *SLBgpAfiSafi) GetSafi() SLBgpSafi {
	if x != nil {
		return x.Safi
	}
	return SLBgpSafi_SL_BGP_SAFI_RESERVED
}

// FRR IP address parameter along with status
type SLBgpFrrInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entry:
	//
	//	*SLBgpFrrInfo_Addr
	Entry isSLBgpFrrInfo_Entry `protobuf_oneof:"entry"`
	// Status in response or notification
	ObjectStatus *SLBgpApiStatus `protobuf:"bytes,2,opt,name=ObjectStatus,proto3" json:"ObjectStatus,omitempty"`
}

func (x *SLBgpFrrInfo) Reset() {
	*x = SLBgpFrrInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgpFrrInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgpFrrInfo) ProtoMessage() {}

func (x *SLBgpFrrInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgpFrrInfo.ProtoReflect.Descriptor instead.
func (*SLBgpFrrInfo) Descriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{2}
}

func (m *SLBgpFrrInfo) GetEntry() isSLBgpFrrInfo_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *SLBgpFrrInfo) GetAddr() *SLIpAddress {
	if x, ok := x.GetEntry().(*SLBgpFrrInfo_Addr); ok {
		return x.Addr
	}
	return nil
}

func (x *SLBgpFrrInfo) GetObjectStatus() *SLBgpApiStatus {
	if x != nil {
		return x.ObjectStatus
	}
	return nil
}

type isSLBgpFrrInfo_Entry interface {
	isSLBgpFrrInfo_Entry()
}

type SLBgpFrrInfo_Addr struct {
	// IP Address
	Addr *SLIpAddress `protobuf:"bytes,1,opt,name=Addr,proto3,oneof"`
}

func (*SLBgpFrrInfo_Addr) isSLBgpFrrInfo_Entry() {}

// BGP bandwidth-id message for neighbor AfiSafi
type SLBgpBwId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bandwidth-id number 1 to 8
	BwId uint32 `protobuf:"varint,1,opt,name=BwId,proto3" json:"BwId,omitempty"`
	// If BwUnit is encoded
	// max accepted is 18446744065119617025 Bytes/sec
	LinkBw uint64 `protobuf:"varint,2,opt,name=LinkBw,proto3" json:"LinkBw,omitempty"`
	// Unit of bandwidth
	// If encoded stored in device as Bytes/sec in 64 bit storage
	BwUnit SLBgpBwUnit `protobuf:"varint,3,opt,name=BwUnit,proto3,enum=service_layer.SLBgpBwUnit" json:"BwUnit,omitempty"`
	// BGP ASN to be encoded in extended community
	// local ASN is used if not provided
	Asn uint32 `protobuf:"varint,4,opt,name=Asn,proto3" json:"Asn,omitempty"`
	// Status in response or notification
	ObjectStatus *SLBgpApiStatus `protobuf:"bytes,5,opt,name=ObjectStatus,proto3" json:"ObjectStatus,omitempty"`
}

func (x *SLBgpBwId) Reset() {
	*x = SLBgpBwId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgpBwId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgpBwId) ProtoMessage() {}

func (x *SLBgpBwId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgpBwId.ProtoReflect.Descriptor instead.
func (*SLBgpBwId) Descriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{3}
}

func (x *SLBgpBwId) GetBwId() uint32 {
	if x != nil {
		return x.BwId
	}
	return 0
}

func (x *SLBgpBwId) GetLinkBw() uint64 {
	if x != nil {
		return x.LinkBw
	}
	return 0
}

func (x *SLBgpBwId) GetBwUnit() SLBgpBwUnit {
	if x != nil {
		return x.BwUnit
	}
	return SLBgpBwUnit_SL_BGP_UNIT_RESERVED
}

func (x *SLBgpBwId) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *SLBgpBwId) GetObjectStatus() *SLBgpApiStatus {
	if x != nil {
		return x.ObjectStatus
	}
	return nil
}

// BGP neighbor AfiSafi tunable parameters
type SLBgpNeighborSafiParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of outbound bandwidth-ids
	OutBwIds []*SLBgpBwId `protobuf:"bytes,1,rep,name=OutBwIds,proto3" json:"OutBwIds,omitempty"`
	// List of inbound bandwidth-ids
	InBwIds []*SLBgpBwId `protobuf:"bytes,2,rep,name=InBwIds,proto3" json:"InBwIds,omitempty"`
	// FRR info of PER Link ECMP backup
	PerLinkMpathBkup *SLBgpFrrInfo `protobuf:"bytes,3,opt,name=PerLinkMpathBkup,proto3" json:"PerLinkMpathBkup,omitempty"`
}

func (x *SLBgpNeighborSafiParam) Reset() {
	*x = SLBgpNeighborSafiParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgpNeighborSafiParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgpNeighborSafiParam) ProtoMessage() {}

func (x *SLBgpNeighborSafiParam) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgpNeighborSafiParam.ProtoReflect.Descriptor instead.
func (*SLBgpNeighborSafiParam) Descriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{4}
}

func (x *SLBgpNeighborSafiParam) GetOutBwIds() []*SLBgpBwId {
	if x != nil {
		return x.OutBwIds
	}
	return nil
}

func (x *SLBgpNeighborSafiParam) GetInBwIds() []*SLBgpBwId {
	if x != nil {
		return x.InBwIds
	}
	return nil
}

func (x *SLBgpNeighborSafiParam) GetPerLinkMpathBkup() *SLBgpFrrInfo {
	if x != nil {
		return x.PerLinkMpathBkup
	}
	return nil
}

// BGP neighbor AfiSafi message
type SLBgpNeighborSafiMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BGP AFI SAFI indetifier
	AfiSafi *SLBgpAfiSafi `protobuf:"bytes,1,opt,name=AfiSafi,proto3" json:"AfiSafi,omitempty"`
	// Set in the response and notification
	// ObjectStatus.Status = SL_SUCCESS means all parameters under AfiSafi are successfully stored.
	// ObjectStatus.Status = SL_SOME_ERR signifies that the operation failed for one or more
	//
	//	parameters under AfiSafi. Examine individual parameter ObjectStatus
	//	for exact error.
	//
	// ObjectStatus.State = SL_BGP_API_FORWARD_REF indicates neighbor AfiSafi
	//
	//	and parameters are successfully forward referenced.
	//	Please enable address family under neighbor configuration on the device.
	//
	// ObjectStatus.OperationID is n/a
	ObjectStatus *SLBgpApiStatus `protobuf:"bytes,2,opt,name=ObjectStatus,proto3" json:"ObjectStatus,omitempty"`
	// Types that are assignable to Entry:
	//
	//	*SLBgpNeighborSafiMsg_SafiParam
	Entry isSLBgpNeighborSafiMsg_Entry `protobuf_oneof:"entry"`
}

func (x *SLBgpNeighborSafiMsg) Reset() {
	*x = SLBgpNeighborSafiMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgpNeighborSafiMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgpNeighborSafiMsg) ProtoMessage() {}

func (x *SLBgpNeighborSafiMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgpNeighborSafiMsg.ProtoReflect.Descriptor instead.
func (*SLBgpNeighborSafiMsg) Descriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{5}
}

func (x *SLBgpNeighborSafiMsg) GetAfiSafi() *SLBgpAfiSafi {
	if x != nil {
		return x.AfiSafi
	}
	return nil
}

func (x *SLBgpNeighborSafiMsg) GetObjectStatus() *SLBgpApiStatus {
	if x != nil {
		return x.ObjectStatus
	}
	return nil
}

func (m *SLBgpNeighborSafiMsg) GetEntry() isSLBgpNeighborSafiMsg_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *SLBgpNeighborSafiMsg) GetSafiParam() *SLBgpNeighborSafiParam {
	if x, ok := x.GetEntry().(*SLBgpNeighborSafiMsg_SafiParam); ok {
		return x.SafiParam
	}
	return nil
}

type isSLBgpNeighborSafiMsg_Entry interface {
	isSLBgpNeighborSafiMsg_Entry()
}

type SLBgpNeighborSafiMsg_SafiParam struct {
	// BGP Neighbor SAFI parameters to be updated
	SafiParam *SLBgpNeighborSafiParam `protobuf:"bytes,3,opt,name=SafiParam,proto3,oneof"`
}

func (*SLBgpNeighborSafiMsg_SafiParam) isSLBgpNeighborSafiMsg_Entry() {}

// List of BGP neighbor AfiSafis under the neighbor
type SLBgpNeighborSafiList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of neighbor AFI/SAFI in the message
	NeighborSafis []*SLBgpNeighborSafiMsg `protobuf:"bytes,1,rep,name=NeighborSafis,proto3" json:"NeighborSafis,omitempty"`
}

func (x *SLBgpNeighborSafiList) Reset() {
	*x = SLBgpNeighborSafiList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgpNeighborSafiList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgpNeighborSafiList) ProtoMessage() {}

func (x *SLBgpNeighborSafiList) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgpNeighborSafiList.ProtoReflect.Descriptor instead.
func (*SLBgpNeighborSafiList) Descriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{6}
}

func (x *SLBgpNeighborSafiList) GetNeighborSafis() []*SLBgpNeighborSafiMsg {
	if x != nil {
		return x.NeighborSafis
	}
	return nil
}

// BGP neighbor key
type SLBgpNeighborKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VRF name
	VrfName string `protobuf:"bytes,1,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// Neighbor IP Address
	Address *SLIpAddress `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *SLBgpNeighborKey) Reset() {
	*x = SLBgpNeighborKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgpNeighborKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgpNeighborKey) ProtoMessage() {}

func (x *SLBgpNeighborKey) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgpNeighborKey.ProtoReflect.Descriptor instead.
func (*SLBgpNeighborKey) Descriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{7}
}

func (x *SLBgpNeighborKey) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SLBgpNeighborKey) GetAddress() *SLIpAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

// BGP neighbor message
type SLBgpNeighborMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BGP neighbor identifier
	NeighborKey *SLBgpNeighborKey `protobuf:"bytes,1,opt,name=NeighborKey,proto3" json:"NeighborKey,omitempty"`
	// Set in the response
	// ObjectStatus.Status = SL_SUCCESS means all parameters under each listed AfiSafi is successfully stored.
	// ObjectStatus.Status = SL_SOME_ERR signifies that the operation failed for one or more
	//
	//	parameters under one or more AfiSafi. Examine ObjectStatus of each NeighborSafiList
	//	and individual parameter ObjectStatus under them for exact error.
	//
	// ObjectStatus.State =  SL_BGP_API_FORWARD_REF indicates neighbor and parameters
	//
	//	are successfully forward referenced.
	//
	// ObjectStatus.OperationID is n/a
	ObjectStatus *SLBgpApiStatus `protobuf:"bytes,2,opt,name=ObjectStatus,proto3" json:"ObjectStatus,omitempty"`
	// Types that are assignable to Entry:
	//
	//	*SLBgpNeighborMsg_NeighborSafiList
	Entry isSLBgpNeighborMsg_Entry `protobuf_oneof:"entry"`
}

func (x *SLBgpNeighborMsg) Reset() {
	*x = SLBgpNeighborMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgpNeighborMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgpNeighborMsg) ProtoMessage() {}

func (x *SLBgpNeighborMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgpNeighborMsg.ProtoReflect.Descriptor instead.
func (*SLBgpNeighborMsg) Descriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{8}
}

func (x *SLBgpNeighborMsg) GetNeighborKey() *SLBgpNeighborKey {
	if x != nil {
		return x.NeighborKey
	}
	return nil
}

func (x *SLBgpNeighborMsg) GetObjectStatus() *SLBgpApiStatus {
	if x != nil {
		return x.ObjectStatus
	}
	return nil
}

func (m *SLBgpNeighborMsg) GetEntry() isSLBgpNeighborMsg_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *SLBgpNeighborMsg) GetNeighborSafiList() *SLBgpNeighborSafiList {
	if x, ok := x.GetEntry().(*SLBgpNeighborMsg_NeighborSafiList); ok {
		return x.NeighborSafiList
	}
	return nil
}

type isSLBgpNeighborMsg_Entry interface {
	isSLBgpNeighborMsg_Entry()
}

type SLBgpNeighborMsg_NeighborSafiList struct {
	// SAFI list being updated under the BGP neighbor
	NeighborSafiList *SLBgpNeighborSafiList `protobuf:"bytes,3,opt,name=NeighborSafiList,proto3,oneof"`
}

func (*SLBgpNeighborMsg_NeighborSafiList) isSLBgpNeighborMsg_Entry() {}

// BGP object message
type SLBgpApiObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SL BGP Object type on which operation is performed
	ObjectType SLBgpApiObjectType `protobuf:"varint,1,opt,name=ObjectType,proto3,enum=service_layer.SLBgpApiObjectType" json:"ObjectType,omitempty"`
	// Types that are assignable to Entry:
	//
	//	*SLBgpApiObject_Neighbor
	Entry isSLBgpApiObject_Entry `protobuf_oneof:"entry"`
}

func (x *SLBgpApiObject) Reset() {
	*x = SLBgpApiObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgpApiObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgpApiObject) ProtoMessage() {}

func (x *SLBgpApiObject) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgpApiObject.ProtoReflect.Descriptor instead.
func (*SLBgpApiObject) Descriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{9}
}

func (x *SLBgpApiObject) GetObjectType() SLBgpApiObjectType {
	if x != nil {
		return x.ObjectType
	}
	return SLBgpApiObjectType_SL_BGP_API_RESERVED_OBJECT_TYPE
}

func (m *SLBgpApiObject) GetEntry() isSLBgpApiObject_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *SLBgpApiObject) GetNeighbor() *SLBgpNeighborMsg {
	if x, ok := x.GetEntry().(*SLBgpApiObject_Neighbor); ok {
		return x.Neighbor
	}
	return nil
}

type isSLBgpApiObject_Entry interface {
	isSLBgpApiObject_Entry()
}

type SLBgpApiObject_Neighbor struct {
	// BGP neighbor being updated
	Neighbor *SLBgpNeighborMsg `protobuf:"bytes,2,opt,name=Neighbor,proto3,oneof"`
}

func (*SLBgpApiObject_Neighbor) isSLBgpApiObject_Entry() {}

// Response to BGP Object operation request
type SLBgpApiObjectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BGP Instance Name
	BgpInstanceName string `protobuf:"bytes,1,opt,name=BgpInstanceName,proto3" json:"BgpInstanceName,omitempty"`
	// Set in the response to indicate the summary of overall request:
	// ObjectStatus.Status = SL_SUCCESS means all parameters are successfully stored.
	// ObjectStatus.Status = SL_SOME_ERR signifies that the operation failed for one or more
	//
	//	BGP objects. BgpApiobjects holds the Status for each Object and parameters
	//	under it.
	//
	// ObjectStatus.State = SL_BGP_API_FORWARD_REF indicates BgpInstanceName and its
	//
	//	parameters are forward referenced. Configure BgpInstanceName and BGP Objects
	//	on the device to use the parameters.
	//
	// ObjectStatus.OperationID is n/a
	// In case of errors, this field indicates which entry in the bulk was
	// erroneous
	StatusSummary *SLBgpApiStatus `protobuf:"bytes,2,opt,name=StatusSummary,proto3" json:"StatusSummary,omitempty"`
	// SLBgpAPIobject on which operation is
	// performed with individual status
	BgpApiobjects []*SLBgpApiObject `protobuf:"bytes,3,rep,name=BgpApiobjects,proto3" json:"BgpApiobjects,omitempty"`
}

func (x *SLBgpApiObjectResp) Reset() {
	*x = SLBgpApiObjectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgpApiObjectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgpApiObjectResp) ProtoMessage() {}

func (x *SLBgpApiObjectResp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgpApiObjectResp.ProtoReflect.Descriptor instead.
func (*SLBgpApiObjectResp) Descriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{10}
}

func (x *SLBgpApiObjectResp) GetBgpInstanceName() string {
	if x != nil {
		return x.BgpInstanceName
	}
	return ""
}

func (x *SLBgpApiObjectResp) GetStatusSummary() *SLBgpApiStatus {
	if x != nil {
		return x.StatusSummary
	}
	return nil
}

func (x *SLBgpApiObjectResp) GetBgpApiobjects() []*SLBgpApiObject {
	if x != nil {
		return x.BgpApiobjects
	}
	return nil
}

// Request to perform UPDATE and DELETE operation on BGP object parameters
type SLBgpApiObjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation ID of the bulk transaction that performs modification of BGP objects.
	// This ID is generated by Client for each SLBgpApiObjectReq that can modify one or more BGP objects.
	// Each parameter is stored in the Server with Last operation ID that modified it.
	// This helps to track between Client and Server transactions that performed
	// modification of BGP objects.
	// The Server provide ID in response of BGP object Get requests.
	// It will also provide it in Async notification when supported by Server.
	// This is separate from Correlator on streaming service for each client message
	// As name suggest, Correlator is to match response messages corresponding to any
	// request type and not just BGP object DB operations.
	OperationId uint64 `protobuf:"varint,1,opt,name=OperationId,proto3" json:"OperationId,omitempty"`
	// Type of operation performed
	// Oper = SL_BGP_OP_UPDATE
	//
	//	Update one or more parameters (OutBwIds, OutBwIds etc) under BGP objects (Neighbors).
	//	Only the parameters in the current message are updated with new values.
	//	Other parameters under BGP object that are not updated in current message
	//	continue using last updated values.
	//
	// Oper = SL_BGP_OP_DELETE
	//
	//	Delete one or more parameters under BGP objects.
	//	Device fallbacks to on device configuration parameters, if present.
	Oper SLBgpApiObjectOp `protobuf:"varint,2,opt,name=Oper,proto3,enum=service_layer.SLBgpApiObjectOp" json:"Oper,omitempty"`
	// BGP Instance Name
	BgpInstanceName string `protobuf:"bytes,3,opt,name=BgpInstanceName,proto3" json:"BgpInstanceName,omitempty"`
	// Actual objects on which operation is performed
	BgpApiobjects []*SLBgpApiObject `protobuf:"bytes,4,rep,name=BgpApiobjects,proto3" json:"BgpApiobjects,omitempty"`
}

func (x *SLBgpApiObjectReq) Reset() {
	*x = SLBgpApiObjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgpApiObjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgpApiObjectReq) ProtoMessage() {}

func (x *SLBgpApiObjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgpApiObjectReq.ProtoReflect.Descriptor instead.
func (*SLBgpApiObjectReq) Descriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{11}
}

func (x *SLBgpApiObjectReq) GetOperationId() uint64 {
	if x != nil {
		return x.OperationId
	}
	return 0
}

func (x *SLBgpApiObjectReq) GetOper() SLBgpApiObjectOp {
	if x != nil {
		return x.Oper
	}
	return SLBgpApiObjectOp_SL_BGP_OP_RESERVED
}

func (x *SLBgpApiObjectReq) GetBgpInstanceName() string {
	if x != nil {
		return x.BgpInstanceName
	}
	return ""
}

func (x *SLBgpApiObjectReq) GetBgpApiobjects() []*SLBgpApiObject {
	if x != nil {
		return x.BgpApiobjects
	}
	return nil
}

// Get BGP Object response
type SLBgpApiGetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BGP Instance Name
	BgpInstanceName string `protobuf:"bytes,1,opt,name=BgpInstanceName,proto3" json:"BgpInstanceName,omitempty"`
	// End Of File.
	// When set to True, it indicates that the server has returned M, where
	// M <= N, of the original N requested Entries.
	Eof bool `protobuf:"varint,2,opt,name=Eof,proto3" json:"Eof,omitempty"`
	// Status of the Get operation
	ErrStatus *SLErrorStatus `protobuf:"bytes,3,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// Returned entries as requested in the Get operation.
	// if ErrStatus is SL_SUCCESS, Entries contains the info requested
	// SLBgpAPIobjects with OperationId that last
	// performed operation on the object
	BgpApiobjects []*SLBgpApiObject `protobuf:"bytes,4,rep,name=BgpApiobjects,proto3" json:"BgpApiobjects,omitempty"`
}

func (x *SLBgpApiGetResp) Reset() {
	*x = SLBgpApiGetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgpApiGetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgpApiGetResp) ProtoMessage() {}

func (x *SLBgpApiGetResp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgpApiGetResp.ProtoReflect.Descriptor instead.
func (*SLBgpApiGetResp) Descriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{12}
}

func (x *SLBgpApiGetResp) GetBgpInstanceName() string {
	if x != nil {
		return x.BgpInstanceName
	}
	return ""
}

func (x *SLBgpApiGetResp) GetEof() bool {
	if x != nil {
		return x.Eof
	}
	return false
}

func (x *SLBgpApiGetResp) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (x *SLBgpApiGetResp) GetBgpApiobjects() []*SLBgpApiObject {
	if x != nil {
		return x.BgpApiobjects
	}
	return nil
}

// Get and Get next of supplied ObjectType and Key
// Case 1: if GetNext = FALSE
//
//	ObjectType and entry is required.
//	Device will respond upto EntriesCount starting from exact ObjectType and entry.
//
// Case 2: if GetNext = TRUE
//
//	ObjectType = 0 device responds from first object type stored in the device upto EntriesCount.
//	ObjectType = valid value and key not specified. Device responds from the first object of the
//	             specified type stored in the device upto EntriesCount.
//	ObjectType = valid value and entry specified. Device responds from next (Lexicographical)
//	             Type/key stored in the device upto EntriesCount.
//
// Client can use multiple GetNext request to retrieve all the objects by performing Getnext on the
// last responded object type and entry of the previous request. No ObjectType and key is required
// in first GetNext for full DB retrieval.
type SLBgpApiGetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BGP Instance Name
	BgpInstanceName string `protobuf:"bytes,1,opt,name=BgpInstanceName,proto3" json:"BgpInstanceName,omitempty"`
	// BGP Object Type being queried (example Neighbors)
	ObjectType SLBgpApiObjectType `protobuf:"varint,2,opt,name=ObjectType,proto3,enum=service_layer.SLBgpApiObjectType" json:"ObjectType,omitempty"`
	// Types that are assignable to Entry:
	//
	//	*SLBgpApiGetReq_Neighbor
	Entry isSLBgpApiGetReq_Entry `protobuf_oneof:"entry"`
	// Number of entries requested
	EntriesCount uint32 `protobuf:"varint,4,opt,name=EntriesCount,proto3" json:"EntriesCount,omitempty"`
	GetNext      bool   `protobuf:"varint,5,opt,name=GetNext,proto3" json:"GetNext,omitempty"`
}

func (x *SLBgpApiGetReq) Reset() {
	*x = SLBgpApiGetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgpApiGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgpApiGetReq) ProtoMessage() {}

func (x *SLBgpApiGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgpApiGetReq.ProtoReflect.Descriptor instead.
func (*SLBgpApiGetReq) Descriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{13}
}

func (x *SLBgpApiGetReq) GetBgpInstanceName() string {
	if x != nil {
		return x.BgpInstanceName
	}
	return ""
}

func (x *SLBgpApiGetReq) GetObjectType() SLBgpApiObjectType {
	if x != nil {
		return x.ObjectType
	}
	return SLBgpApiObjectType_SL_BGP_API_RESERVED_OBJECT_TYPE
}

func (m *SLBgpApiGetReq) GetEntry() isSLBgpApiGetReq_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *SLBgpApiGetReq) GetNeighbor() *SLBgpNeighborKey {
	if x, ok := x.GetEntry().(*SLBgpApiGetReq_Neighbor); ok {
		return x.Neighbor
	}
	return nil
}

func (x *SLBgpApiGetReq) GetEntriesCount() uint32 {
	if x != nil {
		return x.EntriesCount
	}
	return 0
}

func (x *SLBgpApiGetReq) GetGetNext() bool {
	if x != nil {
		return x.GetNext
	}
	return false
}

type isSLBgpApiGetReq_Entry interface {
	isSLBgpApiGetReq_Entry()
}

type SLBgpApiGetReq_Neighbor struct {
	// Object Key based on ObjectType
	Neighbor *SLBgpNeighborKey `protobuf:"bytes,3,opt,name=Neighbor,proto3,oneof"`
}

func (*SLBgpApiGetReq_Neighbor) isSLBgpApiGetReq_Entry() {}

// Response message to SLBgpApiCap request
type SLBgpApiCapResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SLBgpApiCapResp) Reset() {
	*x = SLBgpApiCapResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgpApiCapResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgpApiCapResp) ProtoMessage() {}

func (x *SLBgpApiCapResp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgpApiCapResp.ProtoReflect.Descriptor instead.
func (*SLBgpApiCapResp) Descriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{14}
}

// Message to request SLBgpApi capability
type SLBgpApiCapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entry:
	//
	//	*SLBgpApiCapReq_BgpInstanceName
	Entry isSLBgpApiCapReq_Entry `protobuf_oneof:"entry"`
}

func (x *SLBgpApiCapReq) Reset() {
	*x = SLBgpApiCapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgpApiCapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgpApiCapReq) ProtoMessage() {}

func (x *SLBgpApiCapReq) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgpApiCapReq.ProtoReflect.Descriptor instead.
func (*SLBgpApiCapReq) Descriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{15}
}

func (m *SLBgpApiCapReq) GetEntry() isSLBgpApiCapReq_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *SLBgpApiCapReq) GetBgpInstanceName() string {
	if x, ok := x.GetEntry().(*SLBgpApiCapReq_BgpInstanceName); ok {
		return x.BgpInstanceName
	}
	return ""
}

type isSLBgpApiCapReq_Entry interface {
	isSLBgpApiCapReq_Entry()
}

type SLBgpApiCapReq_BgpInstanceName struct {
	// BGP Instance Name
	BgpInstanceName string `protobuf:"bytes,1,opt,name=BgpInstanceName,proto3,oneof"`
}

func (*SLBgpApiCapReq_BgpInstanceName) isSLBgpApiCapReq_Entry() {}

// SL BGP API operations response
type SLBgpApiMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Correlator. This can be used to correlate replies with requests.
	// The Server simply reflects this field back in the reply.
	Correlator uint64 `protobuf:"varint,1,opt,name=Correlator,proto3" json:"Correlator,omitempty"`
	// Error Code
	ErrStatus *SLErrorStatus `protobuf:"bytes,2,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// Response is corresponding to request message type
	//
	// Types that are assignable to Entry:
	//
	//	*SLBgpApiMsgRsp_BgpApiCapResp
	//	*SLBgpApiMsgRsp_BgpApiGetResp
	//	*SLBgpApiMsgRsp_BgpApiObjectResp
	Entry isSLBgpApiMsgRsp_Entry `protobuf_oneof:"entry"`
}

func (x *SLBgpApiMsgRsp) Reset() {
	*x = SLBgpApiMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgpApiMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgpApiMsgRsp) ProtoMessage() {}

func (x *SLBgpApiMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgpApiMsgRsp.ProtoReflect.Descriptor instead.
func (*SLBgpApiMsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{16}
}

func (x *SLBgpApiMsgRsp) GetCorrelator() uint64 {
	if x != nil {
		return x.Correlator
	}
	return 0
}

func (x *SLBgpApiMsgRsp) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (m *SLBgpApiMsgRsp) GetEntry() isSLBgpApiMsgRsp_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *SLBgpApiMsgRsp) GetBgpApiCapResp() *SLBgpApiCapResp {
	if x, ok := x.GetEntry().(*SLBgpApiMsgRsp_BgpApiCapResp); ok {
		return x.BgpApiCapResp
	}
	return nil
}

func (x *SLBgpApiMsgRsp) GetBgpApiGetResp() *SLBgpApiGetResp {
	if x, ok := x.GetEntry().(*SLBgpApiMsgRsp_BgpApiGetResp); ok {
		return x.BgpApiGetResp
	}
	return nil
}

func (x *SLBgpApiMsgRsp) GetBgpApiObjectResp() *SLBgpApiObjectResp {
	if x, ok := x.GetEntry().(*SLBgpApiMsgRsp_BgpApiObjectResp); ok {
		return x.BgpApiObjectResp
	}
	return nil
}

type isSLBgpApiMsgRsp_Entry interface {
	isSLBgpApiMsgRsp_Entry()
}

type SLBgpApiMsgRsp_BgpApiCapResp struct {
	// Capability Response to BgpApiCapReq
	BgpApiCapResp *SLBgpApiCapResp `protobuf:"bytes,3,opt,name=BgpApiCapResp,proto3,oneof"`
}

type SLBgpApiMsgRsp_BgpApiGetResp struct {
	// Get and Get next Response
	BgpApiGetResp *SLBgpApiGetResp `protobuf:"bytes,4,opt,name=BgpApiGetResp,proto3,oneof"`
}

type SLBgpApiMsgRsp_BgpApiObjectResp struct {
	// BGP Objects Response
	BgpApiObjectResp *SLBgpApiObjectResp `protobuf:"bytes,5,opt,name=BgpApiObjectResp,proto3,oneof"`
}

func (*SLBgpApiMsgRsp_BgpApiCapResp) isSLBgpApiMsgRsp_Entry() {}

func (*SLBgpApiMsgRsp_BgpApiGetResp) isSLBgpApiMsgRsp_Entry() {}

func (*SLBgpApiMsgRsp_BgpApiObjectResp) isSLBgpApiMsgRsp_Entry() {}

// Message requested by client
type SLBgpApiMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Correlator. This can be used to correlate replies with requests.
	// The Server simply reflects this field back in the reply.
	Correlator uint64 `protobuf:"varint,1,opt,name=Correlator,proto3" json:"Correlator,omitempty"`
	// Types that are assignable to Entry:
	//
	//	*SLBgpApiMsg_BgpApiCapReq
	//	*SLBgpApiMsg_BgpApiGetReq
	//	*SLBgpApiMsg_BgpApiobjectReq
	Entry isSLBgpApiMsg_Entry `protobuf_oneof:"entry"`
}

func (x *SLBgpApiMsg) Reset() {
	*x = SLBgpApiMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgpApiMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgpApiMsg) ProtoMessage() {}

func (x *SLBgpApiMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgpApiMsg.ProtoReflect.Descriptor instead.
func (*SLBgpApiMsg) Descriptor() ([]byte, []int) {
	return file_sl_bgp_proto_rawDescGZIP(), []int{17}
}

func (x *SLBgpApiMsg) GetCorrelator() uint64 {
	if x != nil {
		return x.Correlator
	}
	return 0
}

func (m *SLBgpApiMsg) GetEntry() isSLBgpApiMsg_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *SLBgpApiMsg) GetBgpApiCapReq() *SLBgpApiCapReq {
	if x, ok := x.GetEntry().(*SLBgpApiMsg_BgpApiCapReq); ok {
		return x.BgpApiCapReq
	}
	return nil
}

func (x *SLBgpApiMsg) GetBgpApiGetReq() *SLBgpApiGetReq {
	if x, ok := x.GetEntry().(*SLBgpApiMsg_BgpApiGetReq); ok {
		return x.BgpApiGetReq
	}
	return nil
}

func (x *SLBgpApiMsg) GetBgpApiobjectReq() *SLBgpApiObjectReq {
	if x, ok := x.GetEntry().(*SLBgpApiMsg_BgpApiobjectReq); ok {
		return x.BgpApiobjectReq
	}
	return nil
}

type isSLBgpApiMsg_Entry interface {
	isSLBgpApiMsg_Entry()
}

type SLBgpApiMsg_BgpApiCapReq struct {
	// Request BGP API capabilities
	BgpApiCapReq *SLBgpApiCapReq `protobuf:"bytes,2,opt,name=BgpApiCapReq,proto3,oneof"`
}

type SLBgpApiMsg_BgpApiGetReq struct {
	// Get and GetNext request to or from requested key
	BgpApiGetReq *SLBgpApiGetReq `protobuf:"bytes,3,opt,name=BgpApiGetReq,proto3,oneof"`
}

type SLBgpApiMsg_BgpApiobjectReq struct {
	// Request to UPDATE or DELETE parameters (example LinkBw) under BGP objects (example Neighbors)
	BgpApiobjectReq *SLBgpApiObjectReq `protobuf:"bytes,4,opt,name=BgpApiobjectReq,proto3,oneof"`
}

func (*SLBgpApiMsg_BgpApiCapReq) isSLBgpApiMsg_Entry() {}

func (*SLBgpApiMsg_BgpApiGetReq) isSLBgpApiMsg_Entry() {}

func (*SLBgpApiMsg_BgpApiobjectReq) isSLBgpApiMsg_Entry() {}

var File_sl_bgp_proto protoreflect.FileDescriptor

var file_sl_bgp_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x6c, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x1a, 0x15, 0x73,
	0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x01, 0x0a, 0x0e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41, 0x70,
	0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x0c, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x12, 0x29, 0x0a, 0x03, 0x41, 0x66, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41, 0x66, 0x69, 0x52, 0x03, 0x41,
	0x66, 0x69, 0x12, 0x2c, 0x0a, 0x04, 0x53, 0x61, 0x66, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x53, 0x61, 0x66, 0x69, 0x52, 0x04, 0x53, 0x61, 0x66, 0x69,
	0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x46, 0x72, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x30, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x04, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x41, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41,
	0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22,
	0xc0, 0x01, 0x0a, 0x09, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x42, 0x77, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x42, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x42, 0x77, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x77, 0x12, 0x32, 0x0a, 0x06, 0x42, 0x77, 0x55,
	0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x42,
	0x77, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x06, 0x42, 0x77, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x41, 0x73, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x41, 0x73, 0x6e, 0x12,
	0x41, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x16, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x53, 0x61, 0x66, 0x69, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x34, 0x0a,
	0x08, 0x4f, 0x75, 0x74, 0x42, 0x77, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x42, 0x67, 0x70, 0x42, 0x77, 0x49, 0x64, 0x52, 0x08, 0x4f, 0x75, 0x74, 0x42, 0x77,
	0x49, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x49, 0x6e, 0x42, 0x77, 0x49, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x42, 0x77, 0x49, 0x64, 0x52, 0x07,
	0x49, 0x6e, 0x42, 0x77, 0x49, 0x64, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x4c, 0x69,
	0x6e, 0x6b, 0x4d, 0x70, 0x61, 0x74, 0x68, 0x42, 0x6b, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x46, 0x72, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10,
	0x50, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x70, 0x61, 0x74, 0x68, 0x42, 0x6b, 0x75, 0x70,
	0x22, 0xe0, 0x01, 0x0a, 0x14, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x53, 0x61, 0x66, 0x69, 0x4d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x07, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x52, 0x07, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x12, 0x41, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x53, 0x61, 0x66, 0x69, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x53, 0x61, 0x66, 0x69, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52,
	0x09, 0x53, 0x61, 0x66, 0x69, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x22, 0x62, 0x0a, 0x15, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x53, 0x61, 0x66, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0d,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x61, 0x66, 0x69, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x53, 0x61, 0x66, 0x69, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x53, 0x61, 0x66, 0x69, 0x73, 0x22, 0x62, 0x0a, 0x10, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x56,
	0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x72,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x10,
	0x53, 0x4c, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x12, 0x41, 0x0a, 0x0b, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41,
	0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x53, 0x61, 0x66, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x61,
	0x66, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x53, 0x61, 0x66, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x22, 0x9b, 0x01, 0x0a, 0x0e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x41, 0x70, 0x69, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x08,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x22, 0xc8, 0x01, 0x0a, 0x12, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x67, 0x70, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x42, 0x67, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41,
	0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x0d, 0x42, 0x67, 0x70, 0x41, 0x70,
	0x69, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x42,
	0x67, 0x70, 0x41, 0x70, 0x69, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0xd9, 0x01, 0x0a,
	0x11, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4f, 0x70, 0x52, 0x04, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x67, 0x70,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x42, 0x67, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x41, 0x70, 0x69, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x42, 0x67, 0x70, 0x41, 0x70,
	0x69, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x0f, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x41, 0x70, 0x69, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x0f,
	0x42, 0x67, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x67, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6f, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x45, 0x6f, 0x66, 0x12, 0x3a, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0d, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x41, 0x70, 0x69, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x42, 0x67, 0x70, 0x41,
	0x70, 0x69, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x83, 0x02, 0x0a, 0x0e, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x0f,
	0x42, 0x67, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x67, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x41, 0x70, 0x69, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x08,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22,
	0x11, 0x0a, 0x0f, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x43, 0x61, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x45, 0x0a, 0x0e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x43, 0x61,
	0x70, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x0f, 0x42, 0x67, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0f, 0x42, 0x67, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xd6, 0x02, 0x0a, 0x0e, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x45,
	0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x42, 0x67, 0x70, 0x41,
	0x70, 0x69, 0x43, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x43, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x48,
	0x00, 0x52, 0x0d, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x43, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x46, 0x0a, 0x0d, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x42, 0x67, 0x70, 0x41, 0x70,
	0x69, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x10, 0x42, 0x67, 0x70, 0x41,
	0x70, 0x69, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x10, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x22, 0x8e, 0x02, 0x0a, 0x0b, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x4d,
	0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0c, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x43, 0x61, 0x70, 0x52,
	0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41, 0x70,
	0x69, 0x43, 0x61, 0x70, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0c, 0x42, 0x67, 0x70, 0x41, 0x70,
	0x69, 0x43, 0x61, 0x70, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x0c, 0x42, 0x67, 0x70, 0x41, 0x70,
	0x69, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0c,
	0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x4c, 0x0a, 0x0f,
	0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0f, 0x42, 0x67, 0x70, 0x41, 0x70,
	0x69, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2a, 0x5f, 0x0a, 0x0b, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x42, 0x77, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x5f, 0x50, 0x45, 0x52,
	0x5f, 0x53, 0x45, 0x43, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50,
	0x5f, 0x47, 0x49, 0x47, 0x41, 0x5f, 0x42, 0x49, 0x54, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x53,
	0x45, 0x43, 0x10, 0x02, 0x2a, 0x4d, 0x0a, 0x08, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41, 0x66, 0x69,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x46, 0x49, 0x5f, 0x52,
	0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4c, 0x5f,
	0x42, 0x47, 0x50, 0x5f, 0x41, 0x46, 0x49, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x46, 0x49, 0x5f, 0x49, 0x50, 0x56,
	0x36, 0x10, 0x02, 0x2a, 0x3e, 0x0a, 0x09, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x53, 0x61, 0x66, 0x69,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x53, 0x41, 0x46, 0x49, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4c,
	0x5f, 0x42, 0x47, 0x50, 0x5f, 0x53, 0x41, 0x46, 0x49, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53,
	0x54, 0x10, 0x01, 0x2a, 0x5e, 0x0a, 0x12, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4c, 0x5f,
	0x42, 0x47, 0x50, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44,
	0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x23,
	0x0a, 0x1f, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x4e, 0x45, 0x49,
	0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x01, 0x2a, 0x56, 0x0a, 0x10, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4c, 0x5f, 0x42, 0x47,
	0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x5f,
	0x4f, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x2a, 0x65, 0x0a, 0x11, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x46,
	0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x46, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x41,
	0x50, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x02, 0x32, 0x54, 0x0a, 0x08, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x12, 0x48,
	0x0a, 0x07, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x4f, 0x70, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41,
	0x70, 0x69, 0x4d, 0x73, 0x67, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x41, 0x70, 0x69, 0x4d, 0x73,
	0x67, 0x52, 0x73, 0x70, 0x28, 0x01, 0x30, 0x01, 0x42, 0x51, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x69, 0x73, 0x63, 0x6f, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x6f, 0x62, 0x6a, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x3b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_sl_bgp_proto_rawDescOnce sync.Once
	file_sl_bgp_proto_rawDescData = file_sl_bgp_proto_rawDesc
)

func file_sl_bgp_proto_rawDescGZIP() []byte {
	file_sl_bgp_proto_rawDescOnce.Do(func() {
		file_sl_bgp_proto_rawDescData = protoimpl.X.CompressGZIP(file_sl_bgp_proto_rawDescData)
	})
	return file_sl_bgp_proto_rawDescData
}

var file_sl_bgp_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_sl_bgp_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_sl_bgp_proto_goTypes = []interface{}{
	(SLBgpBwUnit)(0),               // 0: service_layer.SLBgpBwUnit
	(SLBgpAfi)(0),                  // 1: service_layer.SLBgpAfi
	(SLBgpSafi)(0),                 // 2: service_layer.SLBgpSafi
	(SLBgpApiObjectType)(0),        // 3: service_layer.SLBgpApiObjectType
	(SLBgpApiObjectOp)(0),          // 4: service_layer.SLBgpApiObjectOp
	(SLBgpApiStateType)(0),         // 5: service_layer.SLBgpApiStateType
	(*SLBgpApiStatus)(nil),         // 6: service_layer.SLBgpApiStatus
	(*SLBgpAfiSafi)(nil),           // 7: service_layer.SLBgpAfiSafi
	(*SLBgpFrrInfo)(nil),           // 8: service_layer.SLBgpFrrInfo
	(*SLBgpBwId)(nil),              // 9: service_layer.SLBgpBwId
	(*SLBgpNeighborSafiParam)(nil), // 10: service_layer.SLBgpNeighborSafiParam
	(*SLBgpNeighborSafiMsg)(nil),   // 11: service_layer.SLBgpNeighborSafiMsg
	(*SLBgpNeighborSafiList)(nil),  // 12: service_layer.SLBgpNeighborSafiList
	(*SLBgpNeighborKey)(nil),       // 13: service_layer.SLBgpNeighborKey
	(*SLBgpNeighborMsg)(nil),       // 14: service_layer.SLBgpNeighborMsg
	(*SLBgpApiObject)(nil),         // 15: service_layer.SLBgpApiObject
	(*SLBgpApiObjectResp)(nil),     // 16: service_layer.SLBgpApiObjectResp
	(*SLBgpApiObjectReq)(nil),      // 17: service_layer.SLBgpApiObjectReq
	(*SLBgpApiGetResp)(nil),        // 18: service_layer.SLBgpApiGetResp
	(*SLBgpApiGetReq)(nil),         // 19: service_layer.SLBgpApiGetReq
	(*SLBgpApiCapResp)(nil),        // 20: service_layer.SLBgpApiCapResp
	(*SLBgpApiCapReq)(nil),         // 21: service_layer.SLBgpApiCapReq
	(*SLBgpApiMsgRsp)(nil),         // 22: service_layer.SLBgpApiMsgRsp
	(*SLBgpApiMsg)(nil),            // 23: service_layer.SLBgpApiMsg
	(*SLErrorStatus)(nil),          // 24: service_layer.SLErrorStatus
	(*SLIpAddress)(nil),            // 25: service_layer.SLIpAddress
}
var file_sl_bgp_proto_depIdxs = []int32{
	24, // 0: service_layer.SLBgpApiStatus.Status:type_name -> service_layer.SLErrorStatus
	5,  // 1: service_layer.SLBgpApiStatus.State:type_name -> service_layer.SLBgpApiStateType
	1,  // 2: service_layer.SLBgpAfiSafi.Afi:type_name -> service_layer.SLBgpAfi
	2,  // 3: service_layer.SLBgpAfiSafi.Safi:type_name -> service_layer.SLBgpSafi
	25, // 4: service_layer.SLBgpFrrInfo.Addr:type_name -> service_layer.SLIpAddress
	6,  // 5: service_layer.SLBgpFrrInfo.ObjectStatus:type_name -> service_layer.SLBgpApiStatus
	0,  // 6: service_layer.SLBgpBwId.BwUnit:type_name -> service_layer.SLBgpBwUnit
	6,  // 7: service_layer.SLBgpBwId.ObjectStatus:type_name -> service_layer.SLBgpApiStatus
	9,  // 8: service_layer.SLBgpNeighborSafiParam.OutBwIds:type_name -> service_layer.SLBgpBwId
	9,  // 9: service_layer.SLBgpNeighborSafiParam.InBwIds:type_name -> service_layer.SLBgpBwId
	8,  // 10: service_layer.SLBgpNeighborSafiParam.PerLinkMpathBkup:type_name -> service_layer.SLBgpFrrInfo
	7,  // 11: service_layer.SLBgpNeighborSafiMsg.AfiSafi:type_name -> service_layer.SLBgpAfiSafi
	6,  // 12: service_layer.SLBgpNeighborSafiMsg.ObjectStatus:type_name -> service_layer.SLBgpApiStatus
	10, // 13: service_layer.SLBgpNeighborSafiMsg.SafiParam:type_name -> service_layer.SLBgpNeighborSafiParam
	11, // 14: service_layer.SLBgpNeighborSafiList.NeighborSafis:type_name -> service_layer.SLBgpNeighborSafiMsg
	25, // 15: service_layer.SLBgpNeighborKey.Address:type_name -> service_layer.SLIpAddress
	13, // 16: service_layer.SLBgpNeighborMsg.NeighborKey:type_name -> service_layer.SLBgpNeighborKey
	6,  // 17: service_layer.SLBgpNeighborMsg.ObjectStatus:type_name -> service_layer.SLBgpApiStatus
	12, // 18: service_layer.SLBgpNeighborMsg.NeighborSafiList:type_name -> service_layer.SLBgpNeighborSafiList
	3,  // 19: service_layer.SLBgpApiObject.ObjectType:type_name -> service_layer.SLBgpApiObjectType
	14, // 20: service_layer.SLBgpApiObject.Neighbor:type_name -> service_layer.SLBgpNeighborMsg
	6,  // 21: service_layer.SLBgpApiObjectResp.StatusSummary:type_name -> service_layer.SLBgpApiStatus
	15, // 22: service_layer.SLBgpApiObjectResp.BgpApiobjects:type_name -> service_layer.SLBgpApiObject
	4,  // 23: service_layer.SLBgpApiObjectReq.Oper:type_name -> service_layer.SLBgpApiObjectOp
	15, // 24: service_layer.SLBgpApiObjectReq.BgpApiobjects:type_name -> service_layer.SLBgpApiObject
	24, // 25: service_layer.SLBgpApiGetResp.ErrStatus:type_name -> service_layer.SLErrorStatus
	15, // 26: service_layer.SLBgpApiGetResp.BgpApiobjects:type_name -> service_layer.SLBgpApiObject
	3,  // 27: service_layer.SLBgpApiGetReq.ObjectType:type_name -> service_layer.SLBgpApiObjectType
	13, // 28: service_layer.SLBgpApiGetReq.Neighbor:type_name -> service_layer.SLBgpNeighborKey
	24, // 29: service_layer.SLBgpApiMsgRsp.ErrStatus:type_name -> service_layer.SLErrorStatus
	20, // 30: service_layer.SLBgpApiMsgRsp.BgpApiCapResp:type_name -> service_layer.SLBgpApiCapResp
	18, // 31: service_layer.SLBgpApiMsgRsp.BgpApiGetResp:type_name -> service_layer.SLBgpApiGetResp
	16, // 32: service_layer.SLBgpApiMsgRsp.BgpApiObjectResp:type_name -> service_layer.SLBgpApiObjectResp
	21, // 33: service_layer.SLBgpApiMsg.BgpApiCapReq:type_name -> service_layer.SLBgpApiCapReq
	19, // 34: service_layer.SLBgpApiMsg.BgpApiGetReq:type_name -> service_layer.SLBgpApiGetReq
	17, // 35: service_layer.SLBgpApiMsg.BgpApiobjectReq:type_name -> service_layer.SLBgpApiObjectReq
	23, // 36: service_layer.SLBgpApi.SLBgpOp:input_type -> service_layer.SLBgpApiMsg
	22, // 37: service_layer.SLBgpApi.SLBgpOp:output_type -> service_layer.SLBgpApiMsgRsp
	37, // [37:38] is the sub-list for method output_type
	36, // [36:37] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_sl_bgp_proto_init() }
func file_sl_bgp_proto_init() {
	if File_sl_bgp_proto != nil {
		return
	}
	file_sl_common_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sl_bgp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgpApiStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgpAfiSafi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgpFrrInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgpBwId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgpNeighborSafiParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgpNeighborSafiMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgpNeighborSafiList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgpNeighborKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgpNeighborMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgpApiObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgpApiObjectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgpApiObjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgpApiGetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgpApiGetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgpApiCapResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgpApiCapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgpApiMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgpApiMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sl_bgp_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SLBgpFrrInfo_Addr)(nil),
	}
	file_sl_bgp_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*SLBgpNeighborSafiMsg_SafiParam)(nil),
	}
	file_sl_bgp_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*SLBgpNeighborMsg_NeighborSafiList)(nil),
	}
	file_sl_bgp_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*SLBgpApiObject_Neighbor)(nil),
	}
	file_sl_bgp_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*SLBgpApiGetReq_Neighbor)(nil),
	}
	file_sl_bgp_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*SLBgpApiCapReq_BgpInstanceName)(nil),
	}
	file_sl_bgp_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*SLBgpApiMsgRsp_BgpApiCapResp)(nil),
		(*SLBgpApiMsgRsp_BgpApiGetResp)(nil),
		(*SLBgpApiMsgRsp_BgpApiObjectResp)(nil),
	}
	file_sl_bgp_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*SLBgpApiMsg_BgpApiCapReq)(nil),
		(*SLBgpApiMsg_BgpApiGetReq)(nil),
		(*SLBgpApiMsg_BgpApiobjectReq)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sl_bgp_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sl_bgp_proto_goTypes,
		DependencyIndexes: file_sl_bgp_proto_depIdxs,
		EnumInfos:         file_sl_bgp_proto_enumTypes,
		MessageInfos:      file_sl_bgp_proto_msgTypes,
	}.Build()
	File_sl_bgp_proto = out.File
	file_sl_bgp_proto_rawDesc = nil
	file_sl_bgp_proto_goTypes = nil
	file_sl_bgp_proto_depIdxs = nil
}
