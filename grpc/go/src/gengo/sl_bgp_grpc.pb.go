// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.3
// source: sl_bgp.proto

package service_layer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SLBgpApiClient is the client API for SLBgpApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SLBgpApiClient interface {
	// RPC supports
	// 1. BGP API capability
	// 2. BGP object (eg. neighbor) parameters (eg. Link Bandwidth) setting.
	// 3. Get and GetNext to retrieve objects programmed on the device by client
	SLBgpOp(ctx context.Context, opts ...grpc.CallOption) (SLBgpApi_SLBgpOpClient, error)
}

type sLBgpApiClient struct {
	cc grpc.ClientConnInterface
}

func NewSLBgpApiClient(cc grpc.ClientConnInterface) SLBgpApiClient {
	return &sLBgpApiClient{cc}
}

func (c *sLBgpApiClient) SLBgpOp(ctx context.Context, opts ...grpc.CallOption) (SLBgpApi_SLBgpOpClient, error) {
	stream, err := c.cc.NewStream(ctx, &SLBgpApi_ServiceDesc.Streams[0], "/service_layer.SLBgpApi/SLBgpOp", opts...)
	if err != nil {
		return nil, err
	}
	x := &sLBgpApiSLBgpOpClient{stream}
	return x, nil
}

type SLBgpApi_SLBgpOpClient interface {
	Send(*SLBgpApiMsg) error
	Recv() (*SLBgpApiMsgRsp, error)
	grpc.ClientStream
}

type sLBgpApiSLBgpOpClient struct {
	grpc.ClientStream
}

func (x *sLBgpApiSLBgpOpClient) Send(m *SLBgpApiMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sLBgpApiSLBgpOpClient) Recv() (*SLBgpApiMsgRsp, error) {
	m := new(SLBgpApiMsgRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SLBgpApiServer is the server API for SLBgpApi service.
// All implementations must embed UnimplementedSLBgpApiServer
// for forward compatibility
type SLBgpApiServer interface {
	// RPC supports
	// 1. BGP API capability
	// 2. BGP object (eg. neighbor) parameters (eg. Link Bandwidth) setting.
	// 3. Get and GetNext to retrieve objects programmed on the device by client
	SLBgpOp(SLBgpApi_SLBgpOpServer) error
	mustEmbedUnimplementedSLBgpApiServer()
}

// UnimplementedSLBgpApiServer must be embedded to have forward compatible implementations.
type UnimplementedSLBgpApiServer struct {
}

func (UnimplementedSLBgpApiServer) SLBgpOp(SLBgpApi_SLBgpOpServer) error {
	return status.Errorf(codes.Unimplemented, "method SLBgpOp not implemented")
}
func (UnimplementedSLBgpApiServer) mustEmbedUnimplementedSLBgpApiServer() {}

// UnsafeSLBgpApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SLBgpApiServer will
// result in compilation errors.
type UnsafeSLBgpApiServer interface {
	mustEmbedUnimplementedSLBgpApiServer()
}

func RegisterSLBgpApiServer(s grpc.ServiceRegistrar, srv SLBgpApiServer) {
	s.RegisterService(&SLBgpApi_ServiceDesc, srv)
}

func _SLBgpApi_SLBgpOp_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SLBgpApiServer).SLBgpOp(&sLBgpApiSLBgpOpServer{stream})
}

type SLBgpApi_SLBgpOpServer interface {
	Send(*SLBgpApiMsgRsp) error
	Recv() (*SLBgpApiMsg, error)
	grpc.ServerStream
}

type sLBgpApiSLBgpOpServer struct {
	grpc.ServerStream
}

func (x *sLBgpApiSLBgpOpServer) Send(m *SLBgpApiMsgRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sLBgpApiSLBgpOpServer) Recv() (*SLBgpApiMsg, error) {
	m := new(SLBgpApiMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SLBgpApi_ServiceDesc is the grpc.ServiceDesc for SLBgpApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SLBgpApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service_layer.SLBgpApi",
	HandlerType: (*SLBgpApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SLBgpOp",
			Handler:       _SLBgpApi_SLBgpOp_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sl_bgp.proto",
}
