// @file
// @brief RPC proto file for BGP-LS Topology Subscription Service.
//
// The RPCs and messages defined here are experimental and subject to
// change without notice and such changes can break backwards compatibility.
//
// ----------------------------------------------------------------
//  Copyright (c) 2024 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//

//@defgroup BGP-LS Topology Service
//@brief BGP-LS Topology Service definitions.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.3
// source: sl_bgpls_topology.proto

package service_layer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BGP-LS Topology Operation
type SLBgplsTopoOperation int32

const (
	SLBgplsTopoOperation_SL_BGPLS_TOPO_OPERATION_RESERVED SLBgplsTopoOperation = 0
	SLBgplsTopoOperation_SL_BGPLS_TOPO_OPERATION_UPDATE   SLBgplsTopoOperation = 1
	SLBgplsTopoOperation_SL_BGPLS_TOPO_OPERATION_DELETE   SLBgplsTopoOperation = 2
)

// Enum value maps for SLBgplsTopoOperation.
var (
	SLBgplsTopoOperation_name = map[int32]string{
		0: "SL_BGPLS_TOPO_OPERATION_RESERVED",
		1: "SL_BGPLS_TOPO_OPERATION_UPDATE",
		2: "SL_BGPLS_TOPO_OPERATION_DELETE",
	}
	SLBgplsTopoOperation_value = map[string]int32{
		"SL_BGPLS_TOPO_OPERATION_RESERVED": 0,
		"SL_BGPLS_TOPO_OPERATION_UPDATE":   1,
		"SL_BGPLS_TOPO_OPERATION_DELETE":   2,
	}
)

func (x SLBgplsTopoOperation) Enum() *SLBgplsTopoOperation {
	p := new(SLBgplsTopoOperation)
	*p = x
	return p
}

func (x SLBgplsTopoOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgpls_topology_proto_enumTypes[0].Descriptor()
}

func (SLBgplsTopoOperation) Type() protoreflect.EnumType {
	return &file_sl_bgpls_topology_proto_enumTypes[0]
}

func (x SLBgplsTopoOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoOperation.Descriptor instead.
func (SLBgplsTopoOperation) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{0}
}

// NLRI type
type SLBgplsTopoNlriType int32

const (
	SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_RESERVED                 SLBgplsTopoNlriType = 0
	SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_NODE                     SLBgplsTopoNlriType = 1
	SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_LINK                     SLBgplsTopoNlriType = 2
	SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_IPV4_PREFIX              SLBgplsTopoNlriType = 3
	SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_IPV6_PREFIX              SLBgplsTopoNlriType = 4
	SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_SR_POLICY_CANDIDATE_PATH SLBgplsTopoNlriType = 5
	SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_SRV6_SID                 SLBgplsTopoNlriType = 6
)

// Enum value maps for SLBgplsTopoNlriType.
var (
	SLBgplsTopoNlriType_name = map[int32]string{
		0: "SL_BGPLS_TOPO_NLRI_TYPE_RESERVED",
		1: "SL_BGPLS_TOPO_NLRI_TYPE_NODE",
		2: "SL_BGPLS_TOPO_NLRI_TYPE_LINK",
		3: "SL_BGPLS_TOPO_NLRI_TYPE_IPV4_PREFIX",
		4: "SL_BGPLS_TOPO_NLRI_TYPE_IPV6_PREFIX",
		5: "SL_BGPLS_TOPO_NLRI_TYPE_SR_POLICY_CANDIDATE_PATH",
		6: "SL_BGPLS_TOPO_NLRI_TYPE_SRV6_SID",
	}
	SLBgplsTopoNlriType_value = map[string]int32{
		"SL_BGPLS_TOPO_NLRI_TYPE_RESERVED":                 0,
		"SL_BGPLS_TOPO_NLRI_TYPE_NODE":                     1,
		"SL_BGPLS_TOPO_NLRI_TYPE_LINK":                     2,
		"SL_BGPLS_TOPO_NLRI_TYPE_IPV4_PREFIX":              3,
		"SL_BGPLS_TOPO_NLRI_TYPE_IPV6_PREFIX":              4,
		"SL_BGPLS_TOPO_NLRI_TYPE_SR_POLICY_CANDIDATE_PATH": 5,
		"SL_BGPLS_TOPO_NLRI_TYPE_SRV6_SID":                 6,
	}
)

func (x SLBgplsTopoNlriType) Enum() *SLBgplsTopoNlriType {
	p := new(SLBgplsTopoNlriType)
	*p = x
	return p
}

func (x SLBgplsTopoNlriType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoNlriType) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgpls_topology_proto_enumTypes[1].Descriptor()
}

func (SLBgplsTopoNlriType) Type() protoreflect.EnumType {
	return &file_sl_bgpls_topology_proto_enumTypes[1]
}

func (x SLBgplsTopoNlriType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoNlriType.Descriptor instead.
func (SLBgplsTopoNlriType) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{1}
}

// Protocols
type SLBgplsTopoProtocol int32

const (
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_RESERVED SLBgplsTopoProtocol = 0
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_ISIS_L1  SLBgplsTopoProtocol = 1
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_ISIS_L2  SLBgplsTopoProtocol = 2
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_OSPFv2   SLBgplsTopoProtocol = 3
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_DIRECT   SLBgplsTopoProtocol = 4
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_STATIC   SLBgplsTopoProtocol = 5
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_OSPFv3   SLBgplsTopoProtocol = 6
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_BGP      SLBgplsTopoProtocol = 7
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_RSVP_TE  SLBgplsTopoProtocol = 8
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_SR       SLBgplsTopoProtocol = 9
)

// Enum value maps for SLBgplsTopoProtocol.
var (
	SLBgplsTopoProtocol_name = map[int32]string{
		0: "SL_BGPLS_TOPO_PROTOCOL_RESERVED",
		1: "SL_BGPLS_TOPO_PROTOCOL_ISIS_L1",
		2: "SL_BGPLS_TOPO_PROTOCOL_ISIS_L2",
		3: "SL_BGPLS_TOPO_PROTOCOL_OSPFv2",
		4: "SL_BGPLS_TOPO_PROTOCOL_DIRECT",
		5: "SL_BGPLS_TOPO_PROTOCOL_STATIC",
		6: "SL_BGPLS_TOPO_PROTOCOL_OSPFv3",
		7: "SL_BGPLS_TOPO_PROTOCOL_BGP",
		8: "SL_BGPLS_TOPO_PROTOCOL_RSVP_TE",
		9: "SL_BGPLS_TOPO_PROTOCOL_SR",
	}
	SLBgplsTopoProtocol_value = map[string]int32{
		"SL_BGPLS_TOPO_PROTOCOL_RESERVED": 0,
		"SL_BGPLS_TOPO_PROTOCOL_ISIS_L1":  1,
		"SL_BGPLS_TOPO_PROTOCOL_ISIS_L2":  2,
		"SL_BGPLS_TOPO_PROTOCOL_OSPFv2":   3,
		"SL_BGPLS_TOPO_PROTOCOL_DIRECT":   4,
		"SL_BGPLS_TOPO_PROTOCOL_STATIC":   5,
		"SL_BGPLS_TOPO_PROTOCOL_OSPFv3":   6,
		"SL_BGPLS_TOPO_PROTOCOL_BGP":      7,
		"SL_BGPLS_TOPO_PROTOCOL_RSVP_TE":  8,
		"SL_BGPLS_TOPO_PROTOCOL_SR":       9,
	}
)

func (x SLBgplsTopoProtocol) Enum() *SLBgplsTopoProtocol {
	p := new(SLBgplsTopoProtocol)
	*p = x
	return p
}

func (x SLBgplsTopoProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgpls_topology_proto_enumTypes[2].Descriptor()
}

func (SLBgplsTopoProtocol) Type() protoreflect.EnumType {
	return &file_sl_bgpls_topology_proto_enumTypes[2]
}

func (x SLBgplsTopoProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoProtocol.Descriptor instead.
func (SLBgplsTopoProtocol) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{2}
}

// OSPF Route types
type SLBgplsTopoOspfRouteType int32

const (
	SLBgplsTopoOspfRouteType_SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_RESERVED   SLBgplsTopoOspfRouteType = 0
	SLBgplsTopoOspfRouteType_SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_INTRA_AREA SLBgplsTopoOspfRouteType = 1
	SLBgplsTopoOspfRouteType_SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_INTER_AREA SLBgplsTopoOspfRouteType = 2
	SLBgplsTopoOspfRouteType_SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXTERN_1   SLBgplsTopoOspfRouteType = 3
	SLBgplsTopoOspfRouteType_SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXTERN_2   SLBgplsTopoOspfRouteType = 4
	SLBgplsTopoOspfRouteType_SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_NSSA_1     SLBgplsTopoOspfRouteType = 5
	SLBgplsTopoOspfRouteType_SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_NSSA_2     SLBgplsTopoOspfRouteType = 6
)

// Enum value maps for SLBgplsTopoOspfRouteType.
var (
	SLBgplsTopoOspfRouteType_name = map[int32]string{
		0: "SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_RESERVED",
		1: "SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_INTRA_AREA",
		2: "SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_INTER_AREA",
		3: "SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXTERN_1",
		4: "SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXTERN_2",
		5: "SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_NSSA_1",
		6: "SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_NSSA_2",
	}
	SLBgplsTopoOspfRouteType_value = map[string]int32{
		"SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_RESERVED":   0,
		"SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_INTRA_AREA": 1,
		"SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_INTER_AREA": 2,
		"SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXTERN_1":   3,
		"SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXTERN_2":   4,
		"SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_NSSA_1":     5,
		"SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_NSSA_2":     6,
	}
)

func (x SLBgplsTopoOspfRouteType) Enum() *SLBgplsTopoOspfRouteType {
	p := new(SLBgplsTopoOspfRouteType)
	*p = x
	return p
}

func (x SLBgplsTopoOspfRouteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoOspfRouteType) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgpls_topology_proto_enumTypes[3].Descriptor()
}

func (SLBgplsTopoOspfRouteType) Type() protoreflect.EnumType {
	return &file_sl_bgpls_topology_proto_enumTypes[3]
}

func (x SLBgplsTopoOspfRouteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoOspfRouteType.Descriptor instead.
func (SLBgplsTopoOspfRouteType) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{3}
}

// BGP-LS Topology SID Formats
type SLBgplsTopoSidFormat int32

const (
	// Reserved SID Type
	SLBgplsTopoSidFormat_SL_BGPLS_TOPO_SID_FORMAT_RESERVED SLBgplsTopoSidFormat = 0
	// SID Type Label
	SLBgplsTopoSidFormat_SL_BGPLS_TOPO_SID_FORMAT_LABEL SLBgplsTopoSidFormat = 1
	// SID Type Index
	SLBgplsTopoSidFormat_SL_BGPLS_TOPO_SID_FORMAT_INDEX SLBgplsTopoSidFormat = 2
	// SID Type V6 Addr
	SLBgplsTopoSidFormat_SL_BGPLS_TOPO_SID_FORMAT_V6_ADDR SLBgplsTopoSidFormat = 3
)

// Enum value maps for SLBgplsTopoSidFormat.
var (
	SLBgplsTopoSidFormat_name = map[int32]string{
		0: "SL_BGPLS_TOPO_SID_FORMAT_RESERVED",
		1: "SL_BGPLS_TOPO_SID_FORMAT_LABEL",
		2: "SL_BGPLS_TOPO_SID_FORMAT_INDEX",
		3: "SL_BGPLS_TOPO_SID_FORMAT_V6_ADDR",
	}
	SLBgplsTopoSidFormat_value = map[string]int32{
		"SL_BGPLS_TOPO_SID_FORMAT_RESERVED": 0,
		"SL_BGPLS_TOPO_SID_FORMAT_LABEL":    1,
		"SL_BGPLS_TOPO_SID_FORMAT_INDEX":    2,
		"SL_BGPLS_TOPO_SID_FORMAT_V6_ADDR":  3,
	}
)

func (x SLBgplsTopoSidFormat) Enum() *SLBgplsTopoSidFormat {
	p := new(SLBgplsTopoSidFormat)
	*p = x
	return p
}

func (x SLBgplsTopoSidFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoSidFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgpls_topology_proto_enumTypes[4].Descriptor()
}

func (SLBgplsTopoSidFormat) Type() protoreflect.EnumType {
	return &file_sl_bgpls_topology_proto_enumTypes[4]
}

func (x SLBgplsTopoSidFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoSidFormat.Descriptor instead.
func (SLBgplsTopoSidFormat) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{4}
}

// BGP-LS Topology Prefix SID Formats
type SLBgplsTopoPrefixSidFormat int32

const (
	// Reserved SID Type
	SLBgplsTopoPrefixSidFormat_SL_BGPLS_TOPO_PREFIX_SID_FORMAT_RESERVED SLBgplsTopoPrefixSidFormat = 0
	// Prefix SID Type Label
	SLBgplsTopoPrefixSidFormat_SL_BGPLS_TOPO_PREFIX_SID_FORMAT_LABEL SLBgplsTopoPrefixSidFormat = 1
	// Prefix SID Type Index
	SLBgplsTopoPrefixSidFormat_SL_BGPLS_TOPO_PREFIX_SID_FORMAT_INDEX SLBgplsTopoPrefixSidFormat = 2
)

// Enum value maps for SLBgplsTopoPrefixSidFormat.
var (
	SLBgplsTopoPrefixSidFormat_name = map[int32]string{
		0: "SL_BGPLS_TOPO_PREFIX_SID_FORMAT_RESERVED",
		1: "SL_BGPLS_TOPO_PREFIX_SID_FORMAT_LABEL",
		2: "SL_BGPLS_TOPO_PREFIX_SID_FORMAT_INDEX",
	}
	SLBgplsTopoPrefixSidFormat_value = map[string]int32{
		"SL_BGPLS_TOPO_PREFIX_SID_FORMAT_RESERVED": 0,
		"SL_BGPLS_TOPO_PREFIX_SID_FORMAT_LABEL":    1,
		"SL_BGPLS_TOPO_PREFIX_SID_FORMAT_INDEX":    2,
	}
)

func (x SLBgplsTopoPrefixSidFormat) Enum() *SLBgplsTopoPrefixSidFormat {
	p := new(SLBgplsTopoPrefixSidFormat)
	*p = x
	return p
}

func (x SLBgplsTopoPrefixSidFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoPrefixSidFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgpls_topology_proto_enumTypes[5].Descriptor()
}

func (SLBgplsTopoPrefixSidFormat) Type() protoreflect.EnumType {
	return &file_sl_bgpls_topology_proto_enumTypes[5]
}

func (x SLBgplsTopoPrefixSidFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoPrefixSidFormat.Descriptor instead.
func (SLBgplsTopoPrefixSidFormat) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{5}
}

type SLBgplsTopoSrBindingSidFlags int32

const (
	// Reserved.
	SLBgplsTopoSrBindingSidFlags_SL_BGPLS_TOPO_SR_BSID_FLAG_RESERVED SLBgplsTopoSrBindingSidFlags = 0
	// Bit-0: D-Flag: Indicates the dataplane for the BSIDs and if they are
	// 16 octet SRv6 SID when set and are 4 octet SR/MPLS label value
	// when clear.
	SLBgplsTopoSrBindingSidFlags_SL_BGPLS_TOPO_SR_BSID_FLAG_DATAPLANE_V6 SLBgplsTopoSrBindingSidFlags = 32768
	// Bit-1: B-Flag: Indicates the allocation of the value in the BSID field
	// when set and indicates that BSID is not allocated when clear.
	SLBgplsTopoSrBindingSidFlags_SL_BGPLS_TOPO_SR_BSID_FLAG_ALLOCATED SLBgplsTopoSrBindingSidFlags = 16384
	// Bit-2: U-Flag: Indicates the specified BSID value is unavailable when set.
	SLBgplsTopoSrBindingSidFlags_SL_BGPLS_TOPO_SR_BSID_FLAG_UNAVAIL SLBgplsTopoSrBindingSidFlags = 8192
	// Bit-3: L-Flag: Indicates the BSID value is from the Segment Routing
	// Local Block (SRLB) of the headend node when set and is from the
	// local dynamic label pool when clear.
	SLBgplsTopoSrBindingSidFlags_SL_BGPLS_TOPO_SR_BSID_FLAG_SRLB SLBgplsTopoSrBindingSidFlags = 4096
	// Bit-4: F-Flag: Indicates the BSID value is one allocated from dynamic
	// label pool due to fallback (e.g. when specified BSID is
	// unavailable) when set.
	SLBgplsTopoSrBindingSidFlags_SL_BGPLS_TOPO_SR_BSID_FLAG_DYNAMIC SLBgplsTopoSrBindingSidFlags = 2048
)

// Enum value maps for SLBgplsTopoSrBindingSidFlags.
var (
	SLBgplsTopoSrBindingSidFlags_name = map[int32]string{
		0:     "SL_BGPLS_TOPO_SR_BSID_FLAG_RESERVED",
		32768: "SL_BGPLS_TOPO_SR_BSID_FLAG_DATAPLANE_V6",
		16384: "SL_BGPLS_TOPO_SR_BSID_FLAG_ALLOCATED",
		8192:  "SL_BGPLS_TOPO_SR_BSID_FLAG_UNAVAIL",
		4096:  "SL_BGPLS_TOPO_SR_BSID_FLAG_SRLB",
		2048:  "SL_BGPLS_TOPO_SR_BSID_FLAG_DYNAMIC",
	}
	SLBgplsTopoSrBindingSidFlags_value = map[string]int32{
		"SL_BGPLS_TOPO_SR_BSID_FLAG_RESERVED":     0,
		"SL_BGPLS_TOPO_SR_BSID_FLAG_DATAPLANE_V6": 32768,
		"SL_BGPLS_TOPO_SR_BSID_FLAG_ALLOCATED":    16384,
		"SL_BGPLS_TOPO_SR_BSID_FLAG_UNAVAIL":      8192,
		"SL_BGPLS_TOPO_SR_BSID_FLAG_SRLB":         4096,
		"SL_BGPLS_TOPO_SR_BSID_FLAG_DYNAMIC":      2048,
	}
)

func (x SLBgplsTopoSrBindingSidFlags) Enum() *SLBgplsTopoSrBindingSidFlags {
	p := new(SLBgplsTopoSrBindingSidFlags)
	*p = x
	return p
}

func (x SLBgplsTopoSrBindingSidFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoSrBindingSidFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgpls_topology_proto_enumTypes[6].Descriptor()
}

func (SLBgplsTopoSrBindingSidFlags) Type() protoreflect.EnumType {
	return &file_sl_bgpls_topology_proto_enumTypes[6]
}

func (x SLBgplsTopoSrBindingSidFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoSrBindingSidFlags.Descriptor instead.
func (SLBgplsTopoSrBindingSidFlags) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{6}
}

type SLBgplsTopoSrCpStateFlags int32

const (
	// Reserved.
	SLBgplsTopoSrCpStateFlags_SL_BGPLS_TOPO_SR_CP_STATE_FLAG_RESERVED SLBgplsTopoSrCpStateFlags = 0
	// Bit-0: S-Flag: Indicates the CP is in an administrative shut state when set.
	SLBgplsTopoSrCpStateFlags_SL_BGPLS_TOPO_SR_CP_STATE_FLAG_ADMIN_SHUT SLBgplsTopoSrCpStateFlags = 32768
	// Bit-1: A-Flag: Indicates the CP is the active path (i.e. one
	// provisioned in the forwarding plane) for the SR Policy when set.
	SLBgplsTopoSrCpStateFlags_SL_BGPLS_TOPO_SR_CP_STATE_FLAG_ACTIVE SLBgplsTopoSrCpStateFlags = 16384
	// Bit-2: B-Flag: Indicates the CP is the backup path (i.e. one
	// identified for path protection of the active path) for the SR
	// Policy when set.
	SLBgplsTopoSrCpStateFlags_SL_BGPLS_TOPO_SR_CP_STATE_FLAG_BACKUP SLBgplsTopoSrCpStateFlags = 8192
	// Bit-3: E-Flag: Indicates that the CP has been evaluated for validity
	// (e.g. headend may evaluate CPs based on their preferences) when set.
	SLBgplsTopoSrCpStateFlags_SL_BGPLS_TOPO_SR_CP_STATE_FLAG_EVALUATED SLBgplsTopoSrCpStateFlags = 4096
	// Bit-4: V-Flag: Indicates the CP has at least one valid SID-List when
	// set.  When the E-Flag is clear (i.e. the CP has not been
	// evaluated), then this flag MUST be set to 0 by the originator
	// and ignored by the receiver.
	SLBgplsTopoSrCpStateFlags_SL_BGPLS_TOPO_SR_CP_STATE_FLAG_VALID SLBgplsTopoSrCpStateFlags = 2048
	// Bit-5: O-Flag: Indicates the CP was instantiated by the headend due to
	// an on-demand nexthop trigger based on a local template when
	// set.  Refer to section 8.5 of [RFC9256] for details.
	SLBgplsTopoSrCpStateFlags_SL_BGPLS_TOPO_SR_CP_STATE_FLAG_ON_DEMAND_NH SLBgplsTopoSrCpStateFlags = 1024
	// Bit-6: D-Flag: Indicates the CP was delegated for computation to a
	// PCE/controller when set.
	SLBgplsTopoSrCpStateFlags_SL_BGPLS_TOPO_SR_CP_STATE_FLAG_DELEGATED SLBgplsTopoSrCpStateFlags = 512
	// Bit-7: C-Flag: Indicates the CP was provisioned by a PCE/controller when set.
	SLBgplsTopoSrCpStateFlags_SL_BGPLS_TOPO_SR_CP_STATE_FLAG_PROVISIONED SLBgplsTopoSrCpStateFlags = 256
	// Bit-8: I-Flag: Indicates the CP is to perform the "drop upon invalid"
	// behavior when no other valid CP is available for this SR
	// Policy.  Refer to section 8.2 of [RFC9256] for details.
	SLBgplsTopoSrCpStateFlags_SL_BGPLS_TOPO_SR_CP_STATE_FLAG_DROP_UPON_INVALID SLBgplsTopoSrCpStateFlags = 128
	// Bit-9: T-Flag: Indicates the CP has been marked as eligible for use as
	// Transit Policy on the headend when set.  Refer to section 8.3
	// of [RFC9256].
	SLBgplsTopoSrCpStateFlags_SL_BGPLS_TOPO_SR_CP_STATE_FLAG_TRANSIT SLBgplsTopoSrCpStateFlags = 64
	// Bit-10: U-Flag: Indicates that this CP is reported as active and is
	// dropping traffic as a result of the "drop upon invalid"
	// behavior being activated for the SR Policy.
	SLBgplsTopoSrCpStateFlags_SL_BGPLS_TOPO_SR_CP_STATE_FLAG_DROPPING SLBgplsTopoSrCpStateFlags = 32
)

// Enum value maps for SLBgplsTopoSrCpStateFlags.
var (
	SLBgplsTopoSrCpStateFlags_name = map[int32]string{
		0:     "SL_BGPLS_TOPO_SR_CP_STATE_FLAG_RESERVED",
		32768: "SL_BGPLS_TOPO_SR_CP_STATE_FLAG_ADMIN_SHUT",
		16384: "SL_BGPLS_TOPO_SR_CP_STATE_FLAG_ACTIVE",
		8192:  "SL_BGPLS_TOPO_SR_CP_STATE_FLAG_BACKUP",
		4096:  "SL_BGPLS_TOPO_SR_CP_STATE_FLAG_EVALUATED",
		2048:  "SL_BGPLS_TOPO_SR_CP_STATE_FLAG_VALID",
		1024:  "SL_BGPLS_TOPO_SR_CP_STATE_FLAG_ON_DEMAND_NH",
		512:   "SL_BGPLS_TOPO_SR_CP_STATE_FLAG_DELEGATED",
		256:   "SL_BGPLS_TOPO_SR_CP_STATE_FLAG_PROVISIONED",
		128:   "SL_BGPLS_TOPO_SR_CP_STATE_FLAG_DROP_UPON_INVALID",
		64:    "SL_BGPLS_TOPO_SR_CP_STATE_FLAG_TRANSIT",
		32:    "SL_BGPLS_TOPO_SR_CP_STATE_FLAG_DROPPING",
	}
	SLBgplsTopoSrCpStateFlags_value = map[string]int32{
		"SL_BGPLS_TOPO_SR_CP_STATE_FLAG_RESERVED":          0,
		"SL_BGPLS_TOPO_SR_CP_STATE_FLAG_ADMIN_SHUT":        32768,
		"SL_BGPLS_TOPO_SR_CP_STATE_FLAG_ACTIVE":            16384,
		"SL_BGPLS_TOPO_SR_CP_STATE_FLAG_BACKUP":            8192,
		"SL_BGPLS_TOPO_SR_CP_STATE_FLAG_EVALUATED":         4096,
		"SL_BGPLS_TOPO_SR_CP_STATE_FLAG_VALID":             2048,
		"SL_BGPLS_TOPO_SR_CP_STATE_FLAG_ON_DEMAND_NH":      1024,
		"SL_BGPLS_TOPO_SR_CP_STATE_FLAG_DELEGATED":         512,
		"SL_BGPLS_TOPO_SR_CP_STATE_FLAG_PROVISIONED":       256,
		"SL_BGPLS_TOPO_SR_CP_STATE_FLAG_DROP_UPON_INVALID": 128,
		"SL_BGPLS_TOPO_SR_CP_STATE_FLAG_TRANSIT":           64,
		"SL_BGPLS_TOPO_SR_CP_STATE_FLAG_DROPPING":          32,
	}
)

func (x SLBgplsTopoSrCpStateFlags) Enum() *SLBgplsTopoSrCpStateFlags {
	p := new(SLBgplsTopoSrCpStateFlags)
	*p = x
	return p
}

func (x SLBgplsTopoSrCpStateFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoSrCpStateFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgpls_topology_proto_enumTypes[7].Descriptor()
}

func (SLBgplsTopoSrCpStateFlags) Type() protoreflect.EnumType {
	return &file_sl_bgpls_topology_proto_enumTypes[7]
}

func (x SLBgplsTopoSrCpStateFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoSrCpStateFlags.Descriptor instead.
func (SLBgplsTopoSrCpStateFlags) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{7}
}

type SLBgplsTopoSrCpConstraintsFlags int32

const (
	// Reserved.
	SLBgplsTopoSrCpConstraintsFlags_SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_RESERVED SLBgplsTopoSrCpConstraintsFlags = 0
	// Bit-0: D-Flag: Indicates that the CP uses SRv6 dataplane when set and
	// SR/MPLS dataplane when clear.
	SLBgplsTopoSrCpConstraintsFlags_SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_DATAPLANE_V6 SLBgplsTopoSrCpConstraintsFlags = 32768
	// Bit-1: P-Flag: Indicates that the CP prefers the use of only protected
	// SIDs when set.  This flag is mutually exclusive with the
	// Bit-2.
	SLBgplsTopoSrCpConstraintsFlags_SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_PROTECTED SLBgplsTopoSrCpConstraintsFlags = 16384
	// Bit-2: U-Flag: Indicates that the CP prefers the use of only
	// unprotected SIDs when set.  This flag is mutually exclusive
	// with the Bit-1.
	SLBgplsTopoSrCpConstraintsFlags_SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_UNPROTECTED SLBgplsTopoSrCpConstraintsFlags = 8192
	// Bit-3: A-Flag: Indicates that the CP uses only the SIDs belonging to
	// the specified SR Algorithm when set.
	SLBgplsTopoSrCpConstraintsFlags_SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_SPECIFIED_ALGO SLBgplsTopoSrCpConstraintsFlags = 4096
	// Bit-4: T-Flag: Indicates that the CP uses only the SIDs belonging to
	// the specified topology when set.
	SLBgplsTopoSrCpConstraintsFlags_SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_SPECIFIED_TOPO SLBgplsTopoSrCpConstraintsFlags = 2048
	// Bit-5: S-Flag: Indicates that the use of protected (P-Flag) or
	// unprotected (U-Flag) SIDs becomes a strict constraint instead
	// of a preference when set.
	SLBgplsTopoSrCpConstraintsFlags_SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_USE_STRICT SLBgplsTopoSrCpConstraintsFlags = 1024
	// Bit-6: F-Flag: Indicates that the CP is fixed once computed and not
	// modified except on operator intervention.
	SLBgplsTopoSrCpConstraintsFlags_SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_FIXED_CP SLBgplsTopoSrCpConstraintsFlags = 512
	// Bit-7: H-Flag: Indicates that the CP uses only adjacency SIDs and
	// traverses hop-by-hop over the links corresponding to those
	// adjacency SIDs when set.
	SLBgplsTopoSrCpConstraintsFlags_SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_HOP_BY_HOP SLBgplsTopoSrCpConstraintsFlags = 256
)

// Enum value maps for SLBgplsTopoSrCpConstraintsFlags.
var (
	SLBgplsTopoSrCpConstraintsFlags_name = map[int32]string{
		0:     "SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_RESERVED",
		32768: "SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_DATAPLANE_V6",
		16384: "SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_PROTECTED",
		8192:  "SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_UNPROTECTED",
		4096:  "SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_SPECIFIED_ALGO",
		2048:  "SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_SPECIFIED_TOPO",
		1024:  "SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_USE_STRICT",
		512:   "SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_FIXED_CP",
		256:   "SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_HOP_BY_HOP",
	}
	SLBgplsTopoSrCpConstraintsFlags_value = map[string]int32{
		"SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_RESERVED":       0,
		"SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_DATAPLANE_V6":   32768,
		"SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_PROTECTED":      16384,
		"SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_UNPROTECTED":    8192,
		"SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_SPECIFIED_ALGO": 4096,
		"SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_SPECIFIED_TOPO": 2048,
		"SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_USE_STRICT":     1024,
		"SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_FIXED_CP":       512,
		"SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_HOP_BY_HOP":     256,
	}
)

func (x SLBgplsTopoSrCpConstraintsFlags) Enum() *SLBgplsTopoSrCpConstraintsFlags {
	p := new(SLBgplsTopoSrCpConstraintsFlags)
	*p = x
	return p
}

func (x SLBgplsTopoSrCpConstraintsFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoSrCpConstraintsFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgpls_topology_proto_enumTypes[8].Descriptor()
}

func (SLBgplsTopoSrCpConstraintsFlags) Type() protoreflect.EnumType {
	return &file_sl_bgpls_topology_proto_enumTypes[8]
}

func (x SLBgplsTopoSrCpConstraintsFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoSrCpConstraintsFlags.Descriptor instead.
func (SLBgplsTopoSrCpConstraintsFlags) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{8}
}

type SLBgplsTopoSrSegListFlags int32

const (
	// Reserved.
	SLBgplsTopoSrSegListFlags_SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_RESERVED SLBgplsTopoSrSegListFlags = 0
	// Bit-0: D-Flag: Indicates the SID-List is comprised of SRv6 SIDs when
	// set and indicates it is comprised of SR/MPLS labels when clear.
	SLBgplsTopoSrSegListFlags_SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_DATAPLANE_V6 SLBgplsTopoSrSegListFlags = 32768
	// Bit-1: E-Flag: Indicates that SID-List is associated with an explicit
	// candidate path when set and with a dynamic candidate path when
	// clear.  All segment lists of a given candidate path MUST be
	// either explicit or dynamic and in case of inconsistency, the
	// receiver MAY consider them all to be dynamic.
	SLBgplsTopoSrSegListFlags_SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_EXPLICIT_PATH SLBgplsTopoSrSegListFlags = 16384
	// Bit-2: C-Flag: Indicates that SID-List has been computed for a dynamic
	// path when set.  It is always reported as set for explicit
	// paths.
	SLBgplsTopoSrSegListFlags_SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_COMPUTED_PATH SLBgplsTopoSrSegListFlags = 8192
	// Bit-3: V-Flag: Indicates the SID-List has passed verification or its
	// verification was not required when set and failed verification
	// when clear.
	SLBgplsTopoSrSegListFlags_SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_VERIFIED SLBgplsTopoSrSegListFlags = 4096
	// Bit-4: R-Flag: Indicates that the first Segment has been resolved when
	// set and failed resolution when clear.
	SLBgplsTopoSrSegListFlags_SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_RESOLVED SLBgplsTopoSrSegListFlags = 2048
	// Bit-5: F-Flag: Indicates that the computation for the dynamic path
	// failed when set and succeeded (or not required in case of
	// explicit path) when clear.
	SLBgplsTopoSrSegListFlags_SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_COMPUTE_FAILED SLBgplsTopoSrSegListFlags = 1024
	// Bit-6: A-Flag: Indicates that all the SIDs in the SID-List belong to
	// the specified algorithm when set.
	SLBgplsTopoSrSegListFlags_SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_SPECIFIED_ALGO SLBgplsTopoSrSegListFlags = 512
	// Bit-7: T-Flag: Indicates that all the SIDs in the SID-List belong to
	// the specified topology (identified by the multi-topology ID)
	// when set.
	SLBgplsTopoSrSegListFlags_SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_SPECIFIED_TOPO SLBgplsTopoSrSegListFlags = 256
	// Bit-8: M-Flag: Indicates that the SID-list has been removed from the
	// forwarding plane due to fault detection by a monitoring
	// mechanism (e.g.  BFD) when set and indicates no fault detected
	// or monitoring is not being done when clear.
	SLBgplsTopoSrSegListFlags_SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_FAULT_MONITOR SLBgplsTopoSrSegListFlags = 128
)

// Enum value maps for SLBgplsTopoSrSegListFlags.
var (
	SLBgplsTopoSrSegListFlags_name = map[int32]string{
		0:     "SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_RESERVED",
		32768: "SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_DATAPLANE_V6",
		16384: "SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_EXPLICIT_PATH",
		8192:  "SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_COMPUTED_PATH",
		4096:  "SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_VERIFIED",
		2048:  "SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_RESOLVED",
		1024:  "SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_COMPUTE_FAILED",
		512:   "SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_SPECIFIED_ALGO",
		256:   "SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_SPECIFIED_TOPO",
		128:   "SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_FAULT_MONITOR",
	}
	SLBgplsTopoSrSegListFlags_value = map[string]int32{
		"SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_RESERVED":       0,
		"SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_DATAPLANE_V6":   32768,
		"SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_EXPLICIT_PATH":  16384,
		"SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_COMPUTED_PATH":  8192,
		"SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_VERIFIED":       4096,
		"SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_RESOLVED":       2048,
		"SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_COMPUTE_FAILED": 1024,
		"SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_SPECIFIED_ALGO": 512,
		"SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_SPECIFIED_TOPO": 256,
		"SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_FAULT_MONITOR":  128,
	}
)

func (x SLBgplsTopoSrSegListFlags) Enum() *SLBgplsTopoSrSegListFlags {
	p := new(SLBgplsTopoSrSegListFlags)
	*p = x
	return p
}

func (x SLBgplsTopoSrSegListFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoSrSegListFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgpls_topology_proto_enumTypes[9].Descriptor()
}

func (SLBgplsTopoSrSegListFlags) Type() protoreflect.EnumType {
	return &file_sl_bgpls_topology_proto_enumTypes[9]
}

func (x SLBgplsTopoSrSegListFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoSrSegListFlags.Descriptor instead.
func (SLBgplsTopoSrSegListFlags) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{9}
}

type SLBgplsTopoSrSegListMetricFlags int32

const (
	// Reserved.
	SLBgplsTopoSrSegListMetricFlags_SL_BGPLS_TOPO_SR_SEG_LIST_METRIC_FLAG_RESERVED SLBgplsTopoSrSegListMetricFlags = 0
	// Bit-0: M-Flag: The metric margin allowed for this path
	// computation is specified when set.
	SLBgplsTopoSrSegListMetricFlags_SL_BGPLS_TOPO_SR_SEG_LIST_METRIC_FLAG_MARGIN_ALLOWED SLBgplsTopoSrSegListMetricFlags = 128
	// Bit-1: A-Flag: The metric margin is specified as an
	// absolute value when set and is expressed as a percentage of the
	// minimum metric when clear.
	SLBgplsTopoSrSegListMetricFlags_SL_BGPLS_TOPO_SR_SEG_LIST_METRIC_FLAG_ABSOLUTE_VAL SLBgplsTopoSrSegListMetricFlags = 64
	// Bit-2: B-Flag: The metric bound allowed for the path is specified when set.
	SLBgplsTopoSrSegListMetricFlags_SL_BGPLS_TOPO_SR_SEG_LIST_METRIC_FLAG_BOUND_ALLOWED SLBgplsTopoSrSegListMetricFlags = 32
	// Bit-3: V-Flag: The metric value computed is being reported when set.
	SLBgplsTopoSrSegListMetricFlags_SL_BGPLS_TOPO_SR_SEG_LIST_METRIC_FLAG_VAL_REPORTED SLBgplsTopoSrSegListMetricFlags = 16
)

// Enum value maps for SLBgplsTopoSrSegListMetricFlags.
var (
	SLBgplsTopoSrSegListMetricFlags_name = map[int32]string{
		0:   "SL_BGPLS_TOPO_SR_SEG_LIST_METRIC_FLAG_RESERVED",
		128: "SL_BGPLS_TOPO_SR_SEG_LIST_METRIC_FLAG_MARGIN_ALLOWED",
		64:  "SL_BGPLS_TOPO_SR_SEG_LIST_METRIC_FLAG_ABSOLUTE_VAL",
		32:  "SL_BGPLS_TOPO_SR_SEG_LIST_METRIC_FLAG_BOUND_ALLOWED",
		16:  "SL_BGPLS_TOPO_SR_SEG_LIST_METRIC_FLAG_VAL_REPORTED",
	}
	SLBgplsTopoSrSegListMetricFlags_value = map[string]int32{
		"SL_BGPLS_TOPO_SR_SEG_LIST_METRIC_FLAG_RESERVED":       0,
		"SL_BGPLS_TOPO_SR_SEG_LIST_METRIC_FLAG_MARGIN_ALLOWED": 128,
		"SL_BGPLS_TOPO_SR_SEG_LIST_METRIC_FLAG_ABSOLUTE_VAL":   64,
		"SL_BGPLS_TOPO_SR_SEG_LIST_METRIC_FLAG_BOUND_ALLOWED":  32,
		"SL_BGPLS_TOPO_SR_SEG_LIST_METRIC_FLAG_VAL_REPORTED":   16,
	}
)

func (x SLBgplsTopoSrSegListMetricFlags) Enum() *SLBgplsTopoSrSegListMetricFlags {
	p := new(SLBgplsTopoSrSegListMetricFlags)
	*p = x
	return p
}

func (x SLBgplsTopoSrSegListMetricFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoSrSegListMetricFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgpls_topology_proto_enumTypes[10].Descriptor()
}

func (SLBgplsTopoSrSegListMetricFlags) Type() protoreflect.EnumType {
	return &file_sl_bgpls_topology_proto_enumTypes[10]
}

func (x SLBgplsTopoSrSegListMetricFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoSrSegListMetricFlags.Descriptor instead.
func (SLBgplsTopoSrSegListMetricFlags) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{10}
}

type SLBgplsTopoSrDisjointGroupFlags int32

const (
	// Reserved.
	SLBgplsTopoSrDisjointGroupFlags_SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_RESERVED SLBgplsTopoSrDisjointGroupFlags = 0
	// Bit-0: S-Flag: SRLG disjointness is achieved when set.
	SLBgplsTopoSrDisjointGroupFlags_SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_SRLG SLBgplsTopoSrDisjointGroupFlags = 128
	// Bit-1: N-Flag: Node disjointness is achieved when set.
	SLBgplsTopoSrDisjointGroupFlags_SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_NODE SLBgplsTopoSrDisjointGroupFlags = 64
	// Bit-2: L-Flag: Link disjointness is achieved when set.
	SLBgplsTopoSrDisjointGroupFlags_SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_LINK SLBgplsTopoSrDisjointGroupFlags = 32
	// Bit-3: F-Flag: The computation has fallen back to a
	// lower level of disjointness than requested when set.
	SLBgplsTopoSrDisjointGroupFlags_SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_FALLBACK SLBgplsTopoSrDisjointGroupFlags = 16
	// Bit-4: I-Flag: The computation has fallen back to the
	// best path (e.g.  IGP path) and disjointness has not been
	// achieved when set.
	SLBgplsTopoSrDisjointGroupFlags_SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_IGP SLBgplsTopoSrDisjointGroupFlags = 8
	// Bit-5: X-Flag: The disjointness constraint could not
	// be achieved and hence path has been invalidated when set.
	SLBgplsTopoSrDisjointGroupFlags_SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_INVALID SLBgplsTopoSrDisjointGroupFlags = 4
)

// Enum value maps for SLBgplsTopoSrDisjointGroupFlags.
var (
	SLBgplsTopoSrDisjointGroupFlags_name = map[int32]string{
		0:   "SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_RESERVED",
		128: "SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_SRLG",
		64:  "SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_NODE",
		32:  "SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_LINK",
		16:  "SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_FALLBACK",
		8:   "SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_IGP",
		4:   "SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_INVALID",
	}
	SLBgplsTopoSrDisjointGroupFlags_value = map[string]int32{
		"SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_RESERVED": 0,
		"SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_SRLG":     128,
		"SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_NODE":     64,
		"SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_LINK":     32,
		"SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_FALLBACK": 16,
		"SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_IGP":      8,
		"SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_INVALID":  4,
	}
)

func (x SLBgplsTopoSrDisjointGroupFlags) Enum() *SLBgplsTopoSrDisjointGroupFlags {
	p := new(SLBgplsTopoSrDisjointGroupFlags)
	*p = x
	return p
}

func (x SLBgplsTopoSrDisjointGroupFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoSrDisjointGroupFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgpls_topology_proto_enumTypes[11].Descriptor()
}

func (SLBgplsTopoSrDisjointGroupFlags) Type() protoreflect.EnumType {
	return &file_sl_bgpls_topology_proto_enumTypes[11]
}

func (x SLBgplsTopoSrDisjointGroupFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoSrDisjointGroupFlags.Descriptor instead.
func (SLBgplsTopoSrDisjointGroupFlags) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{11}
}

type SLBgplsTopoSrBidirGroupFlags int32

const (
	// Reserved.
	SLBgplsTopoSrBidirGroupFlags_SL_BGPLS_TOPO_SR_BIDIR_GROUP_FLAG_RESERVED SLBgplsTopoSrBidirGroupFlags = 0
	// Bit-0: R-Flag: This CP of the SR Policy forms the
	// reverse path when set and otherwise it is the forward path when clear.
	SLBgplsTopoSrBidirGroupFlags_SL_BGPLS_TOPO_SR_BIDIR_GROUP_FLAG_REVERSE SLBgplsTopoSrBidirGroupFlags = 32768
	// Bit-1: C-Flag: The bidirectional path is co-routed when set.
	SLBgplsTopoSrBidirGroupFlags_SL_BGPLS_TOPO_SR_BIDIR_GROUP_FLAG_CO_ROUTED SLBgplsTopoSrBidirGroupFlags = 16384
)

// Enum value maps for SLBgplsTopoSrBidirGroupFlags.
var (
	SLBgplsTopoSrBidirGroupFlags_name = map[int32]string{
		0:     "SL_BGPLS_TOPO_SR_BIDIR_GROUP_FLAG_RESERVED",
		32768: "SL_BGPLS_TOPO_SR_BIDIR_GROUP_FLAG_REVERSE",
		16384: "SL_BGPLS_TOPO_SR_BIDIR_GROUP_FLAG_CO_ROUTED",
	}
	SLBgplsTopoSrBidirGroupFlags_value = map[string]int32{
		"SL_BGPLS_TOPO_SR_BIDIR_GROUP_FLAG_RESERVED":  0,
		"SL_BGPLS_TOPO_SR_BIDIR_GROUP_FLAG_REVERSE":   32768,
		"SL_BGPLS_TOPO_SR_BIDIR_GROUP_FLAG_CO_ROUTED": 16384,
	}
)

func (x SLBgplsTopoSrBidirGroupFlags) Enum() *SLBgplsTopoSrBidirGroupFlags {
	p := new(SLBgplsTopoSrBidirGroupFlags)
	*p = x
	return p
}

func (x SLBgplsTopoSrBidirGroupFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoSrBidirGroupFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgpls_topology_proto_enumTypes[12].Descriptor()
}

func (SLBgplsTopoSrBidirGroupFlags) Type() protoreflect.EnumType {
	return &file_sl_bgpls_topology_proto_enumTypes[12]
}

func (x SLBgplsTopoSrBidirGroupFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoSrBidirGroupFlags.Descriptor instead.
func (SLBgplsTopoSrBidirGroupFlags) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{12}
}

type SLBgplsTopoSrMetricConstraintFlags int32

const (
	// Reserved.
	SLBgplsTopoSrMetricConstraintFlags_SL_BGPLS_TOPO_SR_METRIC_CONSTRAINT_FLAG_RESERVED SLBgplsTopoSrMetricConstraintFlags = 0
	// Bit-0: O-Flag: The optimization metric being
	// reported for a dynamic CP when set.  This bit MUST NOT be set
	// in more than one instance of this TLV for a given CP
	// advertisement.
	SLBgplsTopoSrMetricConstraintFlags_SL_BGPLS_TOPO_SR_METRIC_CONSTRAINT_FLAG_OPTIMIZED SLBgplsTopoSrMetricConstraintFlags = 128
	// Bit-1: M-Flag: The metric margin allowed is specified when set.
	SLBgplsTopoSrMetricConstraintFlags_SL_BGPLS_TOPO_SR_METRIC_CONSTRAINT_FLAG_MARGIN_ALLOWED SLBgplsTopoSrMetricConstraintFlags = 64
	// Bit-2: A-Flag: The metric margin is specified as an
	// absolute value when set and is expressed as a percentage of the
	// minimum metric when clear.
	SLBgplsTopoSrMetricConstraintFlags_SL_BGPLS_TOPO_SR_METRIC_CONSTRAINT_FLAG_ABSOLUTE SLBgplsTopoSrMetricConstraintFlags = 32
	// Bit-3: B-Flag: The metric bound allowed for the path is
	// specified when set.
	SLBgplsTopoSrMetricConstraintFlags_SL_BGPLS_TOPO_SR_METRIC_CONSTRAINT_FLAG_BOUND_ALLOWED SLBgplsTopoSrMetricConstraintFlags = 16
)

// Enum value maps for SLBgplsTopoSrMetricConstraintFlags.
var (
	SLBgplsTopoSrMetricConstraintFlags_name = map[int32]string{
		0:   "SL_BGPLS_TOPO_SR_METRIC_CONSTRAINT_FLAG_RESERVED",
		128: "SL_BGPLS_TOPO_SR_METRIC_CONSTRAINT_FLAG_OPTIMIZED",
		64:  "SL_BGPLS_TOPO_SR_METRIC_CONSTRAINT_FLAG_MARGIN_ALLOWED",
		32:  "SL_BGPLS_TOPO_SR_METRIC_CONSTRAINT_FLAG_ABSOLUTE",
		16:  "SL_BGPLS_TOPO_SR_METRIC_CONSTRAINT_FLAG_BOUND_ALLOWED",
	}
	SLBgplsTopoSrMetricConstraintFlags_value = map[string]int32{
		"SL_BGPLS_TOPO_SR_METRIC_CONSTRAINT_FLAG_RESERVED":       0,
		"SL_BGPLS_TOPO_SR_METRIC_CONSTRAINT_FLAG_OPTIMIZED":      128,
		"SL_BGPLS_TOPO_SR_METRIC_CONSTRAINT_FLAG_MARGIN_ALLOWED": 64,
		"SL_BGPLS_TOPO_SR_METRIC_CONSTRAINT_FLAG_ABSOLUTE":       32,
		"SL_BGPLS_TOPO_SR_METRIC_CONSTRAINT_FLAG_BOUND_ALLOWED":  16,
	}
)

func (x SLBgplsTopoSrMetricConstraintFlags) Enum() *SLBgplsTopoSrMetricConstraintFlags {
	p := new(SLBgplsTopoSrMetricConstraintFlags)
	*p = x
	return p
}

func (x SLBgplsTopoSrMetricConstraintFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoSrMetricConstraintFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgpls_topology_proto_enumTypes[13].Descriptor()
}

func (SLBgplsTopoSrMetricConstraintFlags) Type() protoreflect.EnumType {
	return &file_sl_bgpls_topology_proto_enumTypes[13]
}

func (x SLBgplsTopoSrMetricConstraintFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoSrMetricConstraintFlags.Descriptor instead.
func (SLBgplsTopoSrMetricConstraintFlags) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{13}
}

type SLBgplsTopoSrv6BgpPeerNodeSidFlags int32

const (
	// Reserved.
	SLBgplsTopoSrv6BgpPeerNodeSidFlags_SL_BGPLS_TOPO_SRV6_BGP_PEER_NODE_SID_FLAG_RESERVED SLBgplsTopoSrv6BgpPeerNodeSidFlags = 0
	// Bit-0: B-Flag: Backup Flag associated with the SID.
	SLBgplsTopoSrv6BgpPeerNodeSidFlags_SL_BGPLS_TOPO_SRV6_BGP_PEER_NODE_SID_FLAG_BACKUP SLBgplsTopoSrv6BgpPeerNodeSidFlags = 128
	// Bit-1: S-Flag: Set Flag associated with the SID.
	SLBgplsTopoSrv6BgpPeerNodeSidFlags_SL_BGPLS_TOPO_SRV6_BGP_PEER_NODE_SID_FLAG_SET SLBgplsTopoSrv6BgpPeerNodeSidFlags = 64
	// Bit-2: P-Flag: Persistent Flag associated with the SID.
	SLBgplsTopoSrv6BgpPeerNodeSidFlags_SL_BGPLS_TOPO_SRV6_BGP_PEER_NODE_SID_FLAG_PERSISTENT SLBgplsTopoSrv6BgpPeerNodeSidFlags = 32
)

// Enum value maps for SLBgplsTopoSrv6BgpPeerNodeSidFlags.
var (
	SLBgplsTopoSrv6BgpPeerNodeSidFlags_name = map[int32]string{
		0:   "SL_BGPLS_TOPO_SRV6_BGP_PEER_NODE_SID_FLAG_RESERVED",
		128: "SL_BGPLS_TOPO_SRV6_BGP_PEER_NODE_SID_FLAG_BACKUP",
		64:  "SL_BGPLS_TOPO_SRV6_BGP_PEER_NODE_SID_FLAG_SET",
		32:  "SL_BGPLS_TOPO_SRV6_BGP_PEER_NODE_SID_FLAG_PERSISTENT",
	}
	SLBgplsTopoSrv6BgpPeerNodeSidFlags_value = map[string]int32{
		"SL_BGPLS_TOPO_SRV6_BGP_PEER_NODE_SID_FLAG_RESERVED":   0,
		"SL_BGPLS_TOPO_SRV6_BGP_PEER_NODE_SID_FLAG_BACKUP":     128,
		"SL_BGPLS_TOPO_SRV6_BGP_PEER_NODE_SID_FLAG_SET":        64,
		"SL_BGPLS_TOPO_SRV6_BGP_PEER_NODE_SID_FLAG_PERSISTENT": 32,
	}
)

func (x SLBgplsTopoSrv6BgpPeerNodeSidFlags) Enum() *SLBgplsTopoSrv6BgpPeerNodeSidFlags {
	p := new(SLBgplsTopoSrv6BgpPeerNodeSidFlags)
	*p = x
	return p
}

func (x SLBgplsTopoSrv6BgpPeerNodeSidFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoSrv6BgpPeerNodeSidFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgpls_topology_proto_enumTypes[14].Descriptor()
}

func (SLBgplsTopoSrv6BgpPeerNodeSidFlags) Type() protoreflect.EnumType {
	return &file_sl_bgpls_topology_proto_enumTypes[14]
}

func (x SLBgplsTopoSrv6BgpPeerNodeSidFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoSrv6BgpPeerNodeSidFlags.Descriptor instead.
func (SLBgplsTopoSrv6BgpPeerNodeSidFlags) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{14}
}

// BGP-LS Topology Notification Request message
type SLBgplsTopoNotifReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Match filters for BGP-LS Topology Entries.
	// This can be an empty message if the caller wants to subscribe to all the
	// BGP-LS Topology Entries.
	// BGP-LS Topology Notification request message takes zero or many BGP-LS Topology
	// Match filters. Each of the Match filter will have a set of Match
	// conditions. A matching BGP-LS Topology entry must match all the Match
	// conditions in one or more Match filters. OR operation is applied on
	// each of the Match filters.
	// Maximum number of Match filters is restricted using
	// MaxMatchFilterInBgplsTopoNotif in SLGlobalsGet.
	Match []*SLBgplsTopoNlriMatch `protobuf:"bytes,1,rep,name=Match,proto3" json:"Match,omitempty"`
}

func (x *SLBgplsTopoNotifReqMsg) Reset() {
	*x = SLBgplsTopoNotifReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoNotifReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoNotifReqMsg) ProtoMessage() {}

func (x *SLBgplsTopoNotifReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoNotifReqMsg.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoNotifReqMsg) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{0}
}

func (x *SLBgplsTopoNotifReqMsg) GetMatch() []*SLBgplsTopoNlriMatch {
	if x != nil {
		return x.Match
	}
	return nil
}

type SLBgplsTopoNlriMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IGP routing domain to which the Link-State NLRI belongs.
	// Identifier.
	// Section 5.2 of [RFC9552]
	InstanceId *SLBgplsTopoInstanceId `protobuf:"bytes,1,opt,name=InstanceId,proto3" json:"InstanceId,omitempty"`
	// Protocol originating the Link-State NLRI
	// Protocol-ID.
	// Section 5.2 of [RFC9552]
	Protocol SLBgplsTopoProtocol `protobuf:"varint,2,opt,name=Protocol,proto3,enum=service_layer.SLBgplsTopoProtocol" json:"Protocol,omitempty"`
	// Type of Link-State NLRI
	// NLRI Type.
	// Section 5.2 of [RFC9552]
	NlriType SLBgplsTopoNlriType `protobuf:"varint,3,opt,name=NlriType,proto3,enum=service_layer.SLBgplsTopoNlriType" json:"NlriType,omitempty"`
}

func (x *SLBgplsTopoNlriMatch) Reset() {
	*x = SLBgplsTopoNlriMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoNlriMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoNlriMatch) ProtoMessage() {}

func (x *SLBgplsTopoNlriMatch) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoNlriMatch.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoNlriMatch) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{1}
}

func (x *SLBgplsTopoNlriMatch) GetInstanceId() *SLBgplsTopoInstanceId {
	if x != nil {
		return x.InstanceId
	}
	return nil
}

func (x *SLBgplsTopoNlriMatch) GetProtocol() SLBgplsTopoProtocol {
	if x != nil {
		return x.Protocol
	}
	return SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_RESERVED
}

func (x *SLBgplsTopoNlriMatch) GetNlriType() SLBgplsTopoNlriType {
	if x != nil {
		return x.NlriType
	}
	return SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_RESERVED
}

// BGP-LS Topology Notification message
type SLBgplsTopoNotifMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*SLBgplsTopoNotifMsg_ErrStatus
	//	*SLBgplsTopoNotifMsg_Data
	//	*SLBgplsTopoNotifMsg_Start
	//	*SLBgplsTopoNotifMsg_End
	Event isSLBgplsTopoNotifMsg_Event `protobuf_oneof:"Event"`
}

func (x *SLBgplsTopoNotifMsg) Reset() {
	*x = SLBgplsTopoNotifMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoNotifMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoNotifMsg) ProtoMessage() {}

func (x *SLBgplsTopoNotifMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoNotifMsg.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoNotifMsg) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{2}
}

func (m *SLBgplsTopoNotifMsg) GetEvent() isSLBgplsTopoNotifMsg_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *SLBgplsTopoNotifMsg) GetErrStatus() *SLErrorStatus {
	if x, ok := x.GetEvent().(*SLBgplsTopoNotifMsg_ErrStatus); ok {
		return x.ErrStatus
	}
	return nil
}

func (x *SLBgplsTopoNotifMsg) GetData() *SLBgplsTopoNotif {
	if x, ok := x.GetEvent().(*SLBgplsTopoNotifMsg_Data); ok {
		return x.Data
	}
	return nil
}

func (x *SLBgplsTopoNotifMsg) GetStart() *SLBgplsTopoStartMarker {
	if x, ok := x.GetEvent().(*SLBgplsTopoNotifMsg_Start); ok {
		return x.Start
	}
	return nil
}

func (x *SLBgplsTopoNotifMsg) GetEnd() *SLBgplsTopoEndMarker {
	if x, ok := x.GetEvent().(*SLBgplsTopoNotifMsg_End); ok {
		return x.End
	}
	return nil
}

type isSLBgplsTopoNotifMsg_Event interface {
	isSLBgplsTopoNotifMsg_Event()
}

type SLBgplsTopoNotifMsg_ErrStatus struct {
	// This field carries error info, if any error occurs during stream setup.
	// SL_SUCCESS: signifies that the notification request was successful
	// SL_XXX: signifies an error in setting up a notification request.
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,proto3,oneof"`
}

type SLBgplsTopoNotifMsg_Data struct {
	// This field carries the BGP-LS Topology data
	Data *SLBgplsTopoNotif `protobuf:"bytes,2,opt,name=Data,proto3,oneof"`
}

type SLBgplsTopoNotifMsg_Start struct {
	// This field carries the Start Marker
	Start *SLBgplsTopoStartMarker `protobuf:"bytes,3,opt,name=Start,proto3,oneof"`
}

type SLBgplsTopoNotifMsg_End struct {
	// This filed carries the end marker
	End *SLBgplsTopoEndMarker `protobuf:"bytes,4,opt,name=End,proto3,oneof"`
}

func (*SLBgplsTopoNotifMsg_ErrStatus) isSLBgplsTopoNotifMsg_Event() {}

func (*SLBgplsTopoNotifMsg_Data) isSLBgplsTopoNotifMsg_Event() {}

func (*SLBgplsTopoNotifMsg_Start) isSLBgplsTopoNotifMsg_Event() {}

func (*SLBgplsTopoNotifMsg_End) isSLBgplsTopoNotifMsg_Event() {}

// Start marker - sent before any DATA is sent.
// This is an indication to stale any objects received until now.
// Intentionally added as empty message
type SLBgplsTopoStartMarker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SLBgplsTopoStartMarker) Reset() {
	*x = SLBgplsTopoStartMarker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoStartMarker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoStartMarker) ProtoMessage() {}

func (x *SLBgplsTopoStartMarker) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoStartMarker.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoStartMarker) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{3}
}

// End marker - sent after all DATA are sent.
// This is an indication to sweep any stale objects, if present.
// Intentionally added as empty message
type SLBgplsTopoEndMarker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SLBgplsTopoEndMarker) Reset() {
	*x = SLBgplsTopoEndMarker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoEndMarker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoEndMarker) ProtoMessage() {}

func (x *SLBgplsTopoEndMarker) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoEndMarker.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoEndMarker) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{4}
}

// BGP-LS Topology Updates
type SLBgplsTopoNotif struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BGP-LS Topology Entries
	Entries []*SLBgplsTopoEntry `protobuf:"bytes,1,rep,name=Entries,proto3" json:"Entries,omitempty"`
}

func (x *SLBgplsTopoNotif) Reset() {
	*x = SLBgplsTopoNotif{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoNotif) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoNotif) ProtoMessage() {}

func (x *SLBgplsTopoNotif) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoNotif.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoNotif) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{5}
}

func (x *SLBgplsTopoNotif) GetEntries() []*SLBgplsTopoEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// BGP-LS Topology Entry
type SLBgplsTopoEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation SLBgplsTopoOperation `protobuf:"varint,1,opt,name=Operation,proto3,enum=service_layer.SLBgplsTopoOperation" json:"Operation,omitempty"`
	Data      *SLBgplsTopoData     `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *SLBgplsTopoEntry) Reset() {
	*x = SLBgplsTopoEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoEntry) ProtoMessage() {}

func (x *SLBgplsTopoEntry) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoEntry.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoEntry) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{6}
}

func (x *SLBgplsTopoEntry) GetOperation() SLBgplsTopoOperation {
	if x != nil {
		return x.Operation
	}
	return SLBgplsTopoOperation_SL_BGPLS_TOPO_OPERATION_RESERVED
}

func (x *SLBgplsTopoEntry) GetData() *SLBgplsTopoData {
	if x != nil {
		return x.Data
	}
	return nil
}

// BGP-LS Topology Data
type SLBgplsTopoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IGP routing domain to which the Link-State data belongs.
	// Identifier.
	// Section 5.2 of [RFC9552]
	InstanceId *SLBgplsTopoInstanceId `protobuf:"bytes,1,opt,name=InstanceId,proto3" json:"InstanceId,omitempty"`
	// Protocol originating the Link-State data
	// Protocol-ID.
	// Section 5.2 of [RFC9552]
	Protocol SLBgplsTopoProtocol `protobuf:"varint,2,opt,name=Protocol,proto3,enum=service_layer.SLBgplsTopoProtocol" json:"Protocol,omitempty"`
	// Data
	//
	// Types that are assignable to Data:
	//
	//	*SLBgplsTopoData_Node
	//	*SLBgplsTopoData_Link
	//	*SLBgplsTopoData_Prefix
	//	*SLBgplsTopoData_Srv6Sid
	//	*SLBgplsTopoData_SrPolicy
	Data isSLBgplsTopoData_Data `protobuf_oneof:"Data"`
}

func (x *SLBgplsTopoData) Reset() {
	*x = SLBgplsTopoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoData) ProtoMessage() {}

func (x *SLBgplsTopoData) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoData.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoData) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{7}
}

func (x *SLBgplsTopoData) GetInstanceId() *SLBgplsTopoInstanceId {
	if x != nil {
		return x.InstanceId
	}
	return nil
}

func (x *SLBgplsTopoData) GetProtocol() SLBgplsTopoProtocol {
	if x != nil {
		return x.Protocol
	}
	return SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_RESERVED
}

func (m *SLBgplsTopoData) GetData() isSLBgplsTopoData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *SLBgplsTopoData) GetNode() *SLBgplsTopoNodeData {
	if x, ok := x.GetData().(*SLBgplsTopoData_Node); ok {
		return x.Node
	}
	return nil
}

func (x *SLBgplsTopoData) GetLink() *SLBgplsTopoLinkData {
	if x, ok := x.GetData().(*SLBgplsTopoData_Link); ok {
		return x.Link
	}
	return nil
}

func (x *SLBgplsTopoData) GetPrefix() *SLBgplsTopoPrefixData {
	if x, ok := x.GetData().(*SLBgplsTopoData_Prefix); ok {
		return x.Prefix
	}
	return nil
}

func (x *SLBgplsTopoData) GetSrv6Sid() *SLBgplsTopoSrv6SidData {
	if x, ok := x.GetData().(*SLBgplsTopoData_Srv6Sid); ok {
		return x.Srv6Sid
	}
	return nil
}

func (x *SLBgplsTopoData) GetSrPolicy() *SLBgplsTopoSrPolicyData {
	if x, ok := x.GetData().(*SLBgplsTopoData_SrPolicy); ok {
		return x.SrPolicy
	}
	return nil
}

type isSLBgplsTopoData_Data interface {
	isSLBgplsTopoData_Data()
}

type SLBgplsTopoData_Node struct {
	// This field carries info about a node data.
	Node *SLBgplsTopoNodeData `protobuf:"bytes,3,opt,name=Node,proto3,oneof"`
}

type SLBgplsTopoData_Link struct {
	// This field carries info about a link data.
	Link *SLBgplsTopoLinkData `protobuf:"bytes,4,opt,name=Link,proto3,oneof"`
}

type SLBgplsTopoData_Prefix struct {
	// This field carries info about a prefix data.
	Prefix *SLBgplsTopoPrefixData `protobuf:"bytes,5,opt,name=Prefix,proto3,oneof"`
}

type SLBgplsTopoData_Srv6Sid struct {
	// This field carries info about a SRv6 SID data.
	Srv6Sid *SLBgplsTopoSrv6SidData `protobuf:"bytes,6,opt,name=Srv6Sid,proto3,oneof"`
}

type SLBgplsTopoData_SrPolicy struct {
	// This field carries info about a SR policy data.
	SrPolicy *SLBgplsTopoSrPolicyData `protobuf:"bytes,7,opt,name=SrPolicy,proto3,oneof"`
}

func (*SLBgplsTopoData_Node) isSLBgplsTopoData_Data() {}

func (*SLBgplsTopoData_Link) isSLBgplsTopoData_Data() {}

func (*SLBgplsTopoData_Prefix) isSLBgplsTopoData_Data() {}

func (*SLBgplsTopoData_Srv6Sid) isSLBgplsTopoData_Data() {}

func (*SLBgplsTopoData_SrPolicy) isSLBgplsTopoData_Data() {}

type SLBgplsTopoInstanceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IGP routing domain to which the Link-State data belongs.
	// Identifier.
	// Section 5.2 of [RFC9552]
	Identifier uint64 `protobuf:"varint,1,opt,name=Identifier,proto3" json:"Identifier,omitempty"`
}

func (x *SLBgplsTopoInstanceId) Reset() {
	*x = SLBgplsTopoInstanceId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoInstanceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoInstanceId) ProtoMessage() {}

func (x *SLBgplsTopoInstanceId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoInstanceId.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoInstanceId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{8}
}

func (x *SLBgplsTopoInstanceId) GetIdentifier() uint64 {
	if x != nil {
		return x.Identifier
	}
	return 0
}

// Node Data
type SLBgplsTopoNodeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field carries info about a node NLRI.
	Node *SLBgplsTopoNode `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node,omitempty"`
	// This field carries info about node attributes.
	NodeAttr *SLBgplsTopoNodeAttr `protobuf:"bytes,2,opt,name=NodeAttr,proto3" json:"NodeAttr,omitempty"`
}

func (x *SLBgplsTopoNodeData) Reset() {
	*x = SLBgplsTopoNodeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoNodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoNodeData) ProtoMessage() {}

func (x *SLBgplsTopoNodeData) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoNodeData.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoNodeData) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{9}
}

func (x *SLBgplsTopoNodeData) GetNode() *SLBgplsTopoNode {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *SLBgplsTopoNodeData) GetNodeAttr() *SLBgplsTopoNodeAttr {
	if x != nil {
		return x.NodeAttr
	}
	return nil
}

// Link Data
type SLBgplsTopoLinkData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field carries info about a link NLRI.
	Link *SLBgplsTopoLink `protobuf:"bytes,1,opt,name=Link,proto3" json:"Link,omitempty"`
	// This field carries info about link attributes.
	LinkAttr *SLBgplsTopoLinkAttr `protobuf:"bytes,2,opt,name=LinkAttr,proto3" json:"LinkAttr,omitempty"`
}

func (x *SLBgplsTopoLinkData) Reset() {
	*x = SLBgplsTopoLinkData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoLinkData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoLinkData) ProtoMessage() {}

func (x *SLBgplsTopoLinkData) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoLinkData.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoLinkData) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{10}
}

func (x *SLBgplsTopoLinkData) GetLink() *SLBgplsTopoLink {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *SLBgplsTopoLinkData) GetLinkAttr() *SLBgplsTopoLinkAttr {
	if x != nil {
		return x.LinkAttr
	}
	return nil
}

// Prefix Data
type SLBgplsTopoPrefixData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field carries info about a prefix NLRI.
	Prefix *SLBgplsTopoPrefix `protobuf:"bytes,1,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
	// This field carries info about prefix attributes.
	PrefixAttr *SLBgplsTopoPrefixAttr `protobuf:"bytes,2,opt,name=PrefixAttr,proto3" json:"PrefixAttr,omitempty"`
}

func (x *SLBgplsTopoPrefixData) Reset() {
	*x = SLBgplsTopoPrefixData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoPrefixData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoPrefixData) ProtoMessage() {}

func (x *SLBgplsTopoPrefixData) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoPrefixData.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoPrefixData) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{11}
}

func (x *SLBgplsTopoPrefixData) GetPrefix() *SLBgplsTopoPrefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *SLBgplsTopoPrefixData) GetPrefixAttr() *SLBgplsTopoPrefixAttr {
	if x != nil {
		return x.PrefixAttr
	}
	return nil
}

// SRv6 SID Data
type SLBgplsTopoSrv6SidData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field carries info about a SRv6 SID NLRI.
	Srv6Sid *SLBgplsTopoSrv6Sid `protobuf:"bytes,1,opt,name=Srv6Sid,proto3" json:"Srv6Sid,omitempty"`
	// This field carries info about SRv6 SID attributes.
	Srv6SidAttr *SLBgplsTopoSrv6SidAttr `protobuf:"bytes,2,opt,name=Srv6SidAttr,proto3" json:"Srv6SidAttr,omitempty"`
}

func (x *SLBgplsTopoSrv6SidData) Reset() {
	*x = SLBgplsTopoSrv6SidData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrv6SidData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrv6SidData) ProtoMessage() {}

func (x *SLBgplsTopoSrv6SidData) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrv6SidData.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrv6SidData) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{12}
}

func (x *SLBgplsTopoSrv6SidData) GetSrv6Sid() *SLBgplsTopoSrv6Sid {
	if x != nil {
		return x.Srv6Sid
	}
	return nil
}

func (x *SLBgplsTopoSrv6SidData) GetSrv6SidAttr() *SLBgplsTopoSrv6SidAttr {
	if x != nil {
		return x.Srv6SidAttr
	}
	return nil
}

// SR Policy Data
type SLBgplsTopoSrPolicyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field carries info about a SR policy NLRI.
	SrPolicy *SLBgplsTopoSrPolicy `protobuf:"bytes,1,opt,name=SrPolicy,proto3" json:"SrPolicy,omitempty"`
	// This field carries info about SR policy attributes.
	SrPolicyAttr *SLBgplsTopoSrPolicyAttr `protobuf:"bytes,2,opt,name=SrPolicyAttr,proto3" json:"SrPolicyAttr,omitempty"`
}

func (x *SLBgplsTopoSrPolicyData) Reset() {
	*x = SLBgplsTopoSrPolicyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrPolicyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrPolicyData) ProtoMessage() {}

func (x *SLBgplsTopoSrPolicyData) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrPolicyData.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrPolicyData) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{13}
}

func (x *SLBgplsTopoSrPolicyData) GetSrPolicy() *SLBgplsTopoSrPolicy {
	if x != nil {
		return x.SrPolicy
	}
	return nil
}

func (x *SLBgplsTopoSrPolicyData) GetSrPolicyAttr() *SLBgplsTopoSrPolicyAttr {
	if x != nil {
		return x.SrPolicyAttr
	}
	return nil
}

// Node
type SLBgplsTopoNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AS Number associated with the BGP process originating the link-state information.
	// Autonomous System Number. TLV 512.
	// Section 5.2.1 of [RFC9552]
	Asn uint32 `protobuf:"varint,1,opt,name=Asn,proto3" json:"Asn,omitempty"`
	// Node Identifier
	// Actual type can be determined based on Protocol in SLBgplsTopoNlri.
	//
	// Types that are assignable to NodeId:
	//
	//	*SLBgplsTopoNode_OspfNodeId
	//	*SLBgplsTopoNode_Ospfv3NodeId
	//	*SLBgplsTopoNode_IsisNodeId
	//	*SLBgplsTopoNode_BgpNodeId
	//	*SLBgplsTopoNode_SrPolicyNodeId
	NodeId isSLBgplsTopoNode_NodeId `protobuf_oneof:"NodeId"`
}

func (x *SLBgplsTopoNode) Reset() {
	*x = SLBgplsTopoNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoNode) ProtoMessage() {}

func (x *SLBgplsTopoNode) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoNode.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoNode) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{14}
}

func (x *SLBgplsTopoNode) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (m *SLBgplsTopoNode) GetNodeId() isSLBgplsTopoNode_NodeId {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (x *SLBgplsTopoNode) GetOspfNodeId() *SLBgplsTopoOspfNodeId {
	if x, ok := x.GetNodeId().(*SLBgplsTopoNode_OspfNodeId); ok {
		return x.OspfNodeId
	}
	return nil
}

func (x *SLBgplsTopoNode) GetOspfv3NodeId() *SLBgplsTopoOspfv3NodeId {
	if x, ok := x.GetNodeId().(*SLBgplsTopoNode_Ospfv3NodeId); ok {
		return x.Ospfv3NodeId
	}
	return nil
}

func (x *SLBgplsTopoNode) GetIsisNodeId() *SLBgplsTopoIsisNodeId {
	if x, ok := x.GetNodeId().(*SLBgplsTopoNode_IsisNodeId); ok {
		return x.IsisNodeId
	}
	return nil
}

func (x *SLBgplsTopoNode) GetBgpNodeId() *SLBgplsTopoBgpNodeId {
	if x, ok := x.GetNodeId().(*SLBgplsTopoNode_BgpNodeId); ok {
		return x.BgpNodeId
	}
	return nil
}

func (x *SLBgplsTopoNode) GetSrPolicyNodeId() *SLBgplsTopoSrPolicyNodeId {
	if x, ok := x.GetNodeId().(*SLBgplsTopoNode_SrPolicyNodeId); ok {
		return x.SrPolicyNodeId
	}
	return nil
}

type isSLBgplsTopoNode_NodeId interface {
	isSLBgplsTopoNode_NodeId()
}

type SLBgplsTopoNode_OspfNodeId struct {
	// This field carries info about an OSPFv2 node ID.
	OspfNodeId *SLBgplsTopoOspfNodeId `protobuf:"bytes,2,opt,name=OspfNodeId,proto3,oneof"`
}

type SLBgplsTopoNode_Ospfv3NodeId struct {
	// This field carries info about an OSPFv3 node ID.
	Ospfv3NodeId *SLBgplsTopoOspfv3NodeId `protobuf:"bytes,3,opt,name=Ospfv3NodeId,proto3,oneof"`
}

type SLBgplsTopoNode_IsisNodeId struct {
	// This field carries info about an ISIS node ID.
	IsisNodeId *SLBgplsTopoIsisNodeId `protobuf:"bytes,4,opt,name=IsisNodeId,proto3,oneof"`
}

type SLBgplsTopoNode_BgpNodeId struct {
	// This field carries info about a BGP node ID.
	BgpNodeId *SLBgplsTopoBgpNodeId `protobuf:"bytes,5,opt,name=BgpNodeId,proto3,oneof"`
}

type SLBgplsTopoNode_SrPolicyNodeId struct {
	// This field carries info about an SR policy node ID.
	SrPolicyNodeId *SLBgplsTopoSrPolicyNodeId `protobuf:"bytes,6,opt,name=SrPolicyNodeId,proto3,oneof"`
}

func (*SLBgplsTopoNode_OspfNodeId) isSLBgplsTopoNode_NodeId() {}

func (*SLBgplsTopoNode_Ospfv3NodeId) isSLBgplsTopoNode_NodeId() {}

func (*SLBgplsTopoNode_IsisNodeId) isSLBgplsTopoNode_NodeId() {}

func (*SLBgplsTopoNode_BgpNodeId) isSLBgplsTopoNode_NodeId() {}

func (*SLBgplsTopoNode_SrPolicyNodeId) isSLBgplsTopoNode_NodeId() {}

// Link
type SLBgplsTopoLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node Descriptors for the node anchoring the local end of the link.
	// Local Node Descriptors. TLV 256.
	// Section 5.2.1.2 of [RFC9552]
	LocalNodeDescr *SLBgplsTopoNode `protobuf:"bytes,1,opt,name=LocalNodeDescr,proto3" json:"LocalNodeDescr,omitempty"`
	// Node Descriptors for the node anchoring the remote end of the link.
	// Remote Node Descriptors. TLV 257.
	// Section 5.2.1.3 of [RFC9552]
	RemoteNodeDescr *SLBgplsTopoNode `protobuf:"bytes,2,opt,name=RemoteNodeDescr,proto3" json:"RemoteNodeDescr,omitempty"`
	// The Link Descriptor TLVs uniquely identify a link among multiple parallel
	// links between a pair of anchor routers.
	// Section 5.2.2 of [RFC9552]
	LinkDescr *SLBgplsTopoLinkDescr `protobuf:"bytes,3,opt,name=LinkDescr,proto3" json:"LinkDescr,omitempty"`
}

func (x *SLBgplsTopoLink) Reset() {
	*x = SLBgplsTopoLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoLink) ProtoMessage() {}

func (x *SLBgplsTopoLink) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoLink.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoLink) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{15}
}

func (x *SLBgplsTopoLink) GetLocalNodeDescr() *SLBgplsTopoNode {
	if x != nil {
		return x.LocalNodeDescr
	}
	return nil
}

func (x *SLBgplsTopoLink) GetRemoteNodeDescr() *SLBgplsTopoNode {
	if x != nil {
		return x.RemoteNodeDescr
	}
	return nil
}

func (x *SLBgplsTopoLink) GetLinkDescr() *SLBgplsTopoLinkDescr {
	if x != nil {
		return x.LinkDescr
	}
	return nil
}

// Prefix
type SLBgplsTopoPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node Descriptors for the node originating the prefix.
	// Local Node Descriptors. TLV 256.
	// Section 5.2.1.2 of [RFC9552]
	NodeDescr *SLBgplsTopoNode `protobuf:"bytes,1,opt,name=NodeDescr,proto3" json:"NodeDescr,omitempty"`
	// Prefix Descriptor TLVs uniquely identify an IPv4 or IPv6 prefix
	// originated by a node.
	// Section 5.2.3 of [RFC9552]
	PrefixDescr *SLBgplsTopoPrefixDescr `protobuf:"bytes,2,opt,name=PrefixDescr,proto3" json:"PrefixDescr,omitempty"`
}

func (x *SLBgplsTopoPrefix) Reset() {
	*x = SLBgplsTopoPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoPrefix) ProtoMessage() {}

func (x *SLBgplsTopoPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoPrefix.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoPrefix) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{16}
}

func (x *SLBgplsTopoPrefix) GetNodeDescr() *SLBgplsTopoNode {
	if x != nil {
		return x.NodeDescr
	}
	return nil
}

func (x *SLBgplsTopoPrefix) GetPrefixDescr() *SLBgplsTopoPrefixDescr {
	if x != nil {
		return x.PrefixDescr
	}
	return nil
}

// SRv6 SID
type SLBgplsTopoSrv6Sid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node Descriptors for the node originating the SRv6 SID.
	// Local Node Descriptors. TLV 256.
	// Section 5.2.1.2 of [RFC9552]
	NodeDescr    *SLBgplsTopoNode         `protobuf:"bytes,1,opt,name=NodeDescr,proto3" json:"NodeDescr,omitempty"`
	Srv6SidDescr *SLBgplsTopoSrv6SidDescr `protobuf:"bytes,2,opt,name=Srv6SidDescr,proto3" json:"Srv6SidDescr,omitempty"`
}

func (x *SLBgplsTopoSrv6Sid) Reset() {
	*x = SLBgplsTopoSrv6Sid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrv6Sid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrv6Sid) ProtoMessage() {}

func (x *SLBgplsTopoSrv6Sid) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrv6Sid.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrv6Sid) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{17}
}

func (x *SLBgplsTopoSrv6Sid) GetNodeDescr() *SLBgplsTopoNode {
	if x != nil {
		return x.NodeDescr
	}
	return nil
}

func (x *SLBgplsTopoSrv6Sid) GetSrv6SidDescr() *SLBgplsTopoSrv6SidDescr {
	if x != nil {
		return x.Srv6SidDescr
	}
	return nil
}

// SR Policy
type SLBgplsTopoSrPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node Descriptors for the node originating the SR policy.
	// Local Node Descriptors. TLV 256.
	// Section 5.2.1.2 of [RFC9552]
	NodeDescr *SLBgplsTopoNode `protobuf:"bytes,1,opt,name=NodeDescr,proto3" json:"NodeDescr,omitempty"`
	// A Segment Routing Policy Candidate Path.
	// SR Policy Candidate Path Descriptor. TLV 554.
	// Section 4 of [draft-ietf-idr-bgp-ls-sr-policy]
	SrPolicyDescr *SLBgplsTopoSrPolicyDescr `protobuf:"bytes,2,opt,name=SrPolicyDescr,proto3" json:"SrPolicyDescr,omitempty"`
}

func (x *SLBgplsTopoSrPolicy) Reset() {
	*x = SLBgplsTopoSrPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrPolicy) ProtoMessage() {}

func (x *SLBgplsTopoSrPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrPolicy.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrPolicy) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{18}
}

func (x *SLBgplsTopoSrPolicy) GetNodeDescr() *SLBgplsTopoNode {
	if x != nil {
		return x.NodeDescr
	}
	return nil
}

func (x *SLBgplsTopoSrPolicy) GetSrPolicyDescr() *SLBgplsTopoSrPolicyDescr {
	if x != nil {
		return x.SrPolicyDescr
	}
	return nil
}

// Link descriptor
type SLBgplsTopoLinkDescr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Local Identifier of a link.
	// Link Local/Remote Identifier. TLV 258.
	// Section 5.2.2 of [RFC9552]
	LocalId uint32 `protobuf:"varint,1,opt,name=LocalId,proto3" json:"LocalId,omitempty"`
	// Remote Identifier of a link.
	// Link Local/Remote Identifier. TLV 258.
	// Section 5.2.2 of [RFC9552]
	RemoteId uint32 `protobuf:"varint,2,opt,name=RemoteId,proto3" json:"RemoteId,omitempty"`
	// Local IPv4 address of a link.
	// IPv4 interface address. TLV 259.
	// Section 5.2.2 of [RFC9552]
	LocalIpv4 []byte `protobuf:"bytes,3,opt,name=LocalIpv4,proto3" json:"LocalIpv4,omitempty"`
	// Remote IPv4 address of a link.
	// IPv4 neighbor address. TLV 260.
	// Section 5.2.2 of [RFC9552]
	RemoteIpv4 []byte `protobuf:"bytes,4,opt,name=RemoteIpv4,proto3" json:"RemoteIpv4,omitempty"`
	// Local IPv6 address of a link.
	// IPv6 interface address. TLV 261.
	// Section 5.2.2 of [RFC9552]
	LocalIpv6 []byte `protobuf:"bytes,5,opt,name=LocalIpv6,proto3" json:"LocalIpv6,omitempty"`
	// Remote IPv6 address of a link.
	// IPv6 neighbor address. TLV 262.
	// Section 5.2.2 of [RFC9552]
	RemoteIpv6 []byte `protobuf:"bytes,6,opt,name=RemoteIpv6,proto3" json:"RemoteIpv6,omitempty"`
	// Multi Topology Identifier (MTID) of a link.
	// Multi-Topology Identifier. TLV 263.
	// Section 5.2.2.1 of [RFC9552]
	MtId *SLBgplsTopoMtId `protobuf:"bytes,7,opt,name=MtId,proto3" json:"MtId,omitempty"`
}

func (x *SLBgplsTopoLinkDescr) Reset() {
	*x = SLBgplsTopoLinkDescr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoLinkDescr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoLinkDescr) ProtoMessage() {}

func (x *SLBgplsTopoLinkDescr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoLinkDescr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoLinkDescr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{19}
}

func (x *SLBgplsTopoLinkDescr) GetLocalId() uint32 {
	if x != nil {
		return x.LocalId
	}
	return 0
}

func (x *SLBgplsTopoLinkDescr) GetRemoteId() uint32 {
	if x != nil {
		return x.RemoteId
	}
	return 0
}

func (x *SLBgplsTopoLinkDescr) GetLocalIpv4() []byte {
	if x != nil {
		return x.LocalIpv4
	}
	return nil
}

func (x *SLBgplsTopoLinkDescr) GetRemoteIpv4() []byte {
	if x != nil {
		return x.RemoteIpv4
	}
	return nil
}

func (x *SLBgplsTopoLinkDescr) GetLocalIpv6() []byte {
	if x != nil {
		return x.LocalIpv6
	}
	return nil
}

func (x *SLBgplsTopoLinkDescr) GetRemoteIpv6() []byte {
	if x != nil {
		return x.RemoteIpv6
	}
	return nil
}

func (x *SLBgplsTopoLinkDescr) GetMtId() *SLBgplsTopoMtId {
	if x != nil {
		return x.MtId
	}
	return nil
}

// Prefix descriptor
type SLBgplsTopoPrefixDescr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Multi Topology Identifier (MTID) of a prefix.
	// Multi-Topology Identifier. TLV 263.
	// Section 5.2.2.1 of [RFC9552]
	MtId *SLBgplsTopoMtId `protobuf:"bytes,1,opt,name=MtId,proto3" json:"MtId,omitempty"`
	// OSPF Route type of a prefix.
	// OSPF Route Type. TLV 264.
	// Section 5.2.3.1 of [RFC9552]
	OspfRouteType SLBgplsTopoOspfRouteType `protobuf:"varint,2,opt,name=OspfRouteType,proto3,enum=service_layer.SLBgplsTopoOspfRouteType" json:"OspfRouteType,omitempty"`
	// IP address prefix (IPv4 or IPv6) advertised in the IGP topology.
	// IP Reachability Information. TLV 265.
	// Section 5.2.3.2 of [RFC9552]
	PrefixLength uint32 `protobuf:"varint,3,opt,name=PrefixLength,proto3" json:"PrefixLength,omitempty"`
	// IP address prefix (IPv4 or IPv6) advertised in the IGP topology.
	// IP Reachability Information. TLV 265.
	// Section 5.2.3.2 of [RFC9552]
	Prefix []byte `protobuf:"bytes,4,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
}

func (x *SLBgplsTopoPrefixDescr) Reset() {
	*x = SLBgplsTopoPrefixDescr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoPrefixDescr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoPrefixDescr) ProtoMessage() {}

func (x *SLBgplsTopoPrefixDescr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoPrefixDescr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoPrefixDescr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{20}
}

func (x *SLBgplsTopoPrefixDescr) GetMtId() *SLBgplsTopoMtId {
	if x != nil {
		return x.MtId
	}
	return nil
}

func (x *SLBgplsTopoPrefixDescr) GetOspfRouteType() SLBgplsTopoOspfRouteType {
	if x != nil {
		return x.OspfRouteType
	}
	return SLBgplsTopoOspfRouteType_SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_RESERVED
}

func (x *SLBgplsTopoPrefixDescr) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *SLBgplsTopoPrefixDescr) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

// SRv6 SID descriptor
type SLBgplsTopoSrv6SidDescr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Multi Topology Identifier (MTID) of an SRv6 SID.
	// Multi-Topology Identifier. TLV 263.
	// Section 5.2.2.1 of [RFC9552]
	MtId *SLBgplsTopoMtId `protobuf:"bytes,1,opt,name=MtId,proto3" json:"MtId,omitempty"`
	// An SRv6 SID that is associated with the node.
	// SRv6 SID Information. TLV 518. Section 6.1 of [RFC9514]
	// SRv6 SID takes an IPv6 Address and must be
	// enforced for 16 bytes.
	Srv6Sid []byte `protobuf:"bytes,2,opt,name=Srv6Sid,proto3" json:"Srv6Sid,omitempty"`
}

func (x *SLBgplsTopoSrv6SidDescr) Reset() {
	*x = SLBgplsTopoSrv6SidDescr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrv6SidDescr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrv6SidDescr) ProtoMessage() {}

func (x *SLBgplsTopoSrv6SidDescr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrv6SidDescr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrv6SidDescr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{21}
}

func (x *SLBgplsTopoSrv6SidDescr) GetMtId() *SLBgplsTopoMtId {
	if x != nil {
		return x.MtId
	}
	return nil
}

func (x *SLBgplsTopoSrv6SidDescr) GetSrv6Sid() []byte {
	if x != nil {
		return x.Srv6Sid
	}
	return nil
}

// SR Policy descriptor
type SLBgplsTopoSrPolicyDescr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Protocol instantiating the SR policy.
	// Protocol-origin. TLV 554.
	// Section 4 of [draft-ietf-idr-bgp-ls-sr-policy]
	ProtoOrigin SLSrPolicyProtocolOrigin `protobuf:"varint,1,opt,name=ProtoOrigin,proto3,enum=service_layer.SLSrPolicyProtocolOrigin" json:"ProtoOrigin,omitempty"`
	// Flags associated with the SR policy.
	// Flags. TLV 554.
	// Section 4 of [draft-ietf-idr-bgp-ls-sr-policy]
	Flags *SLSrPolicyFlags `protobuf:"bytes,2,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Address of the endpoint of the SR Policy.
	// Endpoint. TLV 554.
	// Section 4 of [draft-ietf-idr-bgp-ls-sr-policy]
	//
	// Types that are assignable to EndpointAddress:
	//
	//	*SLBgplsTopoSrPolicyDescr_Ipv4EndAddr
	//	*SLBgplsTopoSrPolicyDescr_Ipv6EndAddr
	EndpointAddress isSLBgplsTopoSrPolicyDescr_EndpointAddress `protobuf_oneof:"EndpointAddress"`
	// Color of the SR Policy.
	// Policy Color. TLV 554.
	// Section 4 of [draft-ietf-idr-bgp-ls-sr-policy]
	Color uint32 `protobuf:"varint,5,opt,name=Color,proto3" json:"Color,omitempty"`
	// 4-byte encoding of the ASN of the originator.
	// Originator AS Number. TLV 554.
	// Section 4 of [draft-ietf-idr-bgp-ls-sr-policy]
	OriginAsn uint32 `protobuf:"varint,6,opt,name=OriginAsn,proto3" json:"OriginAsn,omitempty"`
	// Address of the originator.
	// Originator Address. TLV 554.
	// Section 4 of [draft-ietf-idr-bgp-ls-sr-policy]
	//
	// Types that are assignable to OriginatorAddress:
	//
	//	*SLBgplsTopoSrPolicyDescr_Ipv4OrigAddr
	//	*SLBgplsTopoSrPolicyDescr_Ipv6OrigAddr
	OriginatorAddress isSLBgplsTopoSrPolicyDescr_OriginatorAddress `protobuf_oneof:"OriginatorAddress"`
	// Discriminator of the path.
	// Discriminator. TLV 554.
	// Section 4 of [draft-ietf-idr-bgp-ls-sr-policy]
	Discriminator uint32 `protobuf:"varint,9,opt,name=Discriminator,proto3" json:"Discriminator,omitempty"`
}

func (x *SLBgplsTopoSrPolicyDescr) Reset() {
	*x = SLBgplsTopoSrPolicyDescr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrPolicyDescr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrPolicyDescr) ProtoMessage() {}

func (x *SLBgplsTopoSrPolicyDescr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrPolicyDescr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrPolicyDescr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{22}
}

func (x *SLBgplsTopoSrPolicyDescr) GetProtoOrigin() SLSrPolicyProtocolOrigin {
	if x != nil {
		return x.ProtoOrigin
	}
	return SLSrPolicyProtocolOrigin_SL_SR_POLICY_PROTOCOL_ORIGIN_RESERVED
}

func (x *SLBgplsTopoSrPolicyDescr) GetFlags() *SLSrPolicyFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (m *SLBgplsTopoSrPolicyDescr) GetEndpointAddress() isSLBgplsTopoSrPolicyDescr_EndpointAddress {
	if m != nil {
		return m.EndpointAddress
	}
	return nil
}

func (x *SLBgplsTopoSrPolicyDescr) GetIpv4EndAddr() []byte {
	if x, ok := x.GetEndpointAddress().(*SLBgplsTopoSrPolicyDescr_Ipv4EndAddr); ok {
		return x.Ipv4EndAddr
	}
	return nil
}

func (x *SLBgplsTopoSrPolicyDescr) GetIpv6EndAddr() []byte {
	if x, ok := x.GetEndpointAddress().(*SLBgplsTopoSrPolicyDescr_Ipv6EndAddr); ok {
		return x.Ipv6EndAddr
	}
	return nil
}

func (x *SLBgplsTopoSrPolicyDescr) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *SLBgplsTopoSrPolicyDescr) GetOriginAsn() uint32 {
	if x != nil {
		return x.OriginAsn
	}
	return 0
}

func (m *SLBgplsTopoSrPolicyDescr) GetOriginatorAddress() isSLBgplsTopoSrPolicyDescr_OriginatorAddress {
	if m != nil {
		return m.OriginatorAddress
	}
	return nil
}

func (x *SLBgplsTopoSrPolicyDescr) GetIpv4OrigAddr() []byte {
	if x, ok := x.GetOriginatorAddress().(*SLBgplsTopoSrPolicyDescr_Ipv4OrigAddr); ok {
		return x.Ipv4OrigAddr
	}
	return nil
}

func (x *SLBgplsTopoSrPolicyDescr) GetIpv6OrigAddr() []byte {
	if x, ok := x.GetOriginatorAddress().(*SLBgplsTopoSrPolicyDescr_Ipv6OrigAddr); ok {
		return x.Ipv6OrigAddr
	}
	return nil
}

func (x *SLBgplsTopoSrPolicyDescr) GetDiscriminator() uint32 {
	if x != nil {
		return x.Discriminator
	}
	return 0
}

type isSLBgplsTopoSrPolicyDescr_EndpointAddress interface {
	isSLBgplsTopoSrPolicyDescr_EndpointAddress()
}

type SLBgplsTopoSrPolicyDescr_Ipv4EndAddr struct {
	// This field carries info about an IPv4 endpoint address.
	Ipv4EndAddr []byte `protobuf:"bytes,3,opt,name=Ipv4EndAddr,proto3,oneof"`
}

type SLBgplsTopoSrPolicyDescr_Ipv6EndAddr struct {
	// This field carries info about an IPv6 endpoint address.
	Ipv6EndAddr []byte `protobuf:"bytes,4,opt,name=Ipv6EndAddr,proto3,oneof"`
}

func (*SLBgplsTopoSrPolicyDescr_Ipv4EndAddr) isSLBgplsTopoSrPolicyDescr_EndpointAddress() {}

func (*SLBgplsTopoSrPolicyDescr_Ipv6EndAddr) isSLBgplsTopoSrPolicyDescr_EndpointAddress() {}

type isSLBgplsTopoSrPolicyDescr_OriginatorAddress interface {
	isSLBgplsTopoSrPolicyDescr_OriginatorAddress()
}

type SLBgplsTopoSrPolicyDescr_Ipv4OrigAddr struct {
	// This field carries info about an IPv4 originator address.
	Ipv4OrigAddr []byte `protobuf:"bytes,7,opt,name=Ipv4OrigAddr,proto3,oneof"`
}

type SLBgplsTopoSrPolicyDescr_Ipv6OrigAddr struct {
	// This field carries info about an IPv6 originator address.
	Ipv6OrigAddr []byte `protobuf:"bytes,8,opt,name=Ipv6OrigAddr,proto3,oneof"`
}

func (*SLBgplsTopoSrPolicyDescr_Ipv4OrigAddr) isSLBgplsTopoSrPolicyDescr_OriginatorAddress() {}

func (*SLBgplsTopoSrPolicyDescr_Ipv6OrigAddr) isSLBgplsTopoSrPolicyDescr_OriginatorAddress() {}

// OSPF Node ID
type SLBgplsTopoOspfNodeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Area identifier identifying the area to which the NLRI belongs.
	// OSPF Area-ID. TLV 514.
	// Section 5.2.1 of [RFC9552]
	AreaId uint32 `protobuf:"varint,1,opt,name=AreaId,proto3" json:"AreaId,omitempty"`
	// Specifies whether the area identifier is set or not.
	// Area identifier will not be set for AS scoped prefixes.
	IsAsScoped uint32 `protobuf:"varint,2,opt,name=IsAsScoped,proto3" json:"IsAsScoped,omitempty"`
	// Router ID.
	// IGP Router-ID. TLV 515.
	// Section 5.2.1 of [RFC9552]
	RouterId []byte `protobuf:"bytes,3,opt,name=RouterId,proto3" json:"RouterId,omitempty"`
	// IPv4 address of the DR's interface to the LAN.
	// IGP Router-ID. TLV 515.
	// Section 5.2.1 of [RFC9552]
	DrIdentifier []byte `protobuf:"bytes,4,opt,name=DrIdentifier,proto3" json:"DrIdentifier,omitempty"`
}

func (x *SLBgplsTopoOspfNodeId) Reset() {
	*x = SLBgplsTopoOspfNodeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoOspfNodeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoOspfNodeId) ProtoMessage() {}

func (x *SLBgplsTopoOspfNodeId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoOspfNodeId.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoOspfNodeId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{23}
}

func (x *SLBgplsTopoOspfNodeId) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *SLBgplsTopoOspfNodeId) GetIsAsScoped() uint32 {
	if x != nil {
		return x.IsAsScoped
	}
	return 0
}

func (x *SLBgplsTopoOspfNodeId) GetRouterId() []byte {
	if x != nil {
		return x.RouterId
	}
	return nil
}

func (x *SLBgplsTopoOspfNodeId) GetDrIdentifier() []byte {
	if x != nil {
		return x.DrIdentifier
	}
	return nil
}

// OSPFv3 Node ID
type SLBgplsTopoOspfv3NodeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Area identifier identifying the area to which the NLRI belongs.
	// OSPF Area-ID. TLV 514.
	// Section 5.2.1 of [RFC9552]
	AreaId uint32 `protobuf:"varint,1,opt,name=AreaId,proto3" json:"AreaId,omitempty"`
	// Specifies whether the area identifier is set or not.
	// Area identifier will not be set for AS scoped prefixes.
	AsScoped uint32 `protobuf:"varint,2,opt,name=AsScoped,proto3" json:"AsScoped,omitempty"`
	// Router ID.
	// IGP Router-ID. TLV 515.
	// Section 5.2.1 of [RFC9552]
	RouterId []byte `protobuf:"bytes,3,opt,name=RouterId,proto3" json:"RouterId,omitempty"`
	// Interface identifier of the DR's interface to the LAN.
	// IGP Router-ID. TLV 515.
	// Section 5.2.1 of [RFC9552]
	DrIdentifier uint32 `protobuf:"varint,4,opt,name=DrIdentifier,proto3" json:"DrIdentifier,omitempty"`
}

func (x *SLBgplsTopoOspfv3NodeId) Reset() {
	*x = SLBgplsTopoOspfv3NodeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoOspfv3NodeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoOspfv3NodeId) ProtoMessage() {}

func (x *SLBgplsTopoOspfv3NodeId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoOspfv3NodeId.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoOspfv3NodeId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{24}
}

func (x *SLBgplsTopoOspfv3NodeId) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *SLBgplsTopoOspfv3NodeId) GetAsScoped() uint32 {
	if x != nil {
		return x.AsScoped
	}
	return 0
}

func (x *SLBgplsTopoOspfv3NodeId) GetRouterId() []byte {
	if x != nil {
		return x.RouterId
	}
	return nil
}

func (x *SLBgplsTopoOspfv3NodeId) GetDrIdentifier() uint32 {
	if x != nil {
		return x.DrIdentifier
	}
	return 0
}

// ISIS Node ID
type SLBgplsTopoIsisNodeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// System ID.
	// IGP Router-ID. TLV 515.
	// Section 5.2.1 of [RFC9552]
	SystemId []byte `protobuf:"bytes,1,opt,name=SystemId,proto3" json:"SystemId,omitempty"`
	// Pseudo Node Identifier (PSN ID).
	// IGP Router-ID. TLV 515.
	// Section 5.2.1 of [RFC9552]
	PsnId []byte `protobuf:"bytes,2,opt,name=PsnId,proto3" json:"PsnId,omitempty"`
}

func (x *SLBgplsTopoIsisNodeId) Reset() {
	*x = SLBgplsTopoIsisNodeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoIsisNodeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoIsisNodeId) ProtoMessage() {}

func (x *SLBgplsTopoIsisNodeId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoIsisNodeId.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoIsisNodeId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{25}
}

func (x *SLBgplsTopoIsisNodeId) GetSystemId() []byte {
	if x != nil {
		return x.SystemId
	}
	return nil
}

func (x *SLBgplsTopoIsisNodeId) GetPsnId() []byte {
	if x != nil {
		return x.PsnId
	}
	return nil
}

// BGP Node ID
type SLBgplsTopoBgpNodeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Router ID.
	// BGP Router-ID. TLV 516.
	// Section 4.2 of [RFC9086]
	RouterId []byte `protobuf:"bytes,1,opt,name=RouterId,proto3" json:"RouterId,omitempty"`
	// ASN of the confederation member
	// Member-ASN. TLV 517.
	// Section 4.2 of [RFC9086]
	MemberAsn uint32 `protobuf:"varint,2,opt,name=MemberAsn,proto3" json:"MemberAsn,omitempty"`
}

func (x *SLBgplsTopoBgpNodeId) Reset() {
	*x = SLBgplsTopoBgpNodeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoBgpNodeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoBgpNodeId) ProtoMessage() {}

func (x *SLBgplsTopoBgpNodeId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoBgpNodeId.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoBgpNodeId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{26}
}

func (x *SLBgplsTopoBgpNodeId) GetRouterId() []byte {
	if x != nil {
		return x.RouterId
	}
	return nil
}

func (x *SLBgplsTopoBgpNodeId) GetMemberAsn() uint32 {
	if x != nil {
		return x.MemberAsn
	}
	return 0
}

// SR Policy Node ID
type SLBgplsTopoSrPolicyNodeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Router ID.
	// BGP Router-ID. TLV 516.
	// Section 4.2 of [RFC9086]
	RouterId []byte `protobuf:"bytes,1,opt,name=RouterId,proto3" json:"RouterId,omitempty"`
	// ASN of the confederation member
	// Member-ASN. TLV 517.
	// Section 4.2 of [RFC9086]
	MemberAsn uint32 `protobuf:"varint,2,opt,name=MemberAsn,proto3" json:"MemberAsn,omitempty"`
	// Auxiliary TE Router-ID.
	// IPv4 Router-ID. TLV 1028.
	// Section 3 of [draft-ietf-idr-bgp-ls-sr-policy]
	Ipv4RouterId []byte `protobuf:"bytes,3,opt,name=Ipv4RouterId,proto3" json:"Ipv4RouterId,omitempty"`
	// Auxiliary TE Router-ID.
	// IPv6 Router-ID. TLV 1029.
	// Section 3 of [draft-ietf-idr-bgp-ls-sr-policy]
	Ipv6RouterId []byte `protobuf:"bytes,4,opt,name=Ipv6RouterId,proto3" json:"Ipv6RouterId,omitempty"`
}

func (x *SLBgplsTopoSrPolicyNodeId) Reset() {
	*x = SLBgplsTopoSrPolicyNodeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrPolicyNodeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrPolicyNodeId) ProtoMessage() {}

func (x *SLBgplsTopoSrPolicyNodeId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrPolicyNodeId.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrPolicyNodeId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{27}
}

func (x *SLBgplsTopoSrPolicyNodeId) GetRouterId() []byte {
	if x != nil {
		return x.RouterId
	}
	return nil
}

func (x *SLBgplsTopoSrPolicyNodeId) GetMemberAsn() uint32 {
	if x != nil {
		return x.MemberAsn
	}
	return 0
}

func (x *SLBgplsTopoSrPolicyNodeId) GetIpv4RouterId() []byte {
	if x != nil {
		return x.Ipv4RouterId
	}
	return nil
}

func (x *SLBgplsTopoSrPolicyNodeId) GetIpv6RouterId() []byte {
	if x != nil {
		return x.Ipv6RouterId
	}
	return nil
}

// Node Attributes
type SLBgplsTopoNodeAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Multi Topology Identifiers (MTIDs) of a node.
	// Multi-Topology Identifier. TLV 263.
	// Section 5.2.2.1 of [RFC9552]
	MtId []*SLBgplsTopoMtId `protobuf:"bytes,1,rep,name=MtId,proto3" json:"MtId,omitempty"`
	// Node Maximum SID Depth (MSD).
	// Node MSD. TLV 266.
	// Section 3 of [RFC8814]
	NodeMsd []*SLBgplsTopoNodeMsd `protobuf:"bytes,2,rep,name=NodeMsd,proto3" json:"NodeMsd,omitempty"`
	// Bitmask describing node attributes.
	// Node Flag Bits. TLV 1024.
	// Section 5.3.1.1 of [RFC9552]
	NodeFlagBits *SLBgplsTopoNodeFlagBits `protobuf:"bytes,3,opt,name=NodeFlagBits,proto3" json:"NodeFlagBits,omitempty"`
	// Optional Node Attribute TLVs advertised by a router.
	// Opaque Node Attribute. TLV 1025.
	// Section 5.3.1.5 of [RFC9552]
	OpaqueNodeAttr *SLBgplsTopoNodeOpaqueAttr `protobuf:"bytes,4,opt,name=OpaqueNodeAttr,proto3" json:"OpaqueNodeAttr,omitempty"`
	// Symbolic name of the router node.
	// Node Name. TLV 1026.
	// Section 5.3.1.3 of [RFC9552]
	NodeName *SLBgplsNodeName `protobuf:"bytes,5,opt,name=NodeName,proto3" json:"NodeName,omitempty"`
	// ISIS area addresses.
	// IS-IS Area Identifier. TLV 1027.
	// Section 5.3.1.2 of [RFC9552]
	IsisAreaId []*SLBgplsTopoIsisAreaId `protobuf:"bytes,6,rep,name=IsisAreaId,proto3" json:"IsisAreaId,omitempty"`
	// Auxiliary TE Router-IDs.
	// Local IPv4/IPv6 Router-ID. TLV 1028.
	// Section 5.3.1.4 of [RFC9552]
	LocalIpv4 []*SLBgplsTopoLocalIpv4RouterId `protobuf:"bytes,7,rep,name=LocalIpv4,proto3" json:"LocalIpv4,omitempty"`
	// Auxiliary TE Router-IDs.
	// Local IPv4/IPv6 Router-ID. TLV 1029.
	// Section 5.3.1.4 of [RFC9552]
	LocalIpv6 []*SLBgplsTopoLocalIpv6RouterId `protobuf:"bytes,8,rep,name=LocalIpv6,proto3" json:"LocalIpv6,omitempty"`
	// Flags.
	// SR Capabilities. TLV 1034.
	// Section 2.1.2 of [RFC9085]
	SrgbIsisFlags *SLBgplsTopoSrgbIsisFlags `protobuf:"bytes,9,opt,name=SrgbIsisFlags,proto3" json:"SrgbIsisFlags,omitempty"`
	// Segment Routing Global Blocks (SRGBs) of a node.
	// SR Capabilities. TLV 1034.
	// Section 2.1.2 of [RFC9085]
	Srgb []*SLBgplsTopoSrgb `protobuf:"bytes,10,rep,name=Srgb,proto3" json:"Srgb,omitempty"`
	// Segment Routing (SR) algorithms supported by the node.
	// SR-Algorithm. TLV 1035.
	// Section 2.1.3 of [RFC9085]
	SrAlgorithm *SLBgplsTopoSrAlgorithm `protobuf:"bytes,11,opt,name=SrAlgorithm,proto3" json:"SrAlgorithm,omitempty"`
	// Segment Routing Local Blocks (SRLBs) of a node.
	// SR Local Block. TLV 1036.
	// Section 2.1.4 of [RFC9085]
	Srlb []*SLBgplsTopoSrlb `protobuf:"bytes,12,rep,name=Srlb,proto3" json:"Srlb,omitempty"`
	// Definitions of Flexible Algorithms supported by the node
	// Flexible Algorithm Definition. TLV 1039.
	// Section 3 of [RFC9351]
	Fad []*SLBgplsTopoFad `protobuf:"bytes,13,rep,name=Fad,proto3" json:"Fad,omitempty"`
	// Unknown Node Attributes
	// Unknown/unsupported by IOS-XR/BGPLS.
	UnknownAttr []*SLBgplsTopoUnknownAttr `protobuf:"bytes,14,rep,name=UnknownAttr,proto3" json:"UnknownAttr,omitempty"`
	// Segment Routing V6 Capabilities of a node
	// SRv6 Capabilities. TLV 1038
	// Section 3.1 of [RFC9514]
	Srv6CapFlags *SLBgplsTopoSrv6CapFlags `protobuf:"bytes,15,opt,name=Srv6CapFlags,proto3" json:"Srv6CapFlags,omitempty"`
}

func (x *SLBgplsTopoNodeAttr) Reset() {
	*x = SLBgplsTopoNodeAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoNodeAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoNodeAttr) ProtoMessage() {}

func (x *SLBgplsTopoNodeAttr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoNodeAttr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoNodeAttr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{28}
}

func (x *SLBgplsTopoNodeAttr) GetMtId() []*SLBgplsTopoMtId {
	if x != nil {
		return x.MtId
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetNodeMsd() []*SLBgplsTopoNodeMsd {
	if x != nil {
		return x.NodeMsd
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetNodeFlagBits() *SLBgplsTopoNodeFlagBits {
	if x != nil {
		return x.NodeFlagBits
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetOpaqueNodeAttr() *SLBgplsTopoNodeOpaqueAttr {
	if x != nil {
		return x.OpaqueNodeAttr
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetNodeName() *SLBgplsNodeName {
	if x != nil {
		return x.NodeName
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetIsisAreaId() []*SLBgplsTopoIsisAreaId {
	if x != nil {
		return x.IsisAreaId
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetLocalIpv4() []*SLBgplsTopoLocalIpv4RouterId {
	if x != nil {
		return x.LocalIpv4
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetLocalIpv6() []*SLBgplsTopoLocalIpv6RouterId {
	if x != nil {
		return x.LocalIpv6
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetSrgbIsisFlags() *SLBgplsTopoSrgbIsisFlags {
	if x != nil {
		return x.SrgbIsisFlags
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetSrgb() []*SLBgplsTopoSrgb {
	if x != nil {
		return x.Srgb
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetSrAlgorithm() *SLBgplsTopoSrAlgorithm {
	if x != nil {
		return x.SrAlgorithm
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetSrlb() []*SLBgplsTopoSrlb {
	if x != nil {
		return x.Srlb
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetFad() []*SLBgplsTopoFad {
	if x != nil {
		return x.Fad
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetUnknownAttr() []*SLBgplsTopoUnknownAttr {
	if x != nil {
		return x.UnknownAttr
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetSrv6CapFlags() *SLBgplsTopoSrv6CapFlags {
	if x != nil {
		return x.Srv6CapFlags
	}
	return nil
}

// Link Attributes
type SLBgplsTopoLinkAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Link Local/Remote idetifiers.
	// Link Local Remote Identifiers. TLV 258.
	// Section 5.2.2 of [RFC9552]
	LinkLocRemId *SLBplsTopoLinkLocRemId `protobuf:"bytes,1,opt,name=LinkLocRemId,proto3" json:"LinkLocRemId,omitempty"`
	// Link Maximum SID Depth (MSD).
	// Link MSD. TLV 267.
	// Section 4 of [RFC8814]
	LinkMsd []*SLBgplsTopoLinkMsd `protobuf:"bytes,2,rep,name=LinkMsd,proto3" json:"LinkMsd,omitempty"`
	// Auxiliary Router-IDs used by the IGP.
	// Local IPv4/IPv6 Router-ID. TLV 1028.
	// Section 5.3.1.4 of [RFC9552]
	LocalIpv4RouterId []*SLBgplsTopoLocalIpv4RouterId `protobuf:"bytes,3,rep,name=LocalIpv4RouterId,proto3" json:"LocalIpv4RouterId,omitempty"`
	// Auxiliary Router-IDs used by the IGP.
	// Local IPv4/IPv6 Router-ID. TLV 1029.
	// Section 5.3.1.4 of [RFC9552]
	LocalIpv6RouterId []*SLBgplsTopoLocalIpv6RouterId `protobuf:"bytes,4,rep,name=LocalIpv6RouterId,proto3" json:"LocalIpv6RouterId,omitempty"`
	// Auxiliary Router-IDs used by the IGP.
	// Remote IPv4/IPv6 Router-ID. TLV 1030.
	// Section 5.3.2.1 of [RFC9552]
	RemoteIpv4RouterId []*SLBgplsTopoRemoteIpv4RouterId `protobuf:"bytes,5,rep,name=RemoteIpv4RouterId,proto3" json:"RemoteIpv4RouterId,omitempty"`
	// Auxiliary Router-IDs used by the IGP.
	// Remote IPv4/IPv6 Router-ID. TLV 1031.
	// Section 5.3.2.1 of [RFC9552]
	RemoteIpv6RouterId []*SLBgplsTopoRemoteIpv6RouterId `protobuf:"bytes,6,rep,name=RemoteIpv6RouterId,proto3" json:"RemoteIpv6RouterId,omitempty"`
	// The bit mask of administrative groups assigned
	// by the network administrator.
	// Administrative Group. TLV 1088
	// Section 5.3.2 of [RFC9552]
	AdminGroup *SLBgplsTopoAdminGroup `protobuf:"bytes,7,opt,name=AdminGroup,proto3" json:"AdminGroup,omitempty"`
	// The maximum bandwidth that can be used on a link.
	// Maximum Link Bandwidth. TLV 1089
	// Section 5.3.2 of [RFC9552]
	MaxBandwidth *SLBgplsTopoLinkMaxBandwidth `protobuf:"bytes,8,opt,name=MaxBandwidth,proto3" json:"MaxBandwidth,omitempty"`
	// The maximum bandwidth that can be reserved on a link.
	// Maximum Reservable Link Bandwidth. TLV 1090
	// Section 5.3.2 of [RFC9552]
	MaxResvBandwidth *SLBgplsTopoLinkMaxResvBandwidth `protobuf:"bytes,9,opt,name=MaxResvBandwidth,proto3" json:"MaxResvBandwidth,omitempty"`
	// The bandwidth reservable on a link on a
	// per priority basis.
	// Unreserved Link Bandwidth. TLV 1091
	// Section 5.3.2 of [RFC9552]
	UnresvBandwidth []*SLBgplsTopoLinkUnresvBandwidth `protobuf:"bytes,10,rep,name=UnresvBandwidth,proto3" json:"UnresvBandwidth,omitempty"`
	// The Traffic Engineering (TE) metric of a link.
	// TE Default Metric. TLV 1092
	// Section  5.3.2.3 of [RFC9552]
	TeDefMetric *SLBgplsTopoLinkTeDefaultMetric `protobuf:"bytes,11,opt,name=TeDefMetric,proto3" json:"TeDefMetric,omitempty"`
	// The protection capabilities of a link.
	// Link Protection Type. TLV 1093
	// Section 5.3.2 of [RFC9552]
	ProtectionType *SLBgplsTopoLinkProtectionType `protobuf:"bytes,12,opt,name=ProtectionType,proto3" json:"ProtectionType,omitempty"`
	// The bit mask describing MPLS signaling
	// protocols enabled.
	// MPLS Proto Mask. TLV 1094
	// Section 5.3.2.2 of [RFC9552]
	MplsProtoMask *SLBgplsTopoLinkMplsProtoMask `protobuf:"bytes,13,opt,name=MplsProtoMask,proto3" json:"MplsProtoMask,omitempty"`
	// The IGP metric of a link.
	// IGP Metric. TLV 1095
	// Section 5.3.2.4 of [RFC9552]
	IgpMetric *SLBgplsTopoLinkIgpMetric `protobuf:"bytes,14,opt,name=IgpMetric,proto3" json:"IgpMetric,omitempty"`
	// The Shared Link Risk Groups (SRLGs) of a link.
	// Shared Risk Link Group. TLV 1096
	// Section 5.3.2.5 of [RFC9552]
	Srlg []*SLBgplsTopoLinkSrlg `protobuf:"bytes,15,rep,name=Srlg,proto3" json:"Srlg,omitempty"`
	// An envelope that transparently carries
	// optional Link Attribute TLVs advertised by a router
	// Opaque Link Attribute. TLV 1097
	// Section 5.3.2.6 of [RFC9552]
	OpaqueAttr *SLBgplsTopoLinkOpaqueAttr `protobuf:"bytes,16,opt,name=OpaqueAttr,proto3" json:"OpaqueAttr,omitempty"`
	// The symbolic name of a link.
	// Link Name. TLV 1098.
	// Section 5.3.2.7 of [RFC9552]
	LinkName *SLBgplsTopoLinkName `protobuf:"bytes,17,opt,name=LinkName,proto3" json:"LinkName,omitempty"`
	// The Adjacency Segment Identifiers (SIDs) of an
	// adjacency.
	// Adjacency SID. TLV 1099
	// Section 2.2.1 of [RFC9085]
	AdjSid []*SLBgplsTopoAdjSid `protobuf:"bytes,18,rep,name=AdjSid,proto3" json:"AdjSid,omitempty"`
	// The Adjacency Segment Identifiers (SIDs) of an
	// adjacency to any node in a LAN other than the pseudonode
	// LAN Adjacency SID. TLV 1100
	// Section 2.2.1 of [RFC9085]
	LanAdjSid []*SLBgplsTopoLanAdjSid `protobuf:"bytes,19,rep,name=LanAdjSid,proto3" json:"LanAdjSid,omitempty"`
	// Peer Node Segment Identifier for BGP Peering Segments
	// BGP Peer Node SID. TLV 1101
	// Section 5 of [RFC9086]
	BgpPeerNodeSid []*SLBgplsTopoBgpPeerNodeSid `protobuf:"bytes,20,rep,name=BgpPeerNodeSid,proto3" json:"BgpPeerNodeSid,omitempty"`
	// Peer Adjacency Segment Identifier for BGP Peering Segments
	// BGP Peer Adjacency SID. TLV 1102
	// Section 5 of [RFC9086]
	BgpPeerAdjSid []*SLBgplsTopoBgpPeerAdjSid `protobuf:"bytes,21,rep,name=BgpPeerAdjSid,proto3" json:"BgpPeerAdjSid,omitempty"`
	// Peer Set Segment Identifier for BGP Peering Segments
	// BGP Peer Set SID. TLV 1103
	// Section 5 of [RFC9086]
	BgpPeerSetSid []*SLBgplsTopoBgpPeerSetSid `protobuf:"bytes,22,rep,name=BgpPeerSetSid,proto3" json:"BgpPeerSetSid,omitempty"`
	// The average link delay between two
	// directly connected IGP link-state neighbors.
	// Unidirectional Link Delay. TLV 1114
	// Section 2.1 of [RFC8571]
	UniLinkDelay *SLBgplsTopoUniLinkDelay `protobuf:"bytes,23,opt,name=UniLinkDelay,proto3" json:"UniLinkDelay,omitempty"`
	// The minimum and maximum link delay between two
	// directly connected IGP link-state neighbors.
	// Min/Max Unidirectional Link Delay. TLV 1115
	// Section 2.2 of [RFC8571]
	MinMaxUniLinkDelay *SLBgplsTopoMinMaxUniLinkDelay `protobuf:"bytes,24,opt,name=MinMaxUniLinkDelay,proto3" json:"MinMaxUniLinkDelay,omitempty"`
	// The average link delay variation between two
	// directly connected IGP link-state neighbors.
	// Unidirectional Delay Variation. TLV 1116
	// Section 2.3 of [RFC8571]
	UniDelayVar *SLBgplsTopoUniDelayVar `protobuf:"bytes,25,opt,name=UniDelayVar,proto3" json:"UniDelayVar,omitempty"`
	// The loss (as a packet percentage) between two
	// directly connected IGP link-state neighbors.
	// Unidirectional Link Loss. TLV 1117
	// Section 2.4 of [RFC8571]
	UniLinkLoss *SLBgplsTopoUniLinkLoss `protobuf:"bytes,26,opt,name=UniLinkLoss,proto3" json:"UniLinkLoss,omitempty"`
	// The residual bandwidth between two
	// directly connected IGP link-state neighbors.
	// Unidirectional Residual Bandwidth. TLV 1118
	// Section 2.5 of [RFC8571]
	UniResBandwidth *SLBgplsTopoUniResBandwidth `protobuf:"bytes,27,opt,name=UniResBandwidth,proto3" json:"UniResBandwidth,omitempty"`
	// The available bandwidth between two
	// directly connected IGP link-state neighbors.
	// Unidirectional Available Bandwidth. TLV 1119
	// Section 2.6 of [RFC8571]
	UniAvailBandwidth *SLBgplsTopoUniAvailBandwidth `protobuf:"bytes,28,opt,name=UniAvailBandwidth,proto3" json:"UniAvailBandwidth,omitempty"`
	// The utilized bandwidth between two
	// directly connected IGP link-state neighbors.
	// Unidirectional Utilized Bandwidth. TLV 1120
	// Section 2.7 of [RFC8571]
	UniUtilBandwidth *SLBgplsTopoUniUtilBandwidth `protobuf:"bytes,29,opt,name=UniUtilBandwidth,proto3" json:"UniUtilBandwidth,omitempty"`
	// The container for certain existing and future
	// link attributes that require application-specific definition.
	// ASLA Attributes. TLV 1122
	// Section 2 of [RFC9294]
	Asla []*SLBgplsTopoAslaAttr `protobuf:"bytes,30,rep,name=Asla,proto3" json:"Asla,omitempty"`
	// A L2 Bundle Member link which in turn is
	// associated with a parent L3 link.
	// L2 Bundle Member Attribute. TLV 1172
	// Section 2.2.3 of [RFC9085]
	L2BundleMemberAttr []*SLBgplsTopoL2BundleMemberAttr `protobuf:"bytes,31,rep,name=L2BundleMemberAttr,proto3" json:"L2BundleMemberAttr,omitempty"`
	// The bit mask of administrative groups assigned
	// by the network administrator.
	// Extended Administrative Group. TLV 1173
	// Section 2 of [RFC9104]
	ExtAdminGroup []*SLBgplsTopoExtAdminGroup `protobuf:"bytes,32,rep,name=ExtAdminGroup,proto3" json:"ExtAdminGroup,omitempty"`
	// Unknown Link Attributes
	// Unknown/unsupported by IOS-XR/BGPLS.
	UnknownAttr []*SLBgplsTopoUnknownAttr `protobuf:"bytes,33,rep,name=UnknownAttr,proto3" json:"UnknownAttr,omitempty"`
	// The Segment Routing over IPv6 (SRv6)
	// Segment Identifiers (SIDs) associated with an adjacency.
	// SRv6 End X SID. TLV 1106
	// Section 4.1 of [RFC9514]
	Srv6EndXSid []*SLBgplsTopoSrv6EndXSid `protobuf:"bytes,34,rep,name=Srv6EndXSid,proto3" json:"Srv6EndXSid,omitempty"`
	// The Segment Routing over IPv6 (SRv6)
	// Segment Identifiers (SIDs) of an adjacency to any node in a LAN other
	// than the pseudonode.
	// SRv6 LAN End X SID. TLV 1107/1108
	// Section 4.1 of [RFC9514]
	Srv6LanEndXSid []*SLBgplsTopoSrv6LanEndXSid `protobuf:"bytes,35,rep,name=Srv6LanEndXSid,proto3" json:"Srv6LanEndXSid,omitempty"`
}

func (x *SLBgplsTopoLinkAttr) Reset() {
	*x = SLBgplsTopoLinkAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoLinkAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoLinkAttr) ProtoMessage() {}

func (x *SLBgplsTopoLinkAttr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoLinkAttr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoLinkAttr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{29}
}

func (x *SLBgplsTopoLinkAttr) GetLinkLocRemId() *SLBplsTopoLinkLocRemId {
	if x != nil {
		return x.LinkLocRemId
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetLinkMsd() []*SLBgplsTopoLinkMsd {
	if x != nil {
		return x.LinkMsd
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetLocalIpv4RouterId() []*SLBgplsTopoLocalIpv4RouterId {
	if x != nil {
		return x.LocalIpv4RouterId
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetLocalIpv6RouterId() []*SLBgplsTopoLocalIpv6RouterId {
	if x != nil {
		return x.LocalIpv6RouterId
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetRemoteIpv4RouterId() []*SLBgplsTopoRemoteIpv4RouterId {
	if x != nil {
		return x.RemoteIpv4RouterId
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetRemoteIpv6RouterId() []*SLBgplsTopoRemoteIpv6RouterId {
	if x != nil {
		return x.RemoteIpv6RouterId
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetAdminGroup() *SLBgplsTopoAdminGroup {
	if x != nil {
		return x.AdminGroup
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetMaxBandwidth() *SLBgplsTopoLinkMaxBandwidth {
	if x != nil {
		return x.MaxBandwidth
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetMaxResvBandwidth() *SLBgplsTopoLinkMaxResvBandwidth {
	if x != nil {
		return x.MaxResvBandwidth
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetUnresvBandwidth() []*SLBgplsTopoLinkUnresvBandwidth {
	if x != nil {
		return x.UnresvBandwidth
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetTeDefMetric() *SLBgplsTopoLinkTeDefaultMetric {
	if x != nil {
		return x.TeDefMetric
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetProtectionType() *SLBgplsTopoLinkProtectionType {
	if x != nil {
		return x.ProtectionType
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetMplsProtoMask() *SLBgplsTopoLinkMplsProtoMask {
	if x != nil {
		return x.MplsProtoMask
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetIgpMetric() *SLBgplsTopoLinkIgpMetric {
	if x != nil {
		return x.IgpMetric
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetSrlg() []*SLBgplsTopoLinkSrlg {
	if x != nil {
		return x.Srlg
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetOpaqueAttr() *SLBgplsTopoLinkOpaqueAttr {
	if x != nil {
		return x.OpaqueAttr
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetLinkName() *SLBgplsTopoLinkName {
	if x != nil {
		return x.LinkName
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetAdjSid() []*SLBgplsTopoAdjSid {
	if x != nil {
		return x.AdjSid
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetLanAdjSid() []*SLBgplsTopoLanAdjSid {
	if x != nil {
		return x.LanAdjSid
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetBgpPeerNodeSid() []*SLBgplsTopoBgpPeerNodeSid {
	if x != nil {
		return x.BgpPeerNodeSid
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetBgpPeerAdjSid() []*SLBgplsTopoBgpPeerAdjSid {
	if x != nil {
		return x.BgpPeerAdjSid
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetBgpPeerSetSid() []*SLBgplsTopoBgpPeerSetSid {
	if x != nil {
		return x.BgpPeerSetSid
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetUniLinkDelay() *SLBgplsTopoUniLinkDelay {
	if x != nil {
		return x.UniLinkDelay
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetMinMaxUniLinkDelay() *SLBgplsTopoMinMaxUniLinkDelay {
	if x != nil {
		return x.MinMaxUniLinkDelay
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetUniDelayVar() *SLBgplsTopoUniDelayVar {
	if x != nil {
		return x.UniDelayVar
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetUniLinkLoss() *SLBgplsTopoUniLinkLoss {
	if x != nil {
		return x.UniLinkLoss
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetUniResBandwidth() *SLBgplsTopoUniResBandwidth {
	if x != nil {
		return x.UniResBandwidth
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetUniAvailBandwidth() *SLBgplsTopoUniAvailBandwidth {
	if x != nil {
		return x.UniAvailBandwidth
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetUniUtilBandwidth() *SLBgplsTopoUniUtilBandwidth {
	if x != nil {
		return x.UniUtilBandwidth
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetAsla() []*SLBgplsTopoAslaAttr {
	if x != nil {
		return x.Asla
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetL2BundleMemberAttr() []*SLBgplsTopoL2BundleMemberAttr {
	if x != nil {
		return x.L2BundleMemberAttr
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetExtAdminGroup() []*SLBgplsTopoExtAdminGroup {
	if x != nil {
		return x.ExtAdminGroup
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetUnknownAttr() []*SLBgplsTopoUnknownAttr {
	if x != nil {
		return x.UnknownAttr
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetSrv6EndXSid() []*SLBgplsTopoSrv6EndXSid {
	if x != nil {
		return x.Srv6EndXSid
	}
	return nil
}

func (x *SLBgplsTopoLinkAttr) GetSrv6LanEndXSid() []*SLBgplsTopoSrv6LanEndXSid {
	if x != nil {
		return x.Srv6LanEndXSid
	}
	return nil
}

// Prefix Attributes
type SLBgplsTopoPrefixAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metric associated with the prefix for a particular Flexible Algorithm (FA).
	// Flexible Algorithm Prefix metric. TLV 1044
	// Section 4 of [RFC9351]
	Fapm []*SLBgplsTopoPrefixFAPM `protobuf:"bytes,1,rep,name=Fapm,proto3" json:"Fapm,omitempty"`
	// IGP Flags and bits assigned to a prefix.
	// IGP Flags. TLV 1152
	// Section 5.3.3.1 of [RFC9552]
	IgpFlags *SLBgplsTopoPrefixIgpFlags `protobuf:"bytes,2,opt,name=IgpFlags,proto3" json:"IgpFlags,omitempty"`
	// IGP Route Tags of a prefix.
	// IGP Route Tag. TLV 1153
	// Section 5.3.3.2 of [RFC9552]
	IgpRouteTag []*SLBgplsTopoPrefixIgpRouteTag `protobuf:"bytes,3,rep,name=IgpRouteTag,proto3" json:"IgpRouteTag,omitempty"`
	// IGP Extended Route Tags of a prefix.
	// IGP Extended Route Tag. TLV 1154
	// Section 5.3.3.3 of [RFC9552]
	IgpExtRouteTag []*SLBgplsTopoPrefixIgpExtRouteTag `protobuf:"bytes,4,rep,name=IgpExtRouteTag,proto3" json:"IgpExtRouteTag,omitempty"`
	// The Metric of a prefix.
	// Prefix Metric. TLV 1155
	// Section 5.3.3.4 of [RFC9552]
	Metric *SLBgplsTopoPrefixMetric `protobuf:"bytes,5,opt,name=Metric,proto3" json:"Metric,omitempty"`
	// The forwarding address of the prefix as known in original OSPF
	// advertisement.
	// OSPF Forwarding Address. TLV 1156
	// Section 5.3.3.5 of [RFC9552]
	OspfFwdAddr *SLBgplsTopoPrefixOspfFwdAddr `protobuf:"bytes,6,opt,name=OspfFwdAddr,proto3" json:"OspfFwdAddr,omitempty"`
	// An envelope that transparently carries optional Prefix Attribute TLVs
	// advertised by a router.
	// Opaque Prefix Attribute. TLV 1157
	// Section 5.3.3.6 of [RFC9552]
	OpaqueAttr *SLBgplsTopoPrefixOpaqueAttr `protobuf:"bytes,7,opt,name=OpaqueAttr,proto3" json:"OpaqueAttr,omitempty"`
	// Prefix Segment Identifiers (SID) of a prefix.
	// Prefix SID. TLV 1158
	// Section 2.3.1 of [RFC9085]
	Sid []*SLBgplsTopoPrefixSid `protobuf:"bytes,8,rep,name=Sid,proto3" json:"Sid,omitempty"`
	// Range of prefix-to-SID mappings.
	// Prefix Range. TLV 1159
	// Section 2.3.5 of [RFC9085]
	Range *SLBgplsTopoPrefixRange `protobuf:"bytes,9,opt,name=Range,proto3" json:"Range,omitempty"`
	// Prefix Attribute flags of a prefix.
	// Prefix Attribute Flags. TLV 1170
	// Section 2.3.2 of [RFC9085]
	AttrFlags *SLBgplsTopoPrefixAttrFlags `protobuf:"bytes,10,opt,name=AttrFlags,proto3" json:"AttrFlags,omitempty"`
	// Source Route Identifier of a prefix.
	// Source Route Identifier. TLV 1171
	// Section 2.3.3 of [RFC9085]
	SrcRouterId *SLBgplsTopoPrefixSrcRouterId `protobuf:"bytes,11,opt,name=SrcRouterId,proto3" json:"SrcRouterId,omitempty"`
	// Unknown Prefix Attributes
	// Unknown/unsupported by IOS-XR/BGPLS.
	UnknownAttr []*SLBgplsTopoUnknownAttr `protobuf:"bytes,12,rep,name=UnknownAttr,proto3" json:"UnknownAttr,omitempty"`
	// Segment Routing over IPv6 (SRv6) locator information associated with a
	// prefix.
	// SRv6 Locator. TLV 1162
	// Section 5.1 of [RFC9514]
	Srv6Loc *SLBgplsTopoPrefixSrv6Loc `protobuf:"bytes,13,opt,name=Srv6Loc,proto3" json:"Srv6Loc,omitempty"`
}

func (x *SLBgplsTopoPrefixAttr) Reset() {
	*x = SLBgplsTopoPrefixAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoPrefixAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoPrefixAttr) ProtoMessage() {}

func (x *SLBgplsTopoPrefixAttr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoPrefixAttr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoPrefixAttr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{30}
}

func (x *SLBgplsTopoPrefixAttr) GetFapm() []*SLBgplsTopoPrefixFAPM {
	if x != nil {
		return x.Fapm
	}
	return nil
}

func (x *SLBgplsTopoPrefixAttr) GetIgpFlags() *SLBgplsTopoPrefixIgpFlags {
	if x != nil {
		return x.IgpFlags
	}
	return nil
}

func (x *SLBgplsTopoPrefixAttr) GetIgpRouteTag() []*SLBgplsTopoPrefixIgpRouteTag {
	if x != nil {
		return x.IgpRouteTag
	}
	return nil
}

func (x *SLBgplsTopoPrefixAttr) GetIgpExtRouteTag() []*SLBgplsTopoPrefixIgpExtRouteTag {
	if x != nil {
		return x.IgpExtRouteTag
	}
	return nil
}

func (x *SLBgplsTopoPrefixAttr) GetMetric() *SLBgplsTopoPrefixMetric {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *SLBgplsTopoPrefixAttr) GetOspfFwdAddr() *SLBgplsTopoPrefixOspfFwdAddr {
	if x != nil {
		return x.OspfFwdAddr
	}
	return nil
}

func (x *SLBgplsTopoPrefixAttr) GetOpaqueAttr() *SLBgplsTopoPrefixOpaqueAttr {
	if x != nil {
		return x.OpaqueAttr
	}
	return nil
}

func (x *SLBgplsTopoPrefixAttr) GetSid() []*SLBgplsTopoPrefixSid {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *SLBgplsTopoPrefixAttr) GetRange() *SLBgplsTopoPrefixRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *SLBgplsTopoPrefixAttr) GetAttrFlags() *SLBgplsTopoPrefixAttrFlags {
	if x != nil {
		return x.AttrFlags
	}
	return nil
}

func (x *SLBgplsTopoPrefixAttr) GetSrcRouterId() *SLBgplsTopoPrefixSrcRouterId {
	if x != nil {
		return x.SrcRouterId
	}
	return nil
}

func (x *SLBgplsTopoPrefixAttr) GetUnknownAttr() []*SLBgplsTopoUnknownAttr {
	if x != nil {
		return x.UnknownAttr
	}
	return nil
}

func (x *SLBgplsTopoPrefixAttr) GetSrv6Loc() *SLBgplsTopoPrefixSrv6Loc {
	if x != nil {
		return x.Srv6Loc
	}
	return nil
}

// SRv6 SID Attributes
type SLBgplsTopoSrv6SidAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Segment Routing over IPv6 (SRv6) endpoint behavior bound to a
	// SRv6 SID.
	// SRv6 End Point Behavior. TLV 1250
	// Section 7.1 of [RFC9514]
	EndPointBehavior *SLSrv6EndPointBehavior `protobuf:"bytes,1,opt,name=EndPointBehavior,proto3" json:"EndPointBehavior,omitempty"`
	// The Segment Routing over IPv6 (SRv6) SRv6 SID associated with
	// BGP peer node or peer set.
	// SRv6 BGP Peer Node SID. TLV 1251
	// Section 7.2 of [RFC9514]
	BgpPeerNodeSid []*SLBgplsTopoSrv6BgpPeerNodeSid `protobuf:"bytes,2,rep,name=BgpPeerNodeSid,proto3" json:"BgpPeerNodeSid,omitempty"`
	// The Segment Routing over IPv6 (SRv6) Segment Identifier (SID)
	// structure information associated with a SRv6 SID.
	// SRv6 SID Structure Attribute. TLV 1252
	// Section 8 of [RFC9514]
	SidStruct *SLSrv6SidStruct `protobuf:"bytes,3,opt,name=SidStruct,proto3" json:"SidStruct,omitempty"`
	// Unknown SRv6 SID Attributes
	// Unknown/unsupported by IOS-XR/BGPLS.
	UnknownAttr []*SLBgplsTopoUnknownAttr `protobuf:"bytes,4,rep,name=UnknownAttr,proto3" json:"UnknownAttr,omitempty"`
}

func (x *SLBgplsTopoSrv6SidAttr) Reset() {
	*x = SLBgplsTopoSrv6SidAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrv6SidAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrv6SidAttr) ProtoMessage() {}

func (x *SLBgplsTopoSrv6SidAttr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrv6SidAttr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrv6SidAttr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{31}
}

func (x *SLBgplsTopoSrv6SidAttr) GetEndPointBehavior() *SLSrv6EndPointBehavior {
	if x != nil {
		return x.EndPointBehavior
	}
	return nil
}

func (x *SLBgplsTopoSrv6SidAttr) GetBgpPeerNodeSid() []*SLBgplsTopoSrv6BgpPeerNodeSid {
	if x != nil {
		return x.BgpPeerNodeSid
	}
	return nil
}

func (x *SLBgplsTopoSrv6SidAttr) GetSidStruct() *SLSrv6SidStruct {
	if x != nil {
		return x.SidStruct
	}
	return nil
}

func (x *SLBgplsTopoSrv6SidAttr) GetUnknownAttr() []*SLBgplsTopoUnknownAttr {
	if x != nil {
		return x.UnknownAttr
	}
	return nil
}

// SR Policy Attributes
type SLBgplsTopoSrPolicyAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SR Binding SID (BSID) is used to report the BSID and its attributes
	// for the SR Policy CP.
	// SR Binding SID. TLV 1201
	// Section 5.1 of [draft-ietf-idr-bgp-ls-sr-policy]
	SrBsid *SLBgplsTopoSrBindingSid `protobuf:"bytes,1,opt,name=SrBsid,proto3" json:"SrBsid,omitempty"`
	// SR Candidate Path (CP) State TLV provides the operational status
	// and attributes of the SR Policy at the CP level.
	// SR Candidate Path State. TLV 1202
	// Section 5.3 of [draft-ietf-idr-bgp-ls-sr-policy]
	CpState *SLBgplsTopoSrCpState `protobuf:"bytes,2,opt,name=CpState,proto3" json:"CpState,omitempty"`
	// SR Candidate Path Name carries the symbolic name associated with
	// the candidate path.
	// SR Candidate Path Name. TLV 1203
	// Section 5.5 of [draft-ietf-idr-bgp-ls-sr-policy]
	CpName *SLSrCpName `protobuf:"bytes,3,opt,name=CpName,proto3" json:"CpName,omitempty"`
	// SR Candidate Path Constraints is used
	// to report the constraints associated with the candidate path.
	// SR Candidate Path Constraints. TLV 1204
	// Section 5.6 of [draft-ietf-idr-bgp-ls-sr-policy]
	CpConstraints *SLBgplsTopoSrCpConstraints `protobuf:"bytes,4,opt,name=CpConstraints,proto3" json:"CpConstraints,omitempty"`
	// SR Segment List TLV is used to report a single SID-List of a CP.
	// Multiple instances of this TLV may be used to report multiple
	// SID-Lists of a CP.
	// SR Segment List. TLV 1205
	// Section 5.7 of [draft-ietf-idr-bgp-ls-sr-policy]
	SegLists []*SLBgplsTopoSrSegList `protobuf:"bytes,5,rep,name=SegLists,proto3" json:"SegLists,omitempty"`
	// SRv6 Binding SID (BSID) is used to report
	// the SRv6 BSID and its attributes for the SR Policy CP.
	// SRv6 Binding SID. TLV 1212
	// Section 5.2 of [draft-ietf-idr-bgp-ls-sr-policy]
	Srv6Bsid []*SLSrv6BindingSid `protobuf:"bytes,6,rep,name=Srv6Bsid,proto3" json:"Srv6Bsid,omitempty"`
	// SR Policy Name carries symbolic name associated with the SR Policy.
	// SR Policy Name. TLV 1213
	// Section 5.4 of [draft-ietf-idr-bgp-ls-sr-policy]
	SrPolicyName *SLBgplsTopoSrPolicyName `protobuf:"bytes,7,opt,name=SrPolicyName,proto3" json:"SrPolicyName,omitempty"`
	// Unknown SR Policy Attributes
	// Unknown/unsupported by IOS-XR/BGPLS.
	UnknownAttr []*SLBgplsTopoUnknownAttr `protobuf:"bytes,8,rep,name=UnknownAttr,proto3" json:"UnknownAttr,omitempty"`
}

func (x *SLBgplsTopoSrPolicyAttr) Reset() {
	*x = SLBgplsTopoSrPolicyAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrPolicyAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrPolicyAttr) ProtoMessage() {}

func (x *SLBgplsTopoSrPolicyAttr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrPolicyAttr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrPolicyAttr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{32}
}

func (x *SLBgplsTopoSrPolicyAttr) GetSrBsid() *SLBgplsTopoSrBindingSid {
	if x != nil {
		return x.SrBsid
	}
	return nil
}

func (x *SLBgplsTopoSrPolicyAttr) GetCpState() *SLBgplsTopoSrCpState {
	if x != nil {
		return x.CpState
	}
	return nil
}

func (x *SLBgplsTopoSrPolicyAttr) GetCpName() *SLSrCpName {
	if x != nil {
		return x.CpName
	}
	return nil
}

func (x *SLBgplsTopoSrPolicyAttr) GetCpConstraints() *SLBgplsTopoSrCpConstraints {
	if x != nil {
		return x.CpConstraints
	}
	return nil
}

func (x *SLBgplsTopoSrPolicyAttr) GetSegLists() []*SLBgplsTopoSrSegList {
	if x != nil {
		return x.SegLists
	}
	return nil
}

func (x *SLBgplsTopoSrPolicyAttr) GetSrv6Bsid() []*SLSrv6BindingSid {
	if x != nil {
		return x.Srv6Bsid
	}
	return nil
}

func (x *SLBgplsTopoSrPolicyAttr) GetSrPolicyName() *SLBgplsTopoSrPolicyName {
	if x != nil {
		return x.SrPolicyName
	}
	return nil
}

func (x *SLBgplsTopoSrPolicyAttr) GetUnknownAttr() []*SLBgplsTopoUnknownAttr {
	if x != nil {
		return x.UnknownAttr
	}
	return nil
}

// Link Local Remote Identifiers. TLV 258.
// Section 5.2.2 of [RFC9552]
type SLBplsTopoLinkLocRemId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Link Local Identifier
	LocalId uint32 `protobuf:"varint,1,opt,name=LocalId,proto3" json:"LocalId,omitempty"`
	// Link Remote Identifier
	RemoteId uint32 `protobuf:"varint,2,opt,name=RemoteId,proto3" json:"RemoteId,omitempty"`
}

func (x *SLBplsTopoLinkLocRemId) Reset() {
	*x = SLBplsTopoLinkLocRemId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBplsTopoLinkLocRemId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBplsTopoLinkLocRemId) ProtoMessage() {}

func (x *SLBplsTopoLinkLocRemId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBplsTopoLinkLocRemId.ProtoReflect.Descriptor instead.
func (*SLBplsTopoLinkLocRemId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{33}
}

func (x *SLBplsTopoLinkLocRemId) GetLocalId() uint32 {
	if x != nil {
		return x.LocalId
	}
	return 0
}

func (x *SLBplsTopoLinkLocRemId) GetRemoteId() uint32 {
	if x != nil {
		return x.RemoteId
	}
	return 0
}

// Multi-Topology Identifier. TLV 263.
// Section 5.2.2.1 of [RFC9552]
type SLBgplsTopoMtId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Multi-Topology ID. A number in the range of 0-255
	MtId uint32 `protobuf:"varint,1,opt,name=MtId,proto3" json:"MtId,omitempty"`
}

func (x *SLBgplsTopoMtId) Reset() {
	*x = SLBgplsTopoMtId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoMtId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoMtId) ProtoMessage() {}

func (x *SLBgplsTopoMtId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoMtId.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoMtId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{34}
}

func (x *SLBgplsTopoMtId) GetMtId() uint32 {
	if x != nil {
		return x.MtId
	}
	return 0
}

// Node MSD. TLV 266.
// Section 3 of [RFC8814]
type SLBgplsTopoNodeMsd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MSD type. One of the values defined in the 'IGP MSD-Types' registry
	// defined in [RFC8491]
	Type uint32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// MSD value. A number in the range of 0-255
	Value uint32 `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *SLBgplsTopoNodeMsd) Reset() {
	*x = SLBgplsTopoNodeMsd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoNodeMsd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoNodeMsd) ProtoMessage() {}

func (x *SLBgplsTopoNodeMsd) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoNodeMsd.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoNodeMsd) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{35}
}

func (x *SLBgplsTopoNodeMsd) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SLBgplsTopoNodeMsd) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Link MSD. TLV 267.
// Section 4 of [RFC8814]
type SLBgplsTopoLinkMsd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MSD type. One of the values defined in the 'IGP MSD-Types' registry
	// defined in [RFC8491]
	Type uint32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// MSD value. A number in the range of 0-255
	Value uint32 `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *SLBgplsTopoLinkMsd) Reset() {
	*x = SLBgplsTopoLinkMsd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoLinkMsd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoLinkMsd) ProtoMessage() {}

func (x *SLBgplsTopoLinkMsd) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoLinkMsd.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoLinkMsd) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{36}
}

func (x *SLBgplsTopoLinkMsd) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SLBgplsTopoLinkMsd) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Node Flag Bits. TLV 1024.
// Section 5.3.1.1 of [RFC9552]
type SLBgplsTopoNodeFlagBits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bit-0: O-Flag: Overload Bit
	//
	// Bit-1: A-Flag: Attached Bit
	//
	// Bit-2: E-Flag: External Bit
	//
	// Bit-3: B-Flag: ABR Bit
	//
	// Bit-4: R-Flag: Router Bit
	//
	// Bit-5: V-Flag: v6 Bit
	Flags []byte `protobuf:"bytes,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *SLBgplsTopoNodeFlagBits) Reset() {
	*x = SLBgplsTopoNodeFlagBits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoNodeFlagBits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoNodeFlagBits) ProtoMessage() {}

func (x *SLBgplsTopoNodeFlagBits) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoNodeFlagBits.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoNodeFlagBits) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{37}
}

func (x *SLBgplsTopoNodeFlagBits) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

// Opaque Node Attribute. TLV 1025.
// Section 5.3.1.5 of [RFC9552]
type SLBgplsTopoNodeOpaqueAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Opaque attribute
	OpaqueAttr []byte `protobuf:"bytes,1,opt,name=OpaqueAttr,proto3" json:"OpaqueAttr,omitempty"`
}

func (x *SLBgplsTopoNodeOpaqueAttr) Reset() {
	*x = SLBgplsTopoNodeOpaqueAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoNodeOpaqueAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoNodeOpaqueAttr) ProtoMessage() {}

func (x *SLBgplsTopoNodeOpaqueAttr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoNodeOpaqueAttr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoNodeOpaqueAttr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{38}
}

func (x *SLBgplsTopoNodeOpaqueAttr) GetOpaqueAttr() []byte {
	if x != nil {
		return x.OpaqueAttr
	}
	return nil
}

// Node Name. TLV 1026.
// Section 5.3.1.3 of [RFC9552]
type SLBgplsNodeName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Symbolic name of the node without a NULL terminator. It is
	// RECOMMENDED that the size of the symbolic name be limited to
	// 255 characters.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *SLBgplsNodeName) Reset() {
	*x = SLBgplsNodeName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsNodeName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsNodeName) ProtoMessage() {}

func (x *SLBgplsNodeName) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsNodeName.ProtoReflect.Descriptor instead.
func (*SLBgplsNodeName) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{39}
}

func (x *SLBgplsNodeName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// IS-IS Area Identifier. TLV 1027.
// Section 5.3.1.2 of [RFC9552]
type SLBgplsTopoIsisAreaId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ISIS area address
	AreaId []byte `protobuf:"bytes,1,opt,name=AreaId,proto3" json:"AreaId,omitempty"`
}

func (x *SLBgplsTopoIsisAreaId) Reset() {
	*x = SLBgplsTopoIsisAreaId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoIsisAreaId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoIsisAreaId) ProtoMessage() {}

func (x *SLBgplsTopoIsisAreaId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoIsisAreaId.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoIsisAreaId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{40}
}

func (x *SLBgplsTopoIsisAreaId) GetAreaId() []byte {
	if x != nil {
		return x.AreaId
	}
	return nil
}

// Local IPv4/IPv6 Router-ID. TLV 1028.
// Section 5.3.1.4 of [RFC9552]
type SLBgplsTopoLocalIpv4RouterId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv4 Router ID
	RouterId []byte `protobuf:"bytes,1,opt,name=RouterId,proto3" json:"RouterId,omitempty"`
}

func (x *SLBgplsTopoLocalIpv4RouterId) Reset() {
	*x = SLBgplsTopoLocalIpv4RouterId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoLocalIpv4RouterId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoLocalIpv4RouterId) ProtoMessage() {}

func (x *SLBgplsTopoLocalIpv4RouterId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoLocalIpv4RouterId.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoLocalIpv4RouterId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{41}
}

func (x *SLBgplsTopoLocalIpv4RouterId) GetRouterId() []byte {
	if x != nil {
		return x.RouterId
	}
	return nil
}

// Local IPv4/IPv6 Router-ID. TLV 1029.
// Section 5.3.1.4 of [RFC9552]
type SLBgplsTopoLocalIpv6RouterId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv6 Router ID
	RouterId []byte `protobuf:"bytes,1,opt,name=RouterId,proto3" json:"RouterId,omitempty"`
}

func (x *SLBgplsTopoLocalIpv6RouterId) Reset() {
	*x = SLBgplsTopoLocalIpv6RouterId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoLocalIpv6RouterId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoLocalIpv6RouterId) ProtoMessage() {}

func (x *SLBgplsTopoLocalIpv6RouterId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoLocalIpv6RouterId.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoLocalIpv6RouterId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{42}
}

func (x *SLBgplsTopoLocalIpv6RouterId) GetRouterId() []byte {
	if x != nil {
		return x.RouterId
	}
	return nil
}

// Remote IPv4/IPv6 Router-ID. TLV 1030.
// Section 5.3.2.1 of [RFC9552]
type SLBgplsTopoRemoteIpv4RouterId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv4 Router ID
	RouterId []byte `protobuf:"bytes,1,opt,name=RouterId,proto3" json:"RouterId,omitempty"`
}

func (x *SLBgplsTopoRemoteIpv4RouterId) Reset() {
	*x = SLBgplsTopoRemoteIpv4RouterId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoRemoteIpv4RouterId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoRemoteIpv4RouterId) ProtoMessage() {}

func (x *SLBgplsTopoRemoteIpv4RouterId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoRemoteIpv4RouterId.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoRemoteIpv4RouterId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{43}
}

func (x *SLBgplsTopoRemoteIpv4RouterId) GetRouterId() []byte {
	if x != nil {
		return x.RouterId
	}
	return nil
}

// Remote IPv4/IPv6 Router-ID. TLV 1031.
// Section 5.3.2.1 of [RFC9552]
type SLBgplsTopoRemoteIpv6RouterId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv6 Router ID
	RouterId []byte `protobuf:"bytes,1,opt,name=RouterId,proto3" json:"RouterId,omitempty"`
}

func (x *SLBgplsTopoRemoteIpv6RouterId) Reset() {
	*x = SLBgplsTopoRemoteIpv6RouterId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoRemoteIpv6RouterId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoRemoteIpv6RouterId) ProtoMessage() {}

func (x *SLBgplsTopoRemoteIpv6RouterId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoRemoteIpv6RouterId.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoRemoteIpv6RouterId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{44}
}

func (x *SLBgplsTopoRemoteIpv6RouterId) GetRouterId() []byte {
	if x != nil {
		return x.RouterId
	}
	return nil
}

// Segment Routing Global Block (SRGB)
type SLBgplsTopoSrgb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// First label in the range
	StartLabel uint32 `protobuf:"varint,1,opt,name=StartLabel,proto3" json:"StartLabel,omitempty"`
	// Number of labels in the range
	RangeSize uint32 `protobuf:"varint,2,opt,name=RangeSize,proto3" json:"RangeSize,omitempty"`
}

func (x *SLBgplsTopoSrgb) Reset() {
	*x = SLBgplsTopoSrgb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrgb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrgb) ProtoMessage() {}

func (x *SLBgplsTopoSrgb) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrgb.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrgb) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{45}
}

func (x *SLBgplsTopoSrgb) GetStartLabel() uint32 {
	if x != nil {
		return x.StartLabel
	}
	return 0
}

func (x *SLBgplsTopoSrgb) GetRangeSize() uint32 {
	if x != nil {
		return x.RangeSize
	}
	return 0
}

// Segment Routing Global Block (SRGB) ISIS flags
type SLBgplsTopoSrgbIsisFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ISIS flags as defined in Section 3.1 of [RFC8667] for IS-IS
	Flags []byte `protobuf:"bytes,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *SLBgplsTopoSrgbIsisFlags) Reset() {
	*x = SLBgplsTopoSrgbIsisFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrgbIsisFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrgbIsisFlags) ProtoMessage() {}

func (x *SLBgplsTopoSrgbIsisFlags) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrgbIsisFlags.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrgbIsisFlags) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{46}
}

func (x *SLBgplsTopoSrgbIsisFlags) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

// SR-Algorithm. TLV 1035.
// Section 2.1.3 of [RFC9085]
type SLBgplsTopoSrAlgorithm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SR algorithms
	Algorithms []byte `protobuf:"bytes,1,opt,name=Algorithms,proto3" json:"Algorithms,omitempty"`
}

func (x *SLBgplsTopoSrAlgorithm) Reset() {
	*x = SLBgplsTopoSrAlgorithm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrAlgorithm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrAlgorithm) ProtoMessage() {}

func (x *SLBgplsTopoSrAlgorithm) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrAlgorithm.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrAlgorithm) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{47}
}

func (x *SLBgplsTopoSrAlgorithm) GetAlgorithms() []byte {
	if x != nil {
		return x.Algorithms
	}
	return nil
}

// SR Local Block. TLV 1036.
// Section 2.1.4 of [RFC9085]
type SLBgplsTopoSrlb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// First label in the range
	StartLabel uint32 `protobuf:"varint,1,opt,name=StartLabel,proto3" json:"StartLabel,omitempty"`
	// Number of labels in the range
	RangeSize uint32 `protobuf:"varint,2,opt,name=RangeSize,proto3" json:"RangeSize,omitempty"`
}

func (x *SLBgplsTopoSrlb) Reset() {
	*x = SLBgplsTopoSrlb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrlb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrlb) ProtoMessage() {}

func (x *SLBgplsTopoSrlb) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrlb.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrlb) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{48}
}

func (x *SLBgplsTopoSrlb) GetStartLabel() uint32 {
	if x != nil {
		return x.StartLabel
	}
	return 0
}

func (x *SLBgplsTopoSrlb) GetRangeSize() uint32 {
	if x != nil {
		return x.RangeSize
	}
	return 0
}

// SRv6 Capabilities. TLV 1038
// Section 3.1 of [RFC9514]
type SLBgplsTopoSrv6CapFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 2-octet field.  The flags are copied from the IS-IS SRv6
	// Capabilities sub-TLV (Section 2 of [RFC9352]) or from the OSPFv3
	// SRv6 Capabilities TLV (Section 2 of [RFC9513]) in the case of IS-
	// IS or OSPFv3, respectively
	Flags []byte `protobuf:"bytes,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *SLBgplsTopoSrv6CapFlags) Reset() {
	*x = SLBgplsTopoSrv6CapFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrv6CapFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrv6CapFlags) ProtoMessage() {}

func (x *SLBgplsTopoSrv6CapFlags) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrv6CapFlags.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrv6CapFlags) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{49}
}

func (x *SLBgplsTopoSrv6CapFlags) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

// Flexible Algorithm Definition. TLV 1039.
// Section 3 of [RFC9351]
type SLBgplsTopoFad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flexible Algorithm number between 128 and 255 inclusive.
	// Flexible Algorithm.
	// Section 3 of [RFC9351]
	Algorithm []byte `protobuf:"bytes,1,opt,name=Algorithm,proto3" json:"Algorithm,omitempty"`
	// Metric type.
	// Metric-Type.
	// Section 3 of [RFC9351]
	MetricType []byte `protobuf:"bytes,2,opt,name=MetricType,proto3" json:"MetricType,omitempty"`
	// Calculation type.
	// Calc-Type.
	// Section 3 of [RFC9351]
	CalcType []byte `protobuf:"bytes,3,opt,name=CalcType,proto3" json:"CalcType,omitempty"`
	// Priority of the FAD advertisement.
	// Priority.
	// Section 3 of [RFC9351]
	Priority []byte `protobuf:"bytes,4,opt,name=Priority,proto3" json:"Priority,omitempty"`
	// Affinity constraints associated with the FAD that enables the exclusion of links carrying any of the
	// specified affinities from the computation of the specific algorithm. Each affinity bitmask
	// is represented in multiple of 4 bytes.
	// Flexible Algorithm Exclude-Any Affinity. TLV 1040.
	// Section 3.1 of [RFC9351]
	ExcAnyAff []uint32 `protobuf:"varint,5,rep,packed,name=ExcAnyAff,proto3" json:"ExcAnyAff,omitempty"`
	// Affinity constraints associated with the FAD that enables the inclusion of links carrying any of the
	// specified affinities in the computation of the specific algorithm. Each affinity bitmask
	// is represented in multiple of 4 bytes.
	// Flexible Algorithm Include-Any Affinity. TLV 1041.
	// Section 3.2 of [RFC9351]
	IncAnyAff []uint32 `protobuf:"varint,6,rep,packed,name=IncAnyAff,proto3" json:"IncAnyAff,omitempty"`
	// Affinity constraints associated with the FAD that enables the inclusion of links carrying all of the
	// specified affinities in the computation of the specific algorithm. Each affinity bitmask
	// is represented in multiple of 4 bytes.
	// Flexible Algorithm Include-All Affinity. TLV 1042.
	// Section 3.3 of [RFC9351]
	IncAllAff []uint32 `protobuf:"varint,7,rep,packed,name=IncAllAff,proto3" json:"IncAllAff,omitempty"`
	// Flags associated with the FAD that are used in the computation of the specific algorithm.
	// The value in the Flags must be a multiple of 4.
	// Flexible Algorithm Definition Flags. TLV 1043.
	// Section 3.4 of [RFC9351]
	Flags []byte `protobuf:"bytes,8,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Shared Risk Link Group (SRLG) information associated with the FAD that enables the exclusion of links that are
	// associated with any of the specified SRLG in the computation of the specific algorithm.
	// Flexible Algorithm Exclude SRLG. TLV 1045.
	// Section 3.5 of [RFC9351]
	ExcSrlg []uint32 `protobuf:"varint,9,rep,packed,name=ExcSrlg,proto3" json:"ExcSrlg,omitempty"`
	// Indicate the presence of unsupported FAD sub-TLVs.
	// Flexible Algorithm Unsupported. TLV 1046.
	// Section 3.6 of [RFC9351]
	UnsuppTlv *SLBgplsTopoFadUnsuppTlv `protobuf:"bytes,15,opt,name=UnsuppTlv,proto3" json:"UnsuppTlv,omitempty"`
	// Enables the exclusion of links having bandwidth below a minimum specified bandwidth from the computation of the specific algorithm
	// Flexible Algorithm Exclude Minimum Bandwidth. TLV 1049
	// RFC TBD
	ExcMinBw []byte `protobuf:"bytes,14,opt,name=ExcMinBw,proto3" json:"ExcMinBw,omitempty"`
	// Enables the exclusion of links having delay above a maximum specified delay from the computation of the specific algorithm
	// Flexible Algorithm Exclude Maximum Delay. TLV 1050
	// RFC TBD
	ExcMaxDelay uint32 `protobuf:"varint,13,opt,name=ExcMaxDelay,proto3" json:"ExcMaxDelay,omitempty"`
	// Affinity constraints associated with the FAD that enables the exclusion of links carrying any of the
	// specified affinities in the reverse direction from the computation of the specific algorithm.
	// Each affinity bitmask is represented in multiple of 4 bytes.
	// Flexible Algorithm Exclude-Any Reverse Affinity. TLV 1053.
	// RFC TBD
	ExcAnyRevAff []uint32 `protobuf:"varint,10,rep,packed,name=ExcAnyRevAff,proto3" json:"ExcAnyRevAff,omitempty"`
	// Affinity constraints associated with the FAD that enables the inclusion of links carrying any of the
	// specified affinities in the reverse direction from the computation of the specific algorithm.
	// Each affinity bitmask is represented in multiple of 4 bytes.
	// Flexible Algorithm Include-Any Reverse Affinity. TLV 1054.
	// RFC TBD
	IncAnyRevAff []uint32 `protobuf:"varint,11,rep,packed,name=IncAnyRevAff,proto3" json:"IncAnyRevAff,omitempty"`
	// Affinity constraints associated with the FAD that enables the inclusion of links carrying all of the
	// specified affinities in the reverse direction from the computation of the specific algorithm.
	// Each affinity bitmask is represented in multiple of 4 bytes.
	// Flexible Algorithm Include-All Reverse Affinity. TLV 1055.
	// RFC TBD
	IncAllRevAff []uint32 `protobuf:"varint,12,rep,packed,name=IncAllRevAff,proto3" json:"IncAllRevAff,omitempty"`
}

func (x *SLBgplsTopoFad) Reset() {
	*x = SLBgplsTopoFad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoFad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoFad) ProtoMessage() {}

func (x *SLBgplsTopoFad) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoFad.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoFad) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{50}
}

func (x *SLBgplsTopoFad) GetAlgorithm() []byte {
	if x != nil {
		return x.Algorithm
	}
	return nil
}

func (x *SLBgplsTopoFad) GetMetricType() []byte {
	if x != nil {
		return x.MetricType
	}
	return nil
}

func (x *SLBgplsTopoFad) GetCalcType() []byte {
	if x != nil {
		return x.CalcType
	}
	return nil
}

func (x *SLBgplsTopoFad) GetPriority() []byte {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *SLBgplsTopoFad) GetExcAnyAff() []uint32 {
	if x != nil {
		return x.ExcAnyAff
	}
	return nil
}

func (x *SLBgplsTopoFad) GetIncAnyAff() []uint32 {
	if x != nil {
		return x.IncAnyAff
	}
	return nil
}

func (x *SLBgplsTopoFad) GetIncAllAff() []uint32 {
	if x != nil {
		return x.IncAllAff
	}
	return nil
}

func (x *SLBgplsTopoFad) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *SLBgplsTopoFad) GetExcSrlg() []uint32 {
	if x != nil {
		return x.ExcSrlg
	}
	return nil
}

func (x *SLBgplsTopoFad) GetUnsuppTlv() *SLBgplsTopoFadUnsuppTlv {
	if x != nil {
		return x.UnsuppTlv
	}
	return nil
}

func (x *SLBgplsTopoFad) GetExcMinBw() []byte {
	if x != nil {
		return x.ExcMinBw
	}
	return nil
}

func (x *SLBgplsTopoFad) GetExcMaxDelay() uint32 {
	if x != nil {
		return x.ExcMaxDelay
	}
	return 0
}

func (x *SLBgplsTopoFad) GetExcAnyRevAff() []uint32 {
	if x != nil {
		return x.ExcAnyRevAff
	}
	return nil
}

func (x *SLBgplsTopoFad) GetIncAnyRevAff() []uint32 {
	if x != nil {
		return x.IncAnyRevAff
	}
	return nil
}

func (x *SLBgplsTopoFad) GetIncAllRevAff() []uint32 {
	if x != nil {
		return x.IncAllRevAff
	}
	return nil
}

// Flexible Algorithm Prefix metric. TLV 1044
// Section 4 of [RFC9351]
type SLBgplsTopoPrefixFAPM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flexible Algorithm (128 to 255).
	FlexAlgo uint32 `protobuf:"varint,1,opt,name=FlexAlgo,proto3" json:"FlexAlgo,omitempty"`
	// Flags associated with the Flexible Algorithm prefix metric as
	// defined in [RFC9350] for OSPFv2
	Flags []byte `protobuf:"bytes,2,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Flexible Algorithm prefix metric
	Metric uint32 `protobuf:"varint,3,opt,name=Metric,proto3" json:"Metric,omitempty"`
}

func (x *SLBgplsTopoPrefixFAPM) Reset() {
	*x = SLBgplsTopoPrefixFAPM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoPrefixFAPM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoPrefixFAPM) ProtoMessage() {}

func (x *SLBgplsTopoPrefixFAPM) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoPrefixFAPM.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoPrefixFAPM) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{51}
}

func (x *SLBgplsTopoPrefixFAPM) GetFlexAlgo() uint32 {
	if x != nil {
		return x.FlexAlgo
	}
	return 0
}

func (x *SLBgplsTopoPrefixFAPM) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *SLBgplsTopoPrefixFAPM) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

// Unsupported Flexible Algorithm Definition (FAD) TLVs. TLV 1046
type SLBgplsTopoFadUnsuppTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BGPLS protocol advertising the FAD
	Protocol SLBgplsTopoProtocol `protobuf:"varint,1,opt,name=Protocol,proto3,enum=service_layer.SLBgplsTopoProtocol" json:"Protocol,omitempty"`
	// Unsupported TLV types
	Types []byte `protobuf:"bytes,2,opt,name=Types,proto3" json:"Types,omitempty"`
}

func (x *SLBgplsTopoFadUnsuppTlv) Reset() {
	*x = SLBgplsTopoFadUnsuppTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoFadUnsuppTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoFadUnsuppTlv) ProtoMessage() {}

func (x *SLBgplsTopoFadUnsuppTlv) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoFadUnsuppTlv.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoFadUnsuppTlv) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{52}
}

func (x *SLBgplsTopoFadUnsuppTlv) GetProtocol() SLBgplsTopoProtocol {
	if x != nil {
		return x.Protocol
	}
	return SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_RESERVED
}

func (x *SLBgplsTopoFadUnsuppTlv) GetTypes() []byte {
	if x != nil {
		return x.Types
	}
	return nil
}

// Administrative Group. TLV 1088
// Section 5.3.2 of [RFC9552]
type SLBgplsTopoAdminGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bit mask of administrative groups assigned by the
	// network administrator. Each set bit corresponds to one
	// administrative group assigned to the interface. By convention, the
	// least significant bit is referred to as group 0, and the
	// most significant bit is referred to as group 31. Each EAG bitmask
	// is represented in multiple of 4 bytes.
	Group uint32 `protobuf:"varint,1,opt,name=Group,proto3" json:"Group,omitempty"`
}

func (x *SLBgplsTopoAdminGroup) Reset() {
	*x = SLBgplsTopoAdminGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoAdminGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoAdminGroup) ProtoMessage() {}

func (x *SLBgplsTopoAdminGroup) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoAdminGroup.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoAdminGroup) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{53}
}

func (x *SLBgplsTopoAdminGroup) GetGroup() uint32 {
	if x != nil {
		return x.Group
	}
	return 0
}

// Maximum Link Bandwidth. TLV 1089
// Section 5.3.2 of [RFC9552]
type SLBgplsTopoLinkMaxBandwidth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bandwidth in bytes per second
	Bandwidth []byte `protobuf:"bytes,1,opt,name=Bandwidth,proto3" json:"Bandwidth,omitempty"`
}

func (x *SLBgplsTopoLinkMaxBandwidth) Reset() {
	*x = SLBgplsTopoLinkMaxBandwidth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoLinkMaxBandwidth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoLinkMaxBandwidth) ProtoMessage() {}

func (x *SLBgplsTopoLinkMaxBandwidth) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoLinkMaxBandwidth.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoLinkMaxBandwidth) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{54}
}

func (x *SLBgplsTopoLinkMaxBandwidth) GetBandwidth() []byte {
	if x != nil {
		return x.Bandwidth
	}
	return nil
}

// Maximum Reservable Link Bandwidth. TLV 1090
// Section 5.3.2 of [RFC9552]
type SLBgplsTopoLinkMaxResvBandwidth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bandwidth in bytes per second
	Bandwidth []byte `protobuf:"bytes,1,opt,name=Bandwidth,proto3" json:"Bandwidth,omitempty"`
}

func (x *SLBgplsTopoLinkMaxResvBandwidth) Reset() {
	*x = SLBgplsTopoLinkMaxResvBandwidth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoLinkMaxResvBandwidth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoLinkMaxResvBandwidth) ProtoMessage() {}

func (x *SLBgplsTopoLinkMaxResvBandwidth) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoLinkMaxResvBandwidth.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoLinkMaxResvBandwidth) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{55}
}

func (x *SLBgplsTopoLinkMaxResvBandwidth) GetBandwidth() []byte {
	if x != nil {
		return x.Bandwidth
	}
	return nil
}

// Unreserved Link Bandwidth. TLV 1091
// Section 5.3.2 of [RFC9552]
type SLBgplsTopoLinkUnresvBandwidth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Priority level
	Priority uint32 `protobuf:"varint,1,opt,name=Priority,proto3" json:"Priority,omitempty"`
	// Bandwidth in bytes per second reservable on the link for a particular priority
	Bandwidth []byte `protobuf:"bytes,2,opt,name=Bandwidth,proto3" json:"Bandwidth,omitempty"`
}

func (x *SLBgplsTopoLinkUnresvBandwidth) Reset() {
	*x = SLBgplsTopoLinkUnresvBandwidth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoLinkUnresvBandwidth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoLinkUnresvBandwidth) ProtoMessage() {}

func (x *SLBgplsTopoLinkUnresvBandwidth) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoLinkUnresvBandwidth.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoLinkUnresvBandwidth) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{56}
}

func (x *SLBgplsTopoLinkUnresvBandwidth) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *SLBgplsTopoLinkUnresvBandwidth) GetBandwidth() []byte {
	if x != nil {
		return x.Bandwidth
	}
	return nil
}

// TE Default Metric. TLV 1092
// Section  5.3.2.3 of [RFC9552]
type SLBgplsTopoLinkTeDefaultMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metric
	Metric uint32 `protobuf:"varint,1,opt,name=Metric,proto3" json:"Metric,omitempty"`
}

func (x *SLBgplsTopoLinkTeDefaultMetric) Reset() {
	*x = SLBgplsTopoLinkTeDefaultMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoLinkTeDefaultMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoLinkTeDefaultMetric) ProtoMessage() {}

func (x *SLBgplsTopoLinkTeDefaultMetric) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoLinkTeDefaultMetric.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoLinkTeDefaultMetric) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{57}
}

func (x *SLBgplsTopoLinkTeDefaultMetric) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

// Link Protection Type. TLV 1093
// Section 5.3.2 of [RFC9552]
type SLBgplsTopoLinkProtectionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bit mask of protection capabilities
	Mask uint32 `protobuf:"varint,1,opt,name=Mask,proto3" json:"Mask,omitempty"`
}

func (x *SLBgplsTopoLinkProtectionType) Reset() {
	*x = SLBgplsTopoLinkProtectionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoLinkProtectionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoLinkProtectionType) ProtoMessage() {}

func (x *SLBgplsTopoLinkProtectionType) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoLinkProtectionType.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoLinkProtectionType) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{58}
}

func (x *SLBgplsTopoLinkProtectionType) GetMask() uint32 {
	if x != nil {
		return x.Mask
	}
	return 0
}

// MPLS Proto Mask. TLV 1094
// Section 5.3.2.2 of [RFC9552]
type SLBgplsTopoLinkMplsProtoMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bit-0: Label Distribution Protocol (LDP)
	//
	// Bit-1: Extension to RSVP for LSP Tunnels (RSVP-TE)
	Mask []byte `protobuf:"bytes,1,opt,name=Mask,proto3" json:"Mask,omitempty"`
}

func (x *SLBgplsTopoLinkMplsProtoMask) Reset() {
	*x = SLBgplsTopoLinkMplsProtoMask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoLinkMplsProtoMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoLinkMplsProtoMask) ProtoMessage() {}

func (x *SLBgplsTopoLinkMplsProtoMask) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoLinkMplsProtoMask.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoLinkMplsProtoMask) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{59}
}

func (x *SLBgplsTopoLinkMplsProtoMask) GetMask() []byte {
	if x != nil {
		return x.Mask
	}
	return nil
}

// IGP Metric. TLV 1095
// Section 5.3.2.4 of [RFC9552]
type SLBgplsTopoLinkIgpMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 1 octet for ISIS small metrics
	// 2 octets for OSPF metrics
	// 3 octets for ISIS wide metrics
	Metric []byte `protobuf:"bytes,1,opt,name=Metric,proto3" json:"Metric,omitempty"`
}

func (x *SLBgplsTopoLinkIgpMetric) Reset() {
	*x = SLBgplsTopoLinkIgpMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoLinkIgpMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoLinkIgpMetric) ProtoMessage() {}

func (x *SLBgplsTopoLinkIgpMetric) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoLinkIgpMetric.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoLinkIgpMetric) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{60}
}

func (x *SLBgplsTopoLinkIgpMetric) GetMetric() []byte {
	if x != nil {
		return x.Metric
	}
	return nil
}

// Shared Risk Link Group. TLV 1096
// Section 5.3.2.5 of [RFC9552]
type SLBgplsTopoLinkSrlg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrlgVal uint32 `protobuf:"varint,1,opt,name=SrlgVal,proto3" json:"SrlgVal,omitempty"`
}

func (x *SLBgplsTopoLinkSrlg) Reset() {
	*x = SLBgplsTopoLinkSrlg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoLinkSrlg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoLinkSrlg) ProtoMessage() {}

func (x *SLBgplsTopoLinkSrlg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoLinkSrlg.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoLinkSrlg) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{61}
}

func (x *SLBgplsTopoLinkSrlg) GetSrlgVal() uint32 {
	if x != nil {
		return x.SrlgVal
	}
	return 0
}

// Opaque Link Attribute. TLV 1097
// Section 5.3.2.6 of [RFC9552]
type SLBgplsTopoLinkOpaqueAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Opaque attribute
	OpaqueAttr []byte `protobuf:"bytes,1,opt,name=OpaqueAttr,proto3" json:"OpaqueAttr,omitempty"`
}

func (x *SLBgplsTopoLinkOpaqueAttr) Reset() {
	*x = SLBgplsTopoLinkOpaqueAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoLinkOpaqueAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoLinkOpaqueAttr) ProtoMessage() {}

func (x *SLBgplsTopoLinkOpaqueAttr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoLinkOpaqueAttr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoLinkOpaqueAttr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{62}
}

func (x *SLBgplsTopoLinkOpaqueAttr) GetOpaqueAttr() []byte {
	if x != nil {
		return x.OpaqueAttr
	}
	return nil
}

// Link Name. TLV 1098.
// Section 5.3.2.7 of [RFC9552]
type SLBgplsTopoLinkName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Symbolic name of the link without a NULL terminator. It is
	// RECOMMENDED that the size of the symbolic name be limited to
	// 255 characters.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *SLBgplsTopoLinkName) Reset() {
	*x = SLBgplsTopoLinkName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoLinkName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoLinkName) ProtoMessage() {}

func (x *SLBgplsTopoLinkName) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoLinkName.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoLinkName) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{63}
}

func (x *SLBgplsTopoLinkName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Adjacency SID. TLV 1099
// Section 2.2.1 of [RFC9085]
type SLBgplsTopoAdjSid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label or index
	LabelIndex uint32 `protobuf:"varint,1,opt,name=LabelIndex,proto3" json:"LabelIndex,omitempty"`
	// Specifies whether the adjacency SID is a label or index
	AdjSidFormat SLBgplsTopoSidFormat `protobuf:"varint,2,opt,name=AdjSidFormat,proto3,enum=service_layer.SLBgplsTopoSidFormat" json:"AdjSidFormat,omitempty"`
	// Flags associated with the SID. IS-IS flags as defined in
	// Section 2.2.1 of [RFC8667]. OSPFv2 flags as defined in
	// Section 6.1 of [RFC8665]. OSPFv3 flags as defined in
	// Section 7.1 of [RFC8666].
	Flags []byte `protobuf:"bytes,3,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Weight used for load balancing purposes
	Weight uint32 `protobuf:"varint,4,opt,name=Weight,proto3" json:"Weight,omitempty"`
}

func (x *SLBgplsTopoAdjSid) Reset() {
	*x = SLBgplsTopoAdjSid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoAdjSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoAdjSid) ProtoMessage() {}

func (x *SLBgplsTopoAdjSid) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoAdjSid.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoAdjSid) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{64}
}

func (x *SLBgplsTopoAdjSid) GetLabelIndex() uint32 {
	if x != nil {
		return x.LabelIndex
	}
	return 0
}

func (x *SLBgplsTopoAdjSid) GetAdjSidFormat() SLBgplsTopoSidFormat {
	if x != nil {
		return x.AdjSidFormat
	}
	return SLBgplsTopoSidFormat_SL_BGPLS_TOPO_SID_FORMAT_RESERVED
}

func (x *SLBgplsTopoAdjSid) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *SLBgplsTopoAdjSid) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// LAN Adjacency SID. TLV 1100
// Section 2.2.1 of [RFC9085]
type SLBgplsTopoLanAdjSid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Neighbor ID
	Neighbor *SLBgpLsTopoNeighborId `protobuf:"bytes,1,opt,name=Neighbor,proto3" json:"Neighbor,omitempty"`
	// Label or index
	LabelIndex uint32 `protobuf:"varint,2,opt,name=LabelIndex,proto3" json:"LabelIndex,omitempty"`
	// Specifies whether the adjacency SID is a label or index
	AdjSidFormat SLBgplsTopoSidFormat `protobuf:"varint,3,opt,name=AdjSidFormat,proto3,enum=service_layer.SLBgplsTopoSidFormat" json:"AdjSidFormat,omitempty"`
	// Flags associated with the SID. IS-IS flags as defined in
	// Section 2.2.1 of [RFC8667]. OSPFv2 flags as defined in
	// Section 6.1 of [RFC8665]. OSPFv3 flags as defined in
	// Section 7.1 of [RFC8666].
	Flags []byte `protobuf:"bytes,4,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Weight used for load balancing purposes
	Weight uint32 `protobuf:"varint,5,opt,name=Weight,proto3" json:"Weight,omitempty"`
}

func (x *SLBgplsTopoLanAdjSid) Reset() {
	*x = SLBgplsTopoLanAdjSid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoLanAdjSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoLanAdjSid) ProtoMessage() {}

func (x *SLBgplsTopoLanAdjSid) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoLanAdjSid.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoLanAdjSid) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{65}
}

func (x *SLBgplsTopoLanAdjSid) GetNeighbor() *SLBgpLsTopoNeighborId {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

func (x *SLBgplsTopoLanAdjSid) GetLabelIndex() uint32 {
	if x != nil {
		return x.LabelIndex
	}
	return 0
}

func (x *SLBgplsTopoLanAdjSid) GetAdjSidFormat() SLBgplsTopoSidFormat {
	if x != nil {
		return x.AdjSidFormat
	}
	return SLBgplsTopoSidFormat_SL_BGPLS_TOPO_SID_FORMAT_RESERVED
}

func (x *SLBgplsTopoLanAdjSid) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *SLBgplsTopoLanAdjSid) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// BGP Peer Node SID. TLV 1101
// Section 5 of [RFC9086]
type SLBgplsTopoBgpPeerNodeSid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label or index or V6 Addr
	Sid []byte `protobuf:"bytes,1,opt,name=Sid,proto3" json:"Sid,omitempty"`
	// Specifies whether the BGP SID is a label or index
	BgpSidFormat SLBgplsTopoSidFormat `protobuf:"varint,2,opt,name=BgpSidFormat,proto3,enum=service_layer.SLBgplsTopoSidFormat" json:"BgpSidFormat,omitempty"`
	// Flags associated with the SID.
	// Defined in Section 5 of [RFC9086]
	Flags []byte `protobuf:"bytes,3,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Weight used for load balancing purposes
	Weight uint32 `protobuf:"varint,4,opt,name=Weight,proto3" json:"Weight,omitempty"`
}

func (x *SLBgplsTopoBgpPeerNodeSid) Reset() {
	*x = SLBgplsTopoBgpPeerNodeSid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoBgpPeerNodeSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoBgpPeerNodeSid) ProtoMessage() {}

func (x *SLBgplsTopoBgpPeerNodeSid) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoBgpPeerNodeSid.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoBgpPeerNodeSid) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{66}
}

func (x *SLBgplsTopoBgpPeerNodeSid) GetSid() []byte {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *SLBgplsTopoBgpPeerNodeSid) GetBgpSidFormat() SLBgplsTopoSidFormat {
	if x != nil {
		return x.BgpSidFormat
	}
	return SLBgplsTopoSidFormat_SL_BGPLS_TOPO_SID_FORMAT_RESERVED
}

func (x *SLBgplsTopoBgpPeerNodeSid) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *SLBgplsTopoBgpPeerNodeSid) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// BGP Peer Adjacency SID. TLV 1102
// Section 5 of [RFC9086]
type SLBgplsTopoBgpPeerAdjSid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label or index or V6 Addr
	Sid []byte `protobuf:"bytes,1,opt,name=Sid,proto3" json:"Sid,omitempty"`
	// Specifies whether the BGP SID is a label or index
	BgpSidFormat SLBgplsTopoSidFormat `protobuf:"varint,2,opt,name=BgpSidFormat,proto3,enum=service_layer.SLBgplsTopoSidFormat" json:"BgpSidFormat,omitempty"`
	// Flags associated with the SID.
	// Defined in Section 5 of [RFC9086]
	Flags []byte `protobuf:"bytes,3,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Weight used for load balancing purposes
	Weight uint32 `protobuf:"varint,4,opt,name=Weight,proto3" json:"Weight,omitempty"`
}

func (x *SLBgplsTopoBgpPeerAdjSid) Reset() {
	*x = SLBgplsTopoBgpPeerAdjSid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoBgpPeerAdjSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoBgpPeerAdjSid) ProtoMessage() {}

func (x *SLBgplsTopoBgpPeerAdjSid) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoBgpPeerAdjSid.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoBgpPeerAdjSid) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{67}
}

func (x *SLBgplsTopoBgpPeerAdjSid) GetSid() []byte {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *SLBgplsTopoBgpPeerAdjSid) GetBgpSidFormat() SLBgplsTopoSidFormat {
	if x != nil {
		return x.BgpSidFormat
	}
	return SLBgplsTopoSidFormat_SL_BGPLS_TOPO_SID_FORMAT_RESERVED
}

func (x *SLBgplsTopoBgpPeerAdjSid) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *SLBgplsTopoBgpPeerAdjSid) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// BGP Peer Set SID. TLV 1103
// Section 5 of [RFC9086]
type SLBgplsTopoBgpPeerSetSid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label or index or V6 Addr
	Sid []byte `protobuf:"bytes,1,opt,name=Sid,proto3" json:"Sid,omitempty"`
	// Specifies whether the BGP SID is a label or index
	BgpSidFormat SLBgplsTopoSidFormat `protobuf:"varint,2,opt,name=BgpSidFormat,proto3,enum=service_layer.SLBgplsTopoSidFormat" json:"BgpSidFormat,omitempty"`
	// Flags associated with the SID.
	// Defined in Section 5 of [RFC9086]
	Flags []byte `protobuf:"bytes,3,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Weight used for load balancing purposes
	Weight uint32 `protobuf:"varint,4,opt,name=Weight,proto3" json:"Weight,omitempty"`
}

func (x *SLBgplsTopoBgpPeerSetSid) Reset() {
	*x = SLBgplsTopoBgpPeerSetSid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoBgpPeerSetSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoBgpPeerSetSid) ProtoMessage() {}

func (x *SLBgplsTopoBgpPeerSetSid) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoBgpPeerSetSid.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoBgpPeerSetSid) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{68}
}

func (x *SLBgplsTopoBgpPeerSetSid) GetSid() []byte {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *SLBgplsTopoBgpPeerSetSid) GetBgpSidFormat() SLBgplsTopoSidFormat {
	if x != nil {
		return x.BgpSidFormat
	}
	return SLBgplsTopoSidFormat_SL_BGPLS_TOPO_SID_FORMAT_RESERVED
}

func (x *SLBgplsTopoBgpPeerSetSid) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *SLBgplsTopoBgpPeerSetSid) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// SRv6 End X SID. TLV 1106
// Section 4.1 of [RFC9514]
type SLBgplsTopoSrv6EndXSid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SRv6 SID as 128 bit value
	Sid []byte `protobuf:"bytes,1,opt,name=Sid,proto3" json:"Sid,omitempty"`
	// Algorithm associated with the SID
	Algorithm uint32 `protobuf:"varint,2,opt,name=Algorithm,proto3" json:"Algorithm,omitempty"`
	// Flags associated with the SID. The flags are copied from the IS-IS SRv6
	// End.X SID sub-TLV (Section 8.1 of [RFC9352]) or the OSPFv3 SRv6
	// End.X SID sub-TLV (Section 9.1 of [RFC9513]) in the case of IS-IS
	// or OSPFv3, respectively.  In the case of the BGP EPE Peer
	// Adjacency SID, the flags are as defined in Section 7.2 of [RFC9514]
	Flags uint32 `protobuf:"varint,3,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Weight associated with the SID for load balancing purpose
	Weight uint32 `protobuf:"varint,4,opt,name=Weight,proto3" json:"Weight,omitempty"`
	// Endpoint behavior of the SID
	EndPointBehavior uint32 `protobuf:"varint,5,opt,name=EndPointBehavior,proto3" json:"EndPointBehavior,omitempty"`
	// The Segment Routing over IPv6 (SRv6) Segment Identifier (SID)
	// structure information associated with a SRv6 SID.
	// SRv6 SID Structure Attribute. TLV 1252
	// Section 8 of [RFC9514]
	SidStruct *SLSrv6SidStruct `protobuf:"bytes,6,opt,name=SidStruct,proto3" json:"SidStruct,omitempty"`
}

func (x *SLBgplsTopoSrv6EndXSid) Reset() {
	*x = SLBgplsTopoSrv6EndXSid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrv6EndXSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrv6EndXSid) ProtoMessage() {}

func (x *SLBgplsTopoSrv6EndXSid) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrv6EndXSid.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrv6EndXSid) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{69}
}

func (x *SLBgplsTopoSrv6EndXSid) GetSid() []byte {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *SLBgplsTopoSrv6EndXSid) GetAlgorithm() uint32 {
	if x != nil {
		return x.Algorithm
	}
	return 0
}

func (x *SLBgplsTopoSrv6EndXSid) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SLBgplsTopoSrv6EndXSid) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *SLBgplsTopoSrv6EndXSid) GetEndPointBehavior() uint32 {
	if x != nil {
		return x.EndPointBehavior
	}
	return 0
}

func (x *SLBgplsTopoSrv6EndXSid) GetSidStruct() *SLSrv6SidStruct {
	if x != nil {
		return x.SidStruct
	}
	return nil
}

// Neighbor ID used in Adjacency SID and SRv6 EndX SID
type SLBgpLsTopoNeighborId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to NeighborId:
	//
	//	*SLBgpLsTopoNeighborId_Ipv4Addr
	//	*SLBgpLsTopoNeighborId_SystemId
	NeighborId isSLBgpLsTopoNeighborId_NeighborId `protobuf_oneof:"NeighborId"`
}

func (x *SLBgpLsTopoNeighborId) Reset() {
	*x = SLBgpLsTopoNeighborId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgpLsTopoNeighborId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgpLsTopoNeighborId) ProtoMessage() {}

func (x *SLBgpLsTopoNeighborId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgpLsTopoNeighborId.ProtoReflect.Descriptor instead.
func (*SLBgpLsTopoNeighborId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{70}
}

func (m *SLBgpLsTopoNeighborId) GetNeighborId() isSLBgpLsTopoNeighborId_NeighborId {
	if m != nil {
		return m.NeighborId
	}
	return nil
}

func (x *SLBgpLsTopoNeighborId) GetIpv4Addr() []byte {
	if x, ok := x.GetNeighborId().(*SLBgpLsTopoNeighborId_Ipv4Addr); ok {
		return x.Ipv4Addr
	}
	return nil
}

func (x *SLBgpLsTopoNeighborId) GetSystemId() []byte {
	if x, ok := x.GetNeighborId().(*SLBgpLsTopoNeighborId_SystemId); ok {
		return x.SystemId
	}
	return nil
}

type isSLBgpLsTopoNeighborId_NeighborId interface {
	isSLBgpLsTopoNeighborId_NeighborId()
}

type SLBgpLsTopoNeighborId_Ipv4Addr struct {
	// This field carries info about an IPv4 neighbor ID.
	Ipv4Addr []byte `protobuf:"bytes,1,opt,name=Ipv4Addr,proto3,oneof"`
}

type SLBgpLsTopoNeighborId_SystemId struct {
	// This field carries info about an system ID neighbor ID.
	SystemId []byte `protobuf:"bytes,2,opt,name=SystemId,proto3,oneof"`
}

func (*SLBgpLsTopoNeighborId_Ipv4Addr) isSLBgpLsTopoNeighborId_NeighborId() {}

func (*SLBgpLsTopoNeighborId_SystemId) isSLBgpLsTopoNeighborId_NeighborId() {}

// SRv6 LAN End X SID. TLV 1107/1108
// Section 4.1 of [RFC9514]
type SLBgplsTopoSrv6LanEndXSid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Neighbor ID
	Neighbor *SLBgpLsTopoNeighborId `protobuf:"bytes,1,opt,name=Neighbor,proto3" json:"Neighbor,omitempty"`
	// SRv6 SID as 128 bit value
	Sid []byte `protobuf:"bytes,2,opt,name=Sid,proto3" json:"Sid,omitempty"`
	// Algorithm associated with the SID
	Algorithm uint32 `protobuf:"varint,3,opt,name=Algorithm,proto3" json:"Algorithm,omitempty"`
	// Flags associated with the SID. The flags are copied from the IS-IS SRv6
	// End.X SID sub-TLV (Section 8.1 of [RFC9352]) or the OSPFv3 SRv6
	// End.X SID sub-TLV (Section 9.1 of [RFC9513]) in the case of IS-IS
	// or OSPFv3, respectively.  In the case of the BGP EPE Peer
	// Adjacency SID, the flags are as defined in Section 7.2 of [RFC9514]
	Flags uint32 `protobuf:"varint,4,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Weight associated with the SID for load balancing purpose
	Weight uint32 `protobuf:"varint,5,opt,name=Weight,proto3" json:"Weight,omitempty"`
	// Endpoint behavior of the SID
	EndPointBehavior uint32 `protobuf:"varint,6,opt,name=EndPointBehavior,proto3" json:"EndPointBehavior,omitempty"`
	// The Segment Routing over IPv6 (SRv6) Segment Identifier (SID)
	// structure information associated with a SRv6 SID.
	// SRv6 SID Structure Attribute. TLV 1252
	// Section 8 of [RFC9514]
	SidStruct *SLSrv6SidStruct `protobuf:"bytes,7,opt,name=SidStruct,proto3" json:"SidStruct,omitempty"`
}

func (x *SLBgplsTopoSrv6LanEndXSid) Reset() {
	*x = SLBgplsTopoSrv6LanEndXSid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrv6LanEndXSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrv6LanEndXSid) ProtoMessage() {}

func (x *SLBgplsTopoSrv6LanEndXSid) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrv6LanEndXSid.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrv6LanEndXSid) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{71}
}

func (x *SLBgplsTopoSrv6LanEndXSid) GetNeighbor() *SLBgpLsTopoNeighborId {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

func (x *SLBgplsTopoSrv6LanEndXSid) GetSid() []byte {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *SLBgplsTopoSrv6LanEndXSid) GetAlgorithm() uint32 {
	if x != nil {
		return x.Algorithm
	}
	return 0
}

func (x *SLBgplsTopoSrv6LanEndXSid) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SLBgplsTopoSrv6LanEndXSid) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *SLBgplsTopoSrv6LanEndXSid) GetEndPointBehavior() uint32 {
	if x != nil {
		return x.EndPointBehavior
	}
	return 0
}

func (x *SLBgplsTopoSrv6LanEndXSid) GetSidStruct() *SLSrv6SidStruct {
	if x != nil {
		return x.SidStruct
	}
	return nil
}

// Unidirectional Link Delay. TLV 1114
// Section 2.1 of [RFC8571]
type SLBgplsTopoUniLinkDelay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Delay in microseconds
	Delay uint32 `protobuf:"varint,1,opt,name=Delay,proto3" json:"Delay,omitempty"`
	// Bit-0: A-Flag: Set if anamolous.
	Flags []byte `protobuf:"bytes,2,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *SLBgplsTopoUniLinkDelay) Reset() {
	*x = SLBgplsTopoUniLinkDelay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoUniLinkDelay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoUniLinkDelay) ProtoMessage() {}

func (x *SLBgplsTopoUniLinkDelay) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoUniLinkDelay.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoUniLinkDelay) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{72}
}

func (x *SLBgplsTopoUniLinkDelay) GetDelay() uint32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *SLBgplsTopoUniLinkDelay) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

// Min/Max Unidirectional Link Delay. TLV 1115
// Section 2.2 of [RFC8571]
type SLBgplsTopoMinMaxUniLinkDelay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum delay in microseconds
	Min uint32 `protobuf:"varint,1,opt,name=Min,proto3" json:"Min,omitempty"`
	// Maximum delay in microseconds
	Max uint32 `protobuf:"varint,2,opt,name=Max,proto3" json:"Max,omitempty"`
	// Bit-0: A-Flag: Set if anamolous.
	Flags []byte `protobuf:"bytes,3,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *SLBgplsTopoMinMaxUniLinkDelay) Reset() {
	*x = SLBgplsTopoMinMaxUniLinkDelay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoMinMaxUniLinkDelay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoMinMaxUniLinkDelay) ProtoMessage() {}

func (x *SLBgplsTopoMinMaxUniLinkDelay) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoMinMaxUniLinkDelay.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoMinMaxUniLinkDelay) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{73}
}

func (x *SLBgplsTopoMinMaxUniLinkDelay) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *SLBgplsTopoMinMaxUniLinkDelay) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *SLBgplsTopoMinMaxUniLinkDelay) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

// Unidirectional Delay Variation. TLV 1116
// Section 2.3 of [RFC8571]
type SLBgplsTopoUniDelayVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Delay variation in microseconds
	Variation uint32 `protobuf:"varint,1,opt,name=Variation,proto3" json:"Variation,omitempty"`
	// Bit-0: A-Flag: Set if anamolous.
	Flags []byte `protobuf:"bytes,2,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *SLBgplsTopoUniDelayVar) Reset() {
	*x = SLBgplsTopoUniDelayVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoUniDelayVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoUniDelayVar) ProtoMessage() {}

func (x *SLBgplsTopoUniDelayVar) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoUniDelayVar.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoUniDelayVar) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{74}
}

func (x *SLBgplsTopoUniDelayVar) GetVariation() uint32 {
	if x != nil {
		return x.Variation
	}
	return 0
}

func (x *SLBgplsTopoUniDelayVar) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

// Unidirectional Link Loss. TLV 1117
// Section 2.4 of [RFC8571]
type SLBgplsTopoUniLinkLoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Link packet loss as a percentage of the total traffic sent over a
	// configurable interval. The basic unit is 0.000003%, where (2^24 - 2)
	// is 50.331642%.
	Loss uint32 `protobuf:"varint,1,opt,name=Loss,proto3" json:"Loss,omitempty"`
	// Bit-0: A-Flag: Set if anamolous.
	Flags []byte `protobuf:"bytes,2,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *SLBgplsTopoUniLinkLoss) Reset() {
	*x = SLBgplsTopoUniLinkLoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoUniLinkLoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoUniLinkLoss) ProtoMessage() {}

func (x *SLBgplsTopoUniLinkLoss) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoUniLinkLoss.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoUniLinkLoss) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{75}
}

func (x *SLBgplsTopoUniLinkLoss) GetLoss() uint32 {
	if x != nil {
		return x.Loss
	}
	return 0
}

func (x *SLBgplsTopoUniLinkLoss) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

// Unidirectional Residual Bandwidth. TLV 1118
// Section 2.5 of [RFC8571]
type SLBgplsTopoUniResBandwidth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bandwidth in bytes per second
	Bandwidth []byte `protobuf:"bytes,1,opt,name=Bandwidth,proto3" json:"Bandwidth,omitempty"`
}

func (x *SLBgplsTopoUniResBandwidth) Reset() {
	*x = SLBgplsTopoUniResBandwidth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoUniResBandwidth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoUniResBandwidth) ProtoMessage() {}

func (x *SLBgplsTopoUniResBandwidth) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoUniResBandwidth.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoUniResBandwidth) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{76}
}

func (x *SLBgplsTopoUniResBandwidth) GetBandwidth() []byte {
	if x != nil {
		return x.Bandwidth
	}
	return nil
}

// Unidirectional Available Bandwidth. TLV 1119
// Section 2.6 of [RFC8571]
type SLBgplsTopoUniAvailBandwidth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bandwidth in bytes per second
	Bandwidth []byte `protobuf:"bytes,1,opt,name=Bandwidth,proto3" json:"Bandwidth,omitempty"`
}

func (x *SLBgplsTopoUniAvailBandwidth) Reset() {
	*x = SLBgplsTopoUniAvailBandwidth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoUniAvailBandwidth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoUniAvailBandwidth) ProtoMessage() {}

func (x *SLBgplsTopoUniAvailBandwidth) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoUniAvailBandwidth.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoUniAvailBandwidth) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{77}
}

func (x *SLBgplsTopoUniAvailBandwidth) GetBandwidth() []byte {
	if x != nil {
		return x.Bandwidth
	}
	return nil
}

// Unidirectional Utilized Bandwidth. TLV 1120
// Section 2.7 of [RFC8571]
type SLBgplsTopoUniUtilBandwidth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bandwidth in bytes per second
	Bandwidth []byte `protobuf:"bytes,1,opt,name=Bandwidth,proto3" json:"Bandwidth,omitempty"`
}

func (x *SLBgplsTopoUniUtilBandwidth) Reset() {
	*x = SLBgplsTopoUniUtilBandwidth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoUniUtilBandwidth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoUniUtilBandwidth) ProtoMessage() {}

func (x *SLBgplsTopoUniUtilBandwidth) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoUniUtilBandwidth.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoUniUtilBandwidth) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{78}
}

func (x *SLBgplsTopoUniUtilBandwidth) GetBandwidth() []byte {
	if x != nil {
		return x.Bandwidth
	}
	return nil
}

// ASLA Attributes. TLV 1122
// Section 2 of [RFC9294]
type SLBgplsTopoAslaAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard Application Identifier Bit Mask (SABM). Each bit
	// represents a single standard application
	Sabm []byte `protobuf:"bytes,1,opt,name=Sabm,proto3" json:"Sabm,omitempty"`
	// User-Defined Application Identifier Bit Mask (UDABM). Each bit
	// represents a single user-defined application
	Udabm []byte `protobuf:"bytes,2,opt,name=Udabm,proto3" json:"Udabm,omitempty"`
	// The bit mask of administrative groups assigned
	// by the network administrator.
	// Extended Administrative Group. TLV 1088
	// Section 5.3.2 of [RFC9552]
	AdminGroup *SLBgplsTopoAdminGroup `protobuf:"bytes,3,opt,name=AdminGroup,proto3" json:"AdminGroup,omitempty"`
	// The Traffic Engineering (TE) metric of a link.
	// TE Default Metric. TLV 1092
	// Section  5.3.2.3 of [RFC9552]
	TeDefMetric *SLBgplsTopoLinkTeDefaultMetric `protobuf:"bytes,4,opt,name=TeDefMetric,proto3" json:"TeDefMetric,omitempty"`
	// The Shared Link Risk Groups (SRLGs) of a link.
	// Shared Risk Link Group. TLV 1096
	// Section 5.3.2.5 of [RFC9552]
	Srlg []*SLBgplsTopoLinkSrlg `protobuf:"bytes,5,rep,name=Srlg,proto3" json:"Srlg,omitempty"`
	// The average link delay between two
	// directly connected IGP link-state neighbors.
	// Unidirectional Link Delay. TLV 1114
	// Section 2.1 of [RFC8571]
	UniLinkDelay *SLBgplsTopoUniLinkDelay `protobuf:"bytes,6,opt,name=UniLinkDelay,proto3" json:"UniLinkDelay,omitempty"`
	// The minimum and maximum link delay between two
	// directly connected IGP link-state neighbors.
	// Min/Max Unidirectional Link Delay. TLV 1115
	// Section 2.2 of [RFC8571]
	MinMaxLinkDelay *SLBgplsTopoMinMaxUniLinkDelay `protobuf:"bytes,7,opt,name=MinMaxLinkDelay,proto3" json:"MinMaxLinkDelay,omitempty"`
	// The average link delay variation between two
	// directly connected IGP link-state neighbors.
	// Unidirectional Delay Variation. TLV 1116
	// Section 2.3 of [RFC8571]
	UniDelayVariation *SLBgplsTopoUniDelayVar `protobuf:"bytes,8,opt,name=UniDelayVariation,proto3" json:"UniDelayVariation,omitempty"`
	// The loss (as a packet percentage) between two
	// directly connected IGP link-state neighbors.
	// Unidirectional Link Loss. TLV 1117
	// Section 2.4 of [RFC8571]
	UniLinkLoss *SLBgplsTopoUniLinkLoss `protobuf:"bytes,9,opt,name=UniLinkLoss,proto3" json:"UniLinkLoss,omitempty"`
	// The residual bandwidth between two
	// directly connected IGP link-state neighbors.
	// Unidirectional Residual Bandwidth. TLV 1118
	// Section 2.5 of [RFC8571]
	UniResBandwidth *SLBgplsTopoUniResBandwidth `protobuf:"bytes,10,opt,name=UniResBandwidth,proto3" json:"UniResBandwidth,omitempty"`
	// The available bandwidth between two
	// directly connected IGP link-state neighbors.
	// Unidirectional Available Bandwidth. TLV 1119
	// Section 2.6 of [RFC8571]
	UniAvailBandwidth *SLBgplsTopoUniAvailBandwidth `protobuf:"bytes,11,opt,name=UniAvailBandwidth,proto3" json:"UniAvailBandwidth,omitempty"`
	// The utilized bandwidth between two
	// directly connected IGP link-state neighbors.
	// Unidirectional Utilized Bandwidth. TLV 1120
	// Section 2.7 of [RFC8571]
	UniUtilBandwidth *SLBgplsTopoUniUtilBandwidth `protobuf:"bytes,12,opt,name=UniUtilBandwidth,proto3" json:"UniUtilBandwidth,omitempty"`
	// The bit mask of administrative groups assigned
	// by the network administrator.
	// Extended Administrative Group. TLV 1173
	// Section 2 of [RFC9104]
	ExtAdminGroup []*SLBgplsTopoExtAdminGroup `protobuf:"bytes,13,rep,name=ExtAdminGroup,proto3" json:"ExtAdminGroup,omitempty"`
	// Unknown ASLA Attributes
	// Unknown/unsupported by IOS-XR/BGPLS.
	UnknownAttr []*SLBgplsTopoUnknownAttr `protobuf:"bytes,14,rep,name=UnknownAttr,proto3" json:"UnknownAttr,omitempty"`
}

func (x *SLBgplsTopoAslaAttr) Reset() {
	*x = SLBgplsTopoAslaAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoAslaAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoAslaAttr) ProtoMessage() {}

func (x *SLBgplsTopoAslaAttr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoAslaAttr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoAslaAttr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{79}
}

func (x *SLBgplsTopoAslaAttr) GetSabm() []byte {
	if x != nil {
		return x.Sabm
	}
	return nil
}

func (x *SLBgplsTopoAslaAttr) GetUdabm() []byte {
	if x != nil {
		return x.Udabm
	}
	return nil
}

func (x *SLBgplsTopoAslaAttr) GetAdminGroup() *SLBgplsTopoAdminGroup {
	if x != nil {
		return x.AdminGroup
	}
	return nil
}

func (x *SLBgplsTopoAslaAttr) GetTeDefMetric() *SLBgplsTopoLinkTeDefaultMetric {
	if x != nil {
		return x.TeDefMetric
	}
	return nil
}

func (x *SLBgplsTopoAslaAttr) GetSrlg() []*SLBgplsTopoLinkSrlg {
	if x != nil {
		return x.Srlg
	}
	return nil
}

func (x *SLBgplsTopoAslaAttr) GetUniLinkDelay() *SLBgplsTopoUniLinkDelay {
	if x != nil {
		return x.UniLinkDelay
	}
	return nil
}

func (x *SLBgplsTopoAslaAttr) GetMinMaxLinkDelay() *SLBgplsTopoMinMaxUniLinkDelay {
	if x != nil {
		return x.MinMaxLinkDelay
	}
	return nil
}

func (x *SLBgplsTopoAslaAttr) GetUniDelayVariation() *SLBgplsTopoUniDelayVar {
	if x != nil {
		return x.UniDelayVariation
	}
	return nil
}

func (x *SLBgplsTopoAslaAttr) GetUniLinkLoss() *SLBgplsTopoUniLinkLoss {
	if x != nil {
		return x.UniLinkLoss
	}
	return nil
}

func (x *SLBgplsTopoAslaAttr) GetUniResBandwidth() *SLBgplsTopoUniResBandwidth {
	if x != nil {
		return x.UniResBandwidth
	}
	return nil
}

func (x *SLBgplsTopoAslaAttr) GetUniAvailBandwidth() *SLBgplsTopoUniAvailBandwidth {
	if x != nil {
		return x.UniAvailBandwidth
	}
	return nil
}

func (x *SLBgplsTopoAslaAttr) GetUniUtilBandwidth() *SLBgplsTopoUniUtilBandwidth {
	if x != nil {
		return x.UniUtilBandwidth
	}
	return nil
}

func (x *SLBgplsTopoAslaAttr) GetExtAdminGroup() []*SLBgplsTopoExtAdminGroup {
	if x != nil {
		return x.ExtAdminGroup
	}
	return nil
}

func (x *SLBgplsTopoAslaAttr) GetUnknownAttr() []*SLBgplsTopoUnknownAttr {
	if x != nil {
		return x.UnknownAttr
	}
	return nil
}

// IGP Flags. TLV 1152
// Section 5.3.3.1 of [RFC9552]
type SLBgplsTopoPrefixIgpFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bit-0: D-Flag: IS-IS Up/Down Bit. [RFC5305]
	//
	// Bit-1: N-Flag: OSPF "no unicast" Bit. [RFC5340]
	//
	// Bit-2: L-Flag: OSPF "local address" Bit. [RFC5340]
	//
	// Bit-3: P-Flag: OSPF "propagate NSSA" Bit. [RFC5340]
	Flags []byte `protobuf:"bytes,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *SLBgplsTopoPrefixIgpFlags) Reset() {
	*x = SLBgplsTopoPrefixIgpFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoPrefixIgpFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoPrefixIgpFlags) ProtoMessage() {}

func (x *SLBgplsTopoPrefixIgpFlags) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoPrefixIgpFlags.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoPrefixIgpFlags) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{80}
}

func (x *SLBgplsTopoPrefixIgpFlags) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

// IGP Route Tag. TLV 1153
// Section 5.3.3.2 of [RFC9552]
type SLBgplsTopoPrefixIgpRouteTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IGP route tag
	Tag uint32 `protobuf:"varint,1,opt,name=Tag,proto3" json:"Tag,omitempty"`
}

func (x *SLBgplsTopoPrefixIgpRouteTag) Reset() {
	*x = SLBgplsTopoPrefixIgpRouteTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoPrefixIgpRouteTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoPrefixIgpRouteTag) ProtoMessage() {}

func (x *SLBgplsTopoPrefixIgpRouteTag) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoPrefixIgpRouteTag.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoPrefixIgpRouteTag) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{81}
}

func (x *SLBgplsTopoPrefixIgpRouteTag) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

// IGP Extended Route Tag. TLV 1154
// Section 5.3.3.3 of [RFC9552]
type SLBgplsTopoPrefixIgpExtRouteTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IGP extended route tag
	Tag uint64 `protobuf:"varint,1,opt,name=Tag,proto3" json:"Tag,omitempty"`
}

func (x *SLBgplsTopoPrefixIgpExtRouteTag) Reset() {
	*x = SLBgplsTopoPrefixIgpExtRouteTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoPrefixIgpExtRouteTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoPrefixIgpExtRouteTag) ProtoMessage() {}

func (x *SLBgplsTopoPrefixIgpExtRouteTag) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoPrefixIgpExtRouteTag.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoPrefixIgpExtRouteTag) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{82}
}

func (x *SLBgplsTopoPrefixIgpExtRouteTag) GetTag() uint64 {
	if x != nil {
		return x.Tag
	}
	return 0
}

// Prefix Metric. TLV 1155
// Section 5.3.3.4 of [RFC9552]
type SLBgplsTopoPrefixMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Prefix metric
	Metric uint32 `protobuf:"varint,1,opt,name=Metric,proto3" json:"Metric,omitempty"`
}

func (x *SLBgplsTopoPrefixMetric) Reset() {
	*x = SLBgplsTopoPrefixMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoPrefixMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoPrefixMetric) ProtoMessage() {}

func (x *SLBgplsTopoPrefixMetric) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoPrefixMetric.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoPrefixMetric) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{83}
}

func (x *SLBgplsTopoPrefixMetric) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

// OSPF Forwarding Address. TLV 1156
// Section 5.3.3.5 of [RFC9552]
type SLBgplsTopoPrefixOspfFwdAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OspfFwdAddr:
	//
	//	*SLBgplsTopoPrefixOspfFwdAddr_Ipv4Addr
	//	*SLBgplsTopoPrefixOspfFwdAddr_Ipv6Addr
	OspfFwdAddr isSLBgplsTopoPrefixOspfFwdAddr_OspfFwdAddr `protobuf_oneof:"OspfFwdAddr"`
}

func (x *SLBgplsTopoPrefixOspfFwdAddr) Reset() {
	*x = SLBgplsTopoPrefixOspfFwdAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoPrefixOspfFwdAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoPrefixOspfFwdAddr) ProtoMessage() {}

func (x *SLBgplsTopoPrefixOspfFwdAddr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoPrefixOspfFwdAddr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoPrefixOspfFwdAddr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{84}
}

func (m *SLBgplsTopoPrefixOspfFwdAddr) GetOspfFwdAddr() isSLBgplsTopoPrefixOspfFwdAddr_OspfFwdAddr {
	if m != nil {
		return m.OspfFwdAddr
	}
	return nil
}

func (x *SLBgplsTopoPrefixOspfFwdAddr) GetIpv4Addr() []byte {
	if x, ok := x.GetOspfFwdAddr().(*SLBgplsTopoPrefixOspfFwdAddr_Ipv4Addr); ok {
		return x.Ipv4Addr
	}
	return nil
}

func (x *SLBgplsTopoPrefixOspfFwdAddr) GetIpv6Addr() []byte {
	if x, ok := x.GetOspfFwdAddr().(*SLBgplsTopoPrefixOspfFwdAddr_Ipv6Addr); ok {
		return x.Ipv6Addr
	}
	return nil
}

type isSLBgplsTopoPrefixOspfFwdAddr_OspfFwdAddr interface {
	isSLBgplsTopoPrefixOspfFwdAddr_OspfFwdAddr()
}

type SLBgplsTopoPrefixOspfFwdAddr_Ipv4Addr struct {
	// This field carries info about an IPv4 OSPF forwarding address.
	Ipv4Addr []byte `protobuf:"bytes,1,opt,name=Ipv4Addr,proto3,oneof"`
}

type SLBgplsTopoPrefixOspfFwdAddr_Ipv6Addr struct {
	// This field carries info about an IPv6 OSPF forwarding address.
	Ipv6Addr []byte `protobuf:"bytes,2,opt,name=Ipv6Addr,proto3,oneof"`
}

func (*SLBgplsTopoPrefixOspfFwdAddr_Ipv4Addr) isSLBgplsTopoPrefixOspfFwdAddr_OspfFwdAddr() {}

func (*SLBgplsTopoPrefixOspfFwdAddr_Ipv6Addr) isSLBgplsTopoPrefixOspfFwdAddr_OspfFwdAddr() {}

// Opaque Prefix Attribute. TLV 1157
// Section 5.3.3.6 of [RFC9552]
type SLBgplsTopoPrefixOpaqueAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Opaque attribute
	OpaqueAttr []byte `protobuf:"bytes,1,opt,name=OpaqueAttr,proto3" json:"OpaqueAttr,omitempty"`
}

func (x *SLBgplsTopoPrefixOpaqueAttr) Reset() {
	*x = SLBgplsTopoPrefixOpaqueAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoPrefixOpaqueAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoPrefixOpaqueAttr) ProtoMessage() {}

func (x *SLBgplsTopoPrefixOpaqueAttr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoPrefixOpaqueAttr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoPrefixOpaqueAttr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{85}
}

func (x *SLBgplsTopoPrefixOpaqueAttr) GetOpaqueAttr() []byte {
	if x != nil {
		return x.OpaqueAttr
	}
	return nil
}

// Prefix SID. TLV 1158
// Section 2.3.1 of [RFC9085]
type SLBgplsTopoPrefixSid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flags as defined in Section 2.1.1 of [RFC8667] for ISIS,
	// Section 5 of [RFC8665] for OSPFv2 and Section 6 of [RFC8665]
	// for OSPFv3.
	Flags []byte `protobuf:"bytes,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Algorithm
	Algorithm uint32 `protobuf:"varint,2,opt,name=Algorithm,proto3" json:"Algorithm,omitempty"`
	// Label or index
	LabelIndex uint32 `protobuf:"varint,3,opt,name=LabelIndex,proto3" json:"LabelIndex,omitempty"`
	// Specifies whether the prefix SID is a label or index
	PrefixSidFormat SLBgplsTopoPrefixSidFormat `protobuf:"varint,4,opt,name=PrefixSidFormat,proto3,enum=service_layer.SLBgplsTopoPrefixSidFormat" json:"PrefixSidFormat,omitempty"`
}

func (x *SLBgplsTopoPrefixSid) Reset() {
	*x = SLBgplsTopoPrefixSid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoPrefixSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoPrefixSid) ProtoMessage() {}

func (x *SLBgplsTopoPrefixSid) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoPrefixSid.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoPrefixSid) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{86}
}

func (x *SLBgplsTopoPrefixSid) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *SLBgplsTopoPrefixSid) GetAlgorithm() uint32 {
	if x != nil {
		return x.Algorithm
	}
	return 0
}

func (x *SLBgplsTopoPrefixSid) GetLabelIndex() uint32 {
	if x != nil {
		return x.LabelIndex
	}
	return 0
}

func (x *SLBgplsTopoPrefixSid) GetPrefixSidFormat() SLBgplsTopoPrefixSidFormat {
	if x != nil {
		return x.PrefixSidFormat
	}
	return SLBgplsTopoPrefixSidFormat_SL_BGPLS_TOPO_PREFIX_SID_FORMAT_RESERVED
}

// Prefix Range. TLV 1159
// Section 2.3.5 of [RFC9085]
type SLBgplsTopoPrefixRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flags associated with the range taken from IS-IS SID/Label
	// Binding TLV flags as defined in Section 2.4.1 of [RFC8667] for
	// ISIS, OSPFv2 OSPF Extended Prefix Range TLV flags as defined in
	// Section 4 of [RFC8665] for OSPFv2 and OSPFv3 Extended Prefix Range
	// TLV flags as defined in Section 5 of [RFC8666] for OSPFv3.
	Flags []byte `protobuf:"bytes,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Number of prefixes covered by the advertisement
	RangeSize uint32 `protobuf:"varint,2,opt,name=RangeSize,proto3" json:"RangeSize,omitempty"`
	// Algorithm
	Algorithm uint32 `protobuf:"varint,3,opt,name=Algorithm,proto3" json:"Algorithm,omitempty"`
	// Starting index of the range
	Index uint32 `protobuf:"varint,4,opt,name=Index,proto3" json:"Index,omitempty"`
	// Flags associated with the SID as defined in
	// Section 2.1.1 of [RFC8667] for ISIS,
	// Section 5 of [RFC8665] for OSPFv2 and
	// Section 6 of [RFC8665] for OSPFv3.
	SidFlags []byte `protobuf:"bytes,5,opt,name=SidFlags,proto3" json:"SidFlags,omitempty"`
}

func (x *SLBgplsTopoPrefixRange) Reset() {
	*x = SLBgplsTopoPrefixRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoPrefixRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoPrefixRange) ProtoMessage() {}

func (x *SLBgplsTopoPrefixRange) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoPrefixRange.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoPrefixRange) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{87}
}

func (x *SLBgplsTopoPrefixRange) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *SLBgplsTopoPrefixRange) GetRangeSize() uint32 {
	if x != nil {
		return x.RangeSize
	}
	return 0
}

func (x *SLBgplsTopoPrefixRange) GetAlgorithm() uint32 {
	if x != nil {
		return x.Algorithm
	}
	return 0
}

func (x *SLBgplsTopoPrefixRange) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SLBgplsTopoPrefixRange) GetSidFlags() []byte {
	if x != nil {
		return x.SidFlags
	}
	return nil
}

// SRv6 Locator. TLV 1162
// Section 5.1 of [RFC9514]
type SLBgplsTopoPrefixSrv6Loc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flags associated with the locator, copied from the
	// IS-IS SRv6 Locator TLV (Section 7.1 of [RFC9352]) for ISIS or the
	// OSPFv3 SRv6 Locator TLV (Section 7.1 of [RFC9513]) for OSPFv3
	Flags uint32 `protobuf:"varint,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Algorithm associated with the locator
	Algorithm uint32 `protobuf:"varint,2,opt,name=Algorithm,proto3" json:"Algorithm,omitempty"`
	// Flex algo prefix metric
	Metric uint32 `protobuf:"varint,3,opt,name=Metric,proto3" json:"Metric,omitempty"`
}

func (x *SLBgplsTopoPrefixSrv6Loc) Reset() {
	*x = SLBgplsTopoPrefixSrv6Loc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoPrefixSrv6Loc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoPrefixSrv6Loc) ProtoMessage() {}

func (x *SLBgplsTopoPrefixSrv6Loc) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoPrefixSrv6Loc.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoPrefixSrv6Loc) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{88}
}

func (x *SLBgplsTopoPrefixSrv6Loc) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SLBgplsTopoPrefixSrv6Loc) GetAlgorithm() uint32 {
	if x != nil {
		return x.Algorithm
	}
	return 0
}

func (x *SLBgplsTopoPrefixSrv6Loc) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

// Prefix Attribute Flags. TLV 1170
// Section 2.3.2 of [RFC9085]
type SLBgplsTopoPrefixAttrFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Prefix attribute flags as defined in Section 2.1 of [RFC7684]
	// for OSPFv2, Appendix A.4.1.1 of [RFC5340] for OSPFv3, and
	// Section 2.1 of [RFC7794] for IS-IS
	Flags []byte `protobuf:"bytes,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *SLBgplsTopoPrefixAttrFlags) Reset() {
	*x = SLBgplsTopoPrefixAttrFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoPrefixAttrFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoPrefixAttrFlags) ProtoMessage() {}

func (x *SLBgplsTopoPrefixAttrFlags) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoPrefixAttrFlags.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoPrefixAttrFlags) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{89}
}

func (x *SLBgplsTopoPrefixAttrFlags) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

// Source Route Identifier. TLV 1171
// Section 2.3.3 of [RFC9085]
type SLBgplsTopoPrefixSrcRouterId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SrcRouterId:
	//
	//	*SLBgplsTopoPrefixSrcRouterId_Ipv4Addr
	//	*SLBgplsTopoPrefixSrcRouterId_Ipv6Addr
	SrcRouterId isSLBgplsTopoPrefixSrcRouterId_SrcRouterId `protobuf_oneof:"SrcRouterId"`
}

func (x *SLBgplsTopoPrefixSrcRouterId) Reset() {
	*x = SLBgplsTopoPrefixSrcRouterId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoPrefixSrcRouterId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoPrefixSrcRouterId) ProtoMessage() {}

func (x *SLBgplsTopoPrefixSrcRouterId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoPrefixSrcRouterId.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoPrefixSrcRouterId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{90}
}

func (m *SLBgplsTopoPrefixSrcRouterId) GetSrcRouterId() isSLBgplsTopoPrefixSrcRouterId_SrcRouterId {
	if m != nil {
		return m.SrcRouterId
	}
	return nil
}

func (x *SLBgplsTopoPrefixSrcRouterId) GetIpv4Addr() []byte {
	if x, ok := x.GetSrcRouterId().(*SLBgplsTopoPrefixSrcRouterId_Ipv4Addr); ok {
		return x.Ipv4Addr
	}
	return nil
}

func (x *SLBgplsTopoPrefixSrcRouterId) GetIpv6Addr() []byte {
	if x, ok := x.GetSrcRouterId().(*SLBgplsTopoPrefixSrcRouterId_Ipv6Addr); ok {
		return x.Ipv6Addr
	}
	return nil
}

type isSLBgplsTopoPrefixSrcRouterId_SrcRouterId interface {
	isSLBgplsTopoPrefixSrcRouterId_SrcRouterId()
}

type SLBgplsTopoPrefixSrcRouterId_Ipv4Addr struct {
	// This field carries info about an IPv4 source router ID.
	Ipv4Addr []byte `protobuf:"bytes,1,opt,name=Ipv4Addr,proto3,oneof"`
}

type SLBgplsTopoPrefixSrcRouterId_Ipv6Addr struct {
	// This field carries info about an IPv6 source router ID.
	Ipv6Addr []byte `protobuf:"bytes,2,opt,name=Ipv6Addr,proto3,oneof"`
}

func (*SLBgplsTopoPrefixSrcRouterId_Ipv4Addr) isSLBgplsTopoPrefixSrcRouterId_SrcRouterId() {}

func (*SLBgplsTopoPrefixSrcRouterId_Ipv6Addr) isSLBgplsTopoPrefixSrcRouterId_SrcRouterId() {}

// L2 Bundle Member Attribute. TLV 1172
// Section 2.2.3 of [RFC9085]
type SLBgplsTopoL2BundleMemberAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Link local identifier
	MemberDesc uint32 `protobuf:"varint,1,opt,name=MemberDesc,proto3" json:"MemberDesc,omitempty"`
	// The bit mask of administrative groups assigned
	// by the network administrator.
	// Extended Administrative Group. TLV 1088
	// Section 5.3.2 of [RFC9552]
	AdminGroup *SLBgplsTopoAdminGroup `protobuf:"bytes,2,opt,name=AdminGroup,proto3" json:"AdminGroup,omitempty"`
	// The maximum bandwidth that can be used on a link.
	// Maximum Link Bandwidth. TLV 1089
	// Section 5.3.2 of [RFC9552]
	MaxBandwidth *SLBgplsTopoLinkMaxBandwidth `protobuf:"bytes,3,opt,name=MaxBandwidth,proto3" json:"MaxBandwidth,omitempty"`
	// The maximum bandwidth that can be reserved on a link.
	// Maximum Reservable Link Bandwidth. TLV 1090
	// Section 5.3.2 of [RFC9552]
	MaxResvBandwidth *SLBgplsTopoLinkMaxResvBandwidth `protobuf:"bytes,4,opt,name=MaxResvBandwidth,proto3" json:"MaxResvBandwidth,omitempty"`
	// The bandwidth reservable on a link on a
	// per priority basis.
	// Unreserved Link Bandwidth. TLV 1091
	// Section 5.3.2 of [RFC9552]
	UnresvBandwidth []*SLBgplsTopoLinkUnresvBandwidth `protobuf:"bytes,5,rep,name=UnresvBandwidth,proto3" json:"UnresvBandwidth,omitempty"`
	// The Traffic Engineering (TE) metric of a link.
	// TE Default Metric. TLV 1092
	// Section  5.3.2.3 of [RFC9552]
	TeDefMetric *SLBgplsTopoLinkTeDefaultMetric `protobuf:"bytes,6,opt,name=TeDefMetric,proto3" json:"TeDefMetric,omitempty"`
	// The protection capabilities of a link.
	// Link Protection Type. TLV 1093
	// Section 5.3.2 of [RFC9552]
	ProtectionType *SLBgplsTopoLinkProtectionType `protobuf:"bytes,7,opt,name=ProtectionType,proto3" json:"ProtectionType,omitempty"`
	// The Adjacency Segment Identifiers (SIDs) of an
	// adjacency.
	// Adjacency SID. TLV 1099
	// Section 2.2.1 of [RFC9085]
	AdjSid []*SLBgplsTopoAdjSid `protobuf:"bytes,8,rep,name=AdjSid,proto3" json:"AdjSid,omitempty"`
	// The Adjacency Segment Identifiers (SIDs) of an
	// adjacency to any node in a LAN other than the pseudonode
	// LAN Adjacency SID. TLV 1100
	// Section 2.2.1 of [RFC9085]
	LanAdjSid []*SLBgplsTopoLanAdjSid `protobuf:"bytes,9,rep,name=LanAdjSid,proto3" json:"LanAdjSid,omitempty"`
	// The average link delay between two
	// directly connected IGP link-state neighbors.
	// Unidirectional Link Delay. TLV 1114
	// Section 2.1 of [RFC8571]
	UniLinkDelay *SLBgplsTopoUniLinkDelay `protobuf:"bytes,10,opt,name=UniLinkDelay,proto3" json:"UniLinkDelay,omitempty"`
	// The minimum and maximum link delay between two
	// directly connected IGP link-state neighbors.
	// Min/Max Unidirectional Link Delay. TLV 1115
	// Section 2.2 of [RFC8571]
	MinMaxLinkDelay *SLBgplsTopoMinMaxUniLinkDelay `protobuf:"bytes,11,opt,name=MinMaxLinkDelay,proto3" json:"MinMaxLinkDelay,omitempty"`
	// The average link delay variation between two
	// directly connected IGP link-state neighbors.
	// Unidirectional Delay Variation. TLV 1116
	// Section 2.3 of [RFC8571]
	UniDelayVariation *SLBgplsTopoUniDelayVar `protobuf:"bytes,12,opt,name=UniDelayVariation,proto3" json:"UniDelayVariation,omitempty"`
	// The loss (as a packet percentage) between two
	// directly connected IGP link-state neighbors.
	// Unidirectional Link Loss. TLV 1117
	// Section 2.4 of [RFC8571]
	UniLinkLoss *SLBgplsTopoUniLinkLoss `protobuf:"bytes,13,opt,name=UniLinkLoss,proto3" json:"UniLinkLoss,omitempty"`
	// The residual bandwidth between two
	// directly connected IGP link-state neighbors.
	// Unidirectional Residual Bandwidth. TLV 1118
	// Section 2.5 of [RFC8571]
	UniResBandwidth *SLBgplsTopoUniResBandwidth `protobuf:"bytes,14,opt,name=UniResBandwidth,proto3" json:"UniResBandwidth,omitempty"`
	// The available bandwidth between two
	// directly connected IGP link-state neighbors.
	// Unidirectional Available Bandwidth. TLV 1119
	// Section 2.6 of [RFC8571]
	UniAvailBandwidth *SLBgplsTopoUniAvailBandwidth `protobuf:"bytes,15,opt,name=UniAvailBandwidth,proto3" json:"UniAvailBandwidth,omitempty"`
	// The utilized bandwidth between two
	// directly connected IGP link-state neighbors.
	// Unidirectional Utilized Bandwidth. TLV 1120
	// Section 2.7 of [RFC8571]
	UniUtilBandwidth *SLBgplsTopoUniUtilBandwidth `protobuf:"bytes,16,opt,name=UniUtilBandwidth,proto3" json:"UniUtilBandwidth,omitempty"`
	// The container for certain existing and future
	// link attributes that require application-specific definition.
	// ASLA Attributes. TLV 1122
	// Section 2 of [RFC9294]
	Asla []*SLBgplsTopoAslaAttr `protobuf:"bytes,17,rep,name=Asla,proto3" json:"Asla,omitempty"`
	// The bit mask of administrative groups assigned
	// by the network administrator.
	// Extended Administrative Group. TLV 1173
	// Section 2 of [RFC9104]
	ExtAdminGroup []*SLBgplsTopoExtAdminGroup `protobuf:"bytes,18,rep,name=ExtAdminGroup,proto3" json:"ExtAdminGroup,omitempty"`
	// Unknown L2 Bundle Member Attributes
	// Unknown/unsupported by IOS-XR/BGPLS.
	UnknownAttr []*SLBgplsTopoUnknownAttr `protobuf:"bytes,19,rep,name=UnknownAttr,proto3" json:"UnknownAttr,omitempty"`
}

func (x *SLBgplsTopoL2BundleMemberAttr) Reset() {
	*x = SLBgplsTopoL2BundleMemberAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoL2BundleMemberAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoL2BundleMemberAttr) ProtoMessage() {}

func (x *SLBgplsTopoL2BundleMemberAttr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoL2BundleMemberAttr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoL2BundleMemberAttr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{91}
}

func (x *SLBgplsTopoL2BundleMemberAttr) GetMemberDesc() uint32 {
	if x != nil {
		return x.MemberDesc
	}
	return 0
}

func (x *SLBgplsTopoL2BundleMemberAttr) GetAdminGroup() *SLBgplsTopoAdminGroup {
	if x != nil {
		return x.AdminGroup
	}
	return nil
}

func (x *SLBgplsTopoL2BundleMemberAttr) GetMaxBandwidth() *SLBgplsTopoLinkMaxBandwidth {
	if x != nil {
		return x.MaxBandwidth
	}
	return nil
}

func (x *SLBgplsTopoL2BundleMemberAttr) GetMaxResvBandwidth() *SLBgplsTopoLinkMaxResvBandwidth {
	if x != nil {
		return x.MaxResvBandwidth
	}
	return nil
}

func (x *SLBgplsTopoL2BundleMemberAttr) GetUnresvBandwidth() []*SLBgplsTopoLinkUnresvBandwidth {
	if x != nil {
		return x.UnresvBandwidth
	}
	return nil
}

func (x *SLBgplsTopoL2BundleMemberAttr) GetTeDefMetric() *SLBgplsTopoLinkTeDefaultMetric {
	if x != nil {
		return x.TeDefMetric
	}
	return nil
}

func (x *SLBgplsTopoL2BundleMemberAttr) GetProtectionType() *SLBgplsTopoLinkProtectionType {
	if x != nil {
		return x.ProtectionType
	}
	return nil
}

func (x *SLBgplsTopoL2BundleMemberAttr) GetAdjSid() []*SLBgplsTopoAdjSid {
	if x != nil {
		return x.AdjSid
	}
	return nil
}

func (x *SLBgplsTopoL2BundleMemberAttr) GetLanAdjSid() []*SLBgplsTopoLanAdjSid {
	if x != nil {
		return x.LanAdjSid
	}
	return nil
}

func (x *SLBgplsTopoL2BundleMemberAttr) GetUniLinkDelay() *SLBgplsTopoUniLinkDelay {
	if x != nil {
		return x.UniLinkDelay
	}
	return nil
}

func (x *SLBgplsTopoL2BundleMemberAttr) GetMinMaxLinkDelay() *SLBgplsTopoMinMaxUniLinkDelay {
	if x != nil {
		return x.MinMaxLinkDelay
	}
	return nil
}

func (x *SLBgplsTopoL2BundleMemberAttr) GetUniDelayVariation() *SLBgplsTopoUniDelayVar {
	if x != nil {
		return x.UniDelayVariation
	}
	return nil
}

func (x *SLBgplsTopoL2BundleMemberAttr) GetUniLinkLoss() *SLBgplsTopoUniLinkLoss {
	if x != nil {
		return x.UniLinkLoss
	}
	return nil
}

func (x *SLBgplsTopoL2BundleMemberAttr) GetUniResBandwidth() *SLBgplsTopoUniResBandwidth {
	if x != nil {
		return x.UniResBandwidth
	}
	return nil
}

func (x *SLBgplsTopoL2BundleMemberAttr) GetUniAvailBandwidth() *SLBgplsTopoUniAvailBandwidth {
	if x != nil {
		return x.UniAvailBandwidth
	}
	return nil
}

func (x *SLBgplsTopoL2BundleMemberAttr) GetUniUtilBandwidth() *SLBgplsTopoUniUtilBandwidth {
	if x != nil {
		return x.UniUtilBandwidth
	}
	return nil
}

func (x *SLBgplsTopoL2BundleMemberAttr) GetAsla() []*SLBgplsTopoAslaAttr {
	if x != nil {
		return x.Asla
	}
	return nil
}

func (x *SLBgplsTopoL2BundleMemberAttr) GetExtAdminGroup() []*SLBgplsTopoExtAdminGroup {
	if x != nil {
		return x.ExtAdminGroup
	}
	return nil
}

func (x *SLBgplsTopoL2BundleMemberAttr) GetUnknownAttr() []*SLBgplsTopoUnknownAttr {
	if x != nil {
		return x.UnknownAttr
	}
	return nil
}

// Extended Administrative Group. TLV 1173
// Section 2 of [RFC9104]
type SLBgplsTopoExtAdminGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bit mask of administrative groups assigned by the
	// network administrator. Each set bit corresponds to one
	// administrative group assigned to the interface. By convention, the
	// least significant bit is referred to as group 0, and the
	// most significant bit is referred to as group 31. Each EAG bitmask
	// is represented in multiple of 4 bytes.
	Group uint32 `protobuf:"varint,1,opt,name=Group,proto3" json:"Group,omitempty"`
}

func (x *SLBgplsTopoExtAdminGroup) Reset() {
	*x = SLBgplsTopoExtAdminGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoExtAdminGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoExtAdminGroup) ProtoMessage() {}

func (x *SLBgplsTopoExtAdminGroup) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoExtAdminGroup.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoExtAdminGroup) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{92}
}

func (x *SLBgplsTopoExtAdminGroup) GetGroup() uint32 {
	if x != nil {
		return x.Group
	}
	return 0
}

type SLBgplsTopoSrBindingSid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SR Binding SID Flags
	// Flags associated with the SR Binding SID
	// Section 5.1 of [draft-ietf-idr-bgp-ls-sr-policy]
	// Each flag is indicated as a bit field. Supported values are:
	//
	// SL_BGPLS_TOPO_SR_BSID_FLAG_DATAPLANE_V6
	// Bit-0: D-Flag: Indicates the dataplane for the BSIDs and if they are
	// 16 octet SRv6 SID when set and are 4 octet SR/MPLS label value
	// when clear.
	//
	// SL_BGPLS_TOPO_SR_BSID_FLAG_ALLOCATED
	// Bit-1: B-Flag: Indicates the allocation of the value in the BSID field
	// when set and indicates that BSID is not allocated when clear.
	//
	// SL_BGPLS_TOPO_SR_BSID_FLAG_UNAVAIL
	// Bit-2: U-Flag: Indicates the specified BSID value is unavailable when set.
	//
	// SL_BGPLS_TOPO_SR_BSID_FLAG_SRLB
	// Bit-3: L-Flag: Indicates the BSID value is from the Segment Routing
	// Local Block (SRLB) of the headend node when set and is from the
	// local dynamic label pool when clear.
	//
	// SL_BGPLS_TOPO_SR_BSID_FLAG_DYNAMIC
	// Bit-4: F-Flag: Indicates the BSID value is one allocated from dynamic
	// label pool due to fallback (e.g. when specified BSID is
	// unavailable) when set.
	//
	// All others are reserved.
	BsidFlags uint32 `protobuf:"varint,1,opt,name=BsidFlags,proto3" json:"BsidFlags,omitempty"`
	// The operational or allocated BSID value based on the status flags.
	Bsid *SLSrBsid `protobuf:"bytes,2,opt,name=Bsid,proto3" json:"Bsid,omitempty"`
	// The explicitly specified BSID whether it is allocated or not.
	SpecifiedBsid *SLSrBsid `protobuf:"bytes,3,opt,name=SpecifiedBsid,proto3" json:"SpecifiedBsid,omitempty"`
}

func (x *SLBgplsTopoSrBindingSid) Reset() {
	*x = SLBgplsTopoSrBindingSid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrBindingSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrBindingSid) ProtoMessage() {}

func (x *SLBgplsTopoSrBindingSid) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrBindingSid.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrBindingSid) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{93}
}

func (x *SLBgplsTopoSrBindingSid) GetBsidFlags() uint32 {
	if x != nil {
		return x.BsidFlags
	}
	return 0
}

func (x *SLBgplsTopoSrBindingSid) GetBsid() *SLSrBsid {
	if x != nil {
		return x.Bsid
	}
	return nil
}

func (x *SLBgplsTopoSrBindingSid) GetSpecifiedBsid() *SLSrBsid {
	if x != nil {
		return x.SpecifiedBsid
	}
	return nil
}

// SR Candidate Path State. TLV 1202
// Section 5.3 of [draft-ietf-idr-bgp-ls-sr-policy]
type SLBgplsTopoSrCpState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The priority of the candiate path.
	Priority uint32 `protobuf:"varint,1,opt,name=Priority,proto3" json:"Priority,omitempty"`
	// SR Candidate Path State Flags
	// Flags associated with the SR Candidate Path State Flags
	// Section 5.3 of [draft-ietf-idr-bgp-ls-sr-policy]
	// Each flag is indicated as a bit field. Supported values are:
	//
	// SL_BGPLS_TOPO_SR_CP_STATE_FLAG_ADMIN_SHUT
	// Bit-0: S-Flag: Indicates the CP is in an administrative shut state when set.
	//
	// SL_BGPLS_TOPO_SR_CP_STATE_FLAG_ACTIVE
	// Bit-1: A-Flag: Indicates the CP is the active path (i.e. one
	// provisioned in the forwarding plane) for the SR Policy when set.
	//
	// SL_BGPLS_TOPO_SR_CP_STATE_FLAG_BACKUP
	// Bit-2: B-Flag: Indicates the CP is the backup path (i.e. one
	// identified for path protection of the active path) for the SR
	// Policy when set.
	//
	// SL_BGPLS_TOPO_SR_CP_STATE_FLAG_EVALUATED
	// Bit-3: E-Flag: Indicates that the CP has been evaluated for validity
	// (e.g. headend may evaluate CPs based on their preferences) when set.
	//
	// SL_BGPLS_TOPO_SR_CP_STATE_FLAG_VALID
	// Bit-4: V-Flag: Indicates the CP has at least one valid SID-List when
	// set.  When the E-Flag is clear (i.e. the CP has not been
	// evaluated), then this flag MUST be set to 0 by the originator
	// and ignored by the receiver.
	//
	// SL_BGPLS_TOPO_SR_CP_STATE_FLAG_ON_DEMAND_NH
	// Bit-5: O-Flag: Indicates the CP was instantiated by the headend due to
	// an on-demand nexthop trigger based on a local template when
	// set.  Refer to section 8.5 of [RFC9256] for details.
	//
	// SL_BGPLS_TOPO_SR_CP_STATE_FLAG_DELEGATED
	// Bit-6: D-Flag: Indicates the CP was delegated for computation to a
	// PCE/controller when set.
	//
	// SL_BGPLS_TOPO_SR_CP_STATE_FLAG_PROVISIONED
	// Bit-7: C-Flag: Indicates the CP was provisioned by a PCE/controller when set.
	//
	// SL_BGPLS_TOPO_SR_CP_STATE_FLAG_DROP_UPON_INVALID
	// Bit-8: I-Flag: Indicates the CP is to perform the "drop upon invalid"
	// behavior when no other valid CP is available for this SR
	// Policy.  Refer to section 8.2 of [RFC9256] for details.
	//
	// SL_BGPLS_TOPO_SR_CP_STATE_FLAG_TRANSIT
	// Bit-9: T-Flag: Indicates the CP has been marked as eligible for use as
	// Transit Policy on the headend when set.  Refer to section 8.3
	// of [RFC9256].
	//
	// SL_BGPLS_TOPO_SR_CP_STATE_FLAG_DROPPING
	// Bit-10: U-Flag: Indicates that this CP is reported as active and is
	// dropping traffic as a result of the "drop upon invalid"
	// behavior being activated for the SR Policy.
	//
	// All others are reserved.
	Flags uint32 `protobuf:"varint,2,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Indicates the preference of the candidate path.
	Preference uint32 `protobuf:"varint,3,opt,name=Preference,proto3" json:"Preference,omitempty"`
}

func (x *SLBgplsTopoSrCpState) Reset() {
	*x = SLBgplsTopoSrCpState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrCpState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrCpState) ProtoMessage() {}

func (x *SLBgplsTopoSrCpState) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrCpState.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrCpState) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{94}
}

func (x *SLBgplsTopoSrCpState) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *SLBgplsTopoSrCpState) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SLBgplsTopoSrCpState) GetPreference() uint32 {
	if x != nil {
		return x.Preference
	}
	return 0
}

// SR Candidate Path Constraints. TLV 1204
// Section 5.6 of [draft-ietf-idr-bgp-ls-sr-policy]
type SLBgplsTopoSrCpConstraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SR Candidate Path Constraints Flags
	// Flags associated with the SR Candidate Path Constraints Flags
	// Section 5.6 of [draft-ietf-idr-bgp-ls-sr-policy]
	// Each flag is indicated as a bit field. Supported values are:
	//
	// SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_DATAPLANE_V6
	// Bit-0: D-Flag: Indicates that the CP uses SRv6 dataplane when set and
	// SR/MPLS dataplane when clear.
	//
	// SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_PROTECTED
	// Bit-1: P-Flag: Indicates that the CP prefers the use of only protected
	// SIDs when set.  This flag is mutually exclusive with the
	// Bit-2.
	//
	// SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_UNPROTECTED
	// Bit-2: U-Flag: Indicates that the CP prefers the use of only
	// unprotected SIDs when set.  This flag is mutually exclusive
	// with the Bit-1.
	//
	// SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_SPECIFIED_ALGO
	// Bit-3: A-Flag: Indicates that the CP uses only the SIDs belonging to
	// the specified SR Algorithm when set.
	//
	// SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_SPECIFIED_TOPO
	// Bit-4: T-Flag: Indicates that the CP uses only the SIDs belonging to
	// the specified topology when set.
	//
	// SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_USE_STRICT
	// Bit-5: S-Flag: Indicates that the use of protected (P-Flag) or
	// unprotected (U-Flag) SIDs becomes a strict constraint instead
	// of a preference when set.
	//
	// SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_FIXED_CP
	// Bit-6: F-Flag: Indicates that the CP is fixed once computed and not
	// modified except on operator intervention.
	//
	// SL_BGPLS_TOPO_SR_CP_CONSTRAINTS_FLAG_HOP_BY_HOP
	// Bit-7: H-Flag: Indicates that the CP uses only adjacency SIDs and
	// traverses hop-by-hop over the links corresponding to those
	// adjacency SIDs when set.
	//
	// All others are reserved.
	Flags uint32 `protobuf:"varint,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Indicates the multi-topology identifier of the IGP topology
	// that is preferred to be used when the path is set up.
	Mtid uint32 `protobuf:"varint,2,opt,name=Mtid,proto3" json:"Mtid,omitempty"`
	// Indicates the algorithm that is preferred to be used
	// when the path is set up.
	Algorithm uint32 `protobuf:"varint,3,opt,name=Algorithm,proto3" json:"Algorithm,omitempty"`
	// SR Affinity constraint is used to carry the affinity constraints
	// associated with the candidate path.
	// SR Affinity Constraints. TLV 1208
	// Section 5.6.1 of [draft-ietf-idr-bgp-ls-sr-policy]
	Affinity *SLBgplsTopoSrAffinityConstraints `protobuf:"bytes,5,opt,name=Affinity,proto3" json:"Affinity,omitempty"`
	// SR SRLG constraint is used to carry the Shared Risk Link Group (SRLG)
	// values that have been excluded from the candidate path.
	// SR SRLG Constraints. TLV 1209
	// Section 5.6.2 of [draft-ietf-idr-bgp-ls-sr-policy]
	Srlg *SLBgplsTopoSrSrlgConstraints `protobuf:"bytes,6,opt,name=Srlg,proto3" json:"Srlg,omitempty"`
	// SR Bandwidth constraint is used to indicate the bandwidth that has
	// been requested for the candidate path.
	// SR Bandwidth Constraint. TLV 1210
	// Section 5.6.3 of [draft-ietf-idr-bgp-ls-sr-policy]
	Bandwidth *SLBgplsTopoSrBandwidthConstraint `protobuf:"bytes,4,opt,name=Bandwidth,proto3" json:"Bandwidth,omitempty"`
	// SR Disjoint constraint is used to carry the disjointness
	// constraint associated with the candidate path.
	// SR Disjoint Group Constraint. TLV 1211
	// Section 5.6.4 of [draft-ietf-idr-bgp-ls-sr-policy]
	Disjoint *SLBgplsTopoSrDisjointGroupConstraint `protobuf:"bytes,7,opt,name=Disjoint,proto3" json:"Disjoint,omitempty"`
	// SR Bidirectional Group constraint is used to carry the bidirectional
	// constraint associated with the candidate path.
	// SR Bidirectional Group Contraint. TLV 1214
	// Section 5.6.5 of [draft-ietf-idr-bgp-ls-sr-policy]
	BidirGroup *SLBgplsTopoSrBidirGroupConstraint `protobuf:"bytes,8,opt,name=BidirGroup,proto3" json:"BidirGroup,omitempty"`
	// SR Metric constraint is used to report the optimization metric of the
	// candidate path.
	// SR Metric Contraint. TLV 1215
	// Section 5.6.6 of [draft-ietf-idr-bgp-ls-sr-policy]
	Metric []*SLBgplsTopoSrMetricConstraint `protobuf:"bytes,9,rep,name=Metric,proto3" json:"Metric,omitempty"`
}

func (x *SLBgplsTopoSrCpConstraints) Reset() {
	*x = SLBgplsTopoSrCpConstraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrCpConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrCpConstraints) ProtoMessage() {}

func (x *SLBgplsTopoSrCpConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrCpConstraints.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrCpConstraints) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{95}
}

func (x *SLBgplsTopoSrCpConstraints) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SLBgplsTopoSrCpConstraints) GetMtid() uint32 {
	if x != nil {
		return x.Mtid
	}
	return 0
}

func (x *SLBgplsTopoSrCpConstraints) GetAlgorithm() uint32 {
	if x != nil {
		return x.Algorithm
	}
	return 0
}

func (x *SLBgplsTopoSrCpConstraints) GetAffinity() *SLBgplsTopoSrAffinityConstraints {
	if x != nil {
		return x.Affinity
	}
	return nil
}

func (x *SLBgplsTopoSrCpConstraints) GetSrlg() *SLBgplsTopoSrSrlgConstraints {
	if x != nil {
		return x.Srlg
	}
	return nil
}

func (x *SLBgplsTopoSrCpConstraints) GetBandwidth() *SLBgplsTopoSrBandwidthConstraint {
	if x != nil {
		return x.Bandwidth
	}
	return nil
}

func (x *SLBgplsTopoSrCpConstraints) GetDisjoint() *SLBgplsTopoSrDisjointGroupConstraint {
	if x != nil {
		return x.Disjoint
	}
	return nil
}

func (x *SLBgplsTopoSrCpConstraints) GetBidirGroup() *SLBgplsTopoSrBidirGroupConstraint {
	if x != nil {
		return x.BidirGroup
	}
	return nil
}

func (x *SLBgplsTopoSrCpConstraints) GetMetric() []*SLBgplsTopoSrMetricConstraint {
	if x != nil {
		return x.Metric
	}
	return nil
}

// SR Segment List. TLV 1205
// Section 5.7 of [draft-ietf-idr-bgp-ls-sr-policy]
type SLBgplsTopoSrSegList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SR Segment List Flags
	// Flags associated with the SR Segment List Flags
	// Section 5.7 of [draft-ietf-idr-bgp-ls-sr-policy]
	// Each flag is indicated as a bit field. Supported values are:
	//
	// SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_DATAPLANE_V6
	// Bit-0: D-Flag: Indicates the SID-List is comprised of SRv6 SIDs when
	// set and indicates it is comprised of SR/MPLS labels when clear.
	//
	// SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_EXPLICIT_PATH
	// Bit-1: E-Flag: Indicates that SID-List is associated with an explicit
	// candidate path when set and with a dynamic candidate path when
	// clear.  All segment lists of a given candidate path MUST be
	// either explicit or dynamic and in case of inconsistency, the
	// receiver MAY consider them all to be dynamic.
	//
	// SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_COMPUTED_PATH
	// Bit-2: C-Flag: Indicates that SID-List has been computed for a dynamic
	// path when set.  It is always reported as set for explicit
	// paths.
	//
	// SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_VERIFIED
	// Bit-3: V-Flag: Indicates the SID-List has passed verification or its
	// verification was not required when set and failed verification
	// when clear.
	//
	// SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_RESOLVED
	// Bit-4: R-Flag: Indicates that the first Segment has been resolved when
	// set and failed resolution when clear.
	//
	// SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_COMPUTE_FAILED
	// Bit-5: F-Flag: Indicates that the computation for the dynamic path
	// failed when set and succeeded (or not required in case of
	// explicit path) when clear.
	//
	// SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_SPECIFIED_ALGO
	// Bit-6: A-Flag: Indicates that all the SIDs in the SID-List belong to
	// the specified algorithm when set.
	//
	// SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_SPECIFIED_TOPO
	// Bit-7: T-Flag: Indicates that all the SIDs in the SID-List belong to
	// the specified topology (identified by the multi-topology ID)
	// when set.
	//
	// SL_BGPLS_TOPO_SR_SEG_LIST_FLAG_FAULT_MONITOR
	// Bit-8: M-Flag: Indicates that the SID-list has been removed from the
	// forwarding plane due to fault detection by a monitoring
	// mechanism (e.g.  BFD) when set and indicates no fault detected
	// or monitoring is not being done when clear.
	//
	// All others are reserved.
	Flags uint32 `protobuf:"varint,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// The multi-topology identifier of the
	// IGP topology that is to be used when the Bit-7 is set.
	Mtid uint32 `protobuf:"varint,2,opt,name=Mtid,proto3" json:"Mtid,omitempty"`
	// Indicates the algorithm of the SIDs used
	// in the SID-List when the Bit-6 is set.
	Algorithm uint32 `protobuf:"varint,3,opt,name=Algorithm,proto3" json:"Algorithm,omitempty"`
	// Indicates the weight associated with
	// the SID-List for weighted load-balancing.
	Weight uint32 `protobuf:"varint,4,opt,name=Weight,proto3" json:"Weight,omitempty"`
	// SR Segment. TLV 1206
	// Section 5.8 of [draft-ietf-idr-bgp-ls-sr-policy]
	Segments []*SLSrSegment `protobuf:"bytes,5,rep,name=Segments,proto3" json:"Segments,omitempty"`
	// SR Segment List Metric. TLV 1207
	// Section 5.9 of [draft-ietf-idr-bgp-ls-sr-policy]
	Metrics []*SLBgplsSrSegListMetric `protobuf:"bytes,6,rep,name=Metrics,proto3" json:"Metrics,omitempty"`
}

func (x *SLBgplsTopoSrSegList) Reset() {
	*x = SLBgplsTopoSrSegList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrSegList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrSegList) ProtoMessage() {}

func (x *SLBgplsTopoSrSegList) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrSegList.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrSegList) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{96}
}

func (x *SLBgplsTopoSrSegList) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SLBgplsTopoSrSegList) GetMtid() uint32 {
	if x != nil {
		return x.Mtid
	}
	return 0
}

func (x *SLBgplsTopoSrSegList) GetAlgorithm() uint32 {
	if x != nil {
		return x.Algorithm
	}
	return 0
}

func (x *SLBgplsTopoSrSegList) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *SLBgplsTopoSrSegList) GetSegments() []*SLSrSegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *SLBgplsTopoSrSegList) GetMetrics() []*SLBgplsSrSegListMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// SR Segment List Metric. TLV 1207
// Section 5.9 of [draft-ietf-idr-bgp-ls-sr-policy]
type SLBgplsSrSegListMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies the type of metric.
	Type uint32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// SR Segment List Metric Flags
	// Flags associated with the SR Segment List Metric Flags
	// Section 5.9 of [draft-ietf-idr-bgp-ls-sr-policy]
	// Each flag is indicated as a bit field. Supported values are:
	//
	// SL_BGPLS_TOPO_SR_SEG_LIST_METRIC_FLAG_MARGIN_ALLOWED
	// Bit-0: M-Flag: The metric margin allowed for this path
	// computation is specified when set.
	//
	// SL_BGPLS_TOPO_SR_SEG_LIST_METRIC_FLAG_ABSOLUTE_VAL
	// Bit-1: A-Flag: The metric margin is specified as an
	// absolute value when set and is expressed as a percentage of the
	// minimum metric when clear.
	//
	// SL_BGPLS_TOPO_SR_SEG_LIST_METRIC_FLAG_BOUND_ALLOWED
	// Bit-2: B-Flag: The metric bound allowed for the path is specified when set.
	//
	// SL_BGPLS_TOPO_SR_SEG_LIST_METRIC_FLAG_VAL_REPORTED
	// Bit-3: V-Flag: The metric value computed is being reported when set.
	//
	// All others are reserved.
	Flags uint32 `protobuf:"varint,2,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Indicates the metric margin value when the Bit-0 is set.
	// The metric margin is specified as either an absolute value or as a
	// percentage of the minimum computed path metric based on the Bit-1.
	Margin uint32 `protobuf:"varint,3,opt,name=Margin,proto3" json:"Margin,omitempty"`
	// Indicates the maximum metric value that is allowed when the Bit-2
	// is set.
	Bound uint32 `protobuf:"varint,4,opt,name=Bound,proto3" json:"Bound,omitempty"`
	// Indicates the metric of the computed path when the Bit-3 is set.
	Value uint32 `protobuf:"varint,5,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *SLBgplsSrSegListMetric) Reset() {
	*x = SLBgplsSrSegListMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsSrSegListMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsSrSegListMetric) ProtoMessage() {}

func (x *SLBgplsSrSegListMetric) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsSrSegListMetric.ProtoReflect.Descriptor instead.
func (*SLBgplsSrSegListMetric) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{97}
}

func (x *SLBgplsSrSegListMetric) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SLBgplsSrSegListMetric) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SLBgplsSrSegListMetric) GetMargin() uint32 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *SLBgplsSrSegListMetric) GetBound() uint32 {
	if x != nil {
		return x.Bound
	}
	return 0
}

func (x *SLBgplsSrSegListMetric) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// SR Affinity Constraints. TLV 1208
// Section 5.6.1 of [draft-ietf-idr-bgp-ls-sr-policy]
type SLBgplsTopoSrAffinityConstraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bitmask used to represent the affinities that
	// have been excluded from the path. Each EAG bitmask
	// is represented in multiple of 4 bytes.
	ExclAnyEag []uint32 `protobuf:"varint,1,rep,packed,name=ExclAnyEag,proto3" json:"ExclAnyEag,omitempty"`
	// The bitmask used to represent the affinities that
	// have been included in the path. Each EAG bitmask
	// is represented in multiple of 4 bytes.
	InclAnyEag []uint32 `protobuf:"varint,2,rep,packed,name=InclAnyEag,proto3" json:"InclAnyEag,omitempty"`
	// The bitmask used to represent all the affinities
	// that have been included in the path. Each EAG bitmask
	// is represented in multiple of 4 bytes.
	InclAllEag []uint32 `protobuf:"varint,3,rep,packed,name=InclAllEag,proto3" json:"InclAllEag,omitempty"`
}

func (x *SLBgplsTopoSrAffinityConstraints) Reset() {
	*x = SLBgplsTopoSrAffinityConstraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrAffinityConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrAffinityConstraints) ProtoMessage() {}

func (x *SLBgplsTopoSrAffinityConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrAffinityConstraints.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrAffinityConstraints) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{98}
}

func (x *SLBgplsTopoSrAffinityConstraints) GetExclAnyEag() []uint32 {
	if x != nil {
		return x.ExclAnyEag
	}
	return nil
}

func (x *SLBgplsTopoSrAffinityConstraints) GetInclAnyEag() []uint32 {
	if x != nil {
		return x.InclAnyEag
	}
	return nil
}

func (x *SLBgplsTopoSrAffinityConstraints) GetInclAllEag() []uint32 {
	if x != nil {
		return x.InclAllEag
	}
	return nil
}

// SR SRLG Constraints. TLV 1209
// Section 5.6.2 of [draft-ietf-idr-bgp-ls-sr-policy]
type SLBgplsTopoSrSrlgConstraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SRLG Values.
	SrlgValues []uint32 `protobuf:"varint,1,rep,packed,name=SrlgValues,proto3" json:"SrlgValues,omitempty"`
}

func (x *SLBgplsTopoSrSrlgConstraints) Reset() {
	*x = SLBgplsTopoSrSrlgConstraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrSrlgConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrSrlgConstraints) ProtoMessage() {}

func (x *SLBgplsTopoSrSrlgConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrSrlgConstraints.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrSrlgConstraints) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{99}
}

func (x *SLBgplsTopoSrSrlgConstraints) GetSrlgValues() []uint32 {
	if x != nil {
		return x.SrlgValues
	}
	return nil
}

// SR Bandwidth Constraint. TLV 1210
// Section 5.6.3 of [draft-ietf-idr-bgp-ls-sr-policy]
type SLBgplsTopoSrBandwidthConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify the desired bandwidth in unit of
	//
	//	bytes per second in IEEE floating point format.
	Bandwidth []byte `protobuf:"bytes,1,opt,name=Bandwidth,proto3" json:"Bandwidth,omitempty"`
}

func (x *SLBgplsTopoSrBandwidthConstraint) Reset() {
	*x = SLBgplsTopoSrBandwidthConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrBandwidthConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrBandwidthConstraint) ProtoMessage() {}

func (x *SLBgplsTopoSrBandwidthConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrBandwidthConstraint.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrBandwidthConstraint) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{100}
}

func (x *SLBgplsTopoSrBandwidthConstraint) GetBandwidth() []byte {
	if x != nil {
		return x.Bandwidth
	}
	return nil
}

// SR Disjoint Group Constraint. TLV 1211
// Section 5.6.4 of [draft-ietf-idr-bgp-ls-sr-policy]
type SLBgplsTopoSrDisjointGroupConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SR Disjoint Group Constraints Request Flags
	// Flags associated with the SR Disjoint Group Constraints Flags
	// Section 5.6.4 of [draft-ietf-idr-bgp-ls-sr-policy]
	// Each flag is indicated as a bit field. Supported values are:
	//
	// SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_SRLG
	// Bit-0: S-Flag: SRLG disjointness is requested when set.
	//
	// SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_NODE
	// Bit-1: N-Flag: Node disjointness is requested when set.
	//
	// SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_LINK
	// Bit-2: L-Flag: Link disjointness is requested when set.
	//
	// SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_FALLBACK
	// Bit-3: F-Flag: The computation may fallback to a lower
	// level of disjointness amongst the ones requested when all
	// cannot be achieved when set.
	//
	// SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_IGP
	// Bit-4: I-Flag: The computation may fallback to the
	// default best path (e.g.  IGP path) in case of none of the
	// desired disjointness can be achieved when set.
	//
	// All others are reserved.
	RequestFlags uint32 `protobuf:"varint,1,opt,name=RequestFlags,proto3" json:"RequestFlags,omitempty"`
	// SR Disjoint Group Constraints Status Flags
	// Flags associated with the SR Disjoint Group Constraints Flags
	// Section 5.6.4 of [draft-ietf-idr-bgp-ls-sr-policy]
	// Each flag is indicated as a bit field. Supported values are:
	//
	// SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_SRLG
	// Bit-0: S-Flag: SRLG disjointness is achieved when set.
	//
	// SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_NODE
	// Bit-1: N-Flag: Node disjointness is achieved when set.
	//
	// SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_LINK
	// Bit-2: L-Flag: Link disjointness is achieved when set.
	//
	// SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_FALLBACK
	// Bit-3: F-Flag: The computation has fallen back to a
	// lower level of disjointness than requested when set.
	//
	// SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_IGP
	// Bit-4: I-Flag: The computation has fallen back to the
	// best path (e.g.  IGP path) and disjointness has not been
	// achieved when set.
	//
	// SL_BGPLS_TOPO_SR_DISJOINT_GROUP_FLAG_INVALID
	// Bit-5: X-Flag: The disjointness constraint could not
	// be achieved and hence path has been invalidated when set.
	//
	// All others are reserved.
	StatusFlags uint32 `protobuf:"varint,2,opt,name=StatusFlags,proto3" json:"StatusFlags,omitempty"`
	// The group identifier for a set of disjoint paths.
	GroupId uint32 `protobuf:"varint,3,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
}

func (x *SLBgplsTopoSrDisjointGroupConstraint) Reset() {
	*x = SLBgplsTopoSrDisjointGroupConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrDisjointGroupConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrDisjointGroupConstraint) ProtoMessage() {}

func (x *SLBgplsTopoSrDisjointGroupConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrDisjointGroupConstraint.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrDisjointGroupConstraint) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{101}
}

func (x *SLBgplsTopoSrDisjointGroupConstraint) GetRequestFlags() uint32 {
	if x != nil {
		return x.RequestFlags
	}
	return 0
}

func (x *SLBgplsTopoSrDisjointGroupConstraint) GetStatusFlags() uint32 {
	if x != nil {
		return x.StatusFlags
	}
	return 0
}

func (x *SLBgplsTopoSrDisjointGroupConstraint) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

// SR Policy Name. TLV 1213
// Section 5.4 of [draft-ietf-idr-bgp-ls-sr-policy]
type SLBgplsTopoSrPolicyName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Symbolic name for the SR Policy without a NULL terminator. It is
	// enforced that the size of the symbolic name be limited to
	// 255 characters.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *SLBgplsTopoSrPolicyName) Reset() {
	*x = SLBgplsTopoSrPolicyName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrPolicyName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrPolicyName) ProtoMessage() {}

func (x *SLBgplsTopoSrPolicyName) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrPolicyName.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrPolicyName) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{102}
}

func (x *SLBgplsTopoSrPolicyName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// SR Bidirectional Group Contraint. TLV 1214
// Section 5.6.5 of [draft-ietf-idr-bgp-ls-sr-policy]
type SLBgplsTopoSrBidirGroupConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SR Bidirectional Group Constraints Flags
	// Flags associated with the SR Bidirectional Group Constraints Flags
	// Section 5.6.5 of [draft-ietf-idr-bgp-ls-sr-policy]
	// Each flag is indicated as a bit field. Supported values are:
	//
	// SL_BGPLS_TOPO_SR_BIDIR_GROUP_FLAG_REVERSE
	// Bit-0: R-Flag: This CP of the SR Policy forms the
	// reverse path when set and otherwise it is the forward path when clear.
	//
	// SL_BGPLS_TOPO_SR_BIDIR_GROUP_FLAG_CO_ROUTED
	// Bit-1: C-Flag: The bidirectional path is co-routed when set.
	//
	// All others are reserved.
	Flags uint32 `protobuf:"varint,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// The group identifier for a set of bidirectional paths.
	GroupId uint32 `protobuf:"varint,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
}

func (x *SLBgplsTopoSrBidirGroupConstraint) Reset() {
	*x = SLBgplsTopoSrBidirGroupConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrBidirGroupConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrBidirGroupConstraint) ProtoMessage() {}

func (x *SLBgplsTopoSrBidirGroupConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrBidirGroupConstraint.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrBidirGroupConstraint) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{103}
}

func (x *SLBgplsTopoSrBidirGroupConstraint) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SLBgplsTopoSrBidirGroupConstraint) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

// SR Metric Contraint. TLV 1215
// Section 5.6.6 of [draft-ietf-idr-bgp-ls-sr-policy]
type SLBgplsTopoSrMetricConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies the type of the metric being used.
	Type uint32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// SR Metric Constraints Flags
	// Flags associated with the SR Metric Constraints Flags
	// Section 5.6.6 of [draft-ietf-idr-bgp-ls-sr-policy]
	// Each flag is indicated as a bit field. Supported values are:
	//
	// SL_BGPLS_TOPO_SR_METRIC_CONSTRAINT_FLAG_OPTIMIZED
	// Bit-0: O-Flag: The optimization metric being
	// reported for a dynamic CP when set.  This bit MUST NOT be set
	// in more than one instance of this TLV for a given CP
	// advertisement.
	//
	// SL_BGPLS_TOPO_SR_METRIC_CONSTRAINT_FLAG_MARGIN_ALLOWED
	// Bit-1: M-Flag: The metric margin allowed is specified when set.
	//
	// SL_BGPLS_TOPO_SR_METRIC_CONSTRAINT_FLAG_ABSOLUTE
	// Bit-2: A-Flag: The metric margin is specified as an
	// absolute value when set and is expressed as a percentage of the
	// minimum metric when clear.
	//
	// SL_BGPLS_TOPO_SR_METRIC_CONSTRAINT_FLAG_BOUND_ALLOWED
	// Bit-3: B-Flag: The metric bound allowed for the path is
	// specified when set.
	//
	// All others are reserved.
	Flags uint32 `protobuf:"varint,2,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Indicates the metric margin when the Bit-1 is set.
	// The metric margin is specified as either
	// an absolute value or as a percentage of the minimum computed path
	// metric based on the Bit-2.
	Margin uint32 `protobuf:"varint,3,opt,name=Margin,proto3" json:"Margin,omitempty"`
	// Indicates the maximum metric that is allowed when the Bit-3 is set.
	// If the computed path metric crosses the specified bound value then
	// the path is considered invalid.
	Bound uint32 `protobuf:"varint,4,opt,name=Bound,proto3" json:"Bound,omitempty"`
}

func (x *SLBgplsTopoSrMetricConstraint) Reset() {
	*x = SLBgplsTopoSrMetricConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrMetricConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrMetricConstraint) ProtoMessage() {}

func (x *SLBgplsTopoSrMetricConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrMetricConstraint.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrMetricConstraint) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{104}
}

func (x *SLBgplsTopoSrMetricConstraint) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SLBgplsTopoSrMetricConstraint) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SLBgplsTopoSrMetricConstraint) GetMargin() uint32 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *SLBgplsTopoSrMetricConstraint) GetBound() uint32 {
	if x != nil {
		return x.Bound
	}
	return 0
}

// SR Segment List Bandwidth. TLV 1216
// Section 5.10 of [draft-ietf-idr-bgp-ls-sr-policy]
type SLBgplsTopoSrCpSegListBandwidthState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The allocated bandwidth in unit
	// of bytes per second in IEEE floating point format.
	Bandwidth []byte `protobuf:"bytes,1,opt,name=Bandwidth,proto3" json:"Bandwidth,omitempty"`
}

func (x *SLBgplsTopoSrCpSegListBandwidthState) Reset() {
	*x = SLBgplsTopoSrCpSegListBandwidthState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrCpSegListBandwidthState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrCpSegListBandwidthState) ProtoMessage() {}

func (x *SLBgplsTopoSrCpSegListBandwidthState) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrCpSegListBandwidthState.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrCpSegListBandwidthState) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{105}
}

func (x *SLBgplsTopoSrCpSegListBandwidthState) GetBandwidth() []byte {
	if x != nil {
		return x.Bandwidth
	}
	return nil
}

// SR Segment List Identifier. TLV 1217
// Section 5.11 of [draft-ietf-idr-bgp-ls-sr-policy]
type SLBgplsTopoSrSegListId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier associated with the segment list.
	SegListId uint32 `protobuf:"varint,1,opt,name=SegListId,proto3" json:"SegListId,omitempty"`
}

func (x *SLBgplsTopoSrSegListId) Reset() {
	*x = SLBgplsTopoSrSegListId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrSegListId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrSegListId) ProtoMessage() {}

func (x *SLBgplsTopoSrSegListId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrSegListId.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrSegListId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{106}
}

func (x *SLBgplsTopoSrSegListId) GetSegListId() uint32 {
	if x != nil {
		return x.SegListId
	}
	return 0
}

// SRv6 BGP Peer Node SID. TLV 1251
// Section 7.2 of [RFC9514]
type SLBgplsTopoSrv6BgpPeerNodeSid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SRv6 BGP Peer Node SID Flags
	// Flags associated with the SRv6 BGP Peer Node SID Flags
	// Section 7.2 of [RFC9514]
	// Each flag is indicated as a bit field. Supported values are:
	//
	// SL_BGPLS_TOPO_SRV6_BGP_PEER_NODE_SID_FLAG_BACKUP
	// Bit-0: B-Flag: Backup Flag associated with the SID.
	//
	// SL_BGPLS_TOPO_SRV6_BGP_PEER_NODE_SID_FLAG_SET
	// Bit-1: S-Flag: Set Flag associated with the SID.
	//
	// SL_BGPLS_TOPO_SRV6_BGP_PEER_NODE_SID_FLAG_PERSISTENT
	// Bit-2: P-Flag: Persistent Flag associated with the SID.
	//
	// All others are reserved.
	Flags uint32 `protobuf:"varint,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Weight used for load balancing purposes
	Weight uint32 `protobuf:"varint,2,opt,name=Weight,proto3" json:"Weight,omitempty"`
	// Autonomous system of peer
	PeerAS uint32 `protobuf:"varint,3,opt,name=PeerAS,proto3" json:"PeerAS,omitempty"`
	// BGP Router ID of peer
	PeerBgpId []byte `protobuf:"bytes,4,opt,name=PeerBgpId,proto3" json:"PeerBgpId,omitempty"`
}

func (x *SLBgplsTopoSrv6BgpPeerNodeSid) Reset() {
	*x = SLBgplsTopoSrv6BgpPeerNodeSid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrv6BgpPeerNodeSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrv6BgpPeerNodeSid) ProtoMessage() {}

func (x *SLBgplsTopoSrv6BgpPeerNodeSid) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrv6BgpPeerNodeSid.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrv6BgpPeerNodeSid) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{107}
}

func (x *SLBgplsTopoSrv6BgpPeerNodeSid) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SLBgplsTopoSrv6BgpPeerNodeSid) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *SLBgplsTopoSrv6BgpPeerNodeSid) GetPeerAS() uint32 {
	if x != nil {
		return x.PeerAS
	}
	return 0
}

func (x *SLBgplsTopoSrv6BgpPeerNodeSid) GetPeerBgpId() []byte {
	if x != nil {
		return x.PeerBgpId
	}
	return nil
}

// Unknown Attribute.
// Added to hold any unknown/unsupported TLV by IOS-XR/BGPLS.
type SLBgplsTopoUnknownAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TlvType uint32 `protobuf:"varint,1,opt,name=TlvType,proto3" json:"TlvType,omitempty"`
	TlvLen  uint32 `protobuf:"varint,2,opt,name=TlvLen,proto3" json:"TlvLen,omitempty"`
	RawTlv  []byte `protobuf:"bytes,3,opt,name=RawTlv,proto3" json:"RawTlv,omitempty"`
}

func (x *SLBgplsTopoUnknownAttr) Reset() {
	*x = SLBgplsTopoUnknownAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoUnknownAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoUnknownAttr) ProtoMessage() {}

func (x *SLBgplsTopoUnknownAttr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoUnknownAttr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoUnknownAttr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{108}
}

func (x *SLBgplsTopoUnknownAttr) GetTlvType() uint32 {
	if x != nil {
		return x.TlvType
	}
	return 0
}

func (x *SLBgplsTopoUnknownAttr) GetTlvLen() uint32 {
	if x != nil {
		return x.TlvLen
	}
	return 0
}

func (x *SLBgplsTopoUnknownAttr) GetRawTlv() []byte {
	if x != nil {
		return x.RawTlv
	}
	return nil
}

var File_sl_bgpls_topology_proto protoreflect.FileDescriptor

var file_sl_bgpls_topology_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x6c, 0x5f, 0x62, 0x67, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x1a, 0x15, 0x73, 0x6c, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x12, 0x73, 0x6c, 0x5f, 0x73, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x53, 0x0a, 0x16, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x39, 0x0a,
	0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6c, 0x72, 0x69, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0xdc, 0x01, 0x0a, 0x14, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6c, 0x72, 0x69, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x44, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0a, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x3e, 0x0a, 0x08, 0x4e, 0x6c, 0x72, 0x69, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6c, 0x72, 0x69, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x4e,
	0x6c, 0x72, 0x69, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x13, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x4d, 0x73, 0x67, 0x12,
	0x3c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x48, 0x00, 0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x48, 0x00, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x37, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x45, 0x6e, 0x64, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x48, 0x00, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x42, 0x07, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73,
	0x54, 0x6f, 0x70, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x22,
	0x16, 0x0a, 0x14, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x45, 0x6e,
	0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x22, 0x4d, 0x0a, 0x10, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x12, 0x39, 0x0a, 0x07, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x10, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x09, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x22, 0xdc, 0x03, 0x0a, 0x0f, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x52, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x38, 0x0a, 0x04,
	0x4e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x3e, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x41, 0x0a, 0x07, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x76,
	0x36, 0x53, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x53, 0x72, 0x76, 0x36,
	0x53, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x08, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x08, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x37, 0x0a, 0x15, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x32, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73,
	0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32,
	0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x3e, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x74,
	0x74, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x15, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x06,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x44, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x41, 0x74, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x41, 0x74, 0x74, 0x72,
	0x52, 0x0a, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x41, 0x74, 0x74, 0x72, 0x22, 0x9e, 0x01, 0x0a,
	0x16, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x76, 0x36,
	0x53, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x07, 0x53, 0x72, 0x76, 0x36, 0x53,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73,
	0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x52, 0x07, 0x53, 0x72, 0x76,
	0x36, 0x53, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x0b, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x41,
	0x74, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x41, 0x74, 0x74, 0x72,
	0x52, 0x0b, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x41, 0x74, 0x74, 0x72, 0x22, 0xa5, 0x01,
	0x0a, 0x17, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x08, 0x53, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x08, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4a, 0x0a, 0x0c, 0x53, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x74, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x41, 0x74, 0x74, 0x72, 0x52, 0x0c, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x41, 0x74, 0x74, 0x72, 0x22, 0xa4, 0x03, 0x0a, 0x0f, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x73, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x41, 0x73, 0x6e, 0x12, 0x46, 0x0a, 0x0a, 0x4f,
	0x73, 0x70, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4f, 0x73, 0x70, 0x66, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x4f, 0x73, 0x70, 0x66, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x4f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x48, 0x00, 0x52, 0x0c, 0x4f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x46, 0x0a, 0x0a, 0x49, 0x73, 0x69, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x49, 0x73, 0x69, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x49,
	0x73, 0x69, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x42, 0x67, 0x70,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x42, 0x67, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x48, 0x00, 0x52, 0x09, 0x42, 0x67, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x52,
	0x0a, 0x0e, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x48, 0x00, 0x52, 0x0e, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0xe6, 0x01, 0x0a,
	0x0f, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x46, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73,
	0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x12, 0x48, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x12, 0x41, 0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x52, 0x09, 0x4c, 0x69, 0x6e, 0x6b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x22, 0x9a, 0x01, 0x0a, 0x11, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x3c, 0x0a, 0x09, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x12, 0x47, 0x0a, 0x0b, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x44, 0x65, 0x73, 0x63, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x12, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x4e, 0x6f, 0x64,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x4e, 0x6f,
	0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x12, 0x4a, 0x0a, 0x0c, 0x53, 0x72, 0x76, 0x36, 0x53,
	0x69, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x52, 0x0c, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x22, 0xa2, 0x01, 0x0a, 0x13, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3c, 0x0a, 0x09, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x12, 0x4d, 0x0a, 0x0d, 0x53, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x52, 0x0d, 0x53, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x22, 0xfc, 0x01, 0x0a, 0x14, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x49, 0x70, 0x76, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x49, 0x70, 0x76, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49,
	0x70, 0x76, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x49, 0x70, 0x76, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70,
	0x76, 0x36, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x70, 0x76, 0x36, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x76,
	0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49,
	0x70, 0x76, 0x36, 0x12, 0x32, 0x0a, 0x04, 0x4d, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4d, 0x74, 0x49,
	0x64, 0x52, 0x04, 0x4d, 0x74, 0x49, 0x64, 0x22, 0xd7, 0x01, 0x0a, 0x16, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x12, 0x32, 0x0a, 0x04, 0x4d, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4d, 0x74, 0x49, 0x64,
	0x52, 0x04, 0x4d, 0x74, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0d, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x22, 0x67, 0x0a, 0x17, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x12, 0x32, 0x0a, 0x04,
	0x4d, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4d, 0x74, 0x49, 0x64, 0x52, 0x04, 0x4d, 0x74, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x22, 0xb1, 0x03, 0x0a, 0x18, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x12, 0x49, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53,
	0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x34, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0b, 0x49, 0x70, 0x76, 0x34,
	0x45, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x0b, 0x49, 0x70, 0x76, 0x34, 0x45, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x12, 0x22, 0x0a, 0x0b,
	0x49, 0x70, 0x76, 0x36, 0x45, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x0b, 0x49, 0x70, 0x76, 0x36, 0x45, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x41, 0x73, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x41, 0x73, 0x6e, 0x12, 0x24, 0x0a, 0x0c, 0x49, 0x70, 0x76, 0x34, 0x4f, 0x72, 0x69, 0x67,
	0x41, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0c, 0x49, 0x70,
	0x76, 0x34, 0x4f, 0x72, 0x69, 0x67, 0x41, 0x64, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x0c, 0x49, 0x70,
	0x76, 0x36, 0x4f, 0x72, 0x69, 0x67, 0x41, 0x64, 0x64, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x01, 0x52, 0x0c, 0x49, 0x70, 0x76, 0x36, 0x4f, 0x72, 0x69, 0x67, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x24, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8f,
	0x01, 0x0a, 0x15, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4f, 0x73,
	0x70, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x72, 0x65, 0x61,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x41, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x49, 0x73, 0x41, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x44, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x44, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x22, 0x8d, 0x01, 0x0a, 0x17, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x4f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x41, 0x72,
	0x65, 0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x41, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x44, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x44, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x22, 0x49, 0x0a, 0x15, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x49,
	0x73, 0x69, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x73, 0x6e, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x50, 0x73, 0x6e, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x14, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x42, 0x67, 0x70, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x6e, 0x22, 0x9d, 0x01,
	0x0a, 0x19, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x73, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x70, 0x76, 0x34, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x49, 0x70, 0x76,
	0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x70, 0x76,
	0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x49, 0x70, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x82, 0x08,
	0x0a, 0x13, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x32, 0x0a, 0x04, 0x4d, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4d,
	0x74, 0x49, 0x64, 0x52, 0x04, 0x4d, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x4e, 0x6f, 0x64,
	0x65, 0x4d, 0x73, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x64, 0x52, 0x07, 0x4e,
	0x6f, 0x64, 0x65, 0x4d, 0x73, 0x64, 0x12, 0x4a, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x42, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x42, 0x69, 0x74, 0x73, 0x52, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x69,
	0x74, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x52, 0x0e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x12, 0x3a, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x4e, 0x6f,
	0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x44, 0x0a, 0x0a, 0x49, 0x73, 0x69, 0x73, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x49, 0x73, 0x69, 0x73, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x52, 0x0a, 0x49, 0x73, 0x69, 0x73,
	0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x70, 0x76, 0x34, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x34, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x76,
	0x34, 0x12, 0x49, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x12, 0x4d, 0x0a, 0x0d,
	0x53, 0x72, 0x67, 0x62, 0x49, 0x73, 0x69, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53,
	0x72, 0x67, 0x62, 0x49, 0x73, 0x69, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x0d, 0x53, 0x72,
	0x67, 0x62, 0x49, 0x73, 0x69, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x53,
	0x72, 0x67, 0x62, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x67, 0x62, 0x52, 0x04, 0x53, 0x72, 0x67, 0x62, 0x12,
	0x47, 0x0a, 0x0b, 0x53, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x53, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x0b, 0x53, 0x72, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x32, 0x0a, 0x04, 0x53, 0x72, 0x6c, 0x62,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x53, 0x72, 0x6c, 0x62, 0x52, 0x04, 0x53, 0x72, 0x6c, 0x62, 0x12, 0x2f, 0x0a, 0x03,
	0x46, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x46, 0x61, 0x64, 0x52, 0x03, 0x46, 0x61, 0x64, 0x12, 0x47, 0x0a,
	0x0b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x52, 0x0b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x12, 0x4a, 0x0a, 0x0c, 0x53, 0x72, 0x76, 0x36, 0x43, 0x61,
	0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x76, 0x36, 0x43, 0x61, 0x70, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x52, 0x0c, 0x53, 0x72, 0x76, 0x36, 0x43, 0x61, 0x70, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x22, 0xd7, 0x15, 0x0a, 0x13, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x12, 0x49, 0x0a, 0x0c, 0x4c, 0x69,
	0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x52, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x42, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x4c,
	0x6f, 0x63, 0x52, 0x65, 0x6d, 0x49, 0x64, 0x52, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x63,
	0x52, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x73, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x73, 0x64, 0x52, 0x07, 0x4c, 0x69, 0x6e, 0x6b, 0x4d,
	0x73, 0x64, 0x12, 0x59, 0x0a, 0x11, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x34, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70,
	0x76, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x11, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x49, 0x70, 0x76, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x59, 0x0a,
	0x11, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73,
	0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x11, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x36,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x49, 0x70, 0x76, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x76, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x76, 0x34, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x49, 0x70, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x52, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73,
	0x54, 0x6f, 0x70, 0x6f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x4e, 0x0a, 0x0c, 0x4d, 0x61,
	0x78, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b,
	0x4d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x0c, 0x4d, 0x61,
	0x78, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x5a, 0x0a, 0x10, 0x4d, 0x61,
	0x78, 0x52, 0x65, 0x73, 0x76, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x76, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x52, 0x10, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x76, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x57, 0x0a, 0x0f, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x76,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x55,
	0x6e, 0x72, 0x65, 0x73, 0x76, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x0f,
	0x55, 0x6e, 0x72, 0x65, 0x73, 0x76, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x4f, 0x0a, 0x0b, 0x54, 0x65, 0x44, 0x65, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x0b, 0x54, 0x65, 0x44, 0x65, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x12, 0x54, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73,
	0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x4d, 0x70, 0x6c, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x70, 0x6c,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0d, 0x4d, 0x70, 0x6c, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x45, 0x0a, 0x09, 0x49, 0x67, 0x70,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x67, 0x70, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x09, 0x49, 0x67, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x12, 0x36, 0x0a, 0x04, 0x53, 0x72, 0x6c, 0x67, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x72,
	0x6c, 0x67, 0x52, 0x04, 0x53, 0x72, 0x6c, 0x67, 0x12, 0x48, 0x0a, 0x0a, 0x4f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x41, 0x74, 0x74, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x4f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x0a, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x41, 0x64, 0x6a, 0x53, 0x69, 0x64, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x41, 0x64,
	0x6a, 0x53, 0x69, 0x64, 0x52, 0x06, 0x41, 0x64, 0x6a, 0x53, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x09,
	0x4c, 0x61, 0x6e, 0x41, 0x64, 0x6a, 0x53, 0x69, 0x64, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x61, 0x6e, 0x41, 0x64,
	0x6a, 0x53, 0x69, 0x64, 0x52, 0x09, 0x4c, 0x61, 0x6e, 0x41, 0x64, 0x6a, 0x53, 0x69, 0x64, 0x12,
	0x50, 0x0a, 0x0e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69,
	0x64, 0x52, 0x0e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69,
	0x64, 0x12, 0x4d, 0x0a, 0x0d, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x6a, 0x53,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73,
	0x54, 0x6f, 0x70, 0x6f, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x6a, 0x53, 0x69,
	0x64, 0x52, 0x0d, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x6a, 0x53, 0x69, 0x64,
	0x12, 0x4d, 0x0a, 0x0d, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x69, 0x64,
	0x52, 0x0d, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x69, 0x64, 0x12,
	0x4a, 0x0a, 0x0c, 0x55, 0x6e, 0x69, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x55, 0x6e, 0x69, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x0c, 0x55,
	0x6e, 0x69, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x5c, 0x0a, 0x12, 0x4d,
	0x69, 0x6e, 0x4d, 0x61, 0x78, 0x55, 0x6e, 0x69, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x55, 0x6e, 0x69, 0x4c, 0x69, 0x6e, 0x6b,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x12, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x55, 0x6e, 0x69,
	0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x47, 0x0a, 0x0b, 0x55, 0x6e, 0x69,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55, 0x6e, 0x69, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x56, 0x61, 0x72, 0x52, 0x0b, 0x55, 0x6e, 0x69, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x56,
	0x61, 0x72, 0x12, 0x47, 0x0a, 0x0b, 0x55, 0x6e, 0x69, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x73,
	0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x55, 0x6e, 0x69, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x73, 0x73, 0x52, 0x0b,
	0x55, 0x6e, 0x69, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x0f, 0x55,
	0x6e, 0x69, 0x52, 0x65, 0x73, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x55, 0x6e, 0x69, 0x52, 0x65, 0x73, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52,
	0x0f, 0x55, 0x6e, 0x69, 0x52, 0x65, 0x73, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x59, 0x0a, 0x11, 0x55, 0x6e, 0x69, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55, 0x6e, 0x69, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x42,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x11, 0x55, 0x6e, 0x69, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x56, 0x0a, 0x10, 0x55,
	0x6e, 0x69, 0x55, 0x74, 0x69, 0x6c, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x55, 0x6e, 0x69, 0x55, 0x74, 0x69, 0x6c, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x52, 0x10, 0x55, 0x6e, 0x69, 0x55, 0x74, 0x69, 0x6c, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x04, 0x41, 0x73, 0x6c, 0x61, 0x18, 0x1e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x41, 0x73, 0x6c,
	0x61, 0x41, 0x74, 0x74, 0x72, 0x52, 0x04, 0x41, 0x73, 0x6c, 0x61, 0x12, 0x5c, 0x0a, 0x12, 0x4c,
	0x32, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x4c, 0x32, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x74, 0x74, 0x72, 0x52, 0x12, 0x4c, 0x32, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x12, 0x4d, 0x0a, 0x0d, 0x45, 0x78, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x45, 0x78, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x45, 0x78, 0x74, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x47, 0x0a, 0x0b, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x52, 0x0b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x12, 0x47, 0x0a, 0x0b, 0x53, 0x72, 0x76, 0x36, 0x45, 0x6e, 0x64, 0x58, 0x53, 0x69, 0x64,
	0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x53, 0x72, 0x76, 0x36, 0x45, 0x6e, 0x64, 0x58, 0x53, 0x69, 0x64, 0x52, 0x0b, 0x53,
	0x72, 0x76, 0x36, 0x45, 0x6e, 0x64, 0x58, 0x53, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x0e, 0x53, 0x72,
	0x76, 0x36, 0x4c, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x58, 0x53, 0x69, 0x64, 0x18, 0x23, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72,
	0x76, 0x36, 0x4c, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x58, 0x53, 0x69, 0x64, 0x52, 0x0e, 0x53, 0x72,
	0x76, 0x36, 0x4c, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x58, 0x53, 0x69, 0x64, 0x22, 0xb1, 0x07, 0x0a,
	0x15, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x41, 0x74, 0x74, 0x72, 0x12, 0x38, 0x0a, 0x04, 0x46, 0x61, 0x70, 0x6d, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x46, 0x41, 0x50, 0x4d, 0x52, 0x04, 0x46, 0x61, 0x70, 0x6d,
	0x12, 0x44, 0x0a, 0x08, 0x49, 0x67, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x49, 0x67, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x08, 0x49, 0x67,
	0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x49, 0x67, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x54, 0x61, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x67, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x0b, 0x49, 0x67, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x56, 0x0a, 0x0e, 0x49, 0x67, 0x70, 0x45, 0x78, 0x74, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49,
	0x67, 0x70, 0x45, 0x78, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x0e, 0x49,
	0x67, 0x70, 0x45, 0x78, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x3e, 0x0a,
	0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x4d, 0x0a,
	0x0b, 0x4f, 0x73, 0x70, 0x66, 0x46, 0x77, 0x64, 0x41, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4f, 0x73, 0x70, 0x66, 0x46, 0x77, 0x64, 0x41, 0x64, 0x64, 0x72, 0x52,
	0x0b, 0x4f, 0x73, 0x70, 0x66, 0x46, 0x77, 0x64, 0x41, 0x64, 0x64, 0x72, 0x12, 0x4a, 0x0a, 0x0a,
	0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x41, 0x74, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x0a, 0x4f, 0x70,
	0x61, 0x71, 0x75, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x35, 0x0a, 0x03, 0x53, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x69, 0x64, 0x52, 0x03, 0x53, 0x69, 0x64, 0x12,
	0x3b, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x09,
	0x41, 0x74, 0x74, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x41, 0x74, 0x74, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x09, 0x41, 0x74, 0x74, 0x72,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x53, 0x72, 0x63, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x72, 0x63, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0b, 0x53, 0x72, 0x63, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x52, 0x0b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x12, 0x41, 0x0a,
	0x07, 0x53, 0x72, 0x76, 0x36, 0x4c, 0x6f, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x53, 0x72, 0x76, 0x36, 0x4c, 0x6f, 0x63, 0x52, 0x07, 0x53, 0x72, 0x76, 0x36, 0x4c, 0x6f, 0x63,
	0x22, 0xc8, 0x02, 0x0a, 0x16, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x41, 0x74, 0x74, 0x72, 0x12, 0x51, 0x0a, 0x10, 0x45,
	0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x76, 0x36, 0x45, 0x6e, 0x64, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x10, 0x45, 0x6e,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x54,
	0x0a, 0x0e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x53, 0x72, 0x76, 0x36, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x69, 0x64, 0x52, 0x0e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x53, 0x69, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69,
	0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x53, 0x69, 0x64, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x12, 0x47, 0x0a, 0x0b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x52, 0x0b,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x22, 0xaf, 0x04, 0x0a, 0x17,
	0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x41, 0x74, 0x74, 0x72, 0x12, 0x3e, 0x0a, 0x06, 0x53, 0x72, 0x42, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x53, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x52,
	0x06, 0x53, 0x72, 0x42, 0x73, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x43, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73,
	0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x43, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x43,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x43, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x43, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x06, 0x43, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x43, 0x70, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x43, 0x70,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0d, 0x43, 0x70, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x53, 0x65,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x53, 0x65, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x08, 0x53, 0x65, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x53,
	0x72, 0x76, 0x36, 0x42, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x53, 0x72, 0x76, 0x36, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x52, 0x08,
	0x53, 0x72, 0x76, 0x36, 0x42, 0x73, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x0c, 0x53, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x52, 0x0b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x22, 0x4e, 0x0a,
	0x16, 0x53, 0x4c, 0x42, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x4c,
	0x6f, 0x63, 0x52, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x22, 0x25, 0x0a,
	0x0f, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4d, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x4d, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x4d, 0x74, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x12, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x3e, 0x0a, 0x12, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x73, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x2f, 0x0a, 0x17, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x69, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x3b, 0x0a, 0x19, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73,
	0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x22, 0x25, 0x0a, 0x0f, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x4e, 0x6f, 0x64,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x15, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x49, 0x73, 0x69, 0x73, 0x41, 0x72, 0x65, 0x61,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x1c, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70,
	0x76, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x1c, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x3b, 0x0a, 0x1d, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x76, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x3b, 0x0a, 0x1d, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x0f,
	0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x67, 0x62, 0x12,
	0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x30, 0x0a,
	0x18, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x67, 0x62,
	0x49, 0x73, 0x69, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22,
	0x38, 0x0a, 0x16, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x22, 0x4f, 0x0a, 0x0f, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x6c, 0x62, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x2f, 0x0a, 0x17, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x76, 0x36, 0x43, 0x61, 0x70,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x80, 0x04, 0x0a, 0x0e,
	0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x46, 0x61, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1e, 0x0a, 0x0a,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x61, 0x6c, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x43, 0x61, 0x6c, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x63, 0x41, 0x6e, 0x79, 0x41, 0x66,
	0x66, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x45, 0x78, 0x63, 0x41, 0x6e, 0x79, 0x41,
	0x66, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x41, 0x6e, 0x79, 0x41, 0x66, 0x66, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x49, 0x6e, 0x63, 0x41, 0x6e, 0x79, 0x41, 0x66, 0x66,
	0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x41, 0x6c, 0x6c, 0x41, 0x66, 0x66, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x09, 0x49, 0x6e, 0x63, 0x41, 0x6c, 0x6c, 0x41, 0x66, 0x66, 0x12, 0x14,
	0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x78, 0x63, 0x53, 0x72, 0x6c, 0x67, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x78, 0x63, 0x53, 0x72, 0x6c, 0x67, 0x12, 0x44,
	0x0a, 0x09, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x54, 0x6c, 0x76, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x46, 0x61, 0x64,
	0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x54, 0x6c, 0x76, 0x52, 0x09, 0x55, 0x6e, 0x73, 0x75, 0x70,
	0x70, 0x54, 0x6c, 0x76, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x4d, 0x69, 0x6e, 0x42, 0x77,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x78, 0x63, 0x4d, 0x69, 0x6e, 0x42, 0x77,
	0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x63, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x45, 0x78, 0x63, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x41, 0x6e, 0x79, 0x52, 0x65, 0x76, 0x41,
	0x66, 0x66, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x45, 0x78, 0x63, 0x41, 0x6e, 0x79,
	0x52, 0x65, 0x76, 0x41, 0x66, 0x66, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x63, 0x41, 0x6e, 0x79,
	0x52, 0x65, 0x76, 0x41, 0x66, 0x66, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x49, 0x6e,
	0x63, 0x41, 0x6e, 0x79, 0x52, 0x65, 0x76, 0x41, 0x66, 0x66, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e,
	0x63, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x76, 0x41, 0x66, 0x66, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0c, 0x49, 0x6e, 0x63, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x76, 0x41, 0x66, 0x66, 0x22, 0x61,
	0x0a, 0x15, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x46, 0x41, 0x50, 0x4d, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6c, 0x65, 0x78, 0x41,
	0x6c, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x46, 0x6c, 0x65, 0x78, 0x41,
	0x6c, 0x67, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x22, 0x6f, 0x0a, 0x17, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x46, 0x61, 0x64, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x54, 0x6c, 0x76, 0x12, 0x3e, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x22, 0x2d, 0x0a, 0x15, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x3b, 0x0a, 0x1b, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x3f,
	0x0a, 0x1f, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e,
	0x6b, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x76, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22,
	0x5a, 0x0a, 0x1e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69,
	0x6e, 0x6b, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x76, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x38, 0x0a, 0x1e, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x65,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x16, 0x0a,
	0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0x33, 0x0a, 0x1d, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73,
	0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x32, 0x0a, 0x1c, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x70, 0x6c,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61,
	0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x32,
	0x0a, 0x18, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e,
	0x6b, 0x49, 0x67, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x22, 0x2f, 0x0a, 0x13, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x72, 0x6c, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x72, 0x6c,
	0x67, 0x56, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x72, 0x6c, 0x67,
	0x56, 0x61, 0x6c, 0x22, 0x3b, 0x0a, 0x19, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x41, 0x74, 0x74, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x22, 0x29, 0x0a, 0x13, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c,
	0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x11,
	0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x41, 0x64, 0x6a, 0x53, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x47, 0x0a, 0x0c, 0x41, 0x64, 0x6a, 0x53, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x53, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0c, 0x41, 0x64,
	0x6a, 0x53, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xef, 0x01, 0x0a, 0x14, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x61, 0x6e, 0x41, 0x64, 0x6a, 0x53, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x08, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x4c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x64, 0x52, 0x08, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x47, 0x0a, 0x0c, 0x41, 0x64, 0x6a, 0x53, 0x69, 0x64, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0c,
	0x41, 0x64, 0x6a, 0x53, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x19, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x53, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x0c, 0x42, 0x67,
	0x70, 0x53, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x69, 0x64, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0c, 0x42, 0x67, 0x70, 0x53, 0x69, 0x64, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x22, 0xa3, 0x01, 0x0a, 0x18, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x6a, 0x53, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x53, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x53, 0x69, 0x64,
	0x12, 0x47, 0x0a, 0x0c, 0x42, 0x67, 0x70, 0x53, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x53, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0c, 0x42, 0x67, 0x70,
	0x53, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x18, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x53, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x53, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x0c, 0x42, 0x67, 0x70, 0x53, 0x69, 0x64,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x0c, 0x42, 0x67, 0x70, 0x53, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xe0, 0x01,
	0x0a, 0x16, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x76,
	0x36, 0x45, 0x6e, 0x64, 0x58, 0x53, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x53, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x53, 0x69, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x53, 0x69, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x22, 0x61, 0x0a, 0x15, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x4c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x49, 0x70, 0x76,
	0x34, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x49,
	0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x49, 0x64, 0x22, 0xa5, 0x02, 0x0a, 0x19, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x53, 0x72, 0x76, 0x36, 0x4c, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x58, 0x53, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x08, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x4c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x64, 0x52, 0x08, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x53, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x45, 0x6e, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x3c, 0x0a,
	0x09, 0x53, 0x69, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x09, 0x53, 0x69, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x45, 0x0a, 0x17, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55, 0x6e, 0x69, 0x4c, 0x69, 0x6e,
	0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x22, 0x59, 0x0a, 0x1d, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x55, 0x6e, 0x69, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x4d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x4d, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x4c, 0x0a,
	0x16, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55, 0x6e, 0x69, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x42, 0x0a, 0x16, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55, 0x6e, 0x69, 0x4c, 0x69, 0x6e,
	0x6b, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22,
	0x3a, 0x0a, 0x1a, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55, 0x6e,
	0x69, 0x52, 0x65, 0x73, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1c, 0x0a,
	0x09, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x3c, 0x0a, 0x1c, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55, 0x6e, 0x69, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x42,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x3b, 0x0a, 0x1b, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55, 0x6e, 0x69, 0x55, 0x74, 0x69, 0x6c, 0x42,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0xf0, 0x07, 0x0a, 0x13, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x41, 0x73, 0x6c, 0x61, 0x41, 0x74, 0x74, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x53, 0x61, 0x62, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x53, 0x61,
	0x62, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x64, 0x61, 0x62, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x55, 0x64, 0x61, 0x62, 0x6d, 0x12, 0x44, 0x0a, 0x0a, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x4f,
	0x0a, 0x0b, 0x54, 0x65, 0x44, 0x65, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c,
	0x69, 0x6e, 0x6b, 0x54, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x52, 0x0b, 0x54, 0x65, 0x44, 0x65, 0x66, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x36, 0x0a, 0x04, 0x53, 0x72, 0x6c, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x72, 0x6c,
	0x67, 0x52, 0x04, 0x53, 0x72, 0x6c, 0x67, 0x12, 0x4a, 0x0a, 0x0c, 0x55, 0x6e, 0x69, 0x4c, 0x69,
	0x6e, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55, 0x6e, 0x69, 0x4c, 0x69, 0x6e, 0x6b,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x0c, 0x55, 0x6e, 0x69, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x56, 0x0a, 0x0f, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x6e,
	0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x55, 0x6e,
	0x69, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x0f, 0x4d, 0x69, 0x6e, 0x4d,
	0x61, 0x78, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x53, 0x0a, 0x11, 0x55,
	0x6e, 0x69, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x55, 0x6e, 0x69, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x72, 0x52, 0x11, 0x55,
	0x6e, 0x69, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x47, 0x0a, 0x0b, 0x55, 0x6e, 0x69, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x55, 0x6e, 0x69, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x73, 0x73, 0x52, 0x0b, 0x55, 0x6e,
	0x69, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x0f, 0x55, 0x6e, 0x69,
	0x52, 0x65, 0x73, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55, 0x6e,
	0x69, 0x52, 0x65, 0x73, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x0f, 0x55,
	0x6e, 0x69, 0x52, 0x65, 0x73, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x59,
	0x0a, 0x11, 0x55, 0x6e, 0x69, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55, 0x6e, 0x69, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x11, 0x55, 0x6e, 0x69, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x56, 0x0a, 0x10, 0x55, 0x6e, 0x69,
	0x55, 0x74, 0x69, 0x6c, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55,
	0x6e, 0x69, 0x55, 0x74, 0x69, 0x6c, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52,
	0x10, 0x55, 0x6e, 0x69, 0x55, 0x74, 0x69, 0x6c, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x4d, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73,
	0x54, 0x6f, 0x70, 0x6f, 0x45, 0x78, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0d, 0x45, 0x78, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x47, 0x0a, 0x0b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x52, 0x0b, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x22, 0x31, 0x0a, 0x19, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x67,
	0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x30, 0x0a, 0x1c,
	0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x49, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03,
	0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x54, 0x61, 0x67, 0x22, 0x33,
	0x0a, 0x1f, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x49, 0x67, 0x70, 0x45, 0x78, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x54, 0x61, 0x67, 0x22, 0x31, 0x0a, 0x17, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x16,
	0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0x69, 0x0a, 0x1c, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4f, 0x73, 0x70, 0x66, 0x46,
	0x77, 0x64, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64,
	0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x49, 0x70, 0x76, 0x34,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64,
	0x64, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x4f, 0x73, 0x70, 0x66, 0x46, 0x77, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x22, 0x3d, 0x0a, 0x1b, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x41, 0x74, 0x74, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x22, 0xbf, 0x01, 0x0a, 0x14, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1e, 0x0a,
	0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x53, 0x0a,
	0x0f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x0f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x16, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x69, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x53, 0x69, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x22, 0x66, 0x0a, 0x18, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x72, 0x76, 0x36, 0x4c, 0x6f, 0x63, 0x12, 0x14, 0x0a,
	0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0x32, 0x0a, 0x1a, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x41, 0x74,
	0x74, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x69, 0x0a,
	0x1c, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x53, 0x72, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x08, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x08, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x49,
	0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x08, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x53, 0x72, 0x63,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc8, 0x0b, 0x0a, 0x1d, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x32, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x44, 0x0a, 0x0a, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x4e, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x5a, 0x0a, 0x10, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x76, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73,
	0x76, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x10, 0x4d, 0x61, 0x78, 0x52,
	0x65, 0x73, 0x76, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x57, 0x0a, 0x0f,
	0x55, 0x6e, 0x72, 0x65, 0x73, 0x76, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x76, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x52, 0x0f, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x76, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x4f, 0x0a, 0x0b, 0x54, 0x65, 0x44, 0x65, 0x66, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0b, 0x54, 0x65, 0x44, 0x65, 0x66,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x54, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x06,
	0x41, 0x64, 0x6a, 0x53, 0x69, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x41, 0x64, 0x6a, 0x53, 0x69, 0x64, 0x52, 0x06,
	0x41, 0x64, 0x6a, 0x53, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x4c, 0x61, 0x6e, 0x41, 0x64, 0x6a,
	0x53, 0x69, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x61, 0x6e, 0x41, 0x64, 0x6a, 0x53, 0x69, 0x64, 0x52, 0x09,
	0x4c, 0x61, 0x6e, 0x41, 0x64, 0x6a, 0x53, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x0c, 0x55, 0x6e, 0x69,
	0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55, 0x6e, 0x69, 0x4c, 0x69,
	0x6e, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x0c, 0x55, 0x6e, 0x69, 0x4c, 0x69, 0x6e, 0x6b,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x56, 0x0a, 0x0f, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x4c,
	0x69, 0x6e, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78,
	0x55, 0x6e, 0x69, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x0f, 0x4d, 0x69,
	0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x53, 0x0a,
	0x11, 0x55, 0x6e, 0x69, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73,
	0x54, 0x6f, 0x70, 0x6f, 0x55, 0x6e, 0x69, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x72, 0x52,
	0x11, 0x55, 0x6e, 0x69, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0b, 0x55, 0x6e, 0x69, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x73,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x55, 0x6e, 0x69, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x73, 0x73, 0x52, 0x0b,
	0x55, 0x6e, 0x69, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x0f, 0x55,
	0x6e, 0x69, 0x52, 0x65, 0x73, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x55, 0x6e, 0x69, 0x52, 0x65, 0x73, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52,
	0x0f, 0x55, 0x6e, 0x69, 0x52, 0x65, 0x73, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x59, 0x0a, 0x11, 0x55, 0x6e, 0x69, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55, 0x6e, 0x69, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x42,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x11, 0x55, 0x6e, 0x69, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x56, 0x0a, 0x10, 0x55,
	0x6e, 0x69, 0x55, 0x74, 0x69, 0x6c, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x55, 0x6e, 0x69, 0x55, 0x74, 0x69, 0x6c, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x52, 0x10, 0x55, 0x6e, 0x69, 0x55, 0x74, 0x69, 0x6c, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x04, 0x41, 0x73, 0x6c, 0x61, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x41, 0x73, 0x6c,
	0x61, 0x41, 0x74, 0x74, 0x72, 0x52, 0x04, 0x41, 0x73, 0x6c, 0x61, 0x12, 0x4d, 0x0a, 0x0d, 0x45,
	0x78, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x45, 0x78,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x45, 0x78, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x47, 0x0a, 0x0b, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x52, 0x0b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x22, 0x30, 0x0a, 0x18, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x45, 0x78, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xa3, 0x01, 0x0a, 0x17, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x73, 0x69, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x73, 0x69, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x2b, 0x0a, 0x04, 0x42, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x53, 0x72, 0x42, 0x73, 0x69, 0x64, 0x52, 0x04, 0x42, 0x73, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0d,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x42, 0x73, 0x69, 0x64, 0x52, 0x0d, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x73, 0x69, 0x64, 0x22, 0x68, 0x0a, 0x14, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x43, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xaa, 0x04, 0x0a, 0x1a, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x43, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x74,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x4d, 0x74, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x4b, 0x0a, 0x08,
	0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x41, 0x66, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52,
	0x08, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x04, 0x53, 0x72, 0x6c,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x53, 0x72, 0x53, 0x72, 0x6c, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x04, 0x53, 0x72, 0x6c, 0x67, 0x12, 0x4d, 0x0a, 0x09, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x09,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x4f, 0x0a, 0x08, 0x44, 0x69, 0x73,
	0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x44, 0x69, 0x73, 0x6a, 0x6f, 0x69, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x52, 0x08, 0x44, 0x69, 0x73, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0a, 0x42, 0x69,
	0x64, 0x69, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x42, 0x69, 0x64, 0x69,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x52, 0x0a, 0x42, 0x69, 0x64, 0x69, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x44, 0x0a, 0x06,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x22, 0xef, 0x01, 0x0a, 0x14, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x53, 0x72, 0x53, 0x65, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x4d, 0x74, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x53, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x53, 0x72, 0x53, 0x65,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x16, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73,
	0x53, 0x72, 0x53, 0x65, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x82, 0x01,
	0x0a, 0x20, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x41,
	0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x6c, 0x41, 0x6e, 0x79, 0x45, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x6c, 0x41, 0x6e, 0x79, 0x45,
	0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x63, 0x6c, 0x41, 0x6e, 0x79, 0x45, 0x61, 0x67,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x49, 0x6e, 0x63, 0x6c, 0x41, 0x6e, 0x79, 0x45,
	0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x63, 0x6c, 0x41, 0x6c, 0x6c, 0x45, 0x61, 0x67,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x49, 0x6e, 0x63, 0x6c, 0x41, 0x6c, 0x6c, 0x45,
	0x61, 0x67, 0x22, 0x3e, 0x0a, 0x1c, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x53, 0x72, 0x53, 0x72, 0x6c, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x72, 0x6c, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x53, 0x72, 0x6c, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0x40, 0x0a, 0x20, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x53, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x22, 0x86, 0x01, 0x0a, 0x24, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73,
	0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x44, 0x69, 0x73, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x2d, 0x0a,
	0x17, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x21,
	0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x42, 0x69, 0x64,
	0x69, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x22, 0x77, 0x0a, 0x1d, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x53, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x44, 0x0a, 0x24, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x43, 0x70, 0x53, 0x65, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x22, 0x36, 0x0a, 0x16, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53,
	0x72, 0x53, 0x65, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x53,
	0x65, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x1d, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x76, 0x36, 0x42, 0x67, 0x70, 0x50,
	0x65, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x65, 0x65, 0x72,
	0x41, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x50, 0x65, 0x65, 0x72, 0x41, 0x53,
	0x12, 0x1c, 0x0a, 0x09, 0x50, 0x65, 0x65, 0x72, 0x42, 0x67, 0x70, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x50, 0x65, 0x65, 0x72, 0x42, 0x67, 0x70, 0x49, 0x64, 0x22, 0x62,
	0x0a, 0x16, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x6c, 0x76, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x54, 0x6c, 0x76, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x6c, 0x76, 0x4c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x54, 0x6c, 0x76, 0x4c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x61,
	0x77, 0x54, 0x6c, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x52, 0x61, 0x77, 0x54,
	0x6c, 0x76, 0x2a, 0x84, 0x01, 0x0a, 0x14, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x20, 0x53,
	0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f,
	0x50, 0x4f, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c,
	0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x2a, 0xad, 0x02, 0x0a, 0x13, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6c, 0x72, 0x69, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f,
	0x50, 0x4f, 0x5f, 0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4c, 0x5f, 0x42, 0x47,
	0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4c, 0x5f,
	0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4e, 0x4c, 0x52, 0x49, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x53,
	0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4e, 0x4c, 0x52,
	0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x50, 0x52, 0x45, 0x46,
	0x49, 0x58, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x50, 0x56, 0x36, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x10, 0x04, 0x12, 0x34, 0x0a,
	0x30, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4e,
	0x4c, 0x52, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x54,
	0x48, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f,
	0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x52, 0x56, 0x36, 0x5f, 0x53, 0x49, 0x44, 0x10, 0x06, 0x2a, 0xf1, 0x02, 0x0a, 0x13, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f,
	0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50,
	0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x4c, 0x31, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4c,
	0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x4c, 0x32, 0x10, 0x02, 0x12, 0x21,
	0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x76, 0x32, 0x10,
	0x03, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f,
	0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x42, 0x47,
	0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x76, 0x33, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4c,
	0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4c,
	0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x5f, 0x54, 0x45, 0x10, 0x08, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x52, 0x10, 0x09, 0x2a, 0xce, 0x02,
	0x0a, 0x18, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4f, 0x73, 0x70,
	0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x4c,
	0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4f, 0x53, 0x50, 0x46,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50,
	0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x41, 0x5f, 0x41, 0x52,
	0x45, 0x41, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x52, 0x45, 0x41,
	0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54,
	0x4f, 0x50, 0x4f, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x31, 0x10, 0x03, 0x12, 0x2a,
	0x0a, 0x26, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f,
	0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x32, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x4c,
	0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4f, 0x53, 0x50, 0x46,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x53, 0x53, 0x41,
	0x5f, 0x31, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x53, 0x53, 0x41, 0x5f, 0x32, 0x10, 0x06, 0x2a, 0xab,
	0x01, 0x0a, 0x14, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x69,
	0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x4c, 0x5f, 0x42, 0x47,
	0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1e, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f,
	0x53, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54,
	0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x49,
	0x4e, 0x44, 0x45, 0x58, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50,
	0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x5f, 0x56, 0x36, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x03, 0x2a, 0xa0, 0x01, 0x0a,
	0x1a, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x53, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x28, 0x53,
	0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x45,
	0x46, 0x49, 0x58, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x52,
	0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x4c, 0x5f,
	0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49,
	0x58, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x53, 0x49, 0x44,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x02, 0x2a,
	0x9a, 0x02, 0x0a, 0x1c, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53,
	0x72, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x27, 0x0a, 0x23, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50,
	0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x42, 0x53, 0x49, 0x44, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x52,
	0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x27, 0x53, 0x4c, 0x5f,
	0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x42, 0x53,
	0x49, 0x44, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x50, 0x4c, 0x41, 0x4e,
	0x45, 0x5f, 0x56, 0x36, 0x10, 0x80, 0x80, 0x02, 0x12, 0x2a, 0x0a, 0x24, 0x53, 0x4c, 0x5f, 0x42,
	0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x42, 0x53, 0x49,
	0x44, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x80, 0x80, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x42, 0x53, 0x49, 0x44, 0x5f, 0x46, 0x4c,
	0x41, 0x47, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x10, 0x80, 0x40, 0x12, 0x24, 0x0a,
	0x1f, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53,
	0x52, 0x5f, 0x42, 0x53, 0x49, 0x44, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x53, 0x52, 0x4c, 0x42,
	0x10, 0x80, 0x20, 0x12, 0x27, 0x0a, 0x22, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f,
	0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x42, 0x53, 0x49, 0x44, 0x5f, 0x46, 0x4c, 0x41,
	0x47, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x80, 0x10, 0x2a, 0xce, 0x04, 0x0a,
	0x19, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x43, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x4c,
	0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x43,
	0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x52, 0x45, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x29, 0x53, 0x4c, 0x5f, 0x42, 0x47,
	0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x43, 0x50, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f,
	0x53, 0x48, 0x55, 0x54, 0x10, 0x80, 0x80, 0x02, 0x12, 0x2b, 0x0a, 0x25, 0x53, 0x4c, 0x5f, 0x42,
	0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x43, 0x50, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x80, 0x80, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c,
	0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x43, 0x50, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x80,
	0x40, 0x12, 0x2d, 0x0a, 0x28, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f,
	0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x43, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46,
	0x4c, 0x41, 0x47, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x45, 0x44, 0x10, 0x80, 0x20,
	0x12, 0x29, 0x0a, 0x24, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50,
	0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x43, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4c,
	0x41, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x80, 0x10, 0x12, 0x30, 0x0a, 0x2b, 0x53,
	0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f,
	0x43, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4e, 0x48, 0x10, 0x80, 0x08, 0x12, 0x2d, 0x0a,
	0x28, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53,
	0x52, 0x5f, 0x43, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x44, 0x10, 0x80, 0x04, 0x12, 0x2f, 0x0a, 0x2a,
	0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52,
	0x5f, 0x43, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x80, 0x02, 0x12, 0x35, 0x0a,
	0x30, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53,
	0x52, 0x5f, 0x43, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x5f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x80, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x43, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x10, 0x40,
	0x12, 0x2b, 0x0a, 0x27, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50,
	0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x43, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4c,
	0x41, 0x47, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x20, 0x2a, 0x8e, 0x04,
	0x0a, 0x1f, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x43,
	0x70, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f,
	0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x43, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41,
	0x49, 0x4e, 0x54, 0x53, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x31, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x43, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x53,
	0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x56, 0x36, 0x10, 0x80, 0x80, 0x02, 0x12, 0x34, 0x0a,
	0x2e, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53,
	0x52, 0x5f, 0x43, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x53,
	0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x80, 0x80, 0x01, 0x12, 0x35, 0x0a, 0x30, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f,
	0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x43, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54,
	0x52, 0x41, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x55, 0x4e, 0x50, 0x52,
	0x4f, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x80, 0x40, 0x12, 0x38, 0x0a, 0x33, 0x53, 0x4c,
	0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x43,
	0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x46, 0x4c,
	0x41, 0x47, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x41, 0x4c, 0x47,
	0x4f, 0x10, 0x80, 0x20, 0x12, 0x38, 0x0a, 0x33, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x43, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x53,
	0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x10, 0x80, 0x10, 0x12, 0x34,
	0x0a, 0x2f, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f,
	0x53, 0x52, 0x5f, 0x43, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54,
	0x53, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x43,
	0x54, 0x10, 0x80, 0x08, 0x12, 0x32, 0x0a, 0x2d, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x43, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x53,
	0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x46, 0x49, 0x58,
	0x45, 0x44, 0x5f, 0x43, 0x50, 0x10, 0x80, 0x04, 0x12, 0x34, 0x0a, 0x2f, 0x53, 0x4c, 0x5f, 0x42,
	0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x43, 0x50, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x46, 0x4c, 0x41, 0x47,
	0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x42, 0x59, 0x5f, 0x48, 0x4f, 0x50, 0x10, 0x80, 0x02, 0x2a, 0x8d,
	0x04, 0x0a, 0x19, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72,
	0x53, 0x65, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x27,
	0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52,
	0x5f, 0x53, 0x45, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x52,
	0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2b, 0x53, 0x4c, 0x5f,
	0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45,
	0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x50, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x56, 0x36, 0x10, 0x80, 0x80, 0x02, 0x12, 0x32, 0x0a, 0x2c,
	0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52,
	0x5f, 0x53, 0x45, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x45,
	0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x80, 0x80, 0x01,
	0x12, 0x31, 0x0a, 0x2c, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50,
	0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x4c,
	0x41, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x48,
	0x10, 0x80, 0x40, 0x12, 0x2c, 0x0a, 0x27, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f,
	0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x80,
	0x20, 0x12, 0x2c, 0x0a, 0x27, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f,
	0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46,
	0x4c, 0x41, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x80, 0x10, 0x12,
	0x32, 0x0a, 0x2d, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f,
	0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x4c, 0x41,
	0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x80, 0x08, 0x12, 0x32, 0x0a, 0x2d, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f,
	0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f,
	0x41, 0x4c, 0x47, 0x4f, 0x10, 0x80, 0x04, 0x12, 0x32, 0x0a, 0x2d, 0x53, 0x4c, 0x5f, 0x42, 0x47,
	0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x10, 0x80, 0x02, 0x12, 0x31, 0x0a, 0x2c, 0x53,
	0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f,
	0x53, 0x45, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x80, 0x01, 0x2a, 0xb9,
	0x02, 0x0a, 0x1f, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72,
	0x53, 0x65, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x32, 0x0a, 0x2e, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54,
	0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x39, 0x0a, 0x34, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50,
	0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f,
	0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x80,
	0x01, 0x12, 0x36, 0x0a, 0x32, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f,
	0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x41, 0x42, 0x53, 0x4f, 0x4c,
	0x55, 0x54, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x10, 0x40, 0x12, 0x37, 0x0a, 0x33, 0x53, 0x4c, 0x5f,
	0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45,
	0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x46, 0x4c,
	0x41, 0x47, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44,
	0x10, 0x20, 0x12, 0x36, 0x0a, 0x32, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54,
	0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x10, 0x2a, 0xf5, 0x02, 0x0a, 0x1f, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x44, 0x69, 0x73, 0x6a,
	0x6f, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x31,
	0x0a, 0x2d, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f,
	0x53, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x4a, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x2e, 0x0a, 0x29, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f,
	0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x4a, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x53, 0x52, 0x4c, 0x47, 0x10, 0x80,
	0x01, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f,
	0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x4a, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x40,
	0x12, 0x2d, 0x0a, 0x29, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50,
	0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x4a, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x20, 0x12,
	0x31, 0x0a, 0x2d, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f,
	0x5f, 0x53, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x4a, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b,
	0x10, 0x10, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54,
	0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x4a, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x47, 0x50, 0x10, 0x08,
	0x12, 0x30, 0x0a, 0x2c, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50,
	0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x4a, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x04, 0x2a, 0xb2, 0x01, 0x0a, 0x1c, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x53, 0x72, 0x42, 0x69, 0x64, 0x69, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f,
	0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x42, 0x49, 0x44, 0x49, 0x52, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x29, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f,
	0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x42, 0x49, 0x44, 0x49, 0x52, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45,
	0x10, 0x80, 0x80, 0x02, 0x12, 0x31, 0x0a, 0x2b, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x42, 0x49, 0x44, 0x49, 0x52, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x43, 0x4f, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x44, 0x10, 0x80, 0x80, 0x01, 0x2a, 0xbf, 0x02, 0x0a, 0x22, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x34,
	0x0a, 0x30, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f,
	0x53, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52,
	0x41, 0x49, 0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x31, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4d, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x80, 0x01, 0x12, 0x3a, 0x0a, 0x36,
	0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52,
	0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49,
	0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x40, 0x12, 0x34, 0x0a, 0x30, 0x53, 0x4c, 0x5f, 0x42,
	0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x46,
	0x4c, 0x41, 0x47, 0x5f, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45, 0x10, 0x20, 0x12, 0x39,
	0x0a, 0x35, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f,
	0x53, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52,
	0x41, 0x49, 0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x10, 0x2a, 0x80, 0x02, 0x0a, 0x22, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x76, 0x36, 0x42, 0x67, 0x70,
	0x50, 0x65, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x36, 0x0a, 0x32, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50,
	0x4f, 0x5f, 0x53, 0x52, 0x56, 0x36, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f,
	0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x52, 0x45,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x35, 0x0a, 0x30, 0x53, 0x4c, 0x5f, 0x42,
	0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x56, 0x36, 0x5f, 0x42,
	0x47, 0x50, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x44,
	0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x80, 0x01, 0x12,
	0x31, 0x0a, 0x2d, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f,
	0x5f, 0x53, 0x52, 0x56, 0x36, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x53, 0x45, 0x54,
	0x10, 0x40, 0x12, 0x38, 0x0a, 0x34, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54,
	0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x56, 0x36, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x50, 0x45, 0x45,
	0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f,
	0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x20, 0x32, 0x74, 0x0a, 0x0b,
	0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x12, 0x65, 0x0a, 0x16, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x1a, 0x22, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x4d, 0x73, 0x67,
	0x30, 0x01, 0x42, 0x51, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x43, 0x69, 0x73, 0x63, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2d, 0x6f, 0x62, 0x6a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sl_bgpls_topology_proto_rawDescOnce sync.Once
	file_sl_bgpls_topology_proto_rawDescData = file_sl_bgpls_topology_proto_rawDesc
)

func file_sl_bgpls_topology_proto_rawDescGZIP() []byte {
	file_sl_bgpls_topology_proto_rawDescOnce.Do(func() {
		file_sl_bgpls_topology_proto_rawDescData = protoimpl.X.CompressGZIP(file_sl_bgpls_topology_proto_rawDescData)
	})
	return file_sl_bgpls_topology_proto_rawDescData
}

var file_sl_bgpls_topology_proto_enumTypes = make([]protoimpl.EnumInfo, 15)
var file_sl_bgpls_topology_proto_msgTypes = make([]protoimpl.MessageInfo, 109)
var file_sl_bgpls_topology_proto_goTypes = []interface{}{
	(SLBgplsTopoOperation)(0),                    // 0: service_layer.SLBgplsTopoOperation
	(SLBgplsTopoNlriType)(0),                     // 1: service_layer.SLBgplsTopoNlriType
	(SLBgplsTopoProtocol)(0),                     // 2: service_layer.SLBgplsTopoProtocol
	(SLBgplsTopoOspfRouteType)(0),                // 3: service_layer.SLBgplsTopoOspfRouteType
	(SLBgplsTopoSidFormat)(0),                    // 4: service_layer.SLBgplsTopoSidFormat
	(SLBgplsTopoPrefixSidFormat)(0),              // 5: service_layer.SLBgplsTopoPrefixSidFormat
	(SLBgplsTopoSrBindingSidFlags)(0),            // 6: service_layer.SLBgplsTopoSrBindingSidFlags
	(SLBgplsTopoSrCpStateFlags)(0),               // 7: service_layer.SLBgplsTopoSrCpStateFlags
	(SLBgplsTopoSrCpConstraintsFlags)(0),         // 8: service_layer.SLBgplsTopoSrCpConstraintsFlags
	(SLBgplsTopoSrSegListFlags)(0),               // 9: service_layer.SLBgplsTopoSrSegListFlags
	(SLBgplsTopoSrSegListMetricFlags)(0),         // 10: service_layer.SLBgplsTopoSrSegListMetricFlags
	(SLBgplsTopoSrDisjointGroupFlags)(0),         // 11: service_layer.SLBgplsTopoSrDisjointGroupFlags
	(SLBgplsTopoSrBidirGroupFlags)(0),            // 12: service_layer.SLBgplsTopoSrBidirGroupFlags
	(SLBgplsTopoSrMetricConstraintFlags)(0),      // 13: service_layer.SLBgplsTopoSrMetricConstraintFlags
	(SLBgplsTopoSrv6BgpPeerNodeSidFlags)(0),      // 14: service_layer.SLBgplsTopoSrv6BgpPeerNodeSidFlags
	(*SLBgplsTopoNotifReqMsg)(nil),               // 15: service_layer.SLBgplsTopoNotifReqMsg
	(*SLBgplsTopoNlriMatch)(nil),                 // 16: service_layer.SLBgplsTopoNlriMatch
	(*SLBgplsTopoNotifMsg)(nil),                  // 17: service_layer.SLBgplsTopoNotifMsg
	(*SLBgplsTopoStartMarker)(nil),               // 18: service_layer.SLBgplsTopoStartMarker
	(*SLBgplsTopoEndMarker)(nil),                 // 19: service_layer.SLBgplsTopoEndMarker
	(*SLBgplsTopoNotif)(nil),                     // 20: service_layer.SLBgplsTopoNotif
	(*SLBgplsTopoEntry)(nil),                     // 21: service_layer.SLBgplsTopoEntry
	(*SLBgplsTopoData)(nil),                      // 22: service_layer.SLBgplsTopoData
	(*SLBgplsTopoInstanceId)(nil),                // 23: service_layer.SLBgplsTopoInstanceId
	(*SLBgplsTopoNodeData)(nil),                  // 24: service_layer.SLBgplsTopoNodeData
	(*SLBgplsTopoLinkData)(nil),                  // 25: service_layer.SLBgplsTopoLinkData
	(*SLBgplsTopoPrefixData)(nil),                // 26: service_layer.SLBgplsTopoPrefixData
	(*SLBgplsTopoSrv6SidData)(nil),               // 27: service_layer.SLBgplsTopoSrv6SidData
	(*SLBgplsTopoSrPolicyData)(nil),              // 28: service_layer.SLBgplsTopoSrPolicyData
	(*SLBgplsTopoNode)(nil),                      // 29: service_layer.SLBgplsTopoNode
	(*SLBgplsTopoLink)(nil),                      // 30: service_layer.SLBgplsTopoLink
	(*SLBgplsTopoPrefix)(nil),                    // 31: service_layer.SLBgplsTopoPrefix
	(*SLBgplsTopoSrv6Sid)(nil),                   // 32: service_layer.SLBgplsTopoSrv6Sid
	(*SLBgplsTopoSrPolicy)(nil),                  // 33: service_layer.SLBgplsTopoSrPolicy
	(*SLBgplsTopoLinkDescr)(nil),                 // 34: service_layer.SLBgplsTopoLinkDescr
	(*SLBgplsTopoPrefixDescr)(nil),               // 35: service_layer.SLBgplsTopoPrefixDescr
	(*SLBgplsTopoSrv6SidDescr)(nil),              // 36: service_layer.SLBgplsTopoSrv6SidDescr
	(*SLBgplsTopoSrPolicyDescr)(nil),             // 37: service_layer.SLBgplsTopoSrPolicyDescr
	(*SLBgplsTopoOspfNodeId)(nil),                // 38: service_layer.SLBgplsTopoOspfNodeId
	(*SLBgplsTopoOspfv3NodeId)(nil),              // 39: service_layer.SLBgplsTopoOspfv3NodeId
	(*SLBgplsTopoIsisNodeId)(nil),                // 40: service_layer.SLBgplsTopoIsisNodeId
	(*SLBgplsTopoBgpNodeId)(nil),                 // 41: service_layer.SLBgplsTopoBgpNodeId
	(*SLBgplsTopoSrPolicyNodeId)(nil),            // 42: service_layer.SLBgplsTopoSrPolicyNodeId
	(*SLBgplsTopoNodeAttr)(nil),                  // 43: service_layer.SLBgplsTopoNodeAttr
	(*SLBgplsTopoLinkAttr)(nil),                  // 44: service_layer.SLBgplsTopoLinkAttr
	(*SLBgplsTopoPrefixAttr)(nil),                // 45: service_layer.SLBgplsTopoPrefixAttr
	(*SLBgplsTopoSrv6SidAttr)(nil),               // 46: service_layer.SLBgplsTopoSrv6SidAttr
	(*SLBgplsTopoSrPolicyAttr)(nil),              // 47: service_layer.SLBgplsTopoSrPolicyAttr
	(*SLBplsTopoLinkLocRemId)(nil),               // 48: service_layer.SLBplsTopoLinkLocRemId
	(*SLBgplsTopoMtId)(nil),                      // 49: service_layer.SLBgplsTopoMtId
	(*SLBgplsTopoNodeMsd)(nil),                   // 50: service_layer.SLBgplsTopoNodeMsd
	(*SLBgplsTopoLinkMsd)(nil),                   // 51: service_layer.SLBgplsTopoLinkMsd
	(*SLBgplsTopoNodeFlagBits)(nil),              // 52: service_layer.SLBgplsTopoNodeFlagBits
	(*SLBgplsTopoNodeOpaqueAttr)(nil),            // 53: service_layer.SLBgplsTopoNodeOpaqueAttr
	(*SLBgplsNodeName)(nil),                      // 54: service_layer.SLBgplsNodeName
	(*SLBgplsTopoIsisAreaId)(nil),                // 55: service_layer.SLBgplsTopoIsisAreaId
	(*SLBgplsTopoLocalIpv4RouterId)(nil),         // 56: service_layer.SLBgplsTopoLocalIpv4RouterId
	(*SLBgplsTopoLocalIpv6RouterId)(nil),         // 57: service_layer.SLBgplsTopoLocalIpv6RouterId
	(*SLBgplsTopoRemoteIpv4RouterId)(nil),        // 58: service_layer.SLBgplsTopoRemoteIpv4RouterId
	(*SLBgplsTopoRemoteIpv6RouterId)(nil),        // 59: service_layer.SLBgplsTopoRemoteIpv6RouterId
	(*SLBgplsTopoSrgb)(nil),                      // 60: service_layer.SLBgplsTopoSrgb
	(*SLBgplsTopoSrgbIsisFlags)(nil),             // 61: service_layer.SLBgplsTopoSrgbIsisFlags
	(*SLBgplsTopoSrAlgorithm)(nil),               // 62: service_layer.SLBgplsTopoSrAlgorithm
	(*SLBgplsTopoSrlb)(nil),                      // 63: service_layer.SLBgplsTopoSrlb
	(*SLBgplsTopoSrv6CapFlags)(nil),              // 64: service_layer.SLBgplsTopoSrv6CapFlags
	(*SLBgplsTopoFad)(nil),                       // 65: service_layer.SLBgplsTopoFad
	(*SLBgplsTopoPrefixFAPM)(nil),                // 66: service_layer.SLBgplsTopoPrefixFAPM
	(*SLBgplsTopoFadUnsuppTlv)(nil),              // 67: service_layer.SLBgplsTopoFadUnsuppTlv
	(*SLBgplsTopoAdminGroup)(nil),                // 68: service_layer.SLBgplsTopoAdminGroup
	(*SLBgplsTopoLinkMaxBandwidth)(nil),          // 69: service_layer.SLBgplsTopoLinkMaxBandwidth
	(*SLBgplsTopoLinkMaxResvBandwidth)(nil),      // 70: service_layer.SLBgplsTopoLinkMaxResvBandwidth
	(*SLBgplsTopoLinkUnresvBandwidth)(nil),       // 71: service_layer.SLBgplsTopoLinkUnresvBandwidth
	(*SLBgplsTopoLinkTeDefaultMetric)(nil),       // 72: service_layer.SLBgplsTopoLinkTeDefaultMetric
	(*SLBgplsTopoLinkProtectionType)(nil),        // 73: service_layer.SLBgplsTopoLinkProtectionType
	(*SLBgplsTopoLinkMplsProtoMask)(nil),         // 74: service_layer.SLBgplsTopoLinkMplsProtoMask
	(*SLBgplsTopoLinkIgpMetric)(nil),             // 75: service_layer.SLBgplsTopoLinkIgpMetric
	(*SLBgplsTopoLinkSrlg)(nil),                  // 76: service_layer.SLBgplsTopoLinkSrlg
	(*SLBgplsTopoLinkOpaqueAttr)(nil),            // 77: service_layer.SLBgplsTopoLinkOpaqueAttr
	(*SLBgplsTopoLinkName)(nil),                  // 78: service_layer.SLBgplsTopoLinkName
	(*SLBgplsTopoAdjSid)(nil),                    // 79: service_layer.SLBgplsTopoAdjSid
	(*SLBgplsTopoLanAdjSid)(nil),                 // 80: service_layer.SLBgplsTopoLanAdjSid
	(*SLBgplsTopoBgpPeerNodeSid)(nil),            // 81: service_layer.SLBgplsTopoBgpPeerNodeSid
	(*SLBgplsTopoBgpPeerAdjSid)(nil),             // 82: service_layer.SLBgplsTopoBgpPeerAdjSid
	(*SLBgplsTopoBgpPeerSetSid)(nil),             // 83: service_layer.SLBgplsTopoBgpPeerSetSid
	(*SLBgplsTopoSrv6EndXSid)(nil),               // 84: service_layer.SLBgplsTopoSrv6EndXSid
	(*SLBgpLsTopoNeighborId)(nil),                // 85: service_layer.SLBgpLsTopoNeighborId
	(*SLBgplsTopoSrv6LanEndXSid)(nil),            // 86: service_layer.SLBgplsTopoSrv6LanEndXSid
	(*SLBgplsTopoUniLinkDelay)(nil),              // 87: service_layer.SLBgplsTopoUniLinkDelay
	(*SLBgplsTopoMinMaxUniLinkDelay)(nil),        // 88: service_layer.SLBgplsTopoMinMaxUniLinkDelay
	(*SLBgplsTopoUniDelayVar)(nil),               // 89: service_layer.SLBgplsTopoUniDelayVar
	(*SLBgplsTopoUniLinkLoss)(nil),               // 90: service_layer.SLBgplsTopoUniLinkLoss
	(*SLBgplsTopoUniResBandwidth)(nil),           // 91: service_layer.SLBgplsTopoUniResBandwidth
	(*SLBgplsTopoUniAvailBandwidth)(nil),         // 92: service_layer.SLBgplsTopoUniAvailBandwidth
	(*SLBgplsTopoUniUtilBandwidth)(nil),          // 93: service_layer.SLBgplsTopoUniUtilBandwidth
	(*SLBgplsTopoAslaAttr)(nil),                  // 94: service_layer.SLBgplsTopoAslaAttr
	(*SLBgplsTopoPrefixIgpFlags)(nil),            // 95: service_layer.SLBgplsTopoPrefixIgpFlags
	(*SLBgplsTopoPrefixIgpRouteTag)(nil),         // 96: service_layer.SLBgplsTopoPrefixIgpRouteTag
	(*SLBgplsTopoPrefixIgpExtRouteTag)(nil),      // 97: service_layer.SLBgplsTopoPrefixIgpExtRouteTag
	(*SLBgplsTopoPrefixMetric)(nil),              // 98: service_layer.SLBgplsTopoPrefixMetric
	(*SLBgplsTopoPrefixOspfFwdAddr)(nil),         // 99: service_layer.SLBgplsTopoPrefixOspfFwdAddr
	(*SLBgplsTopoPrefixOpaqueAttr)(nil),          // 100: service_layer.SLBgplsTopoPrefixOpaqueAttr
	(*SLBgplsTopoPrefixSid)(nil),                 // 101: service_layer.SLBgplsTopoPrefixSid
	(*SLBgplsTopoPrefixRange)(nil),               // 102: service_layer.SLBgplsTopoPrefixRange
	(*SLBgplsTopoPrefixSrv6Loc)(nil),             // 103: service_layer.SLBgplsTopoPrefixSrv6Loc
	(*SLBgplsTopoPrefixAttrFlags)(nil),           // 104: service_layer.SLBgplsTopoPrefixAttrFlags
	(*SLBgplsTopoPrefixSrcRouterId)(nil),         // 105: service_layer.SLBgplsTopoPrefixSrcRouterId
	(*SLBgplsTopoL2BundleMemberAttr)(nil),        // 106: service_layer.SLBgplsTopoL2BundleMemberAttr
	(*SLBgplsTopoExtAdminGroup)(nil),             // 107: service_layer.SLBgplsTopoExtAdminGroup
	(*SLBgplsTopoSrBindingSid)(nil),              // 108: service_layer.SLBgplsTopoSrBindingSid
	(*SLBgplsTopoSrCpState)(nil),                 // 109: service_layer.SLBgplsTopoSrCpState
	(*SLBgplsTopoSrCpConstraints)(nil),           // 110: service_layer.SLBgplsTopoSrCpConstraints
	(*SLBgplsTopoSrSegList)(nil),                 // 111: service_layer.SLBgplsTopoSrSegList
	(*SLBgplsSrSegListMetric)(nil),               // 112: service_layer.SLBgplsSrSegListMetric
	(*SLBgplsTopoSrAffinityConstraints)(nil),     // 113: service_layer.SLBgplsTopoSrAffinityConstraints
	(*SLBgplsTopoSrSrlgConstraints)(nil),         // 114: service_layer.SLBgplsTopoSrSrlgConstraints
	(*SLBgplsTopoSrBandwidthConstraint)(nil),     // 115: service_layer.SLBgplsTopoSrBandwidthConstraint
	(*SLBgplsTopoSrDisjointGroupConstraint)(nil), // 116: service_layer.SLBgplsTopoSrDisjointGroupConstraint
	(*SLBgplsTopoSrPolicyName)(nil),              // 117: service_layer.SLBgplsTopoSrPolicyName
	(*SLBgplsTopoSrBidirGroupConstraint)(nil),    // 118: service_layer.SLBgplsTopoSrBidirGroupConstraint
	(*SLBgplsTopoSrMetricConstraint)(nil),        // 119: service_layer.SLBgplsTopoSrMetricConstraint
	(*SLBgplsTopoSrCpSegListBandwidthState)(nil), // 120: service_layer.SLBgplsTopoSrCpSegListBandwidthState
	(*SLBgplsTopoSrSegListId)(nil),               // 121: service_layer.SLBgplsTopoSrSegListId
	(*SLBgplsTopoSrv6BgpPeerNodeSid)(nil),        // 122: service_layer.SLBgplsTopoSrv6BgpPeerNodeSid
	(*SLBgplsTopoUnknownAttr)(nil),               // 123: service_layer.SLBgplsTopoUnknownAttr
	(*SLErrorStatus)(nil),                        // 124: service_layer.SLErrorStatus
	(SLSrPolicyProtocolOrigin)(0),                // 125: service_layer.SLSrPolicyProtocolOrigin
	(*SLSrPolicyFlags)(nil),                      // 126: service_layer.SLSrPolicyFlags
	(*SLSrv6EndPointBehavior)(nil),               // 127: service_layer.SLSrv6EndPointBehavior
	(*SLSrv6SidStruct)(nil),                      // 128: service_layer.SLSrv6SidStruct
	(*SLSrCpName)(nil),                           // 129: service_layer.SLSrCpName
	(*SLSrv6BindingSid)(nil),                     // 130: service_layer.SLSrv6BindingSid
	(*SLSrBsid)(nil),                             // 131: service_layer.SLSrBsid
	(*SLSrSegment)(nil),                          // 132: service_layer.SLSrSegment
}
var file_sl_bgpls_topology_proto_depIdxs = []int32{
	16,  // 0: service_layer.SLBgplsTopoNotifReqMsg.Match:type_name -> service_layer.SLBgplsTopoNlriMatch
	23,  // 1: service_layer.SLBgplsTopoNlriMatch.InstanceId:type_name -> service_layer.SLBgplsTopoInstanceId
	2,   // 2: service_layer.SLBgplsTopoNlriMatch.Protocol:type_name -> service_layer.SLBgplsTopoProtocol
	1,   // 3: service_layer.SLBgplsTopoNlriMatch.NlriType:type_name -> service_layer.SLBgplsTopoNlriType
	124, // 4: service_layer.SLBgplsTopoNotifMsg.ErrStatus:type_name -> service_layer.SLErrorStatus
	20,  // 5: service_layer.SLBgplsTopoNotifMsg.Data:type_name -> service_layer.SLBgplsTopoNotif
	18,  // 6: service_layer.SLBgplsTopoNotifMsg.Start:type_name -> service_layer.SLBgplsTopoStartMarker
	19,  // 7: service_layer.SLBgplsTopoNotifMsg.End:type_name -> service_layer.SLBgplsTopoEndMarker
	21,  // 8: service_layer.SLBgplsTopoNotif.Entries:type_name -> service_layer.SLBgplsTopoEntry
	0,   // 9: service_layer.SLBgplsTopoEntry.Operation:type_name -> service_layer.SLBgplsTopoOperation
	22,  // 10: service_layer.SLBgplsTopoEntry.Data:type_name -> service_layer.SLBgplsTopoData
	23,  // 11: service_layer.SLBgplsTopoData.InstanceId:type_name -> service_layer.SLBgplsTopoInstanceId
	2,   // 12: service_layer.SLBgplsTopoData.Protocol:type_name -> service_layer.SLBgplsTopoProtocol
	24,  // 13: service_layer.SLBgplsTopoData.Node:type_name -> service_layer.SLBgplsTopoNodeData
	25,  // 14: service_layer.SLBgplsTopoData.Link:type_name -> service_layer.SLBgplsTopoLinkData
	26,  // 15: service_layer.SLBgplsTopoData.Prefix:type_name -> service_layer.SLBgplsTopoPrefixData
	27,  // 16: service_layer.SLBgplsTopoData.Srv6Sid:type_name -> service_layer.SLBgplsTopoSrv6SidData
	28,  // 17: service_layer.SLBgplsTopoData.SrPolicy:type_name -> service_layer.SLBgplsTopoSrPolicyData
	29,  // 18: service_layer.SLBgplsTopoNodeData.Node:type_name -> service_layer.SLBgplsTopoNode
	43,  // 19: service_layer.SLBgplsTopoNodeData.NodeAttr:type_name -> service_layer.SLBgplsTopoNodeAttr
	30,  // 20: service_layer.SLBgplsTopoLinkData.Link:type_name -> service_layer.SLBgplsTopoLink
	44,  // 21: service_layer.SLBgplsTopoLinkData.LinkAttr:type_name -> service_layer.SLBgplsTopoLinkAttr
	31,  // 22: service_layer.SLBgplsTopoPrefixData.Prefix:type_name -> service_layer.SLBgplsTopoPrefix
	45,  // 23: service_layer.SLBgplsTopoPrefixData.PrefixAttr:type_name -> service_layer.SLBgplsTopoPrefixAttr
	32,  // 24: service_layer.SLBgplsTopoSrv6SidData.Srv6Sid:type_name -> service_layer.SLBgplsTopoSrv6Sid
	46,  // 25: service_layer.SLBgplsTopoSrv6SidData.Srv6SidAttr:type_name -> service_layer.SLBgplsTopoSrv6SidAttr
	33,  // 26: service_layer.SLBgplsTopoSrPolicyData.SrPolicy:type_name -> service_layer.SLBgplsTopoSrPolicy
	47,  // 27: service_layer.SLBgplsTopoSrPolicyData.SrPolicyAttr:type_name -> service_layer.SLBgplsTopoSrPolicyAttr
	38,  // 28: service_layer.SLBgplsTopoNode.OspfNodeId:type_name -> service_layer.SLBgplsTopoOspfNodeId
	39,  // 29: service_layer.SLBgplsTopoNode.Ospfv3NodeId:type_name -> service_layer.SLBgplsTopoOspfv3NodeId
	40,  // 30: service_layer.SLBgplsTopoNode.IsisNodeId:type_name -> service_layer.SLBgplsTopoIsisNodeId
	41,  // 31: service_layer.SLBgplsTopoNode.BgpNodeId:type_name -> service_layer.SLBgplsTopoBgpNodeId
	42,  // 32: service_layer.SLBgplsTopoNode.SrPolicyNodeId:type_name -> service_layer.SLBgplsTopoSrPolicyNodeId
	29,  // 33: service_layer.SLBgplsTopoLink.LocalNodeDescr:type_name -> service_layer.SLBgplsTopoNode
	29,  // 34: service_layer.SLBgplsTopoLink.RemoteNodeDescr:type_name -> service_layer.SLBgplsTopoNode
	34,  // 35: service_layer.SLBgplsTopoLink.LinkDescr:type_name -> service_layer.SLBgplsTopoLinkDescr
	29,  // 36: service_layer.SLBgplsTopoPrefix.NodeDescr:type_name -> service_layer.SLBgplsTopoNode
	35,  // 37: service_layer.SLBgplsTopoPrefix.PrefixDescr:type_name -> service_layer.SLBgplsTopoPrefixDescr
	29,  // 38: service_layer.SLBgplsTopoSrv6Sid.NodeDescr:type_name -> service_layer.SLBgplsTopoNode
	36,  // 39: service_layer.SLBgplsTopoSrv6Sid.Srv6SidDescr:type_name -> service_layer.SLBgplsTopoSrv6SidDescr
	29,  // 40: service_layer.SLBgplsTopoSrPolicy.NodeDescr:type_name -> service_layer.SLBgplsTopoNode
	37,  // 41: service_layer.SLBgplsTopoSrPolicy.SrPolicyDescr:type_name -> service_layer.SLBgplsTopoSrPolicyDescr
	49,  // 42: service_layer.SLBgplsTopoLinkDescr.MtId:type_name -> service_layer.SLBgplsTopoMtId
	49,  // 43: service_layer.SLBgplsTopoPrefixDescr.MtId:type_name -> service_layer.SLBgplsTopoMtId
	3,   // 44: service_layer.SLBgplsTopoPrefixDescr.OspfRouteType:type_name -> service_layer.SLBgplsTopoOspfRouteType
	49,  // 45: service_layer.SLBgplsTopoSrv6SidDescr.MtId:type_name -> service_layer.SLBgplsTopoMtId
	125, // 46: service_layer.SLBgplsTopoSrPolicyDescr.ProtoOrigin:type_name -> service_layer.SLSrPolicyProtocolOrigin
	126, // 47: service_layer.SLBgplsTopoSrPolicyDescr.Flags:type_name -> service_layer.SLSrPolicyFlags
	49,  // 48: service_layer.SLBgplsTopoNodeAttr.MtId:type_name -> service_layer.SLBgplsTopoMtId
	50,  // 49: service_layer.SLBgplsTopoNodeAttr.NodeMsd:type_name -> service_layer.SLBgplsTopoNodeMsd
	52,  // 50: service_layer.SLBgplsTopoNodeAttr.NodeFlagBits:type_name -> service_layer.SLBgplsTopoNodeFlagBits
	53,  // 51: service_layer.SLBgplsTopoNodeAttr.OpaqueNodeAttr:type_name -> service_layer.SLBgplsTopoNodeOpaqueAttr
	54,  // 52: service_layer.SLBgplsTopoNodeAttr.NodeName:type_name -> service_layer.SLBgplsNodeName
	55,  // 53: service_layer.SLBgplsTopoNodeAttr.IsisAreaId:type_name -> service_layer.SLBgplsTopoIsisAreaId
	56,  // 54: service_layer.SLBgplsTopoNodeAttr.LocalIpv4:type_name -> service_layer.SLBgplsTopoLocalIpv4RouterId
	57,  // 55: service_layer.SLBgplsTopoNodeAttr.LocalIpv6:type_name -> service_layer.SLBgplsTopoLocalIpv6RouterId
	61,  // 56: service_layer.SLBgplsTopoNodeAttr.SrgbIsisFlags:type_name -> service_layer.SLBgplsTopoSrgbIsisFlags
	60,  // 57: service_layer.SLBgplsTopoNodeAttr.Srgb:type_name -> service_layer.SLBgplsTopoSrgb
	62,  // 58: service_layer.SLBgplsTopoNodeAttr.SrAlgorithm:type_name -> service_layer.SLBgplsTopoSrAlgorithm
	63,  // 59: service_layer.SLBgplsTopoNodeAttr.Srlb:type_name -> service_layer.SLBgplsTopoSrlb
	65,  // 60: service_layer.SLBgplsTopoNodeAttr.Fad:type_name -> service_layer.SLBgplsTopoFad
	123, // 61: service_layer.SLBgplsTopoNodeAttr.UnknownAttr:type_name -> service_layer.SLBgplsTopoUnknownAttr
	64,  // 62: service_layer.SLBgplsTopoNodeAttr.Srv6CapFlags:type_name -> service_layer.SLBgplsTopoSrv6CapFlags
	48,  // 63: service_layer.SLBgplsTopoLinkAttr.LinkLocRemId:type_name -> service_layer.SLBplsTopoLinkLocRemId
	51,  // 64: service_layer.SLBgplsTopoLinkAttr.LinkMsd:type_name -> service_layer.SLBgplsTopoLinkMsd
	56,  // 65: service_layer.SLBgplsTopoLinkAttr.LocalIpv4RouterId:type_name -> service_layer.SLBgplsTopoLocalIpv4RouterId
	57,  // 66: service_layer.SLBgplsTopoLinkAttr.LocalIpv6RouterId:type_name -> service_layer.SLBgplsTopoLocalIpv6RouterId
	58,  // 67: service_layer.SLBgplsTopoLinkAttr.RemoteIpv4RouterId:type_name -> service_layer.SLBgplsTopoRemoteIpv4RouterId
	59,  // 68: service_layer.SLBgplsTopoLinkAttr.RemoteIpv6RouterId:type_name -> service_layer.SLBgplsTopoRemoteIpv6RouterId
	68,  // 69: service_layer.SLBgplsTopoLinkAttr.AdminGroup:type_name -> service_layer.SLBgplsTopoAdminGroup
	69,  // 70: service_layer.SLBgplsTopoLinkAttr.MaxBandwidth:type_name -> service_layer.SLBgplsTopoLinkMaxBandwidth
	70,  // 71: service_layer.SLBgplsTopoLinkAttr.MaxResvBandwidth:type_name -> service_layer.SLBgplsTopoLinkMaxResvBandwidth
	71,  // 72: service_layer.SLBgplsTopoLinkAttr.UnresvBandwidth:type_name -> service_layer.SLBgplsTopoLinkUnresvBandwidth
	72,  // 73: service_layer.SLBgplsTopoLinkAttr.TeDefMetric:type_name -> service_layer.SLBgplsTopoLinkTeDefaultMetric
	73,  // 74: service_layer.SLBgplsTopoLinkAttr.ProtectionType:type_name -> service_layer.SLBgplsTopoLinkProtectionType
	74,  // 75: service_layer.SLBgplsTopoLinkAttr.MplsProtoMask:type_name -> service_layer.SLBgplsTopoLinkMplsProtoMask
	75,  // 76: service_layer.SLBgplsTopoLinkAttr.IgpMetric:type_name -> service_layer.SLBgplsTopoLinkIgpMetric
	76,  // 77: service_layer.SLBgplsTopoLinkAttr.Srlg:type_name -> service_layer.SLBgplsTopoLinkSrlg
	77,  // 78: service_layer.SLBgplsTopoLinkAttr.OpaqueAttr:type_name -> service_layer.SLBgplsTopoLinkOpaqueAttr
	78,  // 79: service_layer.SLBgplsTopoLinkAttr.LinkName:type_name -> service_layer.SLBgplsTopoLinkName
	79,  // 80: service_layer.SLBgplsTopoLinkAttr.AdjSid:type_name -> service_layer.SLBgplsTopoAdjSid
	80,  // 81: service_layer.SLBgplsTopoLinkAttr.LanAdjSid:type_name -> service_layer.SLBgplsTopoLanAdjSid
	81,  // 82: service_layer.SLBgplsTopoLinkAttr.BgpPeerNodeSid:type_name -> service_layer.SLBgplsTopoBgpPeerNodeSid
	82,  // 83: service_layer.SLBgplsTopoLinkAttr.BgpPeerAdjSid:type_name -> service_layer.SLBgplsTopoBgpPeerAdjSid
	83,  // 84: service_layer.SLBgplsTopoLinkAttr.BgpPeerSetSid:type_name -> service_layer.SLBgplsTopoBgpPeerSetSid
	87,  // 85: service_layer.SLBgplsTopoLinkAttr.UniLinkDelay:type_name -> service_layer.SLBgplsTopoUniLinkDelay
	88,  // 86: service_layer.SLBgplsTopoLinkAttr.MinMaxUniLinkDelay:type_name -> service_layer.SLBgplsTopoMinMaxUniLinkDelay
	89,  // 87: service_layer.SLBgplsTopoLinkAttr.UniDelayVar:type_name -> service_layer.SLBgplsTopoUniDelayVar
	90,  // 88: service_layer.SLBgplsTopoLinkAttr.UniLinkLoss:type_name -> service_layer.SLBgplsTopoUniLinkLoss
	91,  // 89: service_layer.SLBgplsTopoLinkAttr.UniResBandwidth:type_name -> service_layer.SLBgplsTopoUniResBandwidth
	92,  // 90: service_layer.SLBgplsTopoLinkAttr.UniAvailBandwidth:type_name -> service_layer.SLBgplsTopoUniAvailBandwidth
	93,  // 91: service_layer.SLBgplsTopoLinkAttr.UniUtilBandwidth:type_name -> service_layer.SLBgplsTopoUniUtilBandwidth
	94,  // 92: service_layer.SLBgplsTopoLinkAttr.Asla:type_name -> service_layer.SLBgplsTopoAslaAttr
	106, // 93: service_layer.SLBgplsTopoLinkAttr.L2BundleMemberAttr:type_name -> service_layer.SLBgplsTopoL2BundleMemberAttr
	107, // 94: service_layer.SLBgplsTopoLinkAttr.ExtAdminGroup:type_name -> service_layer.SLBgplsTopoExtAdminGroup
	123, // 95: service_layer.SLBgplsTopoLinkAttr.UnknownAttr:type_name -> service_layer.SLBgplsTopoUnknownAttr
	84,  // 96: service_layer.SLBgplsTopoLinkAttr.Srv6EndXSid:type_name -> service_layer.SLBgplsTopoSrv6EndXSid
	86,  // 97: service_layer.SLBgplsTopoLinkAttr.Srv6LanEndXSid:type_name -> service_layer.SLBgplsTopoSrv6LanEndXSid
	66,  // 98: service_layer.SLBgplsTopoPrefixAttr.Fapm:type_name -> service_layer.SLBgplsTopoPrefixFAPM
	95,  // 99: service_layer.SLBgplsTopoPrefixAttr.IgpFlags:type_name -> service_layer.SLBgplsTopoPrefixIgpFlags
	96,  // 100: service_layer.SLBgplsTopoPrefixAttr.IgpRouteTag:type_name -> service_layer.SLBgplsTopoPrefixIgpRouteTag
	97,  // 101: service_layer.SLBgplsTopoPrefixAttr.IgpExtRouteTag:type_name -> service_layer.SLBgplsTopoPrefixIgpExtRouteTag
	98,  // 102: service_layer.SLBgplsTopoPrefixAttr.Metric:type_name -> service_layer.SLBgplsTopoPrefixMetric
	99,  // 103: service_layer.SLBgplsTopoPrefixAttr.OspfFwdAddr:type_name -> service_layer.SLBgplsTopoPrefixOspfFwdAddr
	100, // 104: service_layer.SLBgplsTopoPrefixAttr.OpaqueAttr:type_name -> service_layer.SLBgplsTopoPrefixOpaqueAttr
	101, // 105: service_layer.SLBgplsTopoPrefixAttr.Sid:type_name -> service_layer.SLBgplsTopoPrefixSid
	102, // 106: service_layer.SLBgplsTopoPrefixAttr.Range:type_name -> service_layer.SLBgplsTopoPrefixRange
	104, // 107: service_layer.SLBgplsTopoPrefixAttr.AttrFlags:type_name -> service_layer.SLBgplsTopoPrefixAttrFlags
	105, // 108: service_layer.SLBgplsTopoPrefixAttr.SrcRouterId:type_name -> service_layer.SLBgplsTopoPrefixSrcRouterId
	123, // 109: service_layer.SLBgplsTopoPrefixAttr.UnknownAttr:type_name -> service_layer.SLBgplsTopoUnknownAttr
	103, // 110: service_layer.SLBgplsTopoPrefixAttr.Srv6Loc:type_name -> service_layer.SLBgplsTopoPrefixSrv6Loc
	127, // 111: service_layer.SLBgplsTopoSrv6SidAttr.EndPointBehavior:type_name -> service_layer.SLSrv6EndPointBehavior
	122, // 112: service_layer.SLBgplsTopoSrv6SidAttr.BgpPeerNodeSid:type_name -> service_layer.SLBgplsTopoSrv6BgpPeerNodeSid
	128, // 113: service_layer.SLBgplsTopoSrv6SidAttr.SidStruct:type_name -> service_layer.SLSrv6SidStruct
	123, // 114: service_layer.SLBgplsTopoSrv6SidAttr.UnknownAttr:type_name -> service_layer.SLBgplsTopoUnknownAttr
	108, // 115: service_layer.SLBgplsTopoSrPolicyAttr.SrBsid:type_name -> service_layer.SLBgplsTopoSrBindingSid
	109, // 116: service_layer.SLBgplsTopoSrPolicyAttr.CpState:type_name -> service_layer.SLBgplsTopoSrCpState
	129, // 117: service_layer.SLBgplsTopoSrPolicyAttr.CpName:type_name -> service_layer.SLSrCpName
	110, // 118: service_layer.SLBgplsTopoSrPolicyAttr.CpConstraints:type_name -> service_layer.SLBgplsTopoSrCpConstraints
	111, // 119: service_layer.SLBgplsTopoSrPolicyAttr.SegLists:type_name -> service_layer.SLBgplsTopoSrSegList
	130, // 120: service_layer.SLBgplsTopoSrPolicyAttr.Srv6Bsid:type_name -> service_layer.SLSrv6BindingSid
	117, // 121: service_layer.SLBgplsTopoSrPolicyAttr.SrPolicyName:type_name -> service_layer.SLBgplsTopoSrPolicyName
	123, // 122: service_layer.SLBgplsTopoSrPolicyAttr.UnknownAttr:type_name -> service_layer.SLBgplsTopoUnknownAttr
	67,  // 123: service_layer.SLBgplsTopoFad.UnsuppTlv:type_name -> service_layer.SLBgplsTopoFadUnsuppTlv
	2,   // 124: service_layer.SLBgplsTopoFadUnsuppTlv.Protocol:type_name -> service_layer.SLBgplsTopoProtocol
	4,   // 125: service_layer.SLBgplsTopoAdjSid.AdjSidFormat:type_name -> service_layer.SLBgplsTopoSidFormat
	85,  // 126: service_layer.SLBgplsTopoLanAdjSid.Neighbor:type_name -> service_layer.SLBgpLsTopoNeighborId
	4,   // 127: service_layer.SLBgplsTopoLanAdjSid.AdjSidFormat:type_name -> service_layer.SLBgplsTopoSidFormat
	4,   // 128: service_layer.SLBgplsTopoBgpPeerNodeSid.BgpSidFormat:type_name -> service_layer.SLBgplsTopoSidFormat
	4,   // 129: service_layer.SLBgplsTopoBgpPeerAdjSid.BgpSidFormat:type_name -> service_layer.SLBgplsTopoSidFormat
	4,   // 130: service_layer.SLBgplsTopoBgpPeerSetSid.BgpSidFormat:type_name -> service_layer.SLBgplsTopoSidFormat
	128, // 131: service_layer.SLBgplsTopoSrv6EndXSid.SidStruct:type_name -> service_layer.SLSrv6SidStruct
	85,  // 132: service_layer.SLBgplsTopoSrv6LanEndXSid.Neighbor:type_name -> service_layer.SLBgpLsTopoNeighborId
	128, // 133: service_layer.SLBgplsTopoSrv6LanEndXSid.SidStruct:type_name -> service_layer.SLSrv6SidStruct
	68,  // 134: service_layer.SLBgplsTopoAslaAttr.AdminGroup:type_name -> service_layer.SLBgplsTopoAdminGroup
	72,  // 135: service_layer.SLBgplsTopoAslaAttr.TeDefMetric:type_name -> service_layer.SLBgplsTopoLinkTeDefaultMetric
	76,  // 136: service_layer.SLBgplsTopoAslaAttr.Srlg:type_name -> service_layer.SLBgplsTopoLinkSrlg
	87,  // 137: service_layer.SLBgplsTopoAslaAttr.UniLinkDelay:type_name -> service_layer.SLBgplsTopoUniLinkDelay
	88,  // 138: service_layer.SLBgplsTopoAslaAttr.MinMaxLinkDelay:type_name -> service_layer.SLBgplsTopoMinMaxUniLinkDelay
	89,  // 139: service_layer.SLBgplsTopoAslaAttr.UniDelayVariation:type_name -> service_layer.SLBgplsTopoUniDelayVar
	90,  // 140: service_layer.SLBgplsTopoAslaAttr.UniLinkLoss:type_name -> service_layer.SLBgplsTopoUniLinkLoss
	91,  // 141: service_layer.SLBgplsTopoAslaAttr.UniResBandwidth:type_name -> service_layer.SLBgplsTopoUniResBandwidth
	92,  // 142: service_layer.SLBgplsTopoAslaAttr.UniAvailBandwidth:type_name -> service_layer.SLBgplsTopoUniAvailBandwidth
	93,  // 143: service_layer.SLBgplsTopoAslaAttr.UniUtilBandwidth:type_name -> service_layer.SLBgplsTopoUniUtilBandwidth
	107, // 144: service_layer.SLBgplsTopoAslaAttr.ExtAdminGroup:type_name -> service_layer.SLBgplsTopoExtAdminGroup
	123, // 145: service_layer.SLBgplsTopoAslaAttr.UnknownAttr:type_name -> service_layer.SLBgplsTopoUnknownAttr
	5,   // 146: service_layer.SLBgplsTopoPrefixSid.PrefixSidFormat:type_name -> service_layer.SLBgplsTopoPrefixSidFormat
	68,  // 147: service_layer.SLBgplsTopoL2BundleMemberAttr.AdminGroup:type_name -> service_layer.SLBgplsTopoAdminGroup
	69,  // 148: service_layer.SLBgplsTopoL2BundleMemberAttr.MaxBandwidth:type_name -> service_layer.SLBgplsTopoLinkMaxBandwidth
	70,  // 149: service_layer.SLBgplsTopoL2BundleMemberAttr.MaxResvBandwidth:type_name -> service_layer.SLBgplsTopoLinkMaxResvBandwidth
	71,  // 150: service_layer.SLBgplsTopoL2BundleMemberAttr.UnresvBandwidth:type_name -> service_layer.SLBgplsTopoLinkUnresvBandwidth
	72,  // 151: service_layer.SLBgplsTopoL2BundleMemberAttr.TeDefMetric:type_name -> service_layer.SLBgplsTopoLinkTeDefaultMetric
	73,  // 152: service_layer.SLBgplsTopoL2BundleMemberAttr.ProtectionType:type_name -> service_layer.SLBgplsTopoLinkProtectionType
	79,  // 153: service_layer.SLBgplsTopoL2BundleMemberAttr.AdjSid:type_name -> service_layer.SLBgplsTopoAdjSid
	80,  // 154: service_layer.SLBgplsTopoL2BundleMemberAttr.LanAdjSid:type_name -> service_layer.SLBgplsTopoLanAdjSid
	87,  // 155: service_layer.SLBgplsTopoL2BundleMemberAttr.UniLinkDelay:type_name -> service_layer.SLBgplsTopoUniLinkDelay
	88,  // 156: service_layer.SLBgplsTopoL2BundleMemberAttr.MinMaxLinkDelay:type_name -> service_layer.SLBgplsTopoMinMaxUniLinkDelay
	89,  // 157: service_layer.SLBgplsTopoL2BundleMemberAttr.UniDelayVariation:type_name -> service_layer.SLBgplsTopoUniDelayVar
	90,  // 158: service_layer.SLBgplsTopoL2BundleMemberAttr.UniLinkLoss:type_name -> service_layer.SLBgplsTopoUniLinkLoss
	91,  // 159: service_layer.SLBgplsTopoL2BundleMemberAttr.UniResBandwidth:type_name -> service_layer.SLBgplsTopoUniResBandwidth
	92,  // 160: service_layer.SLBgplsTopoL2BundleMemberAttr.UniAvailBandwidth:type_name -> service_layer.SLBgplsTopoUniAvailBandwidth
	93,  // 161: service_layer.SLBgplsTopoL2BundleMemberAttr.UniUtilBandwidth:type_name -> service_layer.SLBgplsTopoUniUtilBandwidth
	94,  // 162: service_layer.SLBgplsTopoL2BundleMemberAttr.Asla:type_name -> service_layer.SLBgplsTopoAslaAttr
	107, // 163: service_layer.SLBgplsTopoL2BundleMemberAttr.ExtAdminGroup:type_name -> service_layer.SLBgplsTopoExtAdminGroup
	123, // 164: service_layer.SLBgplsTopoL2BundleMemberAttr.UnknownAttr:type_name -> service_layer.SLBgplsTopoUnknownAttr
	131, // 165: service_layer.SLBgplsTopoSrBindingSid.Bsid:type_name -> service_layer.SLSrBsid
	131, // 166: service_layer.SLBgplsTopoSrBindingSid.SpecifiedBsid:type_name -> service_layer.SLSrBsid
	113, // 167: service_layer.SLBgplsTopoSrCpConstraints.Affinity:type_name -> service_layer.SLBgplsTopoSrAffinityConstraints
	114, // 168: service_layer.SLBgplsTopoSrCpConstraints.Srlg:type_name -> service_layer.SLBgplsTopoSrSrlgConstraints
	115, // 169: service_layer.SLBgplsTopoSrCpConstraints.Bandwidth:type_name -> service_layer.SLBgplsTopoSrBandwidthConstraint
	116, // 170: service_layer.SLBgplsTopoSrCpConstraints.Disjoint:type_name -> service_layer.SLBgplsTopoSrDisjointGroupConstraint
	118, // 171: service_layer.SLBgplsTopoSrCpConstraints.BidirGroup:type_name -> service_layer.SLBgplsTopoSrBidirGroupConstraint
	119, // 172: service_layer.SLBgplsTopoSrCpConstraints.Metric:type_name -> service_layer.SLBgplsTopoSrMetricConstraint
	132, // 173: service_layer.SLBgplsTopoSrSegList.Segments:type_name -> service_layer.SLSrSegment
	112, // 174: service_layer.SLBgplsTopoSrSegList.Metrics:type_name -> service_layer.SLBgplsSrSegListMetric
	15,  // 175: service_layer.SLBgplsTopo.SLBgplsTopoNotifStream:input_type -> service_layer.SLBgplsTopoNotifReqMsg
	17,  // 176: service_layer.SLBgplsTopo.SLBgplsTopoNotifStream:output_type -> service_layer.SLBgplsTopoNotifMsg
	176, // [176:177] is the sub-list for method output_type
	175, // [175:176] is the sub-list for method input_type
	175, // [175:175] is the sub-list for extension type_name
	175, // [175:175] is the sub-list for extension extendee
	0,   // [0:175] is the sub-list for field type_name
}

func init() { file_sl_bgpls_topology_proto_init() }
func file_sl_bgpls_topology_proto_init() {
	if File_sl_bgpls_topology_proto != nil {
		return
	}
	file_sl_common_types_proto_init()
	file_sl_sr_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sl_bgpls_topology_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoNotifReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoNlriMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoNotifMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoStartMarker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoEndMarker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoNotif); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoInstanceId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoNodeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoLinkData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoPrefixData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrv6SidData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrPolicyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrv6Sid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoLinkDescr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoPrefixDescr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrv6SidDescr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrPolicyDescr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoOspfNodeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoOspfv3NodeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoIsisNodeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoBgpNodeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrPolicyNodeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoNodeAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoLinkAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoPrefixAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrv6SidAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrPolicyAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBplsTopoLinkLocRemId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoMtId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoNodeMsd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoLinkMsd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoNodeFlagBits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoNodeOpaqueAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsNodeName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoIsisAreaId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoLocalIpv4RouterId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoLocalIpv6RouterId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoRemoteIpv4RouterId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoRemoteIpv6RouterId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrgb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrgbIsisFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrAlgorithm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrlb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrv6CapFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoFad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoPrefixFAPM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoFadUnsuppTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoAdminGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoLinkMaxBandwidth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoLinkMaxResvBandwidth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoLinkUnresvBandwidth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoLinkTeDefaultMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoLinkProtectionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoLinkMplsProtoMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoLinkIgpMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoLinkSrlg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoLinkOpaqueAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoLinkName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoAdjSid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoLanAdjSid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoBgpPeerNodeSid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoBgpPeerAdjSid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoBgpPeerSetSid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrv6EndXSid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgpLsTopoNeighborId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrv6LanEndXSid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoUniLinkDelay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoMinMaxUniLinkDelay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoUniDelayVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoUniLinkLoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoUniResBandwidth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoUniAvailBandwidth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoUniUtilBandwidth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoAslaAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoPrefixIgpFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoPrefixIgpRouteTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoPrefixIgpExtRouteTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoPrefixMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoPrefixOspfFwdAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoPrefixOpaqueAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoPrefixSid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoPrefixRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoPrefixSrv6Loc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoPrefixAttrFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoPrefixSrcRouterId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoL2BundleMemberAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoExtAdminGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrBindingSid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrCpState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrCpConstraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrSegList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsSrSegListMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrAffinityConstraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrSrlgConstraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrBandwidthConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrDisjointGroupConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrPolicyName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrBidirGroupConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrMetricConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrCpSegListBandwidthState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrSegListId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrv6BgpPeerNodeSid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoUnknownAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sl_bgpls_topology_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SLBgplsTopoNotifMsg_ErrStatus)(nil),
		(*SLBgplsTopoNotifMsg_Data)(nil),
		(*SLBgplsTopoNotifMsg_Start)(nil),
		(*SLBgplsTopoNotifMsg_End)(nil),
	}
	file_sl_bgpls_topology_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*SLBgplsTopoData_Node)(nil),
		(*SLBgplsTopoData_Link)(nil),
		(*SLBgplsTopoData_Prefix)(nil),
		(*SLBgplsTopoData_Srv6Sid)(nil),
		(*SLBgplsTopoData_SrPolicy)(nil),
	}
	file_sl_bgpls_topology_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*SLBgplsTopoNode_OspfNodeId)(nil),
		(*SLBgplsTopoNode_Ospfv3NodeId)(nil),
		(*SLBgplsTopoNode_IsisNodeId)(nil),
		(*SLBgplsTopoNode_BgpNodeId)(nil),
		(*SLBgplsTopoNode_SrPolicyNodeId)(nil),
	}
	file_sl_bgpls_topology_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*SLBgplsTopoSrPolicyDescr_Ipv4EndAddr)(nil),
		(*SLBgplsTopoSrPolicyDescr_Ipv6EndAddr)(nil),
		(*SLBgplsTopoSrPolicyDescr_Ipv4OrigAddr)(nil),
		(*SLBgplsTopoSrPolicyDescr_Ipv6OrigAddr)(nil),
	}
	file_sl_bgpls_topology_proto_msgTypes[70].OneofWrappers = []interface{}{
		(*SLBgpLsTopoNeighborId_Ipv4Addr)(nil),
		(*SLBgpLsTopoNeighborId_SystemId)(nil),
	}
	file_sl_bgpls_topology_proto_msgTypes[84].OneofWrappers = []interface{}{
		(*SLBgplsTopoPrefixOspfFwdAddr_Ipv4Addr)(nil),
		(*SLBgplsTopoPrefixOspfFwdAddr_Ipv6Addr)(nil),
	}
	file_sl_bgpls_topology_proto_msgTypes[90].OneofWrappers = []interface{}{
		(*SLBgplsTopoPrefixSrcRouterId_Ipv4Addr)(nil),
		(*SLBgplsTopoPrefixSrcRouterId_Ipv6Addr)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sl_bgpls_topology_proto_rawDesc,
			NumEnums:      15,
			NumMessages:   109,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sl_bgpls_topology_proto_goTypes,
		DependencyIndexes: file_sl_bgpls_topology_proto_depIdxs,
		EnumInfos:         file_sl_bgpls_topology_proto_enumTypes,
		MessageInfos:      file_sl_bgpls_topology_proto_msgTypes,
	}.Build()
	File_sl_bgpls_topology_proto = out.File
	file_sl_bgpls_topology_proto_rawDesc = nil
	file_sl_bgpls_topology_proto_goTypes = nil
	file_sl_bgpls_topology_proto_depIdxs = nil
}
