// @file
// @brief RPC proto file for BGP-LS Topology Subscription Service.
//
// ----------------------------------------------------------------
//  Copyright (c) 2024 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//

//@defgroup BGP-LS Topology Subscription
//@brief BGP-LS Topology Subscription service definitions.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: sl_bgpls_topology.proto

package gengo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BGP-LS Topology Update types
type SLBgplsTopoUpdType int32

const (
	// Reserved. 0x0
	SLBgplsTopoUpdType_SL_BGPLS_TOPO_UPD_TYPE_RESERVED SLBgplsTopoUpdType = 0
	// Error - ErrStatus field elaborates on the error.
	// The client can decide to close the stream based on the error. 0x1
	SLBgplsTopoUpdType_SL_BGPLS_TOPO_UPD_TYPE_ERROR SLBgplsTopoUpdType = 1
	// BGP-LS Topology data. 0x2
	SLBgplsTopoUpdType_SL_BGPLS_TOPO_UPD_TYPE_DATA SLBgplsTopoUpdType = 2
	// Start marker - sent before any DATA is sent.
	// This is an indication to stale any objects received until now. 0x3
	SLBgplsTopoUpdType_SL_BGPLS_TOPO_UPD_TYPE_START_MARKER SLBgplsTopoUpdType = 3
	// End marker - sent after all DATA are sent.
	// This is an indication to sweep any stale objects, if present. 0x4
	SLBgplsTopoUpdType_SL_BGPLS_TOPO_UPD_TYPE_END_MARKER SLBgplsTopoUpdType = 4
)

// Enum value maps for SLBgplsTopoUpdType.
var (
	SLBgplsTopoUpdType_name = map[int32]string{
		0: "SL_BGPLS_TOPO_UPD_TYPE_RESERVED",
		1: "SL_BGPLS_TOPO_UPD_TYPE_ERROR",
		2: "SL_BGPLS_TOPO_UPD_TYPE_DATA",
		3: "SL_BGPLS_TOPO_UPD_TYPE_START_MARKER",
		4: "SL_BGPLS_TOPO_UPD_TYPE_END_MARKER",
	}
	SLBgplsTopoUpdType_value = map[string]int32{
		"SL_BGPLS_TOPO_UPD_TYPE_RESERVED":     0,
		"SL_BGPLS_TOPO_UPD_TYPE_ERROR":        1,
		"SL_BGPLS_TOPO_UPD_TYPE_DATA":         2,
		"SL_BGPLS_TOPO_UPD_TYPE_START_MARKER": 3,
		"SL_BGPLS_TOPO_UPD_TYPE_END_MARKER":   4,
	}
)

func (x SLBgplsTopoUpdType) Enum() *SLBgplsTopoUpdType {
	p := new(SLBgplsTopoUpdType)
	*p = x
	return p
}

func (x SLBgplsTopoUpdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoUpdType) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgpls_topology_proto_enumTypes[0].Descriptor()
}

func (SLBgplsTopoUpdType) Type() protoreflect.EnumType {
	return &file_sl_bgpls_topology_proto_enumTypes[0]
}

func (x SLBgplsTopoUpdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoUpdType.Descriptor instead.
func (SLBgplsTopoUpdType) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{0}
}

// BGP-LS Topology Operation
type SLBgplsTopoOperation int32

const (
	SLBgplsTopoOperation_SL_BGPLS_TOPO_OPERATION_RESERVED SLBgplsTopoOperation = 0
	SLBgplsTopoOperation_SL_BGPLS_TOPO_OPERATION_UPDATE   SLBgplsTopoOperation = 1
	SLBgplsTopoOperation_SL_BGPLS_TOPO_OPERATION_DELETE   SLBgplsTopoOperation = 2
)

// Enum value maps for SLBgplsTopoOperation.
var (
	SLBgplsTopoOperation_name = map[int32]string{
		0: "SL_BGPLS_TOPO_OPERATION_RESERVED",
		1: "SL_BGPLS_TOPO_OPERATION_UPDATE",
		2: "SL_BGPLS_TOPO_OPERATION_DELETE",
	}
	SLBgplsTopoOperation_value = map[string]int32{
		"SL_BGPLS_TOPO_OPERATION_RESERVED": 0,
		"SL_BGPLS_TOPO_OPERATION_UPDATE":   1,
		"SL_BGPLS_TOPO_OPERATION_DELETE":   2,
	}
)

func (x SLBgplsTopoOperation) Enum() *SLBgplsTopoOperation {
	p := new(SLBgplsTopoOperation)
	*p = x
	return p
}

func (x SLBgplsTopoOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgpls_topology_proto_enumTypes[1].Descriptor()
}

func (SLBgplsTopoOperation) Type() protoreflect.EnumType {
	return &file_sl_bgpls_topology_proto_enumTypes[1]
}

func (x SLBgplsTopoOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoOperation.Descriptor instead.
func (SLBgplsTopoOperation) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{1}
}

// NLRI type
type SLBgplsTopoNlriType int32

const (
	SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_RESERVED                 SLBgplsTopoNlriType = 0
	SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_NODE                     SLBgplsTopoNlriType = 1
	SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_LINK                     SLBgplsTopoNlriType = 2
	SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_IPV4_PREFIX              SLBgplsTopoNlriType = 3
	SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_IPV6_PREFIX              SLBgplsTopoNlriType = 4
	SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_SR_POLICY_CANDIDATE_PATH SLBgplsTopoNlriType = 5
	SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_SRV6_SID                 SLBgplsTopoNlriType = 6
)

// Enum value maps for SLBgplsTopoNlriType.
var (
	SLBgplsTopoNlriType_name = map[int32]string{
		0: "SL_BGPLS_TOPO_NLRI_TYPE_RESERVED",
		1: "SL_BGPLS_TOPO_NLRI_TYPE_NODE",
		2: "SL_BGPLS_TOPO_NLRI_TYPE_LINK",
		3: "SL_BGPLS_TOPO_NLRI_TYPE_IPV4_PREFIX",
		4: "SL_BGPLS_TOPO_NLRI_TYPE_IPV6_PREFIX",
		5: "SL_BGPLS_TOPO_NLRI_TYPE_SR_POLICY_CANDIDATE_PATH",
		6: "SL_BGPLS_TOPO_NLRI_TYPE_SRV6_SID",
	}
	SLBgplsTopoNlriType_value = map[string]int32{
		"SL_BGPLS_TOPO_NLRI_TYPE_RESERVED":                 0,
		"SL_BGPLS_TOPO_NLRI_TYPE_NODE":                     1,
		"SL_BGPLS_TOPO_NLRI_TYPE_LINK":                     2,
		"SL_BGPLS_TOPO_NLRI_TYPE_IPV4_PREFIX":              3,
		"SL_BGPLS_TOPO_NLRI_TYPE_IPV6_PREFIX":              4,
		"SL_BGPLS_TOPO_NLRI_TYPE_SR_POLICY_CANDIDATE_PATH": 5,
		"SL_BGPLS_TOPO_NLRI_TYPE_SRV6_SID":                 6,
	}
)

func (x SLBgplsTopoNlriType) Enum() *SLBgplsTopoNlriType {
	p := new(SLBgplsTopoNlriType)
	*p = x
	return p
}

func (x SLBgplsTopoNlriType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoNlriType) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgpls_topology_proto_enumTypes[2].Descriptor()
}

func (SLBgplsTopoNlriType) Type() protoreflect.EnumType {
	return &file_sl_bgpls_topology_proto_enumTypes[2]
}

func (x SLBgplsTopoNlriType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoNlriType.Descriptor instead.
func (SLBgplsTopoNlriType) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{2}
}

// Protocols
type SLBgplsTopoProtocol int32

const (
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_RESERVED SLBgplsTopoProtocol = 0
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_ISIS_L1  SLBgplsTopoProtocol = 1
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_ISIS_L2  SLBgplsTopoProtocol = 2
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_OSPFv2   SLBgplsTopoProtocol = 3
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_DIRECT   SLBgplsTopoProtocol = 4
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_STATIC   SLBgplsTopoProtocol = 5
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_OSPFv3   SLBgplsTopoProtocol = 6
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_BGP      SLBgplsTopoProtocol = 7
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_RSVP_TE  SLBgplsTopoProtocol = 8
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_SR       SLBgplsTopoProtocol = 9
)

// Enum value maps for SLBgplsTopoProtocol.
var (
	SLBgplsTopoProtocol_name = map[int32]string{
		0: "SL_BGPLS_TOPO_PROTOCOL_RESERVED",
		1: "SL_BGPLS_TOPO_PROTOCOL_ISIS_L1",
		2: "SL_BGPLS_TOPO_PROTOCOL_ISIS_L2",
		3: "SL_BGPLS_TOPO_PROTOCOL_OSPFv2",
		4: "SL_BGPLS_TOPO_PROTOCOL_DIRECT",
		5: "SL_BGPLS_TOPO_PROTOCOL_STATIC",
		6: "SL_BGPLS_TOPO_PROTOCOL_OSPFv3",
		7: "SL_BGPLS_TOPO_PROTOCOL_BGP",
		8: "SL_BGPLS_TOPO_PROTOCOL_RSVP_TE",
		9: "SL_BGPLS_TOPO_PROTOCOL_SR",
	}
	SLBgplsTopoProtocol_value = map[string]int32{
		"SL_BGPLS_TOPO_PROTOCOL_RESERVED": 0,
		"SL_BGPLS_TOPO_PROTOCOL_ISIS_L1":  1,
		"SL_BGPLS_TOPO_PROTOCOL_ISIS_L2":  2,
		"SL_BGPLS_TOPO_PROTOCOL_OSPFv2":   3,
		"SL_BGPLS_TOPO_PROTOCOL_DIRECT":   4,
		"SL_BGPLS_TOPO_PROTOCOL_STATIC":   5,
		"SL_BGPLS_TOPO_PROTOCOL_OSPFv3":   6,
		"SL_BGPLS_TOPO_PROTOCOL_BGP":      7,
		"SL_BGPLS_TOPO_PROTOCOL_RSVP_TE":  8,
		"SL_BGPLS_TOPO_PROTOCOL_SR":       9,
	}
)

func (x SLBgplsTopoProtocol) Enum() *SLBgplsTopoProtocol {
	p := new(SLBgplsTopoProtocol)
	*p = x
	return p
}

func (x SLBgplsTopoProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgpls_topology_proto_enumTypes[3].Descriptor()
}

func (SLBgplsTopoProtocol) Type() protoreflect.EnumType {
	return &file_sl_bgpls_topology_proto_enumTypes[3]
}

func (x SLBgplsTopoProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoProtocol.Descriptor instead.
func (SLBgplsTopoProtocol) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{3}
}

// OSPF Route types
type SLBgplsTopoOspfRouteType int32

const (
	SLBgplsTopoOspfRouteType_SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_RESERVED   SLBgplsTopoOspfRouteType = 0
	SLBgplsTopoOspfRouteType_SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_INTRA_AREA SLBgplsTopoOspfRouteType = 1
	SLBgplsTopoOspfRouteType_SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_INTER_AREA SLBgplsTopoOspfRouteType = 2
	SLBgplsTopoOspfRouteType_SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXTERN_1   SLBgplsTopoOspfRouteType = 3
	SLBgplsTopoOspfRouteType_SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXTERN_2   SLBgplsTopoOspfRouteType = 4
	SLBgplsTopoOspfRouteType_SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_NSSA_1     SLBgplsTopoOspfRouteType = 5
	SLBgplsTopoOspfRouteType_SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_NSSA_2     SLBgplsTopoOspfRouteType = 6
)

// Enum value maps for SLBgplsTopoOspfRouteType.
var (
	SLBgplsTopoOspfRouteType_name = map[int32]string{
		0: "SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_RESERVED",
		1: "SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_INTRA_AREA",
		2: "SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_INTER_AREA",
		3: "SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXTERN_1",
		4: "SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXTERN_2",
		5: "SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_NSSA_1",
		6: "SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_NSSA_2",
	}
	SLBgplsTopoOspfRouteType_value = map[string]int32{
		"SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_RESERVED":   0,
		"SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_INTRA_AREA": 1,
		"SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_INTER_AREA": 2,
		"SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXTERN_1":   3,
		"SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXTERN_2":   4,
		"SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_NSSA_1":     5,
		"SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_NSSA_2":     6,
	}
)

func (x SLBgplsTopoOspfRouteType) Enum() *SLBgplsTopoOspfRouteType {
	p := new(SLBgplsTopoOspfRouteType)
	*p = x
	return p
}

func (x SLBgplsTopoOspfRouteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoOspfRouteType) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgpls_topology_proto_enumTypes[4].Descriptor()
}

func (SLBgplsTopoOspfRouteType) Type() protoreflect.EnumType {
	return &file_sl_bgpls_topology_proto_enumTypes[4]
}

func (x SLBgplsTopoOspfRouteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoOspfRouteType.Descriptor instead.
func (SLBgplsTopoOspfRouteType) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{4}
}

// Protocol Originating SR Policy
type SLBgplsTopoSrPolicyProtocolOrigin int32

const (
	SLBgplsTopoSrPolicyProtocolOrigin_SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_RESERVED              SLBgplsTopoSrPolicyProtocolOrigin = 0
	SLBgplsTopoSrPolicyProtocolOrigin_SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_PCEP                  SLBgplsTopoSrPolicyProtocolOrigin = 1
	SLBgplsTopoSrPolicyProtocolOrigin_SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY         SLBgplsTopoSrPolicyProtocolOrigin = 2
	SLBgplsTopoSrPolicyProtocolOrigin_SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_CONFIG                SLBgplsTopoSrPolicyProtocolOrigin = 3
	SLBgplsTopoSrPolicyProtocolOrigin_SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_PCEP_VIA_PCE          SLBgplsTopoSrPolicyProtocolOrigin = 10
	SLBgplsTopoSrPolicyProtocolOrigin_SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY_VIA_PCE SLBgplsTopoSrPolicyProtocolOrigin = 20
	SLBgplsTopoSrPolicyProtocolOrigin_SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_PCE        SLBgplsTopoSrPolicyProtocolOrigin = 30
)

// Enum value maps for SLBgplsTopoSrPolicyProtocolOrigin.
var (
	SLBgplsTopoSrPolicyProtocolOrigin_name = map[int32]string{
		0:  "SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_RESERVED",
		1:  "SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_PCEP",
		2:  "SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY",
		3:  "SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_CONFIG",
		10: "SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_PCEP_VIA_PCE",
		20: "SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY_VIA_PCE",
		30: "SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_PCE",
	}
	SLBgplsTopoSrPolicyProtocolOrigin_value = map[string]int32{
		"SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_RESERVED":              0,
		"SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_PCEP":                  1,
		"SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY":         2,
		"SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_CONFIG":                3,
		"SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_PCEP_VIA_PCE":          10,
		"SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY_VIA_PCE": 20,
		"SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_PCE":        30,
	}
)

func (x SLBgplsTopoSrPolicyProtocolOrigin) Enum() *SLBgplsTopoSrPolicyProtocolOrigin {
	p := new(SLBgplsTopoSrPolicyProtocolOrigin)
	*p = x
	return p
}

func (x SLBgplsTopoSrPolicyProtocolOrigin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoSrPolicyProtocolOrigin) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgpls_topology_proto_enumTypes[5].Descriptor()
}

func (SLBgplsTopoSrPolicyProtocolOrigin) Type() protoreflect.EnumType {
	return &file_sl_bgpls_topology_proto_enumTypes[5]
}

func (x SLBgplsTopoSrPolicyProtocolOrigin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoSrPolicyProtocolOrigin.Descriptor instead.
func (SLBgplsTopoSrPolicyProtocolOrigin) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{5}
}

type SLBgplsTopoErrorStatus_SLBgplsTopoErrno int32

const (
	// Success, no errors detected. 0x0.
	SLBgplsTopoErrorStatus_SL_BGPLS_TOPO_SUCCESS SLBgplsTopoErrorStatus_SLBgplsTopoErrno = 0
	// Client is not connected.
	// The client is expected to remain connected after init and version
	// validation, RPC calls can fail with this error code otherwise.
	// Refer to RPC SLGlobalInitNotif. 0x1
	SLBgplsTopoErrorStatus_SL_BGPLS_TOPO_NOT_CONNECTED SLBgplsTopoErrorStatus_SLBgplsTopoErrno = 1
	// Operation must be retried. 0x2
	SLBgplsTopoErrorStatus_SL_BGPLS_TOPO_EAGAIN SLBgplsTopoErrorStatus_SLBgplsTopoErrno = 2
	// One or more components does not have sufficient memory. 0x3
	SLBgplsTopoErrorStatus_SL_BGPLS_TOPO_ENOMEM SLBgplsTopoErrorStatus_SLBgplsTopoErrno = 3
	// Too many outstanding requests. 0x4
	SLBgplsTopoErrorStatus_SL_BGPLS_TOPO_EBUSY SLBgplsTopoErrorStatus_SLBgplsTopoErrno = 4
	// One or more arguments are invalid. 0x5
	SLBgplsTopoErrorStatus_SL_BGPLS_TOPO_EINVAL SLBgplsTopoErrorStatus_SLBgplsTopoErrno = 5
	// Unsupported version. 0x6
	SLBgplsTopoErrorStatus_SL_BGPLS_TOPO_UNSUPPORTED_VER SLBgplsTopoErrorStatus_SLBgplsTopoErrno = 6
	// Not Available. 0x7
	SLBgplsTopoErrorStatus_SL_BGPLS_TOPO_NOT_AVAILABLE SLBgplsTopoErrorStatus_SLBgplsTopoErrno = 7
	// Stream mode not supported. 0x8
	SLBgplsTopoErrorStatus_SL_BGPLS_TOPO_STREAM_NOT_SUPPORTED SLBgplsTopoErrorStatus_SLBgplsTopoErrno = 8
	// Operation not supported. 0x9
	SLBgplsTopoErrorStatus_SL_BGPLS_TOPO_ENOTSUP SLBgplsTopoErrorStatus_SLBgplsTopoErrno = 9
	// One or more objects is errored:
	// Each object must be individually examined. 0xa
	SLBgplsTopoErrorStatus_SL_BGPLS_TOPO_SOME_ERR SLBgplsTopoErrorStatus_SLBgplsTopoErrno = 10
	// Operation Timed out.
	// The result of the operation is undeterministic (success or fail). 0xb
	SLBgplsTopoErrorStatus_SL_BGPLS_TOPO_TIMEOUT SLBgplsTopoErrorStatus_SLBgplsTopoErrno = 11
	// Due to some event, the client will no longer receive updates
	// on this channel. 0xc
	// Such events include:
	// - Session was hijacked by another client.
	SLBgplsTopoErrorStatus_SL_BGPLS_TOPO_NOTIF_TERM SLBgplsTopoErrorStatus_SLBgplsTopoErrno = 12
	// Authentication failure.
	// Incorrect credentials passed in by RPC. 0xd
	SLBgplsTopoErrorStatus_SL_BGPLS_TOPO_AUTH_FAIL SLBgplsTopoErrorStatus_SLBgplsTopoErrno = 13
	// Offset for INIT errors. 0x500
	SLBgplsTopoErrorStatus_SL_BGPLS_TOPO_INIT_START_OFFSET SLBgplsTopoErrorStatus_SLBgplsTopoErrno = 1280
	// Success, no errors detected - clear state.
	// This error is returned on the first-ever initialization, or,
	// when a fatal event has occured and all previous state was lost. 0x501
	SLBgplsTopoErrorStatus_SL_BGPLS_TOPO_INIT_STATE_CLEAR SLBgplsTopoErrorStatus_SLBgplsTopoErrno = 1281
	// Success, no errors detected - previous state is recovered.
	// This error is returned on a client re-initialization with
	// successful recovery of state. Note that any unacknowledged
	// data previously sent should be considered lost. 0x502
	SLBgplsTopoErrorStatus_SL_BGPLS_TOPO_INIT_STATE_READY SLBgplsTopoErrorStatus_SLBgplsTopoErrno = 1282
	// Server software incompatible with client software version. 0x503
	SLBgplsTopoErrorStatus_SL_BGPLS_TOPO_INIT_UNSUPPORTED_VER SLBgplsTopoErrorStatus_SLBgplsTopoErrno = 1283
	// Initialization request received while server is not ready. 0x504
	SLBgplsTopoErrorStatus_SL_BGPLS_TOPO_INIT_SERVER_NOT_INITIALIZED SLBgplsTopoErrorStatus_SLBgplsTopoErrno = 1284
	// Server operational mode change from stream to non-stream
	// or vice-versa failed. 0x505
	SLBgplsTopoErrorStatus_SL_BGPLS_TOPO_INIT_SERVER_MODE_CHANGE_FAILED SLBgplsTopoErrorStatus_SLBgplsTopoErrno = 1285
	// Offset for Internal errors. 0x100000
	SLBgplsTopoErrorStatus_SL_BGPLS_TOPO_INTERNAL_START_OFFSET SLBgplsTopoErrorStatus_SLBgplsTopoErrno = 1048576
)

// Enum value maps for SLBgplsTopoErrorStatus_SLBgplsTopoErrno.
var (
	SLBgplsTopoErrorStatus_SLBgplsTopoErrno_name = map[int32]string{
		0:       "SL_BGPLS_TOPO_SUCCESS",
		1:       "SL_BGPLS_TOPO_NOT_CONNECTED",
		2:       "SL_BGPLS_TOPO_EAGAIN",
		3:       "SL_BGPLS_TOPO_ENOMEM",
		4:       "SL_BGPLS_TOPO_EBUSY",
		5:       "SL_BGPLS_TOPO_EINVAL",
		6:       "SL_BGPLS_TOPO_UNSUPPORTED_VER",
		7:       "SL_BGPLS_TOPO_NOT_AVAILABLE",
		8:       "SL_BGPLS_TOPO_STREAM_NOT_SUPPORTED",
		9:       "SL_BGPLS_TOPO_ENOTSUP",
		10:      "SL_BGPLS_TOPO_SOME_ERR",
		11:      "SL_BGPLS_TOPO_TIMEOUT",
		12:      "SL_BGPLS_TOPO_NOTIF_TERM",
		13:      "SL_BGPLS_TOPO_AUTH_FAIL",
		1280:    "SL_BGPLS_TOPO_INIT_START_OFFSET",
		1281:    "SL_BGPLS_TOPO_INIT_STATE_CLEAR",
		1282:    "SL_BGPLS_TOPO_INIT_STATE_READY",
		1283:    "SL_BGPLS_TOPO_INIT_UNSUPPORTED_VER",
		1284:    "SL_BGPLS_TOPO_INIT_SERVER_NOT_INITIALIZED",
		1285:    "SL_BGPLS_TOPO_INIT_SERVER_MODE_CHANGE_FAILED",
		1048576: "SL_BGPLS_TOPO_INTERNAL_START_OFFSET",
	}
	SLBgplsTopoErrorStatus_SLBgplsTopoErrno_value = map[string]int32{
		"SL_BGPLS_TOPO_SUCCESS":                        0,
		"SL_BGPLS_TOPO_NOT_CONNECTED":                  1,
		"SL_BGPLS_TOPO_EAGAIN":                         2,
		"SL_BGPLS_TOPO_ENOMEM":                         3,
		"SL_BGPLS_TOPO_EBUSY":                          4,
		"SL_BGPLS_TOPO_EINVAL":                         5,
		"SL_BGPLS_TOPO_UNSUPPORTED_VER":                6,
		"SL_BGPLS_TOPO_NOT_AVAILABLE":                  7,
		"SL_BGPLS_TOPO_STREAM_NOT_SUPPORTED":           8,
		"SL_BGPLS_TOPO_ENOTSUP":                        9,
		"SL_BGPLS_TOPO_SOME_ERR":                       10,
		"SL_BGPLS_TOPO_TIMEOUT":                        11,
		"SL_BGPLS_TOPO_NOTIF_TERM":                     12,
		"SL_BGPLS_TOPO_AUTH_FAIL":                      13,
		"SL_BGPLS_TOPO_INIT_START_OFFSET":              1280,
		"SL_BGPLS_TOPO_INIT_STATE_CLEAR":               1281,
		"SL_BGPLS_TOPO_INIT_STATE_READY":               1282,
		"SL_BGPLS_TOPO_INIT_UNSUPPORTED_VER":           1283,
		"SL_BGPLS_TOPO_INIT_SERVER_NOT_INITIALIZED":    1284,
		"SL_BGPLS_TOPO_INIT_SERVER_MODE_CHANGE_FAILED": 1285,
		"SL_BGPLS_TOPO_INTERNAL_START_OFFSET":          1048576,
	}
)

func (x SLBgplsTopoErrorStatus_SLBgplsTopoErrno) Enum() *SLBgplsTopoErrorStatus_SLBgplsTopoErrno {
	p := new(SLBgplsTopoErrorStatus_SLBgplsTopoErrno)
	*p = x
	return p
}

func (x SLBgplsTopoErrorStatus_SLBgplsTopoErrno) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoErrorStatus_SLBgplsTopoErrno) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_bgpls_topology_proto_enumTypes[6].Descriptor()
}

func (SLBgplsTopoErrorStatus_SLBgplsTopoErrno) Type() protoreflect.EnumType {
	return &file_sl_bgpls_topology_proto_enumTypes[6]
}

func (x SLBgplsTopoErrorStatus_SLBgplsTopoErrno) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoErrorStatus_SLBgplsTopoErrno.Descriptor instead.
func (SLBgplsTopoErrorStatus_SLBgplsTopoErrno) EnumDescriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{3, 0}
}

// BGP-LS Topology Get Update message
type SLBgplsTopoGetUpdMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filters for BGP-LS Topology Entries
	// TODO: Add description on how filters will be used.
	Filter []*SLBgplsTopoNlriFilter `protobuf:"bytes,1,rep,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *SLBgplsTopoGetUpdMsg) Reset() {
	*x = SLBgplsTopoGetUpdMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoGetUpdMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoGetUpdMsg) ProtoMessage() {}

func (x *SLBgplsTopoGetUpdMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoGetUpdMsg.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoGetUpdMsg) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{0}
}

func (x *SLBgplsTopoGetUpdMsg) GetFilter() []*SLBgplsTopoNlriFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type SLBgplsTopoNlriFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of Link-State NLRI
	// NLRI Type.
	// Section 5.2 of [RFC 9552]
	NlriType SLBgplsTopoNlriType `protobuf:"varint,1,opt,name=NlriType,proto3,enum=service_layer.SLBgplsTopoNlriType" json:"NlriType,omitempty"`
	// Protocol originating the Link-State NLRI
	// Protocol-ID.
	// Section 5.2 of [RFC 9552]
	Protocol SLBgplsTopoProtocol `protobuf:"varint,2,opt,name=Protocol,proto3,enum=service_layer.SLBgplsTopoProtocol" json:"Protocol,omitempty"`
	// IGP routing domain to which the Link-State NLRI belongs.
	// Identifier.
	// Section 5.2 of [RFC 9552]
	Identifier uint64 `protobuf:"varint,3,opt,name=Identifier,proto3" json:"Identifier,omitempty"`
}

func (x *SLBgplsTopoNlriFilter) Reset() {
	*x = SLBgplsTopoNlriFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoNlriFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoNlriFilter) ProtoMessage() {}

func (x *SLBgplsTopoNlriFilter) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoNlriFilter.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoNlriFilter) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{1}
}

func (x *SLBgplsTopoNlriFilter) GetNlriType() SLBgplsTopoNlriType {
	if x != nil {
		return x.NlriType
	}
	return SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_RESERVED
}

func (x *SLBgplsTopoNlriFilter) GetProtocol() SLBgplsTopoProtocol {
	if x != nil {
		return x.Protocol
	}
	return SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_RESERVED
}

func (x *SLBgplsTopoNlriFilter) GetIdentifier() uint64 {
	if x != nil {
		return x.Identifier
	}
	return 0
}

// BGP-LS Topology Update message
type SLBgplsTopoUpdMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Update Type
	UpdType SLBgplsTopoUpdType `protobuf:"varint,1,opt,name=UpdType,proto3,enum=service_layer.SLBgplsTopoUpdType" json:"UpdType,omitempty"`
	// Further info based on UpdType
	//
	// Types that are assignable to Update:
	//
	//	*SLBgplsTopoUpdMsg_ErrStatus
	//	*SLBgplsTopoUpdMsg_Data
	Update isSLBgplsTopoUpdMsg_Update `protobuf_oneof:"Update"`
}

func (x *SLBgplsTopoUpdMsg) Reset() {
	*x = SLBgplsTopoUpdMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoUpdMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoUpdMsg) ProtoMessage() {}

func (x *SLBgplsTopoUpdMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoUpdMsg.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoUpdMsg) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{2}
}

func (x *SLBgplsTopoUpdMsg) GetUpdType() SLBgplsTopoUpdType {
	if x != nil {
		return x.UpdType
	}
	return SLBgplsTopoUpdType_SL_BGPLS_TOPO_UPD_TYPE_RESERVED
}

func (m *SLBgplsTopoUpdMsg) GetUpdate() isSLBgplsTopoUpdMsg_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *SLBgplsTopoUpdMsg) GetErrStatus() *SLBgplsTopoErrorStatus {
	if x, ok := x.GetUpdate().(*SLBgplsTopoUpdMsg_ErrStatus); ok {
		return x.ErrStatus
	}
	return nil
}

func (x *SLBgplsTopoUpdMsg) GetData() *SLBgplsTopoUpd {
	if x, ok := x.GetUpdate().(*SLBgplsTopoUpdMsg_Data); ok {
		return x.Data
	}
	return nil
}

type isSLBgplsTopoUpdMsg_Update interface {
	isSLBgplsTopoUpdMsg_Update()
}

type SLBgplsTopoUpdMsg_ErrStatus struct {
	// case UpdType == SL_BGPLS_TOPO_UPD_TYPE_ERROR:
	//
	//	=> This field carries error info, if any error occurs during
	//	   stream setup.
	ErrStatus *SLBgplsTopoErrorStatus `protobuf:"bytes,2,opt,name=ErrStatus,proto3,oneof"`
}

type SLBgplsTopoUpdMsg_Data struct {
	// case UpdType == SL_BGPLS_TOPO_UPD_TYPE_DATA:
	//
	//	=> This field carries the BGP-LS Topology data
	Data *SLBgplsTopoUpd `protobuf:"bytes,3,opt,name=Data,proto3,oneof"`
}

func (*SLBgplsTopoUpdMsg_ErrStatus) isSLBgplsTopoUpdMsg_Update() {}

func (*SLBgplsTopoUpdMsg_Data) isSLBgplsTopoUpdMsg_Update() {}

// TODO: Check with SL API team. Can we use SL API errors?
// Status codes, including errors and success codes.
// All BGP-LS Topology errors are defined below.
type SLBgplsTopoErrorStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status SLBgplsTopoErrorStatus_SLBgplsTopoErrno `protobuf:"varint,1,opt,name=Status,proto3,enum=service_layer.SLBgplsTopoErrorStatus_SLBgplsTopoErrno" json:"Status,omitempty"`
}

func (x *SLBgplsTopoErrorStatus) Reset() {
	*x = SLBgplsTopoErrorStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoErrorStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoErrorStatus) ProtoMessage() {}

func (x *SLBgplsTopoErrorStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoErrorStatus.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoErrorStatus) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{3}
}

func (x *SLBgplsTopoErrorStatus) GetStatus() SLBgplsTopoErrorStatus_SLBgplsTopoErrno {
	if x != nil {
		return x.Status
	}
	return SLBgplsTopoErrorStatus_SL_BGPLS_TOPO_SUCCESS
}

// BGP-LS Topology Updates
type SLBgplsTopoUpd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BGP-LS Topology Entries
	Entries []*SLBgplsTopoEntry `protobuf:"bytes,1,rep,name=Entries,proto3" json:"Entries,omitempty"`
}

func (x *SLBgplsTopoUpd) Reset() {
	*x = SLBgplsTopoUpd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoUpd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoUpd) ProtoMessage() {}

func (x *SLBgplsTopoUpd) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoUpd.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoUpd) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{4}
}

func (x *SLBgplsTopoUpd) GetEntries() []*SLBgplsTopoEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// BGP-LS Topology Entry
type SLBgplsTopoEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation SLBgplsTopoOperation `protobuf:"varint,1,opt,name=Operation,proto3,enum=service_layer.SLBgplsTopoOperation" json:"Operation,omitempty"`
	Nlri      *SLBgplsTopoNlri     `protobuf:"bytes,2,opt,name=Nlri,proto3" json:"Nlri,omitempty"`
	Attr      *SLBgplsTopoAttr     `protobuf:"bytes,3,opt,name=Attr,proto3" json:"Attr,omitempty"`
}

func (x *SLBgplsTopoEntry) Reset() {
	*x = SLBgplsTopoEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoEntry) ProtoMessage() {}

func (x *SLBgplsTopoEntry) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoEntry.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoEntry) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{5}
}

func (x *SLBgplsTopoEntry) GetOperation() SLBgplsTopoOperation {
	if x != nil {
		return x.Operation
	}
	return SLBgplsTopoOperation_SL_BGPLS_TOPO_OPERATION_RESERVED
}

func (x *SLBgplsTopoEntry) GetNlri() *SLBgplsTopoNlri {
	if x != nil {
		return x.Nlri
	}
	return nil
}

func (x *SLBgplsTopoEntry) GetAttr() *SLBgplsTopoAttr {
	if x != nil {
		return x.Attr
	}
	return nil
}

// NLRI
type SLBgplsTopoNlri struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of Link-State NLRI
	// NLRI Type.
	// Section 5.2 of [RFC 9552]
	NlriType SLBgplsTopoNlriType `protobuf:"varint,1,opt,name=NlriType,proto3,enum=service_layer.SLBgplsTopoNlriType" json:"NlriType,omitempty"`
	// Protocol originating the Link-State NLRI
	// Protocol-ID.
	// Section 5.2 of [RFC 9552]
	Protocol SLBgplsTopoProtocol `protobuf:"varint,2,opt,name=Protocol,proto3,enum=service_layer.SLBgplsTopoProtocol" json:"Protocol,omitempty"`
	// IGP routing domain to which the Link-State NLRI belongs.
	// Identifier.
	// Section 5.2 of [RFC 9552]
	Identifier uint64 `protobuf:"varint,3,opt,name=Identifier,proto3" json:"Identifier,omitempty"`
	// NLRI
	//
	// Types that are assignable to Nlri:
	//
	//	*SLBgplsTopoNlri_Node
	//	*SLBgplsTopoNlri_Link
	//	*SLBgplsTopoNlri_Prefix
	//	*SLBgplsTopoNlri_Srv6Sid
	//	*SLBgplsTopoNlri_SrPolicy
	Nlri isSLBgplsTopoNlri_Nlri `protobuf_oneof:"Nlri"`
}

func (x *SLBgplsTopoNlri) Reset() {
	*x = SLBgplsTopoNlri{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoNlri) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoNlri) ProtoMessage() {}

func (x *SLBgplsTopoNlri) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoNlri.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoNlri) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{6}
}

func (x *SLBgplsTopoNlri) GetNlriType() SLBgplsTopoNlriType {
	if x != nil {
		return x.NlriType
	}
	return SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_RESERVED
}

func (x *SLBgplsTopoNlri) GetProtocol() SLBgplsTopoProtocol {
	if x != nil {
		return x.Protocol
	}
	return SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_RESERVED
}

func (x *SLBgplsTopoNlri) GetIdentifier() uint64 {
	if x != nil {
		return x.Identifier
	}
	return 0
}

func (m *SLBgplsTopoNlri) GetNlri() isSLBgplsTopoNlri_Nlri {
	if m != nil {
		return m.Nlri
	}
	return nil
}

func (x *SLBgplsTopoNlri) GetNode() *SLBgplsTopoNode {
	if x, ok := x.GetNlri().(*SLBgplsTopoNlri_Node); ok {
		return x.Node
	}
	return nil
}

func (x *SLBgplsTopoNlri) GetLink() *SLBgplsTopoLink {
	if x, ok := x.GetNlri().(*SLBgplsTopoNlri_Link); ok {
		return x.Link
	}
	return nil
}

func (x *SLBgplsTopoNlri) GetPrefix() *SLBgplsTopoPrefix {
	if x, ok := x.GetNlri().(*SLBgplsTopoNlri_Prefix); ok {
		return x.Prefix
	}
	return nil
}

func (x *SLBgplsTopoNlri) GetSrv6Sid() *SLBgplsTopoSrv6Sid {
	if x, ok := x.GetNlri().(*SLBgplsTopoNlri_Srv6Sid); ok {
		return x.Srv6Sid
	}
	return nil
}

func (x *SLBgplsTopoNlri) GetSrPolicy() *SLBgplsTopoSrPolicy {
	if x, ok := x.GetNlri().(*SLBgplsTopoNlri_SrPolicy); ok {
		return x.SrPolicy
	}
	return nil
}

type isSLBgplsTopoNlri_Nlri interface {
	isSLBgplsTopoNlri_Nlri()
}

type SLBgplsTopoNlri_Node struct {
	Node *SLBgplsTopoNode `protobuf:"bytes,4,opt,name=Node,proto3,oneof"`
}

type SLBgplsTopoNlri_Link struct {
	Link *SLBgplsTopoLink `protobuf:"bytes,5,opt,name=Link,proto3,oneof"`
}

type SLBgplsTopoNlri_Prefix struct {
	Prefix *SLBgplsTopoPrefix `protobuf:"bytes,6,opt,name=Prefix,proto3,oneof"`
}

type SLBgplsTopoNlri_Srv6Sid struct {
	Srv6Sid *SLBgplsTopoSrv6Sid `protobuf:"bytes,7,opt,name=Srv6Sid,proto3,oneof"`
}

type SLBgplsTopoNlri_SrPolicy struct {
	SrPolicy *SLBgplsTopoSrPolicy `protobuf:"bytes,8,opt,name=SrPolicy,proto3,oneof"`
}

func (*SLBgplsTopoNlri_Node) isSLBgplsTopoNlri_Nlri() {}

func (*SLBgplsTopoNlri_Link) isSLBgplsTopoNlri_Nlri() {}

func (*SLBgplsTopoNlri_Prefix) isSLBgplsTopoNlri_Nlri() {}

func (*SLBgplsTopoNlri_Srv6Sid) isSLBgplsTopoNlri_Nlri() {}

func (*SLBgplsTopoNlri_SrPolicy) isSLBgplsTopoNlri_Nlri() {}

// Node
type SLBgplsTopoNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node Descriptors for a node.
	// Local Node Descriptors. TLV 256.
	// Section 5.2.1.2 of [RFC 9552]
	Node *SLBgplsTopoNodeDescr `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node,omitempty"`
}

func (x *SLBgplsTopoNode) Reset() {
	*x = SLBgplsTopoNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoNode) ProtoMessage() {}

func (x *SLBgplsTopoNode) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoNode.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoNode) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{7}
}

func (x *SLBgplsTopoNode) GetNode() *SLBgplsTopoNodeDescr {
	if x != nil {
		return x.Node
	}
	return nil
}

// Link
type SLBgplsTopoLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node Descriptors for the node anchoring the local end of the link.
	// Local Node Descriptors. TLV 256.
	// Section 5.2.1.2 of [RFC 9552]
	LocalNode *SLBgplsTopoNodeDescr `protobuf:"bytes,1,opt,name=LocalNode,proto3" json:"LocalNode,omitempty"`
	// Node Descriptors for the node anchoring the remote end of the link.
	// Remote Node Descriptors. TLV 257.
	// Section 5.2.1.3 of [RFC 9552]
	RemoteNode *SLBgplsTopoNodeDescr `protobuf:"bytes,2,opt,name=RemoteNode,proto3" json:"RemoteNode,omitempty"`
	// The Link Descriptor TLVs uniquely identify a link among multiple parallel
	// links between a pair of anchor routers.
	// Section 5.2.2 of [RFC 9552]
	Link *SLBgplsTopoLinkDescr `protobuf:"bytes,3,opt,name=Link,proto3" json:"Link,omitempty"`
}

func (x *SLBgplsTopoLink) Reset() {
	*x = SLBgplsTopoLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoLink) ProtoMessage() {}

func (x *SLBgplsTopoLink) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoLink.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoLink) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{8}
}

func (x *SLBgplsTopoLink) GetLocalNode() *SLBgplsTopoNodeDescr {
	if x != nil {
		return x.LocalNode
	}
	return nil
}

func (x *SLBgplsTopoLink) GetRemoteNode() *SLBgplsTopoNodeDescr {
	if x != nil {
		return x.RemoteNode
	}
	return nil
}

func (x *SLBgplsTopoLink) GetLink() *SLBgplsTopoLinkDescr {
	if x != nil {
		return x.Link
	}
	return nil
}

// Prefix
type SLBgplsTopoPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node Descriptors for the node originating the prefix.
	// Local Node Descriptors. TLV 256.
	// Section 5.2.1.2 of [RFC 9552]
	Node *SLBgplsTopoNodeDescr `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node,omitempty"`
	// Prefix Descriptor TLVs uniquely identify an IPv4 or IPv6 prefix
	// originated by a node.
	// Section 5.2.3 of [RFC 9552]
	Prefix *SLBgplsTopoPrefixDescr `protobuf:"bytes,2,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
}

func (x *SLBgplsTopoPrefix) Reset() {
	*x = SLBgplsTopoPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoPrefix) ProtoMessage() {}

func (x *SLBgplsTopoPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoPrefix.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoPrefix) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{9}
}

func (x *SLBgplsTopoPrefix) GetNode() *SLBgplsTopoNodeDescr {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *SLBgplsTopoPrefix) GetPrefix() *SLBgplsTopoPrefixDescr {
	if x != nil {
		return x.Prefix
	}
	return nil
}

// SRv6 SID
type SLBgplsTopoSrv6Sid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node Descriptors for the node originating the SRv6 SID.
	// Local Node Descriptors. TLV 256.
	// Section 5.2.1.2 of [RFC 9552]
	Node    *SLBgplsTopoNodeDescr    `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node,omitempty"`
	Srv6Sid *SLBgplsTopoSrv6SidDescr `protobuf:"bytes,2,opt,name=Srv6Sid,proto3" json:"Srv6Sid,omitempty"`
}

func (x *SLBgplsTopoSrv6Sid) Reset() {
	*x = SLBgplsTopoSrv6Sid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrv6Sid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrv6Sid) ProtoMessage() {}

func (x *SLBgplsTopoSrv6Sid) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrv6Sid.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrv6Sid) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{10}
}

func (x *SLBgplsTopoSrv6Sid) GetNode() *SLBgplsTopoNodeDescr {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *SLBgplsTopoSrv6Sid) GetSrv6Sid() *SLBgplsTopoSrv6SidDescr {
	if x != nil {
		return x.Srv6Sid
	}
	return nil
}

// SR Policy
type SLBgplsTopoSrPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node Descriptors for the node originating the SR policy.
	// Local Node Descriptors. TLV 256.
	// Section 5.2.1.2 of [RFC 9552]
	Node *SLBgplsTopoNodeDescr `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node,omitempty"`
	// A Segment Routing Policy Candidate Path.
	// SR Policy Candidate Path Descriptor. TLV 554.
	// Section 4 of [draft-ietf-idr-bgp-ls-sr-policy]
	SrPolicy *SLBgplsTopoSrPolicyDescr `protobuf:"bytes,2,opt,name=SrPolicy,proto3" json:"SrPolicy,omitempty"`
}

func (x *SLBgplsTopoSrPolicy) Reset() {
	*x = SLBgplsTopoSrPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrPolicy) ProtoMessage() {}

func (x *SLBgplsTopoSrPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrPolicy.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrPolicy) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{11}
}

func (x *SLBgplsTopoSrPolicy) GetNode() *SLBgplsTopoNodeDescr {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *SLBgplsTopoSrPolicy) GetSrPolicy() *SLBgplsTopoSrPolicyDescr {
	if x != nil {
		return x.SrPolicy
	}
	return nil
}

// Node descriptor
type SLBgplsTopoNodeDescr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AS Number associated with the BGP process originating the link-state information.
	// Autonomous System Number. TLV 512.
	// Section 5.2.1 of [RFC 9552]
	Asn uint32 `protobuf:"varint,1,opt,name=Asn,proto3" json:"Asn,omitempty"`
	// Node Identifier
	// Actual type can be determined based on Protocol in SLBgplsTopoNlri.
	//
	// Types that are assignable to NodeId:
	//
	//	*SLBgplsTopoNodeDescr_OspfNodeId
	//	*SLBgplsTopoNodeDescr_Ospfv3NodeId
	//	*SLBgplsTopoNodeDescr_IsisNodeId
	//	*SLBgplsTopoNodeDescr_BgpNodeId
	//	*SLBgplsTopoNodeDescr_SrPolicyNodeId
	NodeId isSLBgplsTopoNodeDescr_NodeId `protobuf_oneof:"NodeId"`
}

func (x *SLBgplsTopoNodeDescr) Reset() {
	*x = SLBgplsTopoNodeDescr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoNodeDescr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoNodeDescr) ProtoMessage() {}

func (x *SLBgplsTopoNodeDescr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoNodeDescr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoNodeDescr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{12}
}

func (x *SLBgplsTopoNodeDescr) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (m *SLBgplsTopoNodeDescr) GetNodeId() isSLBgplsTopoNodeDescr_NodeId {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (x *SLBgplsTopoNodeDescr) GetOspfNodeId() *SLBgplsTopoOspfNodeId {
	if x, ok := x.GetNodeId().(*SLBgplsTopoNodeDescr_OspfNodeId); ok {
		return x.OspfNodeId
	}
	return nil
}

func (x *SLBgplsTopoNodeDescr) GetOspfv3NodeId() *SLBgplsTopoOspfv3NodeId {
	if x, ok := x.GetNodeId().(*SLBgplsTopoNodeDescr_Ospfv3NodeId); ok {
		return x.Ospfv3NodeId
	}
	return nil
}

func (x *SLBgplsTopoNodeDescr) GetIsisNodeId() *SLBgplsTopoIsisNodeId {
	if x, ok := x.GetNodeId().(*SLBgplsTopoNodeDescr_IsisNodeId); ok {
		return x.IsisNodeId
	}
	return nil
}

func (x *SLBgplsTopoNodeDescr) GetBgpNodeId() *SLBgplsTopoBgpNodeId {
	if x, ok := x.GetNodeId().(*SLBgplsTopoNodeDescr_BgpNodeId); ok {
		return x.BgpNodeId
	}
	return nil
}

func (x *SLBgplsTopoNodeDescr) GetSrPolicyNodeId() *SLBgplsTopoSrPolicyNodeId {
	if x, ok := x.GetNodeId().(*SLBgplsTopoNodeDescr_SrPolicyNodeId); ok {
		return x.SrPolicyNodeId
	}
	return nil
}

type isSLBgplsTopoNodeDescr_NodeId interface {
	isSLBgplsTopoNodeDescr_NodeId()
}

type SLBgplsTopoNodeDescr_OspfNodeId struct {
	OspfNodeId *SLBgplsTopoOspfNodeId `protobuf:"bytes,2,opt,name=OspfNodeId,proto3,oneof"`
}

type SLBgplsTopoNodeDescr_Ospfv3NodeId struct {
	Ospfv3NodeId *SLBgplsTopoOspfv3NodeId `protobuf:"bytes,3,opt,name=Ospfv3NodeId,proto3,oneof"`
}

type SLBgplsTopoNodeDescr_IsisNodeId struct {
	IsisNodeId *SLBgplsTopoIsisNodeId `protobuf:"bytes,4,opt,name=IsisNodeId,proto3,oneof"`
}

type SLBgplsTopoNodeDescr_BgpNodeId struct {
	BgpNodeId *SLBgplsTopoBgpNodeId `protobuf:"bytes,5,opt,name=BgpNodeId,proto3,oneof"`
}

type SLBgplsTopoNodeDescr_SrPolicyNodeId struct {
	SrPolicyNodeId *SLBgplsTopoSrPolicyNodeId `protobuf:"bytes,6,opt,name=SrPolicyNodeId,proto3,oneof"`
}

func (*SLBgplsTopoNodeDescr_OspfNodeId) isSLBgplsTopoNodeDescr_NodeId() {}

func (*SLBgplsTopoNodeDescr_Ospfv3NodeId) isSLBgplsTopoNodeDescr_NodeId() {}

func (*SLBgplsTopoNodeDescr_IsisNodeId) isSLBgplsTopoNodeDescr_NodeId() {}

func (*SLBgplsTopoNodeDescr_BgpNodeId) isSLBgplsTopoNodeDescr_NodeId() {}

func (*SLBgplsTopoNodeDescr_SrPolicyNodeId) isSLBgplsTopoNodeDescr_NodeId() {}

// Link descriptor
type SLBgplsTopoLinkDescr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Local Identifier of a link.
	// Link Local/Remote Identifier. TLV 258.
	// Section 5.2.2 of [RFC 9552]
	LocalId uint32 `protobuf:"varint,1,opt,name=LocalId,proto3" json:"LocalId,omitempty"`
	// Remote Identifier of a link.
	// Link Local/Remote Identifier. TLV 258.
	// Section 5.2.2 of [RFC 9552]
	RemoteId uint32 `protobuf:"varint,2,opt,name=RemoteId,proto3" json:"RemoteId,omitempty"`
	// Local IPv4 address of a link.
	// IPv4 interface address. TLV 259.
	// Section 5.2.2 of [RFC 9552]
	LocalIpv4 uint32 `protobuf:"varint,3,opt,name=LocalIpv4,proto3" json:"LocalIpv4,omitempty"`
	// Remote IPv4 address of a link.
	// IPv4 neighbor address. TLV 260.
	// Section 5.2.2 of [RFC 9552]
	RemoteIpv4 uint32 `protobuf:"varint,4,opt,name=RemoteIpv4,proto3" json:"RemoteIpv4,omitempty"`
	// Local IPv6 address of a link.
	// IPv6 interface address. TLV 261.
	// Section 5.2.2 of [RFC 9552]
	LocalIpv6 []byte `protobuf:"bytes,5,opt,name=LocalIpv6,proto3" json:"LocalIpv6,omitempty"`
	// Remote IPv6 address of a link.
	// IPv6 neighbor address. TLV 262.
	// Section 5.2.2 of [RFC 9552]
	RemoteIpv6 []byte `protobuf:"bytes,6,opt,name=RemoteIpv6,proto3" json:"RemoteIpv6,omitempty"`
	// Multi Topology Identifier (MTID) of a link.
	// Multi-Topology Identifier. TLV 263.
	// Section 5.2.2.1 of [RFC 9552]
	MtId uint32 `protobuf:"varint,7,opt,name=MtId,proto3" json:"MtId,omitempty"`
}

func (x *SLBgplsTopoLinkDescr) Reset() {
	*x = SLBgplsTopoLinkDescr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoLinkDescr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoLinkDescr) ProtoMessage() {}

func (x *SLBgplsTopoLinkDescr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoLinkDescr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoLinkDescr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{13}
}

func (x *SLBgplsTopoLinkDescr) GetLocalId() uint32 {
	if x != nil {
		return x.LocalId
	}
	return 0
}

func (x *SLBgplsTopoLinkDescr) GetRemoteId() uint32 {
	if x != nil {
		return x.RemoteId
	}
	return 0
}

func (x *SLBgplsTopoLinkDescr) GetLocalIpv4() uint32 {
	if x != nil {
		return x.LocalIpv4
	}
	return 0
}

func (x *SLBgplsTopoLinkDescr) GetRemoteIpv4() uint32 {
	if x != nil {
		return x.RemoteIpv4
	}
	return 0
}

func (x *SLBgplsTopoLinkDescr) GetLocalIpv6() []byte {
	if x != nil {
		return x.LocalIpv6
	}
	return nil
}

func (x *SLBgplsTopoLinkDescr) GetRemoteIpv6() []byte {
	if x != nil {
		return x.RemoteIpv6
	}
	return nil
}

func (x *SLBgplsTopoLinkDescr) GetMtId() uint32 {
	if x != nil {
		return x.MtId
	}
	return 0
}

// Prefix descriptor
type SLBgplsTopoPrefixDescr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Multi Topology Identifier (MTID) of a prefix.
	// Multi-Topology Identifier. TLV 263.
	// Section 5.2.2.1 of [RFC 9552]
	MtId uint32 `protobuf:"varint,1,opt,name=MtId,proto3" json:"MtId,omitempty"`
	// OSPF Route type of a prefix.
	// OSPF Route Type. TLV 264.
	// Section 5.2.3.1 of [RFC 9552]
	OspfRouteType SLBgplsTopoOspfRouteType `protobuf:"varint,2,opt,name=OspfRouteType,proto3,enum=service_layer.SLBgplsTopoOspfRouteType" json:"OspfRouteType,omitempty"`
	// IP address prefix (IPv4 or IPv6) advertised in the IGP topology.
	// IP Reachability Information. TLV 265.
	// Section 5.2.3.2 of [RFC 9552]
	PrefixLength []byte `protobuf:"bytes,3,opt,name=PrefixLength,proto3" json:"PrefixLength,omitempty"`
	// IP address prefix (IPv4 or IPv6) advertised in the IGP topology.
	// IP Reachability Information. TLV 265.
	// Section 5.2.3.2 of [RFC 9552]
	Prefix []byte `protobuf:"bytes,4,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
}

func (x *SLBgplsTopoPrefixDescr) Reset() {
	*x = SLBgplsTopoPrefixDescr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoPrefixDescr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoPrefixDescr) ProtoMessage() {}

func (x *SLBgplsTopoPrefixDescr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoPrefixDescr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoPrefixDescr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{14}
}

func (x *SLBgplsTopoPrefixDescr) GetMtId() uint32 {
	if x != nil {
		return x.MtId
	}
	return 0
}

func (x *SLBgplsTopoPrefixDescr) GetOspfRouteType() SLBgplsTopoOspfRouteType {
	if x != nil {
		return x.OspfRouteType
	}
	return SLBgplsTopoOspfRouteType_SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_RESERVED
}

func (x *SLBgplsTopoPrefixDescr) GetPrefixLength() []byte {
	if x != nil {
		return x.PrefixLength
	}
	return nil
}

func (x *SLBgplsTopoPrefixDescr) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

// SRv6 SID descriptor
type SLBgplsTopoSrv6SidDescr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Multi Topology Identifier (MTID) of an SRv6 SID.
	// Multi-Topology Identifier. TLV 263.
	// Section 5.2.2.1 of [RFC 9552]
	MtId uint32 `protobuf:"varint,1,opt,name=MtId,proto3" json:"MtId,omitempty"`
	// An SRv6 SID that is associated with the node.
	// SRv6 SID Information. TLV 518. Section 6.1 of [RFC9514]
	Srv6Sid []byte `protobuf:"bytes,2,opt,name=Srv6Sid,proto3" json:"Srv6Sid,omitempty"`
}

func (x *SLBgplsTopoSrv6SidDescr) Reset() {
	*x = SLBgplsTopoSrv6SidDescr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrv6SidDescr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrv6SidDescr) ProtoMessage() {}

func (x *SLBgplsTopoSrv6SidDescr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrv6SidDescr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrv6SidDescr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{15}
}

func (x *SLBgplsTopoSrv6SidDescr) GetMtId() uint32 {
	if x != nil {
		return x.MtId
	}
	return 0
}

func (x *SLBgplsTopoSrv6SidDescr) GetSrv6Sid() []byte {
	if x != nil {
		return x.Srv6Sid
	}
	return nil
}

// SR Policy descriptor
type SLBgplsTopoSrPolicyDescr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Protocol instantiating the SR policy.
	// Protocol-origin. TLV 554.
	// Section 4 of [draft-ietf-idr-bgp-ls-sr-policy]
	ProtoOrigin SLBgplsTopoSrPolicyProtocolOrigin `protobuf:"varint,1,opt,name=ProtoOrigin,proto3,enum=service_layer.SLBgplsTopoSrPolicyProtocolOrigin" json:"ProtoOrigin,omitempty"`
	// Flags associated with the SR policy.
	// Flags. TLV 554.
	// Section 4 of [draft-ietf-idr-bgp-ls-sr-policy]
	Flags *SLBgplsTopoSrPolicyFlags `protobuf:"bytes,2,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Address of the endpoint of the SR Policy.
	// Endpoint. TLV 554.
	// Section 4 of [draft-ietf-idr-bgp-ls-sr-policy]
	//
	// Types that are assignable to EndpointAddress:
	//
	//	*SLBgplsTopoSrPolicyDescr_Ipv4EndpointAddress
	//	*SLBgplsTopoSrPolicyDescr_Ipv6EndpointAddress
	EndpointAddress isSLBgplsTopoSrPolicyDescr_EndpointAddress `protobuf_oneof:"EndpointAddress"`
	// Specifies whether the endpoint address is IPv6 or not.
	IsEndpointAddressIpv6 uint32 `protobuf:"varint,5,opt,name=IsEndpointAddressIpv6,proto3" json:"IsEndpointAddressIpv6,omitempty"`
	// Color of the SR Policy.
	// Policy Color. TLV 554.
	// Section 4 of [draft-ietf-idr-bgp-ls-sr-policy]
	Color uint32 `protobuf:"varint,6,opt,name=Color,proto3" json:"Color,omitempty"`
	// 4-byte encoding of the ASN of the originator.
	// Originator AS Number. TLV 554.
	// Section 4 of [draft-ietf-idr-bgp-ls-sr-policy]
	OriginAsn uint32 `protobuf:"varint,7,opt,name=OriginAsn,proto3" json:"OriginAsn,omitempty"`
	// Address of the originator.
	// Originator Address. TLV 554.
	// Section 4 of [draft-ietf-idr-bgp-ls-sr-policy]
	//
	// Types that are assignable to OriginatorAddress:
	//
	//	*SLBgplsTopoSrPolicyDescr_Ipv4OriginatorAddress
	//	*SLBgplsTopoSrPolicyDescr_Ipv6OriginatorAddress
	OriginatorAddress isSLBgplsTopoSrPolicyDescr_OriginatorAddress `protobuf_oneof:"OriginatorAddress"`
	// Specifies whether the originator address is IPv6 or not.
	IsOriginatorAddressIpv6 uint32 `protobuf:"varint,10,opt,name=IsOriginatorAddressIpv6,proto3" json:"IsOriginatorAddressIpv6,omitempty"`
	// Discriminator of the path.
	// Discriminator. TLV 554.
	// Section 4 of [draft-ietf-idr-bgp-ls-sr-policy]
	Discriminator uint32 `protobuf:"varint,11,opt,name=Discriminator,proto3" json:"Discriminator,omitempty"`
}

func (x *SLBgplsTopoSrPolicyDescr) Reset() {
	*x = SLBgplsTopoSrPolicyDescr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrPolicyDescr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrPolicyDescr) ProtoMessage() {}

func (x *SLBgplsTopoSrPolicyDescr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrPolicyDescr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrPolicyDescr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{16}
}

func (x *SLBgplsTopoSrPolicyDescr) GetProtoOrigin() SLBgplsTopoSrPolicyProtocolOrigin {
	if x != nil {
		return x.ProtoOrigin
	}
	return SLBgplsTopoSrPolicyProtocolOrigin_SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_RESERVED
}

func (x *SLBgplsTopoSrPolicyDescr) GetFlags() *SLBgplsTopoSrPolicyFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (m *SLBgplsTopoSrPolicyDescr) GetEndpointAddress() isSLBgplsTopoSrPolicyDescr_EndpointAddress {
	if m != nil {
		return m.EndpointAddress
	}
	return nil
}

func (x *SLBgplsTopoSrPolicyDescr) GetIpv4EndpointAddress() uint32 {
	if x, ok := x.GetEndpointAddress().(*SLBgplsTopoSrPolicyDescr_Ipv4EndpointAddress); ok {
		return x.Ipv4EndpointAddress
	}
	return 0
}

func (x *SLBgplsTopoSrPolicyDescr) GetIpv6EndpointAddress() []byte {
	if x, ok := x.GetEndpointAddress().(*SLBgplsTopoSrPolicyDescr_Ipv6EndpointAddress); ok {
		return x.Ipv6EndpointAddress
	}
	return nil
}

func (x *SLBgplsTopoSrPolicyDescr) GetIsEndpointAddressIpv6() uint32 {
	if x != nil {
		return x.IsEndpointAddressIpv6
	}
	return 0
}

func (x *SLBgplsTopoSrPolicyDescr) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *SLBgplsTopoSrPolicyDescr) GetOriginAsn() uint32 {
	if x != nil {
		return x.OriginAsn
	}
	return 0
}

func (m *SLBgplsTopoSrPolicyDescr) GetOriginatorAddress() isSLBgplsTopoSrPolicyDescr_OriginatorAddress {
	if m != nil {
		return m.OriginatorAddress
	}
	return nil
}

func (x *SLBgplsTopoSrPolicyDescr) GetIpv4OriginatorAddress() uint32 {
	if x, ok := x.GetOriginatorAddress().(*SLBgplsTopoSrPolicyDescr_Ipv4OriginatorAddress); ok {
		return x.Ipv4OriginatorAddress
	}
	return 0
}

func (x *SLBgplsTopoSrPolicyDescr) GetIpv6OriginatorAddress() []byte {
	if x, ok := x.GetOriginatorAddress().(*SLBgplsTopoSrPolicyDescr_Ipv6OriginatorAddress); ok {
		return x.Ipv6OriginatorAddress
	}
	return nil
}

func (x *SLBgplsTopoSrPolicyDescr) GetIsOriginatorAddressIpv6() uint32 {
	if x != nil {
		return x.IsOriginatorAddressIpv6
	}
	return 0
}

func (x *SLBgplsTopoSrPolicyDescr) GetDiscriminator() uint32 {
	if x != nil {
		return x.Discriminator
	}
	return 0
}

type isSLBgplsTopoSrPolicyDescr_EndpointAddress interface {
	isSLBgplsTopoSrPolicyDescr_EndpointAddress()
}

type SLBgplsTopoSrPolicyDescr_Ipv4EndpointAddress struct {
	Ipv4EndpointAddress uint32 `protobuf:"varint,3,opt,name=Ipv4EndpointAddress,proto3,oneof"`
}

type SLBgplsTopoSrPolicyDescr_Ipv6EndpointAddress struct {
	Ipv6EndpointAddress []byte `protobuf:"bytes,4,opt,name=Ipv6EndpointAddress,proto3,oneof"`
}

func (*SLBgplsTopoSrPolicyDescr_Ipv4EndpointAddress) isSLBgplsTopoSrPolicyDescr_EndpointAddress() {}

func (*SLBgplsTopoSrPolicyDescr_Ipv6EndpointAddress) isSLBgplsTopoSrPolicyDescr_EndpointAddress() {}

type isSLBgplsTopoSrPolicyDescr_OriginatorAddress interface {
	isSLBgplsTopoSrPolicyDescr_OriginatorAddress()
}

type SLBgplsTopoSrPolicyDescr_Ipv4OriginatorAddress struct {
	Ipv4OriginatorAddress uint32 `protobuf:"varint,8,opt,name=Ipv4OriginatorAddress,proto3,oneof"`
}

type SLBgplsTopoSrPolicyDescr_Ipv6OriginatorAddress struct {
	Ipv6OriginatorAddress []byte `protobuf:"bytes,9,opt,name=Ipv6OriginatorAddress,proto3,oneof"`
}

func (*SLBgplsTopoSrPolicyDescr_Ipv4OriginatorAddress) isSLBgplsTopoSrPolicyDescr_OriginatorAddress() {
}

func (*SLBgplsTopoSrPolicyDescr_Ipv6OriginatorAddress) isSLBgplsTopoSrPolicyDescr_OriginatorAddress() {
}

// OSPF Node ID
type SLBgplsTopoOspfNodeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Area identifier identifying the area to which the NLRI belongs.
	// OSPF Area-ID. TLV 514.
	// Section 5.2.1 of [RFC 9552]
	AreaId uint32 `protobuf:"varint,1,opt,name=AreaId,proto3" json:"AreaId,omitempty"`
	// Specifies whether the area identifier is set or not.
	// Area identifier will not be set for AS scoped prefixes.
	IsAsScoped uint32 `protobuf:"varint,2,opt,name=IsAsScoped,proto3" json:"IsAsScoped,omitempty"`
	// Router ID.
	// IGP Router-ID. TLV 515.
	// Section 5.2.1 of [RFC 9552]
	RouterId uint32 `protobuf:"varint,3,opt,name=RouterId,proto3" json:"RouterId,omitempty"`
	// IPv4 address of the DR's interface to the LAN.
	// IGP Router-ID. TLV 515.
	// Section 5.2.1 of [RFC 9552]
	DrIdentifier uint32 `protobuf:"varint,4,opt,name=DrIdentifier,proto3" json:"DrIdentifier,omitempty"`
}

func (x *SLBgplsTopoOspfNodeId) Reset() {
	*x = SLBgplsTopoOspfNodeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoOspfNodeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoOspfNodeId) ProtoMessage() {}

func (x *SLBgplsTopoOspfNodeId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoOspfNodeId.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoOspfNodeId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{17}
}

func (x *SLBgplsTopoOspfNodeId) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *SLBgplsTopoOspfNodeId) GetIsAsScoped() uint32 {
	if x != nil {
		return x.IsAsScoped
	}
	return 0
}

func (x *SLBgplsTopoOspfNodeId) GetRouterId() uint32 {
	if x != nil {
		return x.RouterId
	}
	return 0
}

func (x *SLBgplsTopoOspfNodeId) GetDrIdentifier() uint32 {
	if x != nil {
		return x.DrIdentifier
	}
	return 0
}

// OSPFv3 Node ID
type SLBgplsTopoOspfv3NodeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Area identifier identifying the area to which the NLRI belongs.
	// OSPF Area-ID. TLV 514.
	// Section 5.2.1 of [RFC 9552]
	AreaId uint32 `protobuf:"varint,1,opt,name=AreaId,proto3" json:"AreaId,omitempty"`
	// Specifies whether the area identifier is set or not.
	// Area identifier will not be set for AS scoped prefixes.
	AsScoped uint32 `protobuf:"varint,2,opt,name=AsScoped,proto3" json:"AsScoped,omitempty"`
	// Router ID.
	// IGP Router-ID. TLV 515.
	// Section 5.2.1 of [RFC 9552]
	RouterId uint32 `protobuf:"varint,3,opt,name=RouterId,proto3" json:"RouterId,omitempty"`
	// Interface identifier of the DR's interface to the LAN.
	// IGP Router-ID. TLV 515.
	// Section 5.2.1 of [RFC 9552]
	DrIdentifier uint32 `protobuf:"varint,4,opt,name=DrIdentifier,proto3" json:"DrIdentifier,omitempty"`
}

func (x *SLBgplsTopoOspfv3NodeId) Reset() {
	*x = SLBgplsTopoOspfv3NodeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoOspfv3NodeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoOspfv3NodeId) ProtoMessage() {}

func (x *SLBgplsTopoOspfv3NodeId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoOspfv3NodeId.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoOspfv3NodeId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{18}
}

func (x *SLBgplsTopoOspfv3NodeId) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *SLBgplsTopoOspfv3NodeId) GetAsScoped() uint32 {
	if x != nil {
		return x.AsScoped
	}
	return 0
}

func (x *SLBgplsTopoOspfv3NodeId) GetRouterId() uint32 {
	if x != nil {
		return x.RouterId
	}
	return 0
}

func (x *SLBgplsTopoOspfv3NodeId) GetDrIdentifier() uint32 {
	if x != nil {
		return x.DrIdentifier
	}
	return 0
}

// ISIS Node ID
type SLBgplsTopoIsisNodeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// System ID.
	// IGP Router-ID. TLV 515.
	// Section 5.2.1 of [RFC 9552]
	SystemId []byte `protobuf:"bytes,1,opt,name=SystemId,proto3" json:"SystemId,omitempty"`
	// Pseudo Node Identifier (PSN ID).
	// IGP Router-ID. TLV 515.
	// Section 5.2.1 of [RFC 9552]
	PsnId []byte `protobuf:"bytes,2,opt,name=PsnId,proto3" json:"PsnId,omitempty"`
}

func (x *SLBgplsTopoIsisNodeId) Reset() {
	*x = SLBgplsTopoIsisNodeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoIsisNodeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoIsisNodeId) ProtoMessage() {}

func (x *SLBgplsTopoIsisNodeId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoIsisNodeId.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoIsisNodeId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{19}
}

func (x *SLBgplsTopoIsisNodeId) GetSystemId() []byte {
	if x != nil {
		return x.SystemId
	}
	return nil
}

func (x *SLBgplsTopoIsisNodeId) GetPsnId() []byte {
	if x != nil {
		return x.PsnId
	}
	return nil
}

// BGP Node ID
type SLBgplsTopoBgpNodeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Router ID.
	// BGP Router-ID. TLV 516.
	// Section 4.2 of [RFC9086]
	RouterId uint32 `protobuf:"varint,1,opt,name=RouterId,proto3" json:"RouterId,omitempty"`
	// ASN of the confederation member
	// Member-ASN. TLV 517.
	// Section 4.2 of [RFC9086]
	MemberAsn uint32 `protobuf:"varint,2,opt,name=MemberAsn,proto3" json:"MemberAsn,omitempty"`
}

func (x *SLBgplsTopoBgpNodeId) Reset() {
	*x = SLBgplsTopoBgpNodeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoBgpNodeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoBgpNodeId) ProtoMessage() {}

func (x *SLBgplsTopoBgpNodeId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoBgpNodeId.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoBgpNodeId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{20}
}

func (x *SLBgplsTopoBgpNodeId) GetRouterId() uint32 {
	if x != nil {
		return x.RouterId
	}
	return 0
}

func (x *SLBgplsTopoBgpNodeId) GetMemberAsn() uint32 {
	if x != nil {
		return x.MemberAsn
	}
	return 0
}

// SR Policy Node ID
// TODO: Confirm with Ketan
type SLBgplsTopoSrPolicyNodeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Router ID.
	// BGP Router-ID. TLV 516.
	// Section 4.2 of [RFC9086]
	RouterId uint32 `protobuf:"varint,1,opt,name=RouterId,proto3" json:"RouterId,omitempty"`
	// ASN of the confederation member
	// Member-ASN. TLV 517.
	// Section 4.2 of [RFC9086]
	MemberAsn uint32 `protobuf:"varint,2,opt,name=MemberAsn,proto3" json:"MemberAsn,omitempty"`
	// Auxiliary TE Router-ID.
	// IPv4 Router-ID. TLV 1028.
	// Section 5.2.1 of [RFC 9552]
	Ipv4RouterId uint32 `protobuf:"varint,3,opt,name=Ipv4RouterId,proto3" json:"Ipv4RouterId,omitempty"`
	// Auxiliary TE Router-ID.
	// IPv6 Router-ID. TLV 1029.
	// Section 5.2.1 of [RFC 9552]
	Ipv6RouterId []byte `protobuf:"bytes,4,opt,name=Ipv6RouterId,proto3" json:"Ipv6RouterId,omitempty"`
}

func (x *SLBgplsTopoSrPolicyNodeId) Reset() {
	*x = SLBgplsTopoSrPolicyNodeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrPolicyNodeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrPolicyNodeId) ProtoMessage() {}

func (x *SLBgplsTopoSrPolicyNodeId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrPolicyNodeId.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrPolicyNodeId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{21}
}

func (x *SLBgplsTopoSrPolicyNodeId) GetRouterId() uint32 {
	if x != nil {
		return x.RouterId
	}
	return 0
}

func (x *SLBgplsTopoSrPolicyNodeId) GetMemberAsn() uint32 {
	if x != nil {
		return x.MemberAsn
	}
	return 0
}

func (x *SLBgplsTopoSrPolicyNodeId) GetIpv4RouterId() uint32 {
	if x != nil {
		return x.Ipv4RouterId
	}
	return 0
}

func (x *SLBgplsTopoSrPolicyNodeId) GetIpv6RouterId() []byte {
	if x != nil {
		return x.Ipv6RouterId
	}
	return nil
}

// SR Policy flags
type SLBgplsTopoSrPolicyFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bit-0: E-Flag: Indicates the encoding of endpoint as IPv6 address when
	// set and IPv4 address when clear
	//
	// Bit-1: O-Flag: Indicates the encoding of originator address as IPv6
	// address when set and IPv4 address when clear
	Flags []byte `protobuf:"bytes,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *SLBgplsTopoSrPolicyFlags) Reset() {
	*x = SLBgplsTopoSrPolicyFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrPolicyFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrPolicyFlags) ProtoMessage() {}

func (x *SLBgplsTopoSrPolicyFlags) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrPolicyFlags.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrPolicyFlags) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{22}
}

func (x *SLBgplsTopoSrPolicyFlags) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

// Attributes
type SLBgplsTopoAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Attributes
	// Actual type can be determined based on NlriType in SLBgplsTopoNlri.
	//
	// Types that are assignable to Attr:
	//
	//	*SLBgplsTopoAttr_NodeAttr
	//	*SLBgplsTopoAttr_LinkAttr
	//	*SLBgplsTopoAttr_PrefixAttr
	//	*SLBgplsTopoAttr_Srv6SidAttr
	//	*SLBgplsTopoAttr_SrPolicyAttr
	Attr isSLBgplsTopoAttr_Attr `protobuf_oneof:"Attr"`
}

func (x *SLBgplsTopoAttr) Reset() {
	*x = SLBgplsTopoAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoAttr) ProtoMessage() {}

func (x *SLBgplsTopoAttr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoAttr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoAttr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{23}
}

func (m *SLBgplsTopoAttr) GetAttr() isSLBgplsTopoAttr_Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (x *SLBgplsTopoAttr) GetNodeAttr() *SLBgplsTopoNodeAttr {
	if x, ok := x.GetAttr().(*SLBgplsTopoAttr_NodeAttr); ok {
		return x.NodeAttr
	}
	return nil
}

func (x *SLBgplsTopoAttr) GetLinkAttr() *SLBgplsTopoLinkAttr {
	if x, ok := x.GetAttr().(*SLBgplsTopoAttr_LinkAttr); ok {
		return x.LinkAttr
	}
	return nil
}

func (x *SLBgplsTopoAttr) GetPrefixAttr() *SLBgplsTopoPrefixAttr {
	if x, ok := x.GetAttr().(*SLBgplsTopoAttr_PrefixAttr); ok {
		return x.PrefixAttr
	}
	return nil
}

func (x *SLBgplsTopoAttr) GetSrv6SidAttr() *SLBgplsTopoSrv6SidAttr {
	if x, ok := x.GetAttr().(*SLBgplsTopoAttr_Srv6SidAttr); ok {
		return x.Srv6SidAttr
	}
	return nil
}

func (x *SLBgplsTopoAttr) GetSrPolicyAttr() *SLBgplsTopoSrPolicyAttr {
	if x, ok := x.GetAttr().(*SLBgplsTopoAttr_SrPolicyAttr); ok {
		return x.SrPolicyAttr
	}
	return nil
}

type isSLBgplsTopoAttr_Attr interface {
	isSLBgplsTopoAttr_Attr()
}

type SLBgplsTopoAttr_NodeAttr struct {
	NodeAttr *SLBgplsTopoNodeAttr `protobuf:"bytes,1,opt,name=NodeAttr,proto3,oneof"`
}

type SLBgplsTopoAttr_LinkAttr struct {
	LinkAttr *SLBgplsTopoLinkAttr `protobuf:"bytes,2,opt,name=LinkAttr,proto3,oneof"`
}

type SLBgplsTopoAttr_PrefixAttr struct {
	PrefixAttr *SLBgplsTopoPrefixAttr `protobuf:"bytes,3,opt,name=PrefixAttr,proto3,oneof"`
}

type SLBgplsTopoAttr_Srv6SidAttr struct {
	Srv6SidAttr *SLBgplsTopoSrv6SidAttr `protobuf:"bytes,4,opt,name=Srv6SidAttr,proto3,oneof"`
}

type SLBgplsTopoAttr_SrPolicyAttr struct {
	SrPolicyAttr *SLBgplsTopoSrPolicyAttr `protobuf:"bytes,5,opt,name=SrPolicyAttr,proto3,oneof"`
}

func (*SLBgplsTopoAttr_NodeAttr) isSLBgplsTopoAttr_Attr() {}

func (*SLBgplsTopoAttr_LinkAttr) isSLBgplsTopoAttr_Attr() {}

func (*SLBgplsTopoAttr_PrefixAttr) isSLBgplsTopoAttr_Attr() {}

func (*SLBgplsTopoAttr_Srv6SidAttr) isSLBgplsTopoAttr_Attr() {}

func (*SLBgplsTopoAttr_SrPolicyAttr) isSLBgplsTopoAttr_Attr() {}

// Node Attributes
type SLBgplsTopoNodeAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Multi Topology Identifiers (MTIDs) of a node.
	// Multi-Topology Identifier. TLV 263.
	// Section 5.2.2.1 of [RFC 9552]
	MtId []*SLBgplsTopoMtId `protobuf:"bytes,1,rep,name=MtId,proto3" json:"MtId,omitempty"`
	// Bitmask describing node attributes.
	// Node Flag Bits. TLV 1024.
	// Section 5.3.1.1 of [RFC 9552]
	NodeFlagBits *SLBgplsTopoNodeFlagBits `protobuf:"bytes,2,opt,name=NodeFlagBits,proto3" json:"NodeFlagBits,omitempty"`
	// Optional Node Attribute TLVs advertised by a router.
	// Opaque Node Attribute. TLV 1025.
	// Section 5.3.1.5 of [RFC 9552]
	OpaqueNodeAttr *SLBgplsTopoNodeOpaqueAttr `protobuf:"bytes,3,opt,name=OpaqueNodeAttr,proto3" json:"OpaqueNodeAttr,omitempty"`
	// Symbolic name of the router node.
	// Node Name. TLV 1026.
	// Section 5.3.1.3 of [RFC 9552]
	NodeName *SLBgplsNodeName `protobuf:"bytes,4,opt,name=NodeName,proto3" json:"NodeName,omitempty"`
	// ISIS area addresses.
	// IS-IS Area Identifier. TLV 1027.
	// Section 5.3.1.2 of [RFC 9552]
	IsisAreaId []*SLBgplsTopoIsisAreaId `protobuf:"bytes,5,rep,name=IsisAreaId,proto3" json:"IsisAreaId,omitempty"`
	// Auxiliary TE Router-IDs.
	// Local IPv4/IPv6 Router-ID. TLV 1028.
	// Section 5.3.1.4 of [RFC 9552]
	LocalIpv4 []*SLBgplsTopoLocalIpv4RouterId `protobuf:"bytes,6,rep,name=LocalIpv4,proto3" json:"LocalIpv4,omitempty"`
	// Auxiliary TE Router-IDs.
	// Local IPv4/IPv6 Router-ID. TLV 1029.
	// Section 5.3.1.4 of [RFC 9552]
	LocalIpv6 []*SLBgplsTopoLocalIpv6RouterId `protobuf:"bytes,7,rep,name=LocalIpv6,proto3" json:"LocalIpv6,omitempty"`
	// Flags.
	// SR Capabilities. TLV 1034.
	// Section 2.1.2 of [RFC 9085]
	SrgbIsisFlags *SLBgplsTopoSrgbIsisFlags `protobuf:"bytes,8,opt,name=SrgbIsisFlags,proto3" json:"SrgbIsisFlags,omitempty"`
	// Segment Routing Global Blocks (SRGBs) of a node.
	// SR Capabilities. TLV 1034.
	// Section 2.1.2 of [RFC 9085]
	Srgb []*SLBgplsTopoSrgb `protobuf:"bytes,9,rep,name=Srgb,proto3" json:"Srgb,omitempty"`
	// Segment Routing (SR) algorithms supported by the node.
	// SR-Algorithm. TLV 1035.
	// Section 2.1.3 of [RFC 9085]
	SrAlgorithm *SLBgplsTopoSrAlgorithm `protobuf:"bytes,10,opt,name=SrAlgorithm,proto3" json:"SrAlgorithm,omitempty"`
	// Segment Routing Local Blocks (SRLBs) of a node.
	// SR Local Block. TLV 1036.
	// Section 2.1.4 of [RFC 9085]
	Srlb []*SLBgplsTopoSrlb `protobuf:"bytes,11,rep,name=Srlb,proto3" json:"Srlb,omitempty"`
	// Node Maximum SID Depth (MSD).
	// Node MSD. TLV 266.
	// Section 3 of RFC 8814: Signaling Maximum SID Depth (MSD) Using the Border Gateway Protocol - Link State
	NodeMsd []*SLBgplsTopoNodeMsd `protobuf:"bytes,12,rep,name=NodeMsd,proto3" json:"NodeMsd,omitempty"`
	// Definitions of Flexible Algorithms supported by the node
	// Flexible Algorithm Definition. TLV 1039.
	// Section 3 of [RFC 9351]
	Fad []*SLBgplsTopoFad `protobuf:"bytes,13,rep,name=Fad,proto3" json:"Fad,omitempty"`
}

func (x *SLBgplsTopoNodeAttr) Reset() {
	*x = SLBgplsTopoNodeAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoNodeAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoNodeAttr) ProtoMessage() {}

func (x *SLBgplsTopoNodeAttr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoNodeAttr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoNodeAttr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{24}
}

func (x *SLBgplsTopoNodeAttr) GetMtId() []*SLBgplsTopoMtId {
	if x != nil {
		return x.MtId
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetNodeFlagBits() *SLBgplsTopoNodeFlagBits {
	if x != nil {
		return x.NodeFlagBits
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetOpaqueNodeAttr() *SLBgplsTopoNodeOpaqueAttr {
	if x != nil {
		return x.OpaqueNodeAttr
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetNodeName() *SLBgplsNodeName {
	if x != nil {
		return x.NodeName
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetIsisAreaId() []*SLBgplsTopoIsisAreaId {
	if x != nil {
		return x.IsisAreaId
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetLocalIpv4() []*SLBgplsTopoLocalIpv4RouterId {
	if x != nil {
		return x.LocalIpv4
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetLocalIpv6() []*SLBgplsTopoLocalIpv6RouterId {
	if x != nil {
		return x.LocalIpv6
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetSrgbIsisFlags() *SLBgplsTopoSrgbIsisFlags {
	if x != nil {
		return x.SrgbIsisFlags
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetSrgb() []*SLBgplsTopoSrgb {
	if x != nil {
		return x.Srgb
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetSrAlgorithm() *SLBgplsTopoSrAlgorithm {
	if x != nil {
		return x.SrAlgorithm
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetSrlb() []*SLBgplsTopoSrlb {
	if x != nil {
		return x.Srlb
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetNodeMsd() []*SLBgplsTopoNodeMsd {
	if x != nil {
		return x.NodeMsd
	}
	return nil
}

func (x *SLBgplsTopoNodeAttr) GetFad() []*SLBgplsTopoFad {
	if x != nil {
		return x.Fad
	}
	return nil
}

// Link Attributes
type SLBgplsTopoLinkAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SLBgplsTopoLinkAttr) Reset() {
	*x = SLBgplsTopoLinkAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoLinkAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoLinkAttr) ProtoMessage() {}

func (x *SLBgplsTopoLinkAttr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoLinkAttr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoLinkAttr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{25}
}

// Prefix Attributes
type SLBgplsTopoPrefixAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SLBgplsTopoPrefixAttr) Reset() {
	*x = SLBgplsTopoPrefixAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoPrefixAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoPrefixAttr) ProtoMessage() {}

func (x *SLBgplsTopoPrefixAttr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoPrefixAttr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoPrefixAttr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{26}
}

// SRv6 SID Attributes
type SLBgplsTopoSrv6SidAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SLBgplsTopoSrv6SidAttr) Reset() {
	*x = SLBgplsTopoSrv6SidAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrv6SidAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrv6SidAttr) ProtoMessage() {}

func (x *SLBgplsTopoSrv6SidAttr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrv6SidAttr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrv6SidAttr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{27}
}

// SR Policy Attributes
type SLBgplsTopoSrPolicyAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SLBgplsTopoSrPolicyAttr) Reset() {
	*x = SLBgplsTopoSrPolicyAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrPolicyAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrPolicyAttr) ProtoMessage() {}

func (x *SLBgplsTopoSrPolicyAttr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrPolicyAttr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrPolicyAttr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{28}
}

// Multi-Topology Identifier. TLV 263.
// Section 5.2.2.1 of [RFC 9552]
type SLBgplsTopoMtId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MtId uint32 `protobuf:"varint,1,opt,name=MtId,proto3" json:"MtId,omitempty"`
}

func (x *SLBgplsTopoMtId) Reset() {
	*x = SLBgplsTopoMtId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoMtId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoMtId) ProtoMessage() {}

func (x *SLBgplsTopoMtId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoMtId.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoMtId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{29}
}

func (x *SLBgplsTopoMtId) GetMtId() uint32 {
	if x != nil {
		return x.MtId
	}
	return 0
}

// Node MSD. TLV 266.
// Section 3 of RFC 8814: Signaling Maximum SID Depth (MSD) Using the Border Gateway Protocol - Link State
type SLBgplsTopoNodeMsd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  uint32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Value uint32 `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *SLBgplsTopoNodeMsd) Reset() {
	*x = SLBgplsTopoNodeMsd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoNodeMsd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoNodeMsd) ProtoMessage() {}

func (x *SLBgplsTopoNodeMsd) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoNodeMsd.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoNodeMsd) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{30}
}

func (x *SLBgplsTopoNodeMsd) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SLBgplsTopoNodeMsd) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Node Flag Bits. TLV 1024.
// Section 5.3.1.1 of [RFC 9552]
type SLBgplsTopoNodeFlagBits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bit-0: Overload Bit
	//
	// Bit-1: Attached Bit
	//
	// Bit-2: External Bit
	//
	// Bit-3: ABR Bit
	//
	// Bit-4: Router Bit
	//
	// Bit-5: v6 Bit
	Flags []byte `protobuf:"bytes,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *SLBgplsTopoNodeFlagBits) Reset() {
	*x = SLBgplsTopoNodeFlagBits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoNodeFlagBits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoNodeFlagBits) ProtoMessage() {}

func (x *SLBgplsTopoNodeFlagBits) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoNodeFlagBits.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoNodeFlagBits) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{31}
}

func (x *SLBgplsTopoNodeFlagBits) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

// Opaque Node Attribute. TLV 1025.
// Section 5.3.1.5 of [RFC 9552]
type SLBgplsTopoNodeOpaqueAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpaqueAttr []byte `protobuf:"bytes,1,opt,name=OpaqueAttr,proto3" json:"OpaqueAttr,omitempty"`
}

func (x *SLBgplsTopoNodeOpaqueAttr) Reset() {
	*x = SLBgplsTopoNodeOpaqueAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoNodeOpaqueAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoNodeOpaqueAttr) ProtoMessage() {}

func (x *SLBgplsTopoNodeOpaqueAttr) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoNodeOpaqueAttr.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoNodeOpaqueAttr) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{32}
}

func (x *SLBgplsTopoNodeOpaqueAttr) GetOpaqueAttr() []byte {
	if x != nil {
		return x.OpaqueAttr
	}
	return nil
}

// Node Name. TLV 1026.
// Section 5.3.1.3 of [RFC 9552]
type SLBgplsNodeName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *SLBgplsNodeName) Reset() {
	*x = SLBgplsNodeName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsNodeName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsNodeName) ProtoMessage() {}

func (x *SLBgplsNodeName) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsNodeName.ProtoReflect.Descriptor instead.
func (*SLBgplsNodeName) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{33}
}

func (x *SLBgplsNodeName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// IS-IS Area Identifier. TLV 1027.
// Section 5.3.1.2 of [RFC 9552]
type SLBgplsTopoIsisAreaId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaId []byte `protobuf:"bytes,1,opt,name=AreaId,proto3" json:"AreaId,omitempty"`
}

func (x *SLBgplsTopoIsisAreaId) Reset() {
	*x = SLBgplsTopoIsisAreaId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoIsisAreaId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoIsisAreaId) ProtoMessage() {}

func (x *SLBgplsTopoIsisAreaId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoIsisAreaId.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoIsisAreaId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{34}
}

func (x *SLBgplsTopoIsisAreaId) GetAreaId() []byte {
	if x != nil {
		return x.AreaId
	}
	return nil
}

// Local IPv4/IPv6 Router-ID. TLV 1028.
// Section 5.3.1.4 of [RFC 9552]
type SLBgplsTopoLocalIpv4RouterId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouterId uint32 `protobuf:"varint,1,opt,name=RouterId,proto3" json:"RouterId,omitempty"`
}

func (x *SLBgplsTopoLocalIpv4RouterId) Reset() {
	*x = SLBgplsTopoLocalIpv4RouterId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoLocalIpv4RouterId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoLocalIpv4RouterId) ProtoMessage() {}

func (x *SLBgplsTopoLocalIpv4RouterId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoLocalIpv4RouterId.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoLocalIpv4RouterId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{35}
}

func (x *SLBgplsTopoLocalIpv4RouterId) GetRouterId() uint32 {
	if x != nil {
		return x.RouterId
	}
	return 0
}

// Local IPv4/IPv6 Router-ID. TLV 1029.
// Section 5.3.1.4 of [RFC 9552]
type SLBgplsTopoLocalIpv6RouterId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouterId []byte `protobuf:"bytes,1,opt,name=RouterId,proto3" json:"RouterId,omitempty"`
}

func (x *SLBgplsTopoLocalIpv6RouterId) Reset() {
	*x = SLBgplsTopoLocalIpv6RouterId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoLocalIpv6RouterId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoLocalIpv6RouterId) ProtoMessage() {}

func (x *SLBgplsTopoLocalIpv6RouterId) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoLocalIpv6RouterId.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoLocalIpv6RouterId) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{36}
}

func (x *SLBgplsTopoLocalIpv6RouterId) GetRouterId() []byte {
	if x != nil {
		return x.RouterId
	}
	return nil
}

// Segment Routing Global Block (SRGB)
type SLBgplsTopoSrgb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLabel uint32 `protobuf:"varint,1,opt,name=StartLabel,proto3" json:"StartLabel,omitempty"`
	RangeSize  uint32 `protobuf:"varint,2,opt,name=RangeSize,proto3" json:"RangeSize,omitempty"`
}

func (x *SLBgplsTopoSrgb) Reset() {
	*x = SLBgplsTopoSrgb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrgb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrgb) ProtoMessage() {}

func (x *SLBgplsTopoSrgb) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrgb.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrgb) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{37}
}

func (x *SLBgplsTopoSrgb) GetStartLabel() uint32 {
	if x != nil {
		return x.StartLabel
	}
	return 0
}

func (x *SLBgplsTopoSrgb) GetRangeSize() uint32 {
	if x != nil {
		return x.RangeSize
	}
	return 0
}

// Segment Routing Global Block (SRGB) ISIS flags
type SLBgplsTopoSrgbIsisFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ISIS flags as defined in Section 3.1 of [RFC8667] for IS-IS
	Flags []byte `protobuf:"bytes,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *SLBgplsTopoSrgbIsisFlags) Reset() {
	*x = SLBgplsTopoSrgbIsisFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrgbIsisFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrgbIsisFlags) ProtoMessage() {}

func (x *SLBgplsTopoSrgbIsisFlags) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrgbIsisFlags.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrgbIsisFlags) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{38}
}

func (x *SLBgplsTopoSrgbIsisFlags) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

// SR-Algorithm. TLV 1035.
// Section 2.1.3 of [RFC 9085]
type SLBgplsTopoSrAlgorithm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algorithms []byte `protobuf:"bytes,1,opt,name=Algorithms,proto3" json:"Algorithms,omitempty"`
}

func (x *SLBgplsTopoSrAlgorithm) Reset() {
	*x = SLBgplsTopoSrAlgorithm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrAlgorithm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrAlgorithm) ProtoMessage() {}

func (x *SLBgplsTopoSrAlgorithm) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrAlgorithm.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrAlgorithm) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{39}
}

func (x *SLBgplsTopoSrAlgorithm) GetAlgorithms() []byte {
	if x != nil {
		return x.Algorithms
	}
	return nil
}

// SR Local Block. TLV 1036.
// Section 2.1.4 of [RFC 9085]
type SLBgplsTopoSrlb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLabel uint32 `protobuf:"varint,1,opt,name=StartLabel,proto3" json:"StartLabel,omitempty"`
	RangeSize  uint32 `protobuf:"varint,2,opt,name=RangeSize,proto3" json:"RangeSize,omitempty"`
}

func (x *SLBgplsTopoSrlb) Reset() {
	*x = SLBgplsTopoSrlb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoSrlb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoSrlb) ProtoMessage() {}

func (x *SLBgplsTopoSrlb) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoSrlb.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoSrlb) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{40}
}

func (x *SLBgplsTopoSrlb) GetStartLabel() uint32 {
	if x != nil {
		return x.StartLabel
	}
	return 0
}

func (x *SLBgplsTopoSrlb) GetRangeSize() uint32 {
	if x != nil {
		return x.RangeSize
	}
	return 0
}

// Flexible Algorithm Definition. TLV 1039.
// Section 3 of [RFC 9351]
type SLBgplsTopoFad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flexible Algorithm number between 128 and 255 inclusive.
	// Flexible Algorithm.
	// Section 3 of [RFC 9351]
	Algorithm []byte `protobuf:"bytes,1,opt,name=Algorithm,proto3" json:"Algorithm,omitempty"`
	// Metric type.
	// Metric-Type.
	// Section 3 of [RFC 9351]
	MetricType []byte `protobuf:"bytes,2,opt,name=MetricType,proto3" json:"MetricType,omitempty"`
	// Calculation type.
	// Calc-Type.
	// Section 3 of [RFC 9351]
	CalcType []byte `protobuf:"bytes,3,opt,name=CalcType,proto3" json:"CalcType,omitempty"`
	// Priority of the FAD advertisement.
	// Priority.
	// Section 3 of [RFC 9351]
	Priority []byte `protobuf:"bytes,4,opt,name=Priority,proto3" json:"Priority,omitempty"`
	// TODO: Check with Ketan. Do we need to define messages for sub TLV's like these also?
	// Affinity constraints associated with the FAD that enables the exclusion of links carrying any of the
	// specified affinities from the computation of the specific algorithm.
	// Flexible Algorithm Exclude-Any Affinity. TLV 1040.
	// Section 3 of [RFC 9351]
	ExcAnyAff []uint32 `protobuf:"varint,5,rep,packed,name=ExcAnyAff,proto3" json:"ExcAnyAff,omitempty"`
	// Affinity constraints associated with the FAD that enables the inclusion of links carrying any of the
	// specified affinities in the computation of the specific algorithm.
	// Flexible Algorithm Include-Any Affinity. TLV 1041.
	// Section 3 of [RFC 9351]
	IncAnyAff []uint32 `protobuf:"varint,6,rep,packed,name=IncAnyAff,proto3" json:"IncAnyAff,omitempty"`
	// Affinity constraints associated with the FAD that enables the inclusion of links carrying all of the
	// specified affinities in the computation of the specific algorithm.
	// Flexible Algorithm Include-All Affinity. TLV 1042.
	// Section 3 of [RFC 9351]
	IncAllAff []uint32 `protobuf:"varint,7,rep,packed,name=IncAllAff,proto3" json:"IncAllAff,omitempty"`
	// Flags associated with the FAD that are used in the computation of the specific algorithm.
	// Flexible Algorithm Definition Flags. TLV 1043.
	// Section 3 of [RFC 9351]
	Flags []uint32 `protobuf:"varint,8,rep,packed,name=Flags,proto3" json:"Flags,omitempty"`
	// Shared Risk Link Group (SRLG) information associated with the FAD that enables the exclusion of links that are
	// associated with any of the specified SRLG in the computation of the specific algorithm.
	// Flexible Algorithm Exclude SRLG. TLV 1045.
	// Section 3 of [RFC 9351]
	ExcSrlg []uint32 `protobuf:"varint,9,rep,packed,name=ExcSrlg,proto3" json:"ExcSrlg,omitempty"`
	// Affinity constraints associated with the FAD that enables the exclusion of links carrying any of the
	// specified affinities in the reverse direction from the computation of the specific algorithm.
	// Flexible Algorithm Exclude-Any Reverse Affinity. TLV 1053.
	// RFC TBD
	ExcAnyRevAff []uint32 `protobuf:"varint,10,rep,packed,name=ExcAnyRevAff,proto3" json:"ExcAnyRevAff,omitempty"`
	// Affinity constraints associated with the FAD that enables the inclusion of links carrying any of the
	// specified affinities in the reverse direction from the computation of the specific algorithm.
	// Flexible Algorithm Include-Any Reverse Affinity. TLV 1054.
	// RFC TBD
	IncAnyRevAff []uint32 `protobuf:"varint,11,rep,packed,name=IncAnyRevAff,proto3" json:"IncAnyRevAff,omitempty"`
	// Affinity constraints associated with the FAD that enables the inclusion of links carrying all of the
	// specified affinities in the reverse direction from the computation of the specific algorithm.
	// Flexible Algorithm Include-All Reverse Affinity. TLV 1055.
	// RFC TBD
	IncAllRevAff []uint32 `protobuf:"varint,12,rep,packed,name=IncAllRevAff,proto3" json:"IncAllRevAff,omitempty"`
	// Enables the exclusion of links having delay above a maximum specified delay from the computation of the specific algorithm
	// Flexible Algorithm Exclude Maximum Delay. TLV 1050
	// RFC TBD
	ExcMaxDelay uint32 `protobuf:"varint,13,opt,name=ExcMaxDelay,proto3" json:"ExcMaxDelay,omitempty"`
	// Enables the exclusion of links having bandwidth below a minimum specified bandwidth from the computation of the specific algorithm
	// Flexible Algorithm Exclude Minimum Bandwidth. TLV 1049
	// RFC TBD
	ExcMinBw []byte `protobuf:"bytes,14,opt,name=ExcMinBw,proto3" json:"ExcMinBw,omitempty"`
	// Indicate the presence of unsupported FAD sub-TLVs.
	// Flexible Algorithm Unsupported. TLV 1046.
	// Section 3 of [RFC 9351]
	UnsuppTlv *SLBgplsTopoFadUnsuppTlv `protobuf:"bytes,15,opt,name=UnsuppTlv,proto3" json:"UnsuppTlv,omitempty"`
}

func (x *SLBgplsTopoFad) Reset() {
	*x = SLBgplsTopoFad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoFad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoFad) ProtoMessage() {}

func (x *SLBgplsTopoFad) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoFad.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoFad) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{41}
}

func (x *SLBgplsTopoFad) GetAlgorithm() []byte {
	if x != nil {
		return x.Algorithm
	}
	return nil
}

func (x *SLBgplsTopoFad) GetMetricType() []byte {
	if x != nil {
		return x.MetricType
	}
	return nil
}

func (x *SLBgplsTopoFad) GetCalcType() []byte {
	if x != nil {
		return x.CalcType
	}
	return nil
}

func (x *SLBgplsTopoFad) GetPriority() []byte {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *SLBgplsTopoFad) GetExcAnyAff() []uint32 {
	if x != nil {
		return x.ExcAnyAff
	}
	return nil
}

func (x *SLBgplsTopoFad) GetIncAnyAff() []uint32 {
	if x != nil {
		return x.IncAnyAff
	}
	return nil
}

func (x *SLBgplsTopoFad) GetIncAllAff() []uint32 {
	if x != nil {
		return x.IncAllAff
	}
	return nil
}

func (x *SLBgplsTopoFad) GetFlags() []uint32 {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *SLBgplsTopoFad) GetExcSrlg() []uint32 {
	if x != nil {
		return x.ExcSrlg
	}
	return nil
}

func (x *SLBgplsTopoFad) GetExcAnyRevAff() []uint32 {
	if x != nil {
		return x.ExcAnyRevAff
	}
	return nil
}

func (x *SLBgplsTopoFad) GetIncAnyRevAff() []uint32 {
	if x != nil {
		return x.IncAnyRevAff
	}
	return nil
}

func (x *SLBgplsTopoFad) GetIncAllRevAff() []uint32 {
	if x != nil {
		return x.IncAllRevAff
	}
	return nil
}

func (x *SLBgplsTopoFad) GetExcMaxDelay() uint32 {
	if x != nil {
		return x.ExcMaxDelay
	}
	return 0
}

func (x *SLBgplsTopoFad) GetExcMinBw() []byte {
	if x != nil {
		return x.ExcMinBw
	}
	return nil
}

func (x *SLBgplsTopoFad) GetUnsuppTlv() *SLBgplsTopoFadUnsuppTlv {
	if x != nil {
		return x.UnsuppTlv
	}
	return nil
}

// Unsupported Flexible Algorithm Definition (FAD) TLVs
type SLBgplsTopoFadUnsuppTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol SLBgplsTopoProtocol `protobuf:"varint,1,opt,name=Protocol,proto3,enum=service_layer.SLBgplsTopoProtocol" json:"Protocol,omitempty"`
	Types    []byte              `protobuf:"bytes,2,opt,name=Types,proto3" json:"Types,omitempty"`
}

func (x *SLBgplsTopoFadUnsuppTlv) Reset() {
	*x = SLBgplsTopoFadUnsuppTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_bgpls_topology_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLBgplsTopoFadUnsuppTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLBgplsTopoFadUnsuppTlv) ProtoMessage() {}

func (x *SLBgplsTopoFadUnsuppTlv) ProtoReflect() protoreflect.Message {
	mi := &file_sl_bgpls_topology_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLBgplsTopoFadUnsuppTlv.ProtoReflect.Descriptor instead.
func (*SLBgplsTopoFadUnsuppTlv) Descriptor() ([]byte, []int) {
	return file_sl_bgpls_topology_proto_rawDescGZIP(), []int{42}
}

func (x *SLBgplsTopoFadUnsuppTlv) GetProtocol() SLBgplsTopoProtocol {
	if x != nil {
		return x.Protocol
	}
	return SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_RESERVED
}

func (x *SLBgplsTopoFadUnsuppTlv) GetTypes() []byte {
	if x != nil {
		return x.Types
	}
	return nil
}

var File_sl_bgpls_topology_proto protoreflect.FileDescriptor

var file_sl_bgpls_topology_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x6c, 0x5f, 0x62, 0x67, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x54, 0x0a, 0x14, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x4d, 0x73, 0x67,
	0x12, 0x3c, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6c, 0x72, 0x69,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xb7,
	0x01, 0x0a, 0x15, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6c,
	0x72, 0x69, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x4e, 0x6c, 0x72, 0x69,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6c, 0x72, 0x69, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x4e, 0x6c, 0x72, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xd6, 0x01, 0x0a, 0x11, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55, 0x70, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x3b,
	0x0a, 0x07, 0x55, 0x70, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55, 0x70, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x55, 0x70, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55, 0x70, 0x64, 0x48,
	0x00, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x42, 0x08, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x22, 0xc0, 0x06, 0x0a, 0x16, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x45,
	0x72, 0x72, 0x6e, 0x6f, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd5, 0x05, 0x0a,
	0x10, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x45, 0x72, 0x72, 0x6e,
	0x6f, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f,
	0x50, 0x4f, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x45,
	0x41, 0x47, 0x41, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4c, 0x5f, 0x42, 0x47,
	0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x45, 0x4e, 0x4f, 0x4d, 0x45, 0x4d, 0x10,
	0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f,
	0x50, 0x4f, 0x5f, 0x45, 0x42, 0x55, 0x53, 0x59, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4c,
	0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x45, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x5f, 0x56, 0x45, 0x52, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x4c, 0x5f, 0x42, 0x47,
	0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41,
	0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x4c, 0x5f, 0x42,
	0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x08,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50,
	0x4f, 0x5f, 0x45, 0x4e, 0x4f, 0x54, 0x53, 0x55, 0x50, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x53,
	0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x4f, 0x4d,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x4c, 0x5f, 0x42, 0x47,
	0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54,
	0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54,
	0x4f, 0x50, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x10, 0x0c,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50,
	0x4f, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x0d, 0x12, 0x24, 0x0a,
	0x1f, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54,
	0x10, 0x80, 0x0a, 0x12, 0x23, 0x0a, 0x1e, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f,
	0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x81, 0x0a, 0x12, 0x23, 0x0a, 0x1e, 0x53, 0x4c, 0x5f, 0x42,
	0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x82, 0x0a, 0x12, 0x27, 0x0a,
	0x22, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f,
	0x56, 0x45, 0x52, 0x10, 0x83, 0x0a, 0x12, 0x2e, 0x0a, 0x29, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50,
	0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x84, 0x0a, 0x12, 0x31, 0x0a, 0x2c, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50,
	0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x85, 0x0a, 0x12, 0x29, 0x0a, 0x23, 0x53, 0x4c, 0x5f,
	0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54,
	0x10, 0x80, 0x80, 0x40, 0x22, 0x4b, 0x0a, 0x0e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x55, 0x70, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x22, 0xbd, 0x01, 0x0a, 0x10, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x4e, 0x6c, 0x72,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x4e, 0x6c, 0x72, 0x69, 0x52, 0x04, 0x4e, 0x6c, 0x72, 0x69, 0x12, 0x32, 0x0a,
	0x04, 0x41, 0x74, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x41, 0x74, 0x74, 0x72, 0x52, 0x04, 0x41, 0x74, 0x74,
	0x72, 0x22, 0xe2, 0x03, 0x0a, 0x0f, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x4e, 0x6c, 0x72, 0x69, 0x12, 0x3e, 0x0a, 0x08, 0x4e, 0x6c, 0x72, 0x69, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x4e, 0x6c, 0x72, 0x69, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x4e, 0x6c, 0x72,
	0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x4c,
	0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x3a, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x48, 0x00, 0x52, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x3d, 0x0a,
	0x07, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69,
	0x64, 0x48, 0x00, 0x52, 0x07, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x08,
	0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x48, 0x00, 0x52, 0x08, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x06,
	0x0a, 0x04, 0x4e, 0x6c, 0x72, 0x69, 0x22, 0x4a, 0x0a, 0x0f, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x4e, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x52, 0x04, 0x4e, 0x6f,
	0x64, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x0f, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x41, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x52, 0x09,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x37,
	0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x52, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x8b, 0x01, 0x0a, 0x11, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x37, 0x0a,
	0x04, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x52, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x44, 0x65, 0x73, 0x63, 0x72, 0x52, 0x06, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x8f, 0x01, 0x0a, 0x12, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x04,
	0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x52,
	0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x52, 0x07,
	0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x37, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x52, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x53, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x52, 0x08, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xa9, 0x03,
	0x0a, 0x14, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x73, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x41, 0x73, 0x6e, 0x12, 0x46, 0x0a, 0x0a, 0x4f, 0x73, 0x70, 0x66,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4f, 0x73, 0x70, 0x66, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x4f, 0x73, 0x70, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x4c, 0x0a, 0x0c, 0x4f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x4f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x48, 0x00,
	0x52, 0x0c, 0x4f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x46,
	0x0a, 0x0a, 0x49, 0x73, 0x69, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x49, 0x73,
	0x69, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x49, 0x73, 0x69, 0x73,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x42, 0x67, 0x70, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x42, 0x67, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x48, 0x00,
	0x52, 0x09, 0x42, 0x67, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0e, 0x53,
	0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53,
	0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x48, 0x00, 0x52,
	0x0e, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x42,
	0x08, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x14, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x49, 0x70, 0x76, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x70, 0x76, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x49, 0x70, 0x76, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x49, 0x70, 0x76, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x70, 0x76, 0x36, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x49, 0x70, 0x76, 0x36, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70,
	0x76, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x49, 0x70, 0x76, 0x36, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x4d, 0x74, 0x49, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x16, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x4d, 0x74, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0d, 0x4f, 0x73, 0x70, 0x66, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x22, 0x47, 0x0a, 0x17, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x4d, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x4d, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x22, 0xf7, 0x04, 0x0a, 0x18,
	0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x12, 0x52, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52,
	0x0b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x05,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x13, 0x49,
	0x70, 0x76, 0x34, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x13, 0x49, 0x70, 0x76, 0x34,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x32, 0x0a, 0x13, 0x49, 0x70, 0x76, 0x36, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x13,
	0x49, 0x70, 0x76, 0x36, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x49, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x70, 0x76, 0x36, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x49, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x70, 0x76, 0x36, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x73, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x73, 0x6e, 0x12, 0x36, 0x0a,
	0x15, 0x49, 0x70, 0x76, 0x34, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x15,
	0x49, 0x70, 0x76, 0x34, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x15, 0x49, 0x70, 0x76, 0x36, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x15, 0x49, 0x70, 0x76, 0x36, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a,
	0x17, 0x49, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x70, 0x76, 0x36, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x49, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x70, 0x76, 0x36, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x63, 0x72,
	0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x11, 0x0a,
	0x0f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x13, 0x0a, 0x11, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x15, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4f, 0x73, 0x70, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x41, 0x73, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x49, 0x73, 0x41,
	0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x44, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x41,
	0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x41,
	0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x44, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x49, 0x0a, 0x15, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x49, 0x73, 0x69, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x50, 0x73, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x50, 0x73, 0x6e,
	0x49, 0x64, 0x22, 0x50, 0x0a, 0x14, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x42, 0x67, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x41, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x73, 0x6e, 0x22, 0x9d, 0x01, 0x0a, 0x19, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73,
	0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x73, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x49, 0x70, 0x76, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x49, 0x70, 0x76, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x49, 0x70, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x49, 0x70, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x18, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xfe, 0x02, 0x0a, 0x0f, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x41, 0x74, 0x74, 0x72, 0x12, 0x40, 0x0a, 0x08, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x48, 0x00, 0x52, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x40, 0x0a, 0x08,
	0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x74,
	0x74, 0x72, 0x48, 0x00, 0x52, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x12, 0x46,
	0x0a, 0x0a, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x41, 0x74, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x41, 0x74, 0x74, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x41, 0x74, 0x74, 0x72, 0x12, 0x49, 0x0a, 0x0b, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69,
	0x64, 0x41, 0x74, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x41, 0x74,
	0x74, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x12, 0x4c, 0x0a, 0x0c, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x74, 0x74,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x74, 0x74, 0x72, 0x48,
	0x00, 0x52, 0x0c, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x74, 0x74, 0x72, 0x42,
	0x06, 0x0a, 0x04, 0x41, 0x74, 0x74, 0x72, 0x22, 0xed, 0x06, 0x0a, 0x13, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12,
	0x32, 0x0a, 0x04, 0x4d, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4d, 0x74, 0x49, 0x64, 0x52, 0x04, 0x4d,
	0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x42,
	0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x69, 0x74,
	0x73, 0x52, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x69, 0x74, 0x73, 0x12,
	0x50, 0x0a, 0x0e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x52, 0x0e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x12, 0x3a, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a,
	0x0a, 0x49, 0x73, 0x69, 0x73, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x49, 0x73, 0x69,
	0x73, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x52, 0x0a, 0x49, 0x73, 0x69, 0x73, 0x41, 0x72, 0x65,
	0x61, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x34,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x34, 0x12, 0x49,
	0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x09,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x12, 0x4d, 0x0a, 0x0d, 0x53, 0x72, 0x67,
	0x62, 0x49, 0x73, 0x69, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x67, 0x62,
	0x49, 0x73, 0x69, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x0d, 0x53, 0x72, 0x67, 0x62, 0x49,
	0x73, 0x69, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x53, 0x72, 0x67, 0x62,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x53, 0x72, 0x67, 0x62, 0x52, 0x04, 0x53, 0x72, 0x67, 0x62, 0x12, 0x47, 0x0a, 0x0b,
	0x53, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x0b, 0x53, 0x72, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x32, 0x0a, 0x04, 0x53, 0x72, 0x6c, 0x62, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53,
	0x72, 0x6c, 0x62, 0x52, 0x04, 0x53, 0x72, 0x6c, 0x62, 0x12, 0x3b, 0x0a, 0x07, 0x4e, 0x6f, 0x64,
	0x65, 0x4d, 0x73, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x64, 0x52, 0x07, 0x4e,
	0x6f, 0x64, 0x65, 0x4d, 0x73, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x46, 0x61, 0x64, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x46,
	0x61, 0x64, 0x52, 0x03, 0x46, 0x61, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x22, 0x17,
	0x0a, 0x15, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x41, 0x74, 0x74, 0x72, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x74, 0x74, 0x72, 0x22, 0x25, 0x0a, 0x0f,
	0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4d, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x4d, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x4d,
	0x74, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x12, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x2f, 0x0a, 0x17, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x69, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x22, 0x3b, 0x0a, 0x19, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x41, 0x74, 0x74, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x22, 0x25, 0x0a, 0x0f, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x4e, 0x6f, 0x64, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x15, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x49, 0x73, 0x69, 0x73, 0x41, 0x72, 0x65, 0x61, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x1c, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x76,
	0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x1c, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73,
	0x54, 0x6f, 0x70, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x4f, 0x0a, 0x0f, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x53, 0x72, 0x67, 0x62, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x30, 0x0a, 0x18, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x53, 0x72, 0x67, 0x62, 0x49, 0x73, 0x69, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x22, 0x38, 0x0a, 0x16, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x53, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1e,
	0x0a, 0x0a, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x22, 0x4f,
	0x0a, 0x0f, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x6c,
	0x62, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x80, 0x04, 0x0a, 0x0e, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x46,
	0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x43, 0x61, 0x6c, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x63, 0x41,
	0x6e, 0x79, 0x41, 0x66, 0x66, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x45, 0x78, 0x63,
	0x41, 0x6e, 0x79, 0x41, 0x66, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x41, 0x6e, 0x79,
	0x41, 0x66, 0x66, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x49, 0x6e, 0x63, 0x41, 0x6e,
	0x79, 0x41, 0x66, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x41, 0x6c, 0x6c, 0x41, 0x66,
	0x66, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x49, 0x6e, 0x63, 0x41, 0x6c, 0x6c, 0x41,
	0x66, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x78, 0x63, 0x53,
	0x72, 0x6c, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x78, 0x63, 0x53, 0x72,
	0x6c, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x41, 0x6e, 0x79, 0x52, 0x65, 0x76, 0x41,
	0x66, 0x66, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x45, 0x78, 0x63, 0x41, 0x6e, 0x79,
	0x52, 0x65, 0x76, 0x41, 0x66, 0x66, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x63, 0x41, 0x6e, 0x79,
	0x52, 0x65, 0x76, 0x41, 0x66, 0x66, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x49, 0x6e,
	0x63, 0x41, 0x6e, 0x79, 0x52, 0x65, 0x76, 0x41, 0x66, 0x66, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e,
	0x63, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x76, 0x41, 0x66, 0x66, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0c, 0x49, 0x6e, 0x63, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x76, 0x41, 0x66, 0x66, 0x12, 0x20,
	0x0a, 0x0b, 0x45, 0x78, 0x63, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x45, 0x78, 0x63, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x4d, 0x69, 0x6e, 0x42, 0x77, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x45, 0x78, 0x63, 0x4d, 0x69, 0x6e, 0x42, 0x77, 0x12, 0x44, 0x0a, 0x09,
	0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x54, 0x6c, 0x76, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x46, 0x61, 0x64, 0x55, 0x6e,
	0x73, 0x75, 0x70, 0x70, 0x54, 0x6c, 0x76, 0x52, 0x09, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x54,
	0x6c, 0x76, 0x22, 0x6f, 0x0a, 0x17, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70,
	0x6f, 0x46, 0x61, 0x64, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x54, 0x6c, 0x76, 0x12, 0x3e, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x2a, 0xcc, 0x01, 0x0a, 0x12, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x55, 0x70, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4c,
	0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x20, 0x0a, 0x1c, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f,
	0x5f, 0x55, 0x50, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f,
	0x50, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54,
	0x4f, 0x50, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x53,
	0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x55, 0x50, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x52,
	0x10, 0x04, 0x2a, 0x84, 0x01, 0x0a, 0x14, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x20, 0x53,
	0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f,
	0x50, 0x4f, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c,
	0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x2a, 0xad, 0x02, 0x0a, 0x13, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4e, 0x6c, 0x72, 0x69, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f,
	0x50, 0x4f, 0x5f, 0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4c, 0x5f, 0x42, 0x47,
	0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4c, 0x5f,
	0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4e, 0x4c, 0x52, 0x49, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x53,
	0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4e, 0x4c, 0x52,
	0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x50, 0x52, 0x45, 0x46,
	0x49, 0x58, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x50, 0x56, 0x36, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x10, 0x04, 0x12, 0x34, 0x0a,
	0x30, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4e,
	0x4c, 0x52, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x54,
	0x48, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f,
	0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x52, 0x56, 0x36, 0x5f, 0x53, 0x49, 0x44, 0x10, 0x06, 0x2a, 0xf1, 0x02, 0x0a, 0x13, 0x53, 0x4c,
	0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f,
	0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50,
	0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x4c, 0x31, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4c,
	0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x4c, 0x32, 0x10, 0x02, 0x12, 0x21,
	0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x76, 0x32, 0x10,
	0x03, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f,
	0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x42, 0x47,
	0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x76, 0x33, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4c,
	0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4c,
	0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x5f, 0x54, 0x45, 0x10, 0x08, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x52, 0x10, 0x09, 0x2a, 0xce, 0x02,
	0x0a, 0x18, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4f, 0x73, 0x70,
	0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x4c,
	0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4f, 0x53, 0x50, 0x46,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50,
	0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x41, 0x5f, 0x41, 0x52,
	0x45, 0x41, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x52, 0x45, 0x41,
	0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54,
	0x4f, 0x50, 0x4f, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x31, 0x10, 0x03, 0x12, 0x2a,
	0x0a, 0x26, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f,
	0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x32, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x4c,
	0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4f, 0x53, 0x50, 0x46,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x53, 0x53, 0x41,
	0x5f, 0x31, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x53, 0x53, 0x41, 0x5f, 0x32, 0x10, 0x06, 0x2a, 0xb3,
	0x03, 0x0a, 0x21, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x30, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x4c,
	0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f,
	0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x50, 0x43, 0x45, 0x50, 0x10, 0x01, 0x12, 0x39, 0x0a, 0x35,
	0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x53, 0x52, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x02, 0x12, 0x32, 0x0a, 0x2e, 0x53, 0x4c, 0x5f, 0x42, 0x47,
	0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47,
	0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x03, 0x12, 0x38, 0x0a, 0x34, 0x53,
	0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x50, 0x43, 0x45, 0x50, 0x5f, 0x56, 0x49, 0x41, 0x5f,
	0x50, 0x43, 0x45, 0x10, 0x0a, 0x12, 0x41, 0x0a, 0x3d, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c,
	0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e,
	0x5f, 0x42, 0x47, 0x50, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x56,
	0x49, 0x41, 0x5f, 0x50, 0x43, 0x45, 0x10, 0x14, 0x12, 0x3a, 0x0a, 0x36, 0x53, 0x4c, 0x5f, 0x42,
	0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x49,
	0x47, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x56, 0x49, 0x41, 0x5f, 0x50,
	0x43, 0x45, 0x10, 0x1e, 0x32, 0x7f, 0x0a, 0x17, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x64, 0x0a, 0x17, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x47, 0x65,
	0x74, 0x55, 0x70, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x23, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x42, 0x67, 0x70,
	0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x4d, 0x73, 0x67, 0x1a,
	0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x55, 0x70, 0x64, 0x4d, 0x73,
	0x67, 0x28, 0x01, 0x30, 0x01, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2e, 0x2f, 0x67, 0x6f, 0x2f, 0x73,
	0x72, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sl_bgpls_topology_proto_rawDescOnce sync.Once
	file_sl_bgpls_topology_proto_rawDescData = file_sl_bgpls_topology_proto_rawDesc
)

func file_sl_bgpls_topology_proto_rawDescGZIP() []byte {
	file_sl_bgpls_topology_proto_rawDescOnce.Do(func() {
		file_sl_bgpls_topology_proto_rawDescData = protoimpl.X.CompressGZIP(file_sl_bgpls_topology_proto_rawDescData)
	})
	return file_sl_bgpls_topology_proto_rawDescData
}

var file_sl_bgpls_topology_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_sl_bgpls_topology_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_sl_bgpls_topology_proto_goTypes = []interface{}{
	(SLBgplsTopoUpdType)(0),                      // 0: service_layer.SLBgplsTopoUpdType
	(SLBgplsTopoOperation)(0),                    // 1: service_layer.SLBgplsTopoOperation
	(SLBgplsTopoNlriType)(0),                     // 2: service_layer.SLBgplsTopoNlriType
	(SLBgplsTopoProtocol)(0),                     // 3: service_layer.SLBgplsTopoProtocol
	(SLBgplsTopoOspfRouteType)(0),                // 4: service_layer.SLBgplsTopoOspfRouteType
	(SLBgplsTopoSrPolicyProtocolOrigin)(0),       // 5: service_layer.SLBgplsTopoSrPolicyProtocolOrigin
	(SLBgplsTopoErrorStatus_SLBgplsTopoErrno)(0), // 6: service_layer.SLBgplsTopoErrorStatus.SLBgplsTopoErrno
	(*SLBgplsTopoGetUpdMsg)(nil),                 // 7: service_layer.SLBgplsTopoGetUpdMsg
	(*SLBgplsTopoNlriFilter)(nil),                // 8: service_layer.SLBgplsTopoNlriFilter
	(*SLBgplsTopoUpdMsg)(nil),                    // 9: service_layer.SLBgplsTopoUpdMsg
	(*SLBgplsTopoErrorStatus)(nil),               // 10: service_layer.SLBgplsTopoErrorStatus
	(*SLBgplsTopoUpd)(nil),                       // 11: service_layer.SLBgplsTopoUpd
	(*SLBgplsTopoEntry)(nil),                     // 12: service_layer.SLBgplsTopoEntry
	(*SLBgplsTopoNlri)(nil),                      // 13: service_layer.SLBgplsTopoNlri
	(*SLBgplsTopoNode)(nil),                      // 14: service_layer.SLBgplsTopoNode
	(*SLBgplsTopoLink)(nil),                      // 15: service_layer.SLBgplsTopoLink
	(*SLBgplsTopoPrefix)(nil),                    // 16: service_layer.SLBgplsTopoPrefix
	(*SLBgplsTopoSrv6Sid)(nil),                   // 17: service_layer.SLBgplsTopoSrv6Sid
	(*SLBgplsTopoSrPolicy)(nil),                  // 18: service_layer.SLBgplsTopoSrPolicy
	(*SLBgplsTopoNodeDescr)(nil),                 // 19: service_layer.SLBgplsTopoNodeDescr
	(*SLBgplsTopoLinkDescr)(nil),                 // 20: service_layer.SLBgplsTopoLinkDescr
	(*SLBgplsTopoPrefixDescr)(nil),               // 21: service_layer.SLBgplsTopoPrefixDescr
	(*SLBgplsTopoSrv6SidDescr)(nil),              // 22: service_layer.SLBgplsTopoSrv6SidDescr
	(*SLBgplsTopoSrPolicyDescr)(nil),             // 23: service_layer.SLBgplsTopoSrPolicyDescr
	(*SLBgplsTopoOspfNodeId)(nil),                // 24: service_layer.SLBgplsTopoOspfNodeId
	(*SLBgplsTopoOspfv3NodeId)(nil),              // 25: service_layer.SLBgplsTopoOspfv3NodeId
	(*SLBgplsTopoIsisNodeId)(nil),                // 26: service_layer.SLBgplsTopoIsisNodeId
	(*SLBgplsTopoBgpNodeId)(nil),                 // 27: service_layer.SLBgplsTopoBgpNodeId
	(*SLBgplsTopoSrPolicyNodeId)(nil),            // 28: service_layer.SLBgplsTopoSrPolicyNodeId
	(*SLBgplsTopoSrPolicyFlags)(nil),             // 29: service_layer.SLBgplsTopoSrPolicyFlags
	(*SLBgplsTopoAttr)(nil),                      // 30: service_layer.SLBgplsTopoAttr
	(*SLBgplsTopoNodeAttr)(nil),                  // 31: service_layer.SLBgplsTopoNodeAttr
	(*SLBgplsTopoLinkAttr)(nil),                  // 32: service_layer.SLBgplsTopoLinkAttr
	(*SLBgplsTopoPrefixAttr)(nil),                // 33: service_layer.SLBgplsTopoPrefixAttr
	(*SLBgplsTopoSrv6SidAttr)(nil),               // 34: service_layer.SLBgplsTopoSrv6SidAttr
	(*SLBgplsTopoSrPolicyAttr)(nil),              // 35: service_layer.SLBgplsTopoSrPolicyAttr
	(*SLBgplsTopoMtId)(nil),                      // 36: service_layer.SLBgplsTopoMtId
	(*SLBgplsTopoNodeMsd)(nil),                   // 37: service_layer.SLBgplsTopoNodeMsd
	(*SLBgplsTopoNodeFlagBits)(nil),              // 38: service_layer.SLBgplsTopoNodeFlagBits
	(*SLBgplsTopoNodeOpaqueAttr)(nil),            // 39: service_layer.SLBgplsTopoNodeOpaqueAttr
	(*SLBgplsNodeName)(nil),                      // 40: service_layer.SLBgplsNodeName
	(*SLBgplsTopoIsisAreaId)(nil),                // 41: service_layer.SLBgplsTopoIsisAreaId
	(*SLBgplsTopoLocalIpv4RouterId)(nil),         // 42: service_layer.SLBgplsTopoLocalIpv4RouterId
	(*SLBgplsTopoLocalIpv6RouterId)(nil),         // 43: service_layer.SLBgplsTopoLocalIpv6RouterId
	(*SLBgplsTopoSrgb)(nil),                      // 44: service_layer.SLBgplsTopoSrgb
	(*SLBgplsTopoSrgbIsisFlags)(nil),             // 45: service_layer.SLBgplsTopoSrgbIsisFlags
	(*SLBgplsTopoSrAlgorithm)(nil),               // 46: service_layer.SLBgplsTopoSrAlgorithm
	(*SLBgplsTopoSrlb)(nil),                      // 47: service_layer.SLBgplsTopoSrlb
	(*SLBgplsTopoFad)(nil),                       // 48: service_layer.SLBgplsTopoFad
	(*SLBgplsTopoFadUnsuppTlv)(nil),              // 49: service_layer.SLBgplsTopoFadUnsuppTlv
}
var file_sl_bgpls_topology_proto_depIdxs = []int32{
	8,  // 0: service_layer.SLBgplsTopoGetUpdMsg.Filter:type_name -> service_layer.SLBgplsTopoNlriFilter
	2,  // 1: service_layer.SLBgplsTopoNlriFilter.NlriType:type_name -> service_layer.SLBgplsTopoNlriType
	3,  // 2: service_layer.SLBgplsTopoNlriFilter.Protocol:type_name -> service_layer.SLBgplsTopoProtocol
	0,  // 3: service_layer.SLBgplsTopoUpdMsg.UpdType:type_name -> service_layer.SLBgplsTopoUpdType
	10, // 4: service_layer.SLBgplsTopoUpdMsg.ErrStatus:type_name -> service_layer.SLBgplsTopoErrorStatus
	11, // 5: service_layer.SLBgplsTopoUpdMsg.Data:type_name -> service_layer.SLBgplsTopoUpd
	6,  // 6: service_layer.SLBgplsTopoErrorStatus.Status:type_name -> service_layer.SLBgplsTopoErrorStatus.SLBgplsTopoErrno
	12, // 7: service_layer.SLBgplsTopoUpd.Entries:type_name -> service_layer.SLBgplsTopoEntry
	1,  // 8: service_layer.SLBgplsTopoEntry.Operation:type_name -> service_layer.SLBgplsTopoOperation
	13, // 9: service_layer.SLBgplsTopoEntry.Nlri:type_name -> service_layer.SLBgplsTopoNlri
	30, // 10: service_layer.SLBgplsTopoEntry.Attr:type_name -> service_layer.SLBgplsTopoAttr
	2,  // 11: service_layer.SLBgplsTopoNlri.NlriType:type_name -> service_layer.SLBgplsTopoNlriType
	3,  // 12: service_layer.SLBgplsTopoNlri.Protocol:type_name -> service_layer.SLBgplsTopoProtocol
	14, // 13: service_layer.SLBgplsTopoNlri.Node:type_name -> service_layer.SLBgplsTopoNode
	15, // 14: service_layer.SLBgplsTopoNlri.Link:type_name -> service_layer.SLBgplsTopoLink
	16, // 15: service_layer.SLBgplsTopoNlri.Prefix:type_name -> service_layer.SLBgplsTopoPrefix
	17, // 16: service_layer.SLBgplsTopoNlri.Srv6Sid:type_name -> service_layer.SLBgplsTopoSrv6Sid
	18, // 17: service_layer.SLBgplsTopoNlri.SrPolicy:type_name -> service_layer.SLBgplsTopoSrPolicy
	19, // 18: service_layer.SLBgplsTopoNode.Node:type_name -> service_layer.SLBgplsTopoNodeDescr
	19, // 19: service_layer.SLBgplsTopoLink.LocalNode:type_name -> service_layer.SLBgplsTopoNodeDescr
	19, // 20: service_layer.SLBgplsTopoLink.RemoteNode:type_name -> service_layer.SLBgplsTopoNodeDescr
	20, // 21: service_layer.SLBgplsTopoLink.Link:type_name -> service_layer.SLBgplsTopoLinkDescr
	19, // 22: service_layer.SLBgplsTopoPrefix.Node:type_name -> service_layer.SLBgplsTopoNodeDescr
	21, // 23: service_layer.SLBgplsTopoPrefix.Prefix:type_name -> service_layer.SLBgplsTopoPrefixDescr
	19, // 24: service_layer.SLBgplsTopoSrv6Sid.Node:type_name -> service_layer.SLBgplsTopoNodeDescr
	22, // 25: service_layer.SLBgplsTopoSrv6Sid.Srv6Sid:type_name -> service_layer.SLBgplsTopoSrv6SidDescr
	19, // 26: service_layer.SLBgplsTopoSrPolicy.Node:type_name -> service_layer.SLBgplsTopoNodeDescr
	23, // 27: service_layer.SLBgplsTopoSrPolicy.SrPolicy:type_name -> service_layer.SLBgplsTopoSrPolicyDescr
	24, // 28: service_layer.SLBgplsTopoNodeDescr.OspfNodeId:type_name -> service_layer.SLBgplsTopoOspfNodeId
	25, // 29: service_layer.SLBgplsTopoNodeDescr.Ospfv3NodeId:type_name -> service_layer.SLBgplsTopoOspfv3NodeId
	26, // 30: service_layer.SLBgplsTopoNodeDescr.IsisNodeId:type_name -> service_layer.SLBgplsTopoIsisNodeId
	27, // 31: service_layer.SLBgplsTopoNodeDescr.BgpNodeId:type_name -> service_layer.SLBgplsTopoBgpNodeId
	28, // 32: service_layer.SLBgplsTopoNodeDescr.SrPolicyNodeId:type_name -> service_layer.SLBgplsTopoSrPolicyNodeId
	4,  // 33: service_layer.SLBgplsTopoPrefixDescr.OspfRouteType:type_name -> service_layer.SLBgplsTopoOspfRouteType
	5,  // 34: service_layer.SLBgplsTopoSrPolicyDescr.ProtoOrigin:type_name -> service_layer.SLBgplsTopoSrPolicyProtocolOrigin
	29, // 35: service_layer.SLBgplsTopoSrPolicyDescr.Flags:type_name -> service_layer.SLBgplsTopoSrPolicyFlags
	31, // 36: service_layer.SLBgplsTopoAttr.NodeAttr:type_name -> service_layer.SLBgplsTopoNodeAttr
	32, // 37: service_layer.SLBgplsTopoAttr.LinkAttr:type_name -> service_layer.SLBgplsTopoLinkAttr
	33, // 38: service_layer.SLBgplsTopoAttr.PrefixAttr:type_name -> service_layer.SLBgplsTopoPrefixAttr
	34, // 39: service_layer.SLBgplsTopoAttr.Srv6SidAttr:type_name -> service_layer.SLBgplsTopoSrv6SidAttr
	35, // 40: service_layer.SLBgplsTopoAttr.SrPolicyAttr:type_name -> service_layer.SLBgplsTopoSrPolicyAttr
	36, // 41: service_layer.SLBgplsTopoNodeAttr.MtId:type_name -> service_layer.SLBgplsTopoMtId
	38, // 42: service_layer.SLBgplsTopoNodeAttr.NodeFlagBits:type_name -> service_layer.SLBgplsTopoNodeFlagBits
	39, // 43: service_layer.SLBgplsTopoNodeAttr.OpaqueNodeAttr:type_name -> service_layer.SLBgplsTopoNodeOpaqueAttr
	40, // 44: service_layer.SLBgplsTopoNodeAttr.NodeName:type_name -> service_layer.SLBgplsNodeName
	41, // 45: service_layer.SLBgplsTopoNodeAttr.IsisAreaId:type_name -> service_layer.SLBgplsTopoIsisAreaId
	42, // 46: service_layer.SLBgplsTopoNodeAttr.LocalIpv4:type_name -> service_layer.SLBgplsTopoLocalIpv4RouterId
	43, // 47: service_layer.SLBgplsTopoNodeAttr.LocalIpv6:type_name -> service_layer.SLBgplsTopoLocalIpv6RouterId
	45, // 48: service_layer.SLBgplsTopoNodeAttr.SrgbIsisFlags:type_name -> service_layer.SLBgplsTopoSrgbIsisFlags
	44, // 49: service_layer.SLBgplsTopoNodeAttr.Srgb:type_name -> service_layer.SLBgplsTopoSrgb
	46, // 50: service_layer.SLBgplsTopoNodeAttr.SrAlgorithm:type_name -> service_layer.SLBgplsTopoSrAlgorithm
	47, // 51: service_layer.SLBgplsTopoNodeAttr.Srlb:type_name -> service_layer.SLBgplsTopoSrlb
	37, // 52: service_layer.SLBgplsTopoNodeAttr.NodeMsd:type_name -> service_layer.SLBgplsTopoNodeMsd
	48, // 53: service_layer.SLBgplsTopoNodeAttr.Fad:type_name -> service_layer.SLBgplsTopoFad
	49, // 54: service_layer.SLBgplsTopoFad.UnsuppTlv:type_name -> service_layer.SLBgplsTopoFadUnsuppTlv
	3,  // 55: service_layer.SLBgplsTopoFadUnsuppTlv.Protocol:type_name -> service_layer.SLBgplsTopoProtocol
	7,  // 56: service_layer.SLBgplsTopoSubscription.SLBgplsTopoGetUpdStream:input_type -> service_layer.SLBgplsTopoGetUpdMsg
	9,  // 57: service_layer.SLBgplsTopoSubscription.SLBgplsTopoGetUpdStream:output_type -> service_layer.SLBgplsTopoUpdMsg
	57, // [57:58] is the sub-list for method output_type
	56, // [56:57] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_sl_bgpls_topology_proto_init() }
func file_sl_bgpls_topology_proto_init() {
	if File_sl_bgpls_topology_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sl_bgpls_topology_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoGetUpdMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoNlriFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoUpdMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoErrorStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoUpd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoNlri); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrv6Sid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoNodeDescr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoLinkDescr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoPrefixDescr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrv6SidDescr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrPolicyDescr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoOspfNodeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoOspfv3NodeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoIsisNodeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoBgpNodeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrPolicyNodeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrPolicyFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoNodeAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoLinkAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoPrefixAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrv6SidAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrPolicyAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoMtId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoNodeMsd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoNodeFlagBits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoNodeOpaqueAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsNodeName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoIsisAreaId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoLocalIpv4RouterId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoLocalIpv6RouterId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrgb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrgbIsisFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrAlgorithm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoSrlb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoFad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_bgpls_topology_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLBgplsTopoFadUnsuppTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sl_bgpls_topology_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SLBgplsTopoUpdMsg_ErrStatus)(nil),
		(*SLBgplsTopoUpdMsg_Data)(nil),
	}
	file_sl_bgpls_topology_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*SLBgplsTopoNlri_Node)(nil),
		(*SLBgplsTopoNlri_Link)(nil),
		(*SLBgplsTopoNlri_Prefix)(nil),
		(*SLBgplsTopoNlri_Srv6Sid)(nil),
		(*SLBgplsTopoNlri_SrPolicy)(nil),
	}
	file_sl_bgpls_topology_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*SLBgplsTopoNodeDescr_OspfNodeId)(nil),
		(*SLBgplsTopoNodeDescr_Ospfv3NodeId)(nil),
		(*SLBgplsTopoNodeDescr_IsisNodeId)(nil),
		(*SLBgplsTopoNodeDescr_BgpNodeId)(nil),
		(*SLBgplsTopoNodeDescr_SrPolicyNodeId)(nil),
	}
	file_sl_bgpls_topology_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*SLBgplsTopoSrPolicyDescr_Ipv4EndpointAddress)(nil),
		(*SLBgplsTopoSrPolicyDescr_Ipv6EndpointAddress)(nil),
		(*SLBgplsTopoSrPolicyDescr_Ipv4OriginatorAddress)(nil),
		(*SLBgplsTopoSrPolicyDescr_Ipv6OriginatorAddress)(nil),
	}
	file_sl_bgpls_topology_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*SLBgplsTopoAttr_NodeAttr)(nil),
		(*SLBgplsTopoAttr_LinkAttr)(nil),
		(*SLBgplsTopoAttr_PrefixAttr)(nil),
		(*SLBgplsTopoAttr_Srv6SidAttr)(nil),
		(*SLBgplsTopoAttr_SrPolicyAttr)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sl_bgpls_topology_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sl_bgpls_topology_proto_goTypes,
		DependencyIndexes: file_sl_bgpls_topology_proto_depIdxs,
		EnumInfos:         file_sl_bgpls_topology_proto_enumTypes,
		MessageInfos:      file_sl_bgpls_topology_proto_msgTypes,
	}.Build()
	File_sl_bgpls_topology_proto = out.File
	file_sl_bgpls_topology_proto_rawDesc = nil
	file_sl_bgpls_topology_proto_goTypes = nil
	file_sl_bgpls_topology_proto_depIdxs = nil
}
