// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.3
// source: sl_bgpls_topology.proto

package service_layer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SLBgplsTopoClient is the client API for SLBgplsTopo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SLBgplsTopoClient interface {
	// This call is used to get a stream of BGP-LS Topology updates.
	// It can be used to get "push" information for BGP-LS
	// adds/updates/deletes.
	//
	// The caller must close the response stream when it is no longer
	// interested in BGP-LS Topology information.
	//
	// The call takes a request message with the information on Match filters
	// to be applied while sending BGP-LS Topology updates in the response stream.
	//
	// The success/failure of the request is relayed in the response as error status.
	// If the request was successful, then the initial set of BGP-LS Topology
	// information is sent as a stream containing a Start marker, any BGP-LS
	// Topology if present, and an End Marker. The response stream will then
	// be maintained to send subsequent updates and terminated only when the
	// response stream is terminated by the caller.
	//
	// When the backend process handling the BGP-LS Topology subscription goes
	// for a restart and when it comes up and ready again, the caller would
	// get a Start marker, any BGP-LS Topology if present, and an End Marker.
	// Upon receiving the Start marker, the caller must perform a mark and
	// sweep operation on the data it received from this subscription.
	SLBgplsTopoNotifStream(ctx context.Context, in *SLBgplsTopoNotifReqMsg, opts ...grpc.CallOption) (SLBgplsTopo_SLBgplsTopoNotifStreamClient, error)
}

type sLBgplsTopoClient struct {
	cc grpc.ClientConnInterface
}

func NewSLBgplsTopoClient(cc grpc.ClientConnInterface) SLBgplsTopoClient {
	return &sLBgplsTopoClient{cc}
}

func (c *sLBgplsTopoClient) SLBgplsTopoNotifStream(ctx context.Context, in *SLBgplsTopoNotifReqMsg, opts ...grpc.CallOption) (SLBgplsTopo_SLBgplsTopoNotifStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SLBgplsTopo_ServiceDesc.Streams[0], "/service_layer.SLBgplsTopo/SLBgplsTopoNotifStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sLBgplsTopoSLBgplsTopoNotifStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SLBgplsTopo_SLBgplsTopoNotifStreamClient interface {
	Recv() (*SLBgplsTopoNotifMsg, error)
	grpc.ClientStream
}

type sLBgplsTopoSLBgplsTopoNotifStreamClient struct {
	grpc.ClientStream
}

func (x *sLBgplsTopoSLBgplsTopoNotifStreamClient) Recv() (*SLBgplsTopoNotifMsg, error) {
	m := new(SLBgplsTopoNotifMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SLBgplsTopoServer is the server API for SLBgplsTopo service.
// All implementations must embed UnimplementedSLBgplsTopoServer
// for forward compatibility
type SLBgplsTopoServer interface {
	// This call is used to get a stream of BGP-LS Topology updates.
	// It can be used to get "push" information for BGP-LS
	// adds/updates/deletes.
	//
	// The caller must close the response stream when it is no longer
	// interested in BGP-LS Topology information.
	//
	// The call takes a request message with the information on Match filters
	// to be applied while sending BGP-LS Topology updates in the response stream.
	//
	// The success/failure of the request is relayed in the response as error status.
	// If the request was successful, then the initial set of BGP-LS Topology
	// information is sent as a stream containing a Start marker, any BGP-LS
	// Topology if present, and an End Marker. The response stream will then
	// be maintained to send subsequent updates and terminated only when the
	// response stream is terminated by the caller.
	//
	// When the backend process handling the BGP-LS Topology subscription goes
	// for a restart and when it comes up and ready again, the caller would
	// get a Start marker, any BGP-LS Topology if present, and an End Marker.
	// Upon receiving the Start marker, the caller must perform a mark and
	// sweep operation on the data it received from this subscription.
	SLBgplsTopoNotifStream(*SLBgplsTopoNotifReqMsg, SLBgplsTopo_SLBgplsTopoNotifStreamServer) error
	mustEmbedUnimplementedSLBgplsTopoServer()
}

// UnimplementedSLBgplsTopoServer must be embedded to have forward compatible implementations.
type UnimplementedSLBgplsTopoServer struct {
}

func (UnimplementedSLBgplsTopoServer) SLBgplsTopoNotifStream(*SLBgplsTopoNotifReqMsg, SLBgplsTopo_SLBgplsTopoNotifStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SLBgplsTopoNotifStream not implemented")
}
func (UnimplementedSLBgplsTopoServer) mustEmbedUnimplementedSLBgplsTopoServer() {}

// UnsafeSLBgplsTopoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SLBgplsTopoServer will
// result in compilation errors.
type UnsafeSLBgplsTopoServer interface {
	mustEmbedUnimplementedSLBgplsTopoServer()
}

func RegisterSLBgplsTopoServer(s grpc.ServiceRegistrar, srv SLBgplsTopoServer) {
	s.RegisterService(&SLBgplsTopo_ServiceDesc, srv)
}

func _SLBgplsTopo_SLBgplsTopoNotifStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SLBgplsTopoNotifReqMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SLBgplsTopoServer).SLBgplsTopoNotifStream(m, &sLBgplsTopoSLBgplsTopoNotifStreamServer{stream})
}

type SLBgplsTopo_SLBgplsTopoNotifStreamServer interface {
	Send(*SLBgplsTopoNotifMsg) error
	grpc.ServerStream
}

type sLBgplsTopoSLBgplsTopoNotifStreamServer struct {
	grpc.ServerStream
}

func (x *sLBgplsTopoSLBgplsTopoNotifStreamServer) Send(m *SLBgplsTopoNotifMsg) error {
	return x.ServerStream.SendMsg(m)
}

// SLBgplsTopo_ServiceDesc is the grpc.ServiceDesc for SLBgplsTopo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SLBgplsTopo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service_layer.SLBgplsTopo",
	HandlerType: (*SLBgplsTopoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SLBgplsTopoNotifStream",
			Handler:       _SLBgplsTopo_SLBgplsTopoNotifStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sl_bgpls_topology.proto",
}
