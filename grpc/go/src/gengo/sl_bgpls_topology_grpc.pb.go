// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: sl_bgpls_topology.proto

package gengo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SLBgplsTopoSubscriptionClient is the client API for SLBgplsTopoSubscription service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SLBgplsTopoSubscriptionClient interface {
	// This call is used to get a stream of BGP-LS Topology updates.
	// It can be used to get "push" information for BGP-LS
	// adds/updates/deletes.
	//
	// The caller must maintain the GRPC channel as long as there is
	// interest in BGP-LS Topology information.
	//
	// The call takes a stream of requests to get updates, with the information on filter
	// to be applied while sending updates passed in the first request. The request stream
	// is then only maintained to indicate the interest in BGP-LS Topology information.
	//
	// The success/failure of the request is relayed in the response as error status.
	// If the request was successful, then the initial set of BGP-LS Topology information is sent
	// as a stream containing a Start marker, any BGP-LS Topology if present, and an End Marker.
	// The response stream will then be maintained to send subsequent updates and terminated only
	// when the request stream is terminated.
	SLBgplsTopoGetUpdStream(ctx context.Context, opts ...grpc.CallOption) (SLBgplsTopoSubscription_SLBgplsTopoGetUpdStreamClient, error)
}

type sLBgplsTopoSubscriptionClient struct {
	cc grpc.ClientConnInterface
}

func NewSLBgplsTopoSubscriptionClient(cc grpc.ClientConnInterface) SLBgplsTopoSubscriptionClient {
	return &sLBgplsTopoSubscriptionClient{cc}
}

func (c *sLBgplsTopoSubscriptionClient) SLBgplsTopoGetUpdStream(ctx context.Context, opts ...grpc.CallOption) (SLBgplsTopoSubscription_SLBgplsTopoGetUpdStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SLBgplsTopoSubscription_ServiceDesc.Streams[0], "/service_layer.SLBgplsTopoSubscription/SLBgplsTopoGetUpdStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sLBgplsTopoSubscriptionSLBgplsTopoGetUpdStreamClient{stream}
	return x, nil
}

type SLBgplsTopoSubscription_SLBgplsTopoGetUpdStreamClient interface {
	Send(*SLBgplsTopoGetUpdMsg) error
	Recv() (*SLBgplsTopoUpdMsg, error)
	grpc.ClientStream
}

type sLBgplsTopoSubscriptionSLBgplsTopoGetUpdStreamClient struct {
	grpc.ClientStream
}

func (x *sLBgplsTopoSubscriptionSLBgplsTopoGetUpdStreamClient) Send(m *SLBgplsTopoGetUpdMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sLBgplsTopoSubscriptionSLBgplsTopoGetUpdStreamClient) Recv() (*SLBgplsTopoUpdMsg, error) {
	m := new(SLBgplsTopoUpdMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SLBgplsTopoSubscriptionServer is the server API for SLBgplsTopoSubscription service.
// All implementations must embed UnimplementedSLBgplsTopoSubscriptionServer
// for forward compatibility
type SLBgplsTopoSubscriptionServer interface {
	// This call is used to get a stream of BGP-LS Topology updates.
	// It can be used to get "push" information for BGP-LS
	// adds/updates/deletes.
	//
	// The caller must maintain the GRPC channel as long as there is
	// interest in BGP-LS Topology information.
	//
	// The call takes a stream of requests to get updates, with the information on filter
	// to be applied while sending updates passed in the first request. The request stream
	// is then only maintained to indicate the interest in BGP-LS Topology information.
	//
	// The success/failure of the request is relayed in the response as error status.
	// If the request was successful, then the initial set of BGP-LS Topology information is sent
	// as a stream containing a Start marker, any BGP-LS Topology if present, and an End Marker.
	// The response stream will then be maintained to send subsequent updates and terminated only
	// when the request stream is terminated.
	SLBgplsTopoGetUpdStream(SLBgplsTopoSubscription_SLBgplsTopoGetUpdStreamServer) error
	mustEmbedUnimplementedSLBgplsTopoSubscriptionServer()
}

// UnimplementedSLBgplsTopoSubscriptionServer must be embedded to have forward compatible implementations.
type UnimplementedSLBgplsTopoSubscriptionServer struct {
}

func (UnimplementedSLBgplsTopoSubscriptionServer) SLBgplsTopoGetUpdStream(SLBgplsTopoSubscription_SLBgplsTopoGetUpdStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SLBgplsTopoGetUpdStream not implemented")
}
func (UnimplementedSLBgplsTopoSubscriptionServer) mustEmbedUnimplementedSLBgplsTopoSubscriptionServer() {
}

// UnsafeSLBgplsTopoSubscriptionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SLBgplsTopoSubscriptionServer will
// result in compilation errors.
type UnsafeSLBgplsTopoSubscriptionServer interface {
	mustEmbedUnimplementedSLBgplsTopoSubscriptionServer()
}

func RegisterSLBgplsTopoSubscriptionServer(s grpc.ServiceRegistrar, srv SLBgplsTopoSubscriptionServer) {
	s.RegisterService(&SLBgplsTopoSubscription_ServiceDesc, srv)
}

func _SLBgplsTopoSubscription_SLBgplsTopoGetUpdStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SLBgplsTopoSubscriptionServer).SLBgplsTopoGetUpdStream(&sLBgplsTopoSubscriptionSLBgplsTopoGetUpdStreamServer{stream})
}

type SLBgplsTopoSubscription_SLBgplsTopoGetUpdStreamServer interface {
	Send(*SLBgplsTopoUpdMsg) error
	Recv() (*SLBgplsTopoGetUpdMsg, error)
	grpc.ServerStream
}

type sLBgplsTopoSubscriptionSLBgplsTopoGetUpdStreamServer struct {
	grpc.ServerStream
}

func (x *sLBgplsTopoSubscriptionSLBgplsTopoGetUpdStreamServer) Send(m *SLBgplsTopoUpdMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sLBgplsTopoSubscriptionSLBgplsTopoGetUpdStreamServer) Recv() (*SLBgplsTopoGetUpdMsg, error) {
	m := new(SLBgplsTopoGetUpdMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SLBgplsTopoSubscription_ServiceDesc is the grpc.ServiceDesc for SLBgplsTopoSubscription service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SLBgplsTopoSubscription_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service_layer.SLBgplsTopoSubscription",
	HandlerType: (*SLBgplsTopoSubscriptionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SLBgplsTopoGetUpdStream",
			Handler:       _SLBgplsTopoSubscription_SLBgplsTopoGetUpdStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sl_bgpls_topology.proto",
}
