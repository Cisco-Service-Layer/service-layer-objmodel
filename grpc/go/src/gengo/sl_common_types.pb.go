// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sl_common_types.proto

package service_layer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Registration Operations.
type SLRegOp int32

const (
	// Reserved. 0x0
	SLRegOp_SL_REGOP_RESERVED SLRegOp = 0
	// Register. 0x1
	SLRegOp_SL_REGOP_REGISTER SLRegOp = 1
	// Un-Register. 0x2
	SLRegOp_SL_REGOP_UNREGISTER SLRegOp = 2
	// End Of File. 0x3
	SLRegOp_SL_REGOP_EOF SLRegOp = 3
)

var SLRegOp_name = map[int32]string{
	0: "SL_REGOP_RESERVED",
	1: "SL_REGOP_REGISTER",
	2: "SL_REGOP_UNREGISTER",
	3: "SL_REGOP_EOF",
}
var SLRegOp_value = map[string]int32{
	"SL_REGOP_RESERVED":   0,
	"SL_REGOP_REGISTER":   1,
	"SL_REGOP_UNREGISTER": 2,
	"SL_REGOP_EOF":        3,
}

func (x SLRegOp) String() string {
	return proto.EnumName(SLRegOp_name, int32(x))
}
func (SLRegOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_sl_common_types_1c42a54af85a4fcb, []int{0}
}

// Object Operations.
type SLObjectOp int32

const (
	// Reserved. 0x0
	SLObjectOp_SL_OBJOP_RESERVED SLObjectOp = 0
	// Add. 0x1
	SLObjectOp_SL_OBJOP_ADD SLObjectOp = 1
	// Update. 0x2
	SLObjectOp_SL_OBJOP_UPDATE SLObjectOp = 2
	// Delete. 0x3
	SLObjectOp_SL_OBJOP_DELETE SLObjectOp = 3
)

var SLObjectOp_name = map[int32]string{
	0: "SL_OBJOP_RESERVED",
	1: "SL_OBJOP_ADD",
	2: "SL_OBJOP_UPDATE",
	3: "SL_OBJOP_DELETE",
}
var SLObjectOp_value = map[string]int32{
	"SL_OBJOP_RESERVED": 0,
	"SL_OBJOP_ADD":      1,
	"SL_OBJOP_UPDATE":   2,
	"SL_OBJOP_DELETE":   3,
}

func (x SLObjectOp) String() string {
	return proto.EnumName(SLObjectOp_name, int32(x))
}
func (SLObjectOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_sl_common_types_1c42a54af85a4fcb, []int{1}
}

// Notification Operations.
type SLNotifOp int32

const (
	// Reserved. 0x0
	SLNotifOp_SL_NOTIFOP_RESERVED SLNotifOp = 0
	// Enable. 0x1
	SLNotifOp_SL_NOTIFOP_ENABLE SLNotifOp = 1
	// Disable. 0x2
	SLNotifOp_SL_NOTIFOP_DISABLE SLNotifOp = 2
)

var SLNotifOp_name = map[int32]string{
	0: "SL_NOTIFOP_RESERVED",
	1: "SL_NOTIFOP_ENABLE",
	2: "SL_NOTIFOP_DISABLE",
}
var SLNotifOp_value = map[string]int32{
	"SL_NOTIFOP_RESERVED": 0,
	"SL_NOTIFOP_ENABLE":   1,
	"SL_NOTIFOP_DISABLE":  2,
}

func (x SLNotifOp) String() string {
	return proto.EnumName(SLNotifOp_name, int32(x))
}
func (SLNotifOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_sl_common_types_1c42a54af85a4fcb, []int{2}
}

// Encapsulation Types.
// Specify tunnel encapsulation types: VXLAN or MPLS.
// This will determine the interpretation of some fields VrfName and
// LabelStack in SLRoutePath. It will mandate the presence of certain fields.
type SLEncapType int32

const (
	// Reserved. 0x0
	SLEncapType_SL_ENCAP_RESERVED SLEncapType = 0
	// Vxlan encap. 0x1
	SLEncapType_SL_ENCAP_VXLAN SLEncapType = 1
	// Mpls encap. 0x2
	SLEncapType_SL_ENCAP_MPLS SLEncapType = 2
)

var SLEncapType_name = map[int32]string{
	0: "SL_ENCAP_RESERVED",
	1: "SL_ENCAP_VXLAN",
	2: "SL_ENCAP_MPLS",
}
var SLEncapType_value = map[string]int32{
	"SL_ENCAP_RESERVED": 0,
	"SL_ENCAP_VXLAN":    1,
	"SL_ENCAP_MPLS":     2,
}

func (x SLEncapType) String() string {
	return proto.EnumName(SLEncapType_name, int32(x))
}
func (SLEncapType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_sl_common_types_1c42a54af85a4fcb, []int{3}
}

type SLErrorStatus_SLErrno int32

const (
	// Success, no errors detected. 0x0.
	SLErrorStatus_SL_SUCCESS SLErrorStatus_SLErrno = 0
	// Client is not connected.
	// The client is expected to remain connected after init and version
	// validation, RPC calls can fail with this error code otherwise.
	// Refer to RPC SLGlobalInitNotif. 0x1
	SLErrorStatus_SL_NOT_CONNECTED SLErrorStatus_SLErrno = 1
	// Operation must be retried. 0x2
	SLErrorStatus_SL_EAGAIN SLErrorStatus_SLErrno = 2
	// One or more components does not have sufficient memory. 0x3
	SLErrorStatus_SL_ENOMEM SLErrorStatus_SLErrno = 3
	// Too many outstanding requests. 0x4
	SLErrorStatus_SL_EBUSY SLErrorStatus_SLErrno = 4
	// One or more arguments are invalid. 0x5
	SLErrorStatus_SL_EINVAL SLErrorStatus_SLErrno = 5
	// Unsupported version. 0x6
	SLErrorStatus_SL_UNSUPPORTED_VER SLErrorStatus_SLErrno = 6
	// Not Available. 0x7
	SLErrorStatus_SL_NOT_AVAILABLE SLErrorStatus_SLErrno = 7
	// Stream mode not supported. 0x8
	SLErrorStatus_SL_STREAM_NOT_SUPPORTED SLErrorStatus_SLErrno = 8
	// Operation not supported. 0x9
	SLErrorStatus_SL_ENOTSUP SLErrorStatus_SLErrno = 9
	// One or more objects is errored:
	// Each object must be individually examined. 0xa
	SLErrorStatus_SL_SOME_ERR SLErrorStatus_SLErrno = 10
	// Operation Timed out.
	// The result of the operation is undeterministic (success or fail). 0xb
	SLErrorStatus_SL_TIMEOUT SLErrorStatus_SLErrno = 11
	// Due to some event, the client will no longer receive notification
	// events on this channel. 0xc
	// Such events include:
	// - Notification Session was hijacked by another client.
	SLErrorStatus_SL_NOTIF_TERM SLErrorStatus_SLErrno = 12
	// Authentication failure.
	// Incorrect credentials passed in by RPC. 0xd
	SLErrorStatus_SL_AUTH_FAIL SLErrorStatus_SLErrno = 13
	// Offset for INIT errors. 0x500
	SLErrorStatus_SL_INIT_START_OFFSET SLErrorStatus_SLErrno = 1280
	// Success, no errors detected - clear state.
	// This error is returned on the first-ever initialization, or,
	// when a fatal event has occured and all previous state was lost. 0x501
	SLErrorStatus_SL_INIT_STATE_CLEAR SLErrorStatus_SLErrno = 1281
	// Success, no errors detected - previous state is recovered.
	// This error is returned on a client re-initialization with
	// successful recovery of state. Note that any unacknowledged
	// data previously sent should be considered lost. 0x502
	SLErrorStatus_SL_INIT_STATE_READY SLErrorStatus_SLErrno = 1282
	// Server software incompatible with client software version. 0x503
	SLErrorStatus_SL_INIT_UNSUPPORTED_VER SLErrorStatus_SLErrno = 1283
	// Initialization request received while server is not ready. 0x504
	SLErrorStatus_SL_INIT_SERVER_NOT_INITIALIZED SLErrorStatus_SLErrno = 1284
	// Server operational mode change from stream to non-stream
	// or vice-versa failed. 0x505
	SLErrorStatus_SL_INIT_SERVER_MODE_CHANGE_FAILED SLErrorStatus_SLErrno = 1285
	// Offset for VRF errors. 0x1000
	SLErrorStatus_SL_RPC_VRF_START_OFFSET SLErrorStatus_SLErrno = 4096
	// Operation rejected for ALL VRFs due to too many VRF registration
	// messages in the request. 0x1001
	SLErrorStatus_SL_RPC_VRF_TOO_MANY_VRF_REG_MSGS SLErrorStatus_SLErrno = 4097
	// Operation rejected for all VRFs as server is not initialized. 0x1002
	SLErrorStatus_SL_RPC_VRF_SERVER_NOT_INITIALIZED SLErrorStatus_SLErrno = 4098
	// Offset for VRF errors. 0x2000
	SLErrorStatus_SL_VRF_START_OFFSET SLErrorStatus_SLErrno = 8192
	// VRF name in the VRF registration message is too long. 0x2001
	SLErrorStatus_SL_VRF_NAME_TOOLONG SLErrorStatus_SLErrno = 8193
	// VRF not found during a unregister or EOF. 0x2002
	SLErrorStatus_SL_VRF_NOT_FOUND SLErrorStatus_SLErrno = 8194
	// On a VRF registration, Table ID for the VRF is not found. 0x2003
	SLErrorStatus_SL_VRF_NO_TABLE_ID SLErrorStatus_SLErrno = 8195
	// VRF add registration message with invalid administrative distance. 0x2004
	SLErrorStatus_SL_VRF_REG_INVALID_ADMIN_DISTANCE SLErrorStatus_SLErrno = 8196
	// On a VRF registration, Table cannot be added to persistent memory. 0x2005
	SLErrorStatus_SL_VRF_TABLE_ADD_ERR SLErrorStatus_SLErrno = 8197
	// VRF table cannot be registered with RIB. 0x2006
	SLErrorStatus_SL_VRF_TABLE_REGISTRATION_ERR SLErrorStatus_SLErrno = 8198
	// VRF table cannot be unregistered with RIB. 0x2007
	SLErrorStatus_SL_VRF_TABLE_UNREGISTRATION_ERR SLErrorStatus_SLErrno = 8199
	// VRF table RIB EOF operation error. 0x2008
	SLErrorStatus_SL_VRF_TABLE_EOF_ERR SLErrorStatus_SLErrno = 8200
	// VRF registration message does not have a VRF name. 0x2009
	SLErrorStatus_SL_VRF_REG_VRF_NAME_MISSING SLErrorStatus_SLErrno = 8201
	// IPv4 routes in VRF cannot be played to Routing Information Base
	// on a process restart or connection re-establishment.
	// The Forwarding Information Base can
	// can be inconsistent. Agent/Controller should initiate a
	// recovery action by reloading the device. 0x2010
	SLErrorStatus_SL_VRF_V4_ROUTE_REPLAY_FATAL_ERROR SLErrorStatus_SLErrno = 8208
	// IPv6 routes in VRF cannot be played to Routing Information Base
	// on a process restart or connection re-establishment.
	// The Forwarding Information Base can
	// can be inconsistent. Agent/Controller should initiate a
	// recovery action by reloading the device. 0x2011
	SLErrorStatus_SL_VRF_V6_ROUTE_REPLAY_FATAL_ERROR SLErrorStatus_SLErrno = 8209
	// IPv4 routes in VRF were played to Routing Information Base
	// on a process restart or connection re-establishment. 0x2012
	SLErrorStatus_SL_VRF_V4_ROUTE_REPLAY_OK SLErrorStatus_SLErrno = 8210
	// IPv6 routes in VRF were played to Routing Information Base
	// on a process restart or connection re-establishment. 0x2013
	SLErrorStatus_SL_VRF_V6_ROUTE_REPLAY_OK SLErrorStatus_SLErrno = 8211
	// Offset for Route operation errors. 0x3000
	SLErrorStatus_SL_RPC_ROUTE_START_OFFSET SLErrorStatus_SLErrno = 12288
	// Operation rejected for ALL routes due to too many routes in the
	// request. 0x3001
	SLErrorStatus_SL_RPC_ROUTE_TOO_MANY_ROUTES SLErrorStatus_SLErrno = 12289
	// Operation rejected for ALL routes as the request's VRF name
	// is too long. 0x3002
	SLErrorStatus_SL_RPC_ROUTE_VRF_NAME_TOOLONG SLErrorStatus_SLErrno = 12290
	// Operation rejected for ALL routes as VRF for the given name
	// is not found. 0x3003
	SLErrorStatus_SL_RPC_ROUTE_VRF_NOT_FOUND SLErrorStatus_SLErrno = 12291
	// Operation rejected for ALL routes as VRF's Table ID is not found.
	// 0x3004
	SLErrorStatus_SL_RPC_ROUTE_VRF_NO_TABLE SLErrorStatus_SLErrno = 12292
	// Operation rejected for ALL routes as VRF is not registered with RIB.
	// 0x3005
	SLErrorStatus_SL_RPC_ROUTE_VRF_TABLE_NOT_REGISTERED SLErrorStatus_SLErrno = 12293
	// Route Operation rejected for ALL objects as VRF name is missing.
	// 0x3006
	SLErrorStatus_SL_RPC_ROUTE_VRF_NAME_MISSING SLErrorStatus_SLErrno = 12294
	// Operation rejected for all routes as the RPC request is
	// not supported for the library's initialization mode. 0x3007
	SLErrorStatus_SL_RPC_ROUTE_INIT_MODE_INCOMPATIBLE SLErrorStatus_SLErrno = 12295
	// Operation rejected for all routes as server is not initialized.
	// 0x3008
	SLErrorStatus_SL_RPC_ROUTE_SERVER_NOT_INITIALIZED SLErrorStatus_SLErrno = 12296
	// Operation rejected as the request's SrcProto is too long. 0x3009
	SLErrorStatus_SL_RPC_ROUTE_NOTIF_SRC_PROTO_TOOLONG SLErrorStatus_SLErrno = 12297
	// Operation rejected as the request's SrcProtoTag is too long. 0x300a
	SLErrorStatus_SL_RPC_ROUTE_NOTIF_SRC_PROTO_TAG_TOOLONG SLErrorStatus_SLErrno = 12298
	// Offset for route errors. 0x4000
	SLErrorStatus_SL_ROUTE_START_OFFSET SLErrorStatus_SLErrno = 16384
	// Route add operation requested but no paths were provided. 0x4001
	SLErrorStatus_SL_ROUTE_ADD_NO_PATHS SLErrorStatus_SLErrno = 16385
	// Route update operation requested but no paths were provided. 0x4002
	SLErrorStatus_SL_ROUTE_UPDATE_NO_PATHS SLErrorStatus_SLErrno = 16386
	// Route's prefix length is invalid. 0x4003
	SLErrorStatus_SL_ROUTE_INVALID_PREFIX_LEN SLErrorStatus_SLErrno = 16387
	// Route's admininstrative distance is invalid. 0x4004
	SLErrorStatus_SL_ROUTE_INVALID_ADMIN_DISTANCE SLErrorStatus_SLErrno = 16388
	// Route's number of paths exceeds system capabilities. 0x4005
	SLErrorStatus_SL_ROUTE_INVALID_NUM_PATHS SLErrorStatus_SLErrno = 16389
	// Size of IPv6 prefix is invalid. 0x4006
	SLErrorStatus_SL_ROUTE_INVALID_PREFIX_SZ SLErrorStatus_SLErrno = 16390
	// Route's prefix is invalid. 0x4007
	SLErrorStatus_SL_ROUTE_INVALID_PREFIX SLErrorStatus_SLErrno = 16391
	// Route programming failed in RIB as VRF table limit reached. 0x4008
	SLErrorStatus_SL_ROUTE_ERR_RIB_TABLE_LIMIT_REACHED SLErrorStatus_SLErrno = 16392
	// RIB route programming failed in RIB due to invalid arguments. 0x4009
	SLErrorStatus_SL_ROUTE_ERR_RIB_INVALID_ARGS SLErrorStatus_SLErrno = 16393
	// One or more paths could not be programmed in RIB as VRF
	// table limit reached. 0x400a
	SLErrorStatus_SL_ROUTE_ERR_RIB_PATH_TABLE_LIMIT SLErrorStatus_SLErrno = 16394
	// One or more paths could not be programmed in RIB as number of paths
	// reached system limit. 0x400b
	SLErrorStatus_SL_ROUTE_ERR_RIB_TOOMANYPATHS SLErrorStatus_SLErrno = 16395
	// This route already exists in the database. 0x400c
	SLErrorStatus_SL_ROUTE_EEXIST SLErrorStatus_SLErrno = 16396
	// Route prefix has host bits set. 0x400d
	SLErrorStatus_SL_ROUTE_HOST_BITS_SET SLErrorStatus_SLErrno = 16397
	// IPv4 Route prefix is a multicast address. 0x400e
	SLErrorStatus_SL_ROUTE_INVALID_PREFIX_MCAST SLErrorStatus_SLErrno = 16398
	// Route and Path AFI does not match. 0x400f
	SLErrorStatus_SL_ROUTE_PATH_AFI_MISMATCH SLErrorStatus_SLErrno = 16399
	// Number of primary paths exceeds system capabilities. 0x4010
	SLErrorStatus_SL_ROUTE_TOOMANY_PRIMARY_PATHS SLErrorStatus_SLErrno = 16400
	// Number of backup paths exceeds system capabilities. 0x4011
	SLErrorStatus_SL_ROUTE_TOOMANY_BACKUP_PATHS SLErrorStatus_SLErrno = 16401
	// The route database is out of memory. 0x4012
	SLErrorStatus_SL_ROUTE_DB_NOMEM SLErrorStatus_SLErrno = 16402
	// The route has an invalid local label. 0x4013
	SLErrorStatus_SL_ROUTE_INVALID_LOCAL_LABEL SLErrorStatus_SLErrno = 16403
	// Offset for route path errors. 0x5000
	SLErrorStatus_SL_PATH_START_OFFSET SLErrorStatus_SLErrno = 20480
	// VRF table for the path could not be determined. 0x5001
	SLErrorStatus_SL_PATH_NH_NO_TABLE SLErrorStatus_SLErrno = 20481
	// Path next hop interface not found. 0x5002
	SLErrorStatus_SL_PATH_NH_INTF_NOT_FOUND SLErrorStatus_SLErrno = 20482
	// Number of labels in the path exceeds system capabilities. 0x5003
	SLErrorStatus_SL_PATH_INVALID_LABEL_COUNT SLErrorStatus_SLErrno = 20483
	// Path ID assigned to the path falls outside the supported range. 0x5004
	SLErrorStatus_SL_PATH_INVALID_ID SLErrorStatus_SLErrno = 20484
	// Path VRF name exceeds supported length. 0x5005
	SLErrorStatus_SL_PATH_VRF_NAME_TOOLONG SLErrorStatus_SLErrno = 20485
	// Path next hop interface name exceeds supported length. 0x5006
	SLErrorStatus_SL_PATH_NH_INTF_NAME_TOOLONG SLErrorStatus_SLErrno = 20486
	// Size of next hop IPv6 address is invalid. 0x5007
	SLErrorStatus_SL_PATH_NH_INVALID_ADDR_SZ SLErrorStatus_SLErrno = 20487
	// Next hop interface name is missing from path. 0x5008
	SLErrorStatus_SL_PATH_NH_INF_NAME_MISSING SLErrorStatus_SLErrno = 20488
	// Path has an invalid next hop address. 0x5009
	SLErrorStatus_SL_PATH_INVALID_NEXT_HOP_ADDR SLErrorStatus_SLErrno = 20489
	// Number of remote backup addresses in the path exceeds
	// system capabilities. 0x500a
	SLErrorStatus_SL_PATH_INVALID_REMOTE_ADDR_COUNT SLErrorStatus_SLErrno = 20490
	// Size of IPv6 remote backup address is invalid. 0x500b
	SLErrorStatus_SL_PATH_REMOTE_ADDR_INVALID_SZ SLErrorStatus_SLErrno = 20491
	// Route and Path remote backup address AFI does not match. 0x500c
	SLErrorStatus_SL_PATH_REMOTE_ADDR_AFI_MISMATCH SLErrorStatus_SLErrno = 20492
	// Path has an invalid protection bitmap. 0x500d
	SLErrorStatus_SL_PATH_INVALID_PROTECTED_BITMAP SLErrorStatus_SLErrno = 20493
	// Protection bitmap of a backup path refers to a missing path. 0x500e
	SLErrorStatus_SL_PATH_BACKUP_MISSING_PRIMARY_PATH SLErrorStatus_SLErrno = 20494
	// Too many primary paths with same Path ID. 0x500f
	SLErrorStatus_SL_PATH_PRIMARY_ID_REPEATED SLErrorStatus_SLErrno = 20495
	// Too many pure backup paths with same Path ID. 0x5010
	SLErrorStatus_SL_PATH_BACKUP_ID_REPEATED SLErrorStatus_SLErrno = 20496
	// A primary path has too many backup paths. 0x5011
	SLErrorStatus_SL_PATH_PRIMARY_TOOMANY_BACKUP_PATHS SLErrorStatus_SLErrno = 20497
	// A primary path has too many labels. 0x5012
	SLErrorStatus_SL_PATH_PRIMARY_TOOMANY_LABELS SLErrorStatus_SLErrno = 20498
	// A primary path has too many remote addresses. 0x5013
	SLErrorStatus_SL_PATH_PRIMARY_TOOMANY_REMOTE_ADDR SLErrorStatus_SLErrno = 20499
	// A pure backup remote address is invalid. 0x5014
	SLErrorStatus_SL_PATH_REMOTE_ADDR_INVALID SLErrorStatus_SLErrno = 20500
	// Path has an invalid label. 0x5015
	SLErrorStatus_SL_PATH_INVALID_LABEL SLErrorStatus_SLErrno = 20501
	// Size of router mac address is invalid. 0x5016
	SLErrorStatus_SL_PATH_ROUTER_MAC_ADDR_INVALID_SZ SLErrorStatus_SLErrno = 20502
	// Offset for BFD operation errors. 0x6000
	SLErrorStatus_SL_RPC_BFD_START_OFFSET SLErrorStatus_SLErrno = 24576
	// BFD Operation rejected for ALL Sessions as the BFD Session count
	// is beyond supported limit. 0x6001
	SLErrorStatus_SL_RPC_BFD_TOO_MANY_BFD_SESSIONS SLErrorStatus_SLErrno = 24577
	// BFD Operation rejected due to one or many invalid parameters. 0x6002
	SLErrorStatus_SL_RPC_BFD_API_BAD_PARAMETER SLErrorStatus_SLErrno = 24578
	// BFD Operation failed as server is not registered with BFD. 0x6003
	SLErrorStatus_SL_RPC_BFD_API_CLIENT_NOT_REGISTERED SLErrorStatus_SLErrno = 24579
	// BFD Operation failed with internal error. 0x6004
	SLErrorStatus_SL_RPC_BFD_API_INTERNAL_ERROR SLErrorStatus_SLErrno = 24580
	// BFD Operation rejected as server is not initialized. 0x6005
	SLErrorStatus_SL_RPC_BFD_SERVER_NOT_INITIALIZED SLErrorStatus_SLErrno = 24581
	// BFD IPv4 not registered. 0x6006
	SLErrorStatus_SL_RPC_BFD_V4_NOT_REGISTERED SLErrorStatus_SLErrno = 24582
	// BFD IPv6 not registered. 0x6007
	SLErrorStatus_SL_RPC_BFD_V6_NOT_REGISTERED SLErrorStatus_SLErrno = 24583
	// Offset for BFD errors. 0x7000
	SLErrorStatus_SL_BFD_START_OFFSET SLErrorStatus_SLErrno = 28672
	// BFD Session's interface name exceeds supported length. 0x7001
	SLErrorStatus_SL_BFD_INTF_NAME_TOOLONG SLErrorStatus_SLErrno = 28673
	// BFD Session's interface not found. 0x7002
	SLErrorStatus_SL_BFD_INTF_NOT_FOUND SLErrorStatus_SLErrno = 28674
	// BFD Session's tx interval or multiplier are beyond the
	// supported range. 0x7003
	SLErrorStatus_SL_BFD_INVALID_ATTRIBUTE SLErrorStatus_SLErrno = 28675
	// BFD Session's interface name is missing. 0x7004
	SLErrorStatus_SL_BFD_INTF_NAME_MISSING SLErrorStatus_SLErrno = 28676
	// BFD Session's neighbor is mcast address. 0x7005
	SLErrorStatus_SL_BFD_INVALID_NBR_MCAST SLErrorStatus_SLErrno = 28677
	// BFD Session's neighbor address is invalid. 0x7006
	SLErrorStatus_SL_BFD_INVALID_NBR SLErrorStatus_SLErrno = 28678
	// BFD Session's VRF Name is too long. 0x7007
	SLErrorStatus_SL_BFD_VRF_NAME_TOOLONG SLErrorStatus_SLErrno = 28679
	// BFD Session's one or more parameters are invalid.
	// For example, Multihop BFD can not have the interface name set. 0x7008
	SLErrorStatus_SL_BFD_BAD_PARAMETER SLErrorStatus_SLErrno = 28680
	// BFD Session failed with internal error. 0x7009
	SLErrorStatus_SL_BFD_API_INTERNAL_ERROR SLErrorStatus_SLErrno = 28681
	// BFD Session's VRF not found. 0x700a
	SLErrorStatus_SL_BFD_VRF_NOT_FOUND SLErrorStatus_SLErrno = 28682
	// BFD Session's neighbor IPv6 prefix size is invalid. 0x700b
	SLErrorStatus_SL_BFD_INVALID_PREFIX_SIZE SLErrorStatus_SLErrno = 28683
	// BFD Session type invalid. 0x700c
	SLErrorStatus_SL_BFD_INVALID_SESSION_TYPE SLErrorStatus_SLErrno = 28684
	// BFD Session's VRF is Invalid. 0x700d
	SLErrorStatus_SL_BFD_INVALID_VRF SLErrorStatus_SLErrno = 28685
	// BFD Session not found. 0x700e
	SLErrorStatus_SL_BFD_SESSION_NOT_FOUND SLErrorStatus_SLErrno = 28686
	// BFD Session exists. 0x700f
	SLErrorStatus_SL_BFD_SESSION_EXISTS SLErrorStatus_SLErrno = 28687
	// BFD Internal database error. 0x7010
	SLErrorStatus_SL_BFD_INTERNAL_DB_ERROR SLErrorStatus_SLErrno = 28688
	// BFD Recovery error. 0x7011
	SLErrorStatus_SL_BFD_RECOVERY_ERROR SLErrorStatus_SLErrno = 28689
	// Offset for MPLS operation errors. 0x8000
	SLErrorStatus_SL_RPC_MPLS_START_OFFSET SLErrorStatus_SLErrno = 32768
	// Operation rejected for ALL ILMS due to too many ILMS in the
	// request. 0x8001
	SLErrorStatus_SL_RPC_MPLS_ILM_TOO_MANY_ILMS SLErrorStatus_SLErrno = 32769
	// Operation rejected for all ILMs as server is not initialized.
	// 0x0x8002
	SLErrorStatus_SL_RPC_MPLS_SERVER_NOT_INITIALIZED SLErrorStatus_SLErrno = 32770
	// Operation rejected for all ILMs as the RPC request is
	// not supported for the library's initialization mode. 0x8003
	SLErrorStatus_SL_RPC_MPLS_INIT_MODE_INCOMPATIBLE SLErrorStatus_SLErrno = 32771
	// Operation rejected for ALL label blocks due to too many
	// label blocks in the request. 0x8004
	SLErrorStatus_SL_RPC_MPLS_LABEL_BLK_TOO_MANY_LABEL_BLKS SLErrorStatus_SLErrno = 32772
	// Operation rejected for ALL ILMs as MPLS layer is not registered.
	// 0x8005
	SLErrorStatus_SL_RPC_MPLS_NOT_REGISTERED SLErrorStatus_SLErrno = 32773
	// Offset for MPLS ILM errors. 0x9000
	SLErrorStatus_SL_ILM_ERR_OFFSET SLErrorStatus_SLErrno = 36864
	// MPLS ILM add to service layer failed. 0x9001
	SLErrorStatus_SL_ILM_ADD_FAILED SLErrorStatus_SLErrno = 36865
	// MPLS ILM add to Label Switching Database failed. 0x9002
	SLErrorStatus_SL_ILM_LSD_ADD_FAILED SLErrorStatus_SLErrno = 36866
	// MPLS ILM NHLFE count exceeded max supported number. 0x9003
	SLErrorStatus_SL_ILM_INVALID_NUM_NHLFE SLErrorStatus_SLErrno = 36867
	// MPLS ILM label value out of range. 0x9004
	SLErrorStatus_SL_ILM_INVALID_LABEL SLErrorStatus_SLErrno = 36868
	// MPLS ILM delete from service layer failed. 0x9005
	SLErrorStatus_SL_ILM_DELETE_FAILED SLErrorStatus_SLErrno = 36869
	// MPLS ILM delete from Label Switching Database failed. 0x9006
	SLErrorStatus_SL_ILM_LSD_DELETE_FAILED SLErrorStatus_SLErrno = 36870
	// Number of primary NHLFEs exceeds system capabilities. 0x9007
	SLErrorStatus_SL_ILM_TOOMANY_PRIMARY_NHLFES SLErrorStatus_SLErrno = 36871
	// Number of backup NHLFEs exceeds system capabilities. 0x9008
	SLErrorStatus_SL_ILM_TOOMANY_BACKUP_NHLFES SLErrorStatus_SLErrno = 36872
	// MPLS ILM label alloc failed in Label switching database. 0x9009
	SLErrorStatus_SL_ILM_LSD_ADD_LABEL_ALLOC_FAILED SLErrorStatus_SLErrno = 36873
	// MPLS ILM NHLFE attribute invalid. 0x900a
	SLErrorStatus_SL_ILM_LSD_NHLFE_INVALID_ATTRIB SLErrorStatus_SLErrno = 36874
	// MPLS ILM already exists in the database. 0x900b
	SLErrorStatus_SL_ILM_EEXIST SLErrorStatus_SLErrno = 36875
	// The ILM database is out of memory. 0x900c
	SLErrorStatus_SL_ILM_DB_NOMEM SLErrorStatus_SLErrno = 36876
	// EXP value is outside of the valid range of <0-7>. 0x900d
	SLErrorStatus_SL_ILM_INVALID_ELSP_EXP SLErrorStatus_SLErrno = 36877
	// EXP value or Default already set. 0x900e
	SLErrorStatus_SL_ILM_ELSP_EXP_OR_DFLT_ALREADY_SET SLErrorStatus_SLErrno = 36878
	// MPLS ILM add operation requested but no paths were provided. 0x900f
	SLErrorStatus_SL_ILM_ADD_NO_PATHS SLErrorStatus_SLErrno = 36879
	// MPLS ILM update operation requested but no paths were provided. 0x9010
	SLErrorStatus_SL_ILM_UPDATE_NO_PATHS SLErrorStatus_SLErrno = 36880
	// LSP and ELSP on the same label not supported. 0x9011
	SLErrorStatus_SL_ILM_UNSUPPORTED_ELSP SLErrorStatus_SLErrno = 36881
	// Number of EXP classes on the label exceed system capabilities. 0x9012
	SLErrorStatus_SL_ILM_LABEL_TOOMANY_EXP_CLASSES SLErrorStatus_SLErrno = 36882
	// MPLS ILMs cannot be played to Label Switching Database
	// on a process restart or connection re-establishment.
	// The Forwarding Information Base can
	// can be inconsistent. Agent/Controller should initiate a
	// recovery action by reloading the device. 0x9013
	SLErrorStatus_SL_ILM_REPLAY_FATAL_ERROR SLErrorStatus_SLErrno = 36883
	// MPLS ILMs were played to Label Switching Database
	// on a process restart or connection re-establishment. 0x9014
	SLErrorStatus_SL_ILM_REPLAY_OK SLErrorStatus_SLErrno = 36884
	// Offset for MPLS NHLFE errors. 0xa000
	SLErrorStatus_SL_NHLFE_ERR_OFFSET SLErrorStatus_SLErrno = 40960
	// MPLS NHLFE vrf table could not be determined. 0xa001
	SLErrorStatus_SL_NHLFE_NH_NO_TABLE SLErrorStatus_SLErrno = 40961
	// Size of next hop IPv6 address is invalid. 0xa002
	SLErrorStatus_SL_NHLFE_NH_INVALID_ADDR_SZ SLErrorStatus_SLErrno = 40962
	// NHLFE has an invalid next hop address. 0xa003
	SLErrorStatus_SL_NHLFE_INVALID_NEXT_HOP_ADDR SLErrorStatus_SLErrno = 40963
	// Path VRF name exceeds supported length. 0xa004
	SLErrorStatus_SL_NHLFE_VRF_NAME_TOOLONG SLErrorStatus_SLErrno = 40964
	// Next hop interface name is missing from path. 0xa005
	SLErrorStatus_SL_NHLFE_NH_INF_NAME_MISSING SLErrorStatus_SLErrno = 40965
	// Interface name exceeds supported length. 0xa006
	SLErrorStatus_SL_NHLFE_NH_INTF_NAME_TOOLONG SLErrorStatus_SLErrno = 40966
	// Number of labels in the path incompatible with system capabilities
	// for the given label action. 0xa007
	SLErrorStatus_SL_NHLFE_INVALID_LABEL_COUNT SLErrorStatus_SLErrno = 40967
	// Path id is invalid in NHLFE. 0xa008
	SLErrorStatus_SL_NHLFE_INVALID_PATH_ID SLErrorStatus_SLErrno = 40968
	// MPLS NHLFE label value out of range. 0xa009
	SLErrorStatus_SL_NHLFE_INVALID_LABEL SLErrorStatus_SLErrno = 40969
	// NHLFE has an invalid protection bitmap. 0xa00a
	SLErrorStatus_SL_NHLFE_INVALID_PROTECTED_BITMAP SLErrorStatus_SLErrno = 40970
	// Number of remote backup addresses in the NHLFE exceeds
	// system capabilities. 0xa00b
	SLErrorStatus_SL_NHLFE_INVALID_REMOTE_ADDR_COUNT SLErrorStatus_SLErrno = 40971
	// Size of IPv6 remote backup address is invalid. 0xa00c
	SLErrorStatus_SL_NHLFE_REMOTE_ADDR_INVALID_SZ SLErrorStatus_SLErrno = 40972
	// A primary NHLFE has too many labels. 0xa00d
	SLErrorStatus_SL_NHLFE_PRIMARY_TOOMANY_LABELS SLErrorStatus_SLErrno = 40973
	// A primary NHLFE has too many remote addresses. 0xa00e
	SLErrorStatus_SL_NHLFE_PRIMARY_TOOMANY_REMOTE_ADDR SLErrorStatus_SLErrno = 40974
	// Too many pure backup NHLFE with same Path ID. 0xa00f
	SLErrorStatus_SL_NHLFE_BACKUP_ID_REPEATED SLErrorStatus_SLErrno = 40975
	// Too many primary NHLFE with same Path ID. 0xa010
	SLErrorStatus_SL_NHLFE_PRIMARY_ID_REPEATED SLErrorStatus_SLErrno = 40976
	// Pure backup NHLFE has a empty protected bitmap. 0xa011
	SLErrorStatus_SL_NHLFE_BACKUP_PROTECTED_BITMAP_EMPTY SLErrorStatus_SLErrno = 40977
	// A primary NHLFE has too many backup paths. 0xa012
	SLErrorStatus_SL_NHLFE_PRIMARY_TOOMANY_BACKUP_PATHS SLErrorStatus_SLErrno = 40978
	// A pure backup remote address is invalid. 0xa013
	SLErrorStatus_SL_NHLFE_REMOTE_ADDR_INVALID SLErrorStatus_SLErrno = 40979
	// Protection bitmap of a backup NHLFE refers to a missing path. 0xa014
	SLErrorStatus_SL_NHLFE_BACKUP_MISSING_PRIMARY_PATH SLErrorStatus_SLErrno = 40980
	// NHLFE next-hop missing. 0xa015
	SLErrorStatus_SL_NHLFE_NEXT_HOP_MISSING SLErrorStatus_SLErrno = 40981
	// Label action specified is invalid. 0xa016
	SLErrorStatus_SL_NHLFE_LABEL_ACTION_INVALID SLErrorStatus_SLErrno = 40982
	// NHLFE next hop interface not found. 0xa017
	SLErrorStatus_SL_NHLFE_NH_INTF_NOT_FOUND SLErrorStatus_SLErrno = 40983
	// MPLS NHLFE operation failed. 0xa018
	SLErrorStatus_SL_NHLFE_OPER_FAILED SLErrorStatus_SLErrno = 40984
	// MPLS NHLFE label action missing. 0xa019
	SLErrorStatus_SL_NHLFE_LABEL_ACTION_MISSING SLErrorStatus_SLErrno = 40985
	// Setting EXP value failed. 0xa01a
	SLErrorStatus_SL_NHLFE_EXP_SET_FAILED SLErrorStatus_SLErrno = 40986
	// ELSP protection is unsupported. 0xa01b
	SLErrorStatus_SL_NHLFE_ELSP_PROTECTION_UNSUPPORTED SLErrorStatus_SLErrno = 40987
	// Offset for label block errors. 0xb000
	SLErrorStatus_SL_LABEL_BLK_ERR_OFFSET SLErrorStatus_SLErrno = 45056
	// MPLS label block add from Label Switching Database failed. 0xb001
	SLErrorStatus_SL_LABEL_BLK_LSD_ADD_FAILED SLErrorStatus_SLErrno = 45057
	// MPLS label block delete from Label Switching Database failed. 0xb002
	SLErrorStatus_SL_LABEL_BLK_LSD_DELETE_FAILED SLErrorStatus_SLErrno = 45058
	// MPLS label block not found. 0xb003
	SLErrorStatus_SL_LABEL_BLK_LSD_LABEL_BLK_NOT_FOUND SLErrorStatus_SLErrno = 45059
	// MPLS label block in use. 0xb004
	SLErrorStatus_SL_LABEL_BLK_LSD_LABEL_BLK_IN_USE SLErrorStatus_SLErrno = 45060
	// MPLS label block attribute invalid. 0xb005
	SLErrorStatus_SL_LABEL_BLK_LSD_INVALID_ATTRIB SLErrorStatus_SLErrno = 45061
	// MPLS label block size > max size per block. 0xb006
	SLErrorStatus_SL_LABEL_BLK_INVALID_BLOCK_SIZE SLErrorStatus_SLErrno = 45062
	// MPLS label start_label < min label for platform . 0xb007
	SLErrorStatus_SL_LABEL_BLK_INVALID_START_LABEL SLErrorStatus_SLErrno = 45063
	// MPLS label block already exists in the database. 0xb008
	SLErrorStatus_SL_LABEL_BLK_EEXIST SLErrorStatus_SLErrno = 45064
	// MPLS label database is out of memory. 0xb009
	SLErrorStatus_SL_LABEL_BLK_DB_NOMEM SLErrorStatus_SLErrno = 45065
	// MPLS label block type invalid. 0xb00a
	SLErrorStatus_SL_LABEL_BLK_TYPE_INVALID SLErrorStatus_SLErrno = 45066
	// MPLS label block client name exceeds max length. 0xb00b
	SLErrorStatus_SL_LABEL_BLK_CLIENT_NAME_TOOLONG SLErrorStatus_SLErrno = 45067
	// Offset for MPLS registration errors. 0xc000
	SLErrorStatus_SL_MPLS_REG_ERR_OFFSET SLErrorStatus_SLErrno = 49152
	// MPLS registration error. 0xc001
	SLErrorStatus_SL_MPLS_REG_ERR SLErrorStatus_SLErrno = 49153
	// MPLS unregistration error. 0xc002
	SLErrorStatus_SL_MPLS_UNREG_ERR SLErrorStatus_SLErrno = 49154
	// MPLS EOF error. 0xc003
	SLErrorStatus_SL_MPLS_EOF_ERR SLErrorStatus_SLErrno = 49155
	// Offset for Interface operation errors. 0xd000
	SLErrorStatus_SL_RPC_INTF_START_OFFSET SLErrorStatus_SLErrno = 53248
	// Interface Operation rejected for ALL Sessions as the Interface
	// Session count is beyond supported limit. 0xd001
	SLErrorStatus_SL_RPC_INTF_TOO_MANY_INTERFACES SLErrorStatus_SLErrno = 53249
	// Interface Operation rejected as server is not initialized. 0xd002
	SLErrorStatus_SL_RPC_INTF_SERVER_NOT_INITIALIZED SLErrorStatus_SLErrno = 53250
	// Interface Operation failed as server is not registered with
	// interface manager. 0xd003
	SLErrorStatus_SL_RPC_INTF_API_CLIENT_NOT_REGISTERED SLErrorStatus_SLErrno = 53251
	// Offset for Interface object errors. 0xe000
	SLErrorStatus_SL_INTF_START_OFFSET SLErrorStatus_SLErrno = 57344
	// Interface object's interface name missing. 0xe001
	SLErrorStatus_SL_INTF_INTERFACE_NAME_MISSING SLErrorStatus_SLErrno = 57345
	// Interface object's interface name exceeds supported length. 0xe002
	SLErrorStatus_SL_INTF_INTERFACE_NAME_TOOLONG SLErrorStatus_SLErrno = 57346
	// Interface internal registration error. 0xe003
	SLErrorStatus_SL_INTF_INTERFACE_REG_ERR SLErrorStatus_SLErrno = 57347
	// Internal database error. 0xe004
	SLErrorStatus_SL_INTF_INTERNAL_DB_ERROR SLErrorStatus_SLErrno = 57348
	// Interface Recovery error. 0xe005
	SLErrorStatus_SL_INTF_RECOVERY_ERROR SLErrorStatus_SLErrno = 57349
	// Interface exists. 0xe006
	SLErrorStatus_SL_INTF_INTERFACE_EXISTS SLErrorStatus_SLErrno = 57350
	// Interface not found. 0xe007
	SLErrorStatus_SL_INTF_INTERFACE_NOT_FOUND SLErrorStatus_SLErrno = 57351
	// Offset for Global L2 operation errors. 0xf000
	SLErrorStatus_SL_L2_REG_START_OFFSET SLErrorStatus_SLErrno = 61440
	// Client cannot be registered with Layer-2 RIB. 0xf001
	SLErrorStatus_SL_L2_REGISTRATION_ERR SLErrorStatus_SLErrno = 61441
	// Client cannot be unregistered with Layer-2 RIB. 0xf002
	SLErrorStatus_SL_L2_UNREGISTRATION_ERR SLErrorStatus_SLErrno = 61442
	// EOF Operation error. 0xf003
	SLErrorStatus_SL_L2_EOF_ERR SLErrorStatus_SLErrno = 61443
	// L2 registration message with invalid admin distance. 0xf004
	SLErrorStatus_SL_L2_REG_INVALID_ADMIN_DISTANCE SLErrorStatus_SLErrno = 61444
	// Duplicate L2 registration message. 0xf005
	SLErrorStatus_SL_L2_REG_IS_DUPLICATE SLErrorStatus_SLErrno = 61445
	// L2 registration rejected as server is not initialized. 0xf006
	SLErrorStatus_SL_L2_REG_SERVER_NOT_INITIALIZED SLErrorStatus_SLErrno = 61446
	// Offset for L2 BD operation errors. 0x10000
	SLErrorStatus_SL_RPC_L2_BD_REG_START_OFFSET SLErrorStatus_SLErrno = 65536
	// Operation is rejected for all BDs as name is missing. 0x10001
	SLErrorStatus_SL_RPC_L2_BD_REG_NAME_MISSING SLErrorStatus_SLErrno = 65537
	// Operation rejected for all BDs due to too many BD registration
	// messages in the request. 0x10002
	SLErrorStatus_SL_RPC_L2_BD_REG_TOO_MANY_MSGS SLErrorStatus_SLErrno = 65538
	// Operation rejected for all BDs as server is not initialized.
	// 0x10003
	SLErrorStatus_SL_RPC_L2_BD_REG_SERVER_NOT_INITIALIZED SLErrorStatus_SLErrno = 65539
	// Operation rejected for all BDs as client is not registered.
	// 0x10004
	SLErrorStatus_SL_RPC_L2_BD_REG_CLIENT_NOT_REGISTERED SLErrorStatus_SLErrno = 65540
	// Offset for L2 BD object errors. 0x11000
	SLErrorStatus_SL_L2_BD_REG_START_OFFSET SLErrorStatus_SLErrno = 69632
	// BD cannot be registered with Layer-2 RIB. 0x11001
	SLErrorStatus_SL_L2_BD_REGISTRATION_ERR SLErrorStatus_SLErrno = 69633
	// BD cannot be unregistered with Layer-2 RIB. 0x11002
	SLErrorStatus_SL_L2_BD_UNREGISTRATION_ERR SLErrorStatus_SLErrno = 69634
	// BD EOF Operation error. 0x11003;
	SLErrorStatus_SL_L2_BD_EOF_ERR SLErrorStatus_SLErrno = 69635
	// Name is too long in BD registration message. 0x11004
	SLErrorStatus_SL_L2_BD_REG_NAME_TOO_LONG SLErrorStatus_SLErrno = 69636
	// BD not found in BD registration message. 0x11005
	SLErrorStatus_SL_L2_BD_REG_BD_NOT_FOUND SLErrorStatus_SLErrno = 69637
	// Offset for L2 Route Operation errors. 0x12000
	SLErrorStatus_SL_RPC_L2_ROUTE_START_OFFSET SLErrorStatus_SLErrno = 73728
	// Operation rejected for all L2 routes due to too many messages
	// in the request. 0x12001
	SLErrorStatus_SL_RPC_L2_ROUTE_TOO_MANY_MSGS SLErrorStatus_SLErrno = 73729
	// Operation rejected for all L2 routes as server is not
	// initialized. 0x12002
	SLErrorStatus_SL_RPC_L2_ROUTE_SERVER_NOT_INITIALIZED SLErrorStatus_SLErrno = 73730
	// Operation rejected for all L2 routes as client is not
	// registered. 0x12003
	SLErrorStatus_SL_RPC_L2_ROUTE_CLIENT_NOT_REGISTERED SLErrorStatus_SLErrno = 73731
	// Offset for L2 object errors. 0x13000
	SLErrorStatus_SL_L2_ROUTE_START_OFFSET SLErrorStatus_SLErrno = 77824
	// L2 route operation rejected as BD name is missing. 0x13001
	SLErrorStatus_SL_L2_ROUTE_BD_NAME_MISSING SLErrorStatus_SLErrno = 77825
	// L2 route operation rejected as BD name is too long. 0x13002
	SLErrorStatus_SL_L2_ROUTE_BD_NAME_TOOLONG SLErrorStatus_SLErrno = 77826
	// L2 route operation rejected as BD not found. 0x13003
	SLErrorStatus_SL_L2_ROUTE_BD_NOT_FOUND SLErrorStatus_SLErrno = 77827
	// L2 route operation rejected as BD is not registered. 0x13004
	SLErrorStatus_SL_L2_ROUTE_BD_NOT_REGISTERED SLErrorStatus_SLErrno = 77828
	// L2 route operation rejected due to one or more invalid
	// arguments. 0x13005
	SLErrorStatus_SL_L2_ROUTE_INVALID_ARGS SLErrorStatus_SLErrno = 77829
	// Offset for L2 Get Notification Operation errors. 0x14000
	SLErrorStatus_SL_RPC_L2_NOTIF_START_OFFSET SLErrorStatus_SLErrno = 81921
	// L2 notification request rejected as server is not initialized.
	// 0x14002
	SLErrorStatus_SL_RPC_L2_NOTIF_SERVER_NOT_INITIALIZED SLErrorStatus_SLErrno = 81922
	// L2 notification request rejected as client is not registered.
	// 0x14003
	SLErrorStatus_SL_RPC_L2_NOTIF_CLIENT_NOT_REGISTERED SLErrorStatus_SLErrno = 81923
	// L2 notification enable error. 0x14004
	SLErrorStatus_SL_RPC_L2_NOTIF_ENABLE_ERR SLErrorStatus_SLErrno = 81924
	// L2 notification disable error. 0x14005
	SLErrorStatus_SL_RPC_L2_NOTIF_DISABLE_ERR SLErrorStatus_SLErrno = 81925
	// L2 notification EOF error. 0x14006
	SLErrorStatus_SL_RPC_L2_NOTIF_EOF_ERR SLErrorStatus_SLErrno = 81926
	// L2 notification request rejected as BD name is missing. 0x14007
	SLErrorStatus_SL_RPC_L2_NOTIF_BD_NAME_MISSING SLErrorStatus_SLErrno = 81927
	// L2 notification request rejected as BD name is too long.
	// 0x14008
	SLErrorStatus_SL_RPC_L2_NOTIF_BD_NAME_TOOLONG SLErrorStatus_SLErrno = 81928
	// L2 notification request rejected as BD not found. 0x14009
	SLErrorStatus_SL_RPC_L2_NOTIF_BD_NOT_FOUND SLErrorStatus_SLErrno = 81929
	// Offset for Internal errors. 0x100000
	SLErrorStatus_SL_INTERNAL_START_OFFSET SLErrorStatus_SLErrno = 1048576
)

var SLErrorStatus_SLErrno_name = map[int32]string{
	0:       "SL_SUCCESS",
	1:       "SL_NOT_CONNECTED",
	2:       "SL_EAGAIN",
	3:       "SL_ENOMEM",
	4:       "SL_EBUSY",
	5:       "SL_EINVAL",
	6:       "SL_UNSUPPORTED_VER",
	7:       "SL_NOT_AVAILABLE",
	8:       "SL_STREAM_NOT_SUPPORTED",
	9:       "SL_ENOTSUP",
	10:      "SL_SOME_ERR",
	11:      "SL_TIMEOUT",
	12:      "SL_NOTIF_TERM",
	13:      "SL_AUTH_FAIL",
	1280:    "SL_INIT_START_OFFSET",
	1281:    "SL_INIT_STATE_CLEAR",
	1282:    "SL_INIT_STATE_READY",
	1283:    "SL_INIT_UNSUPPORTED_VER",
	1284:    "SL_INIT_SERVER_NOT_INITIALIZED",
	1285:    "SL_INIT_SERVER_MODE_CHANGE_FAILED",
	4096:    "SL_RPC_VRF_START_OFFSET",
	4097:    "SL_RPC_VRF_TOO_MANY_VRF_REG_MSGS",
	4098:    "SL_RPC_VRF_SERVER_NOT_INITIALIZED",
	8192:    "SL_VRF_START_OFFSET",
	8193:    "SL_VRF_NAME_TOOLONG",
	8194:    "SL_VRF_NOT_FOUND",
	8195:    "SL_VRF_NO_TABLE_ID",
	8196:    "SL_VRF_REG_INVALID_ADMIN_DISTANCE",
	8197:    "SL_VRF_TABLE_ADD_ERR",
	8198:    "SL_VRF_TABLE_REGISTRATION_ERR",
	8199:    "SL_VRF_TABLE_UNREGISTRATION_ERR",
	8200:    "SL_VRF_TABLE_EOF_ERR",
	8201:    "SL_VRF_REG_VRF_NAME_MISSING",
	8208:    "SL_VRF_V4_ROUTE_REPLAY_FATAL_ERROR",
	8209:    "SL_VRF_V6_ROUTE_REPLAY_FATAL_ERROR",
	8210:    "SL_VRF_V4_ROUTE_REPLAY_OK",
	8211:    "SL_VRF_V6_ROUTE_REPLAY_OK",
	12288:   "SL_RPC_ROUTE_START_OFFSET",
	12289:   "SL_RPC_ROUTE_TOO_MANY_ROUTES",
	12290:   "SL_RPC_ROUTE_VRF_NAME_TOOLONG",
	12291:   "SL_RPC_ROUTE_VRF_NOT_FOUND",
	12292:   "SL_RPC_ROUTE_VRF_NO_TABLE",
	12293:   "SL_RPC_ROUTE_VRF_TABLE_NOT_REGISTERED",
	12294:   "SL_RPC_ROUTE_VRF_NAME_MISSING",
	12295:   "SL_RPC_ROUTE_INIT_MODE_INCOMPATIBLE",
	12296:   "SL_RPC_ROUTE_SERVER_NOT_INITIALIZED",
	12297:   "SL_RPC_ROUTE_NOTIF_SRC_PROTO_TOOLONG",
	12298:   "SL_RPC_ROUTE_NOTIF_SRC_PROTO_TAG_TOOLONG",
	16384:   "SL_ROUTE_START_OFFSET",
	16385:   "SL_ROUTE_ADD_NO_PATHS",
	16386:   "SL_ROUTE_UPDATE_NO_PATHS",
	16387:   "SL_ROUTE_INVALID_PREFIX_LEN",
	16388:   "SL_ROUTE_INVALID_ADMIN_DISTANCE",
	16389:   "SL_ROUTE_INVALID_NUM_PATHS",
	16390:   "SL_ROUTE_INVALID_PREFIX_SZ",
	16391:   "SL_ROUTE_INVALID_PREFIX",
	16392:   "SL_ROUTE_ERR_RIB_TABLE_LIMIT_REACHED",
	16393:   "SL_ROUTE_ERR_RIB_INVALID_ARGS",
	16394:   "SL_ROUTE_ERR_RIB_PATH_TABLE_LIMIT",
	16395:   "SL_ROUTE_ERR_RIB_TOOMANYPATHS",
	16396:   "SL_ROUTE_EEXIST",
	16397:   "SL_ROUTE_HOST_BITS_SET",
	16398:   "SL_ROUTE_INVALID_PREFIX_MCAST",
	16399:   "SL_ROUTE_PATH_AFI_MISMATCH",
	16400:   "SL_ROUTE_TOOMANY_PRIMARY_PATHS",
	16401:   "SL_ROUTE_TOOMANY_BACKUP_PATHS",
	16402:   "SL_ROUTE_DB_NOMEM",
	16403:   "SL_ROUTE_INVALID_LOCAL_LABEL",
	20480:   "SL_PATH_START_OFFSET",
	20481:   "SL_PATH_NH_NO_TABLE",
	20482:   "SL_PATH_NH_INTF_NOT_FOUND",
	20483:   "SL_PATH_INVALID_LABEL_COUNT",
	20484:   "SL_PATH_INVALID_ID",
	20485:   "SL_PATH_VRF_NAME_TOOLONG",
	20486:   "SL_PATH_NH_INTF_NAME_TOOLONG",
	20487:   "SL_PATH_NH_INVALID_ADDR_SZ",
	20488:   "SL_PATH_NH_INF_NAME_MISSING",
	20489:   "SL_PATH_INVALID_NEXT_HOP_ADDR",
	20490:   "SL_PATH_INVALID_REMOTE_ADDR_COUNT",
	20491:   "SL_PATH_REMOTE_ADDR_INVALID_SZ",
	20492:   "SL_PATH_REMOTE_ADDR_AFI_MISMATCH",
	20493:   "SL_PATH_INVALID_PROTECTED_BITMAP",
	20494:   "SL_PATH_BACKUP_MISSING_PRIMARY_PATH",
	20495:   "SL_PATH_PRIMARY_ID_REPEATED",
	20496:   "SL_PATH_BACKUP_ID_REPEATED",
	20497:   "SL_PATH_PRIMARY_TOOMANY_BACKUP_PATHS",
	20498:   "SL_PATH_PRIMARY_TOOMANY_LABELS",
	20499:   "SL_PATH_PRIMARY_TOOMANY_REMOTE_ADDR",
	20500:   "SL_PATH_REMOTE_ADDR_INVALID",
	20501:   "SL_PATH_INVALID_LABEL",
	20502:   "SL_PATH_ROUTER_MAC_ADDR_INVALID_SZ",
	24576:   "SL_RPC_BFD_START_OFFSET",
	24577:   "SL_RPC_BFD_TOO_MANY_BFD_SESSIONS",
	24578:   "SL_RPC_BFD_API_BAD_PARAMETER",
	24579:   "SL_RPC_BFD_API_CLIENT_NOT_REGISTERED",
	24580:   "SL_RPC_BFD_API_INTERNAL_ERROR",
	24581:   "SL_RPC_BFD_SERVER_NOT_INITIALIZED",
	24582:   "SL_RPC_BFD_V4_NOT_REGISTERED",
	24583:   "SL_RPC_BFD_V6_NOT_REGISTERED",
	28672:   "SL_BFD_START_OFFSET",
	28673:   "SL_BFD_INTF_NAME_TOOLONG",
	28674:   "SL_BFD_INTF_NOT_FOUND",
	28675:   "SL_BFD_INVALID_ATTRIBUTE",
	28676:   "SL_BFD_INTF_NAME_MISSING",
	28677:   "SL_BFD_INVALID_NBR_MCAST",
	28678:   "SL_BFD_INVALID_NBR",
	28679:   "SL_BFD_VRF_NAME_TOOLONG",
	28680:   "SL_BFD_BAD_PARAMETER",
	28681:   "SL_BFD_API_INTERNAL_ERROR",
	28682:   "SL_BFD_VRF_NOT_FOUND",
	28683:   "SL_BFD_INVALID_PREFIX_SIZE",
	28684:   "SL_BFD_INVALID_SESSION_TYPE",
	28685:   "SL_BFD_INVALID_VRF",
	28686:   "SL_BFD_SESSION_NOT_FOUND",
	28687:   "SL_BFD_SESSION_EXISTS",
	28688:   "SL_BFD_INTERNAL_DB_ERROR",
	28689:   "SL_BFD_RECOVERY_ERROR",
	32768:   "SL_RPC_MPLS_START_OFFSET",
	32769:   "SL_RPC_MPLS_ILM_TOO_MANY_ILMS",
	32770:   "SL_RPC_MPLS_SERVER_NOT_INITIALIZED",
	32771:   "SL_RPC_MPLS_INIT_MODE_INCOMPATIBLE",
	32772:   "SL_RPC_MPLS_LABEL_BLK_TOO_MANY_LABEL_BLKS",
	32773:   "SL_RPC_MPLS_NOT_REGISTERED",
	36864:   "SL_ILM_ERR_OFFSET",
	36865:   "SL_ILM_ADD_FAILED",
	36866:   "SL_ILM_LSD_ADD_FAILED",
	36867:   "SL_ILM_INVALID_NUM_NHLFE",
	36868:   "SL_ILM_INVALID_LABEL",
	36869:   "SL_ILM_DELETE_FAILED",
	36870:   "SL_ILM_LSD_DELETE_FAILED",
	36871:   "SL_ILM_TOOMANY_PRIMARY_NHLFES",
	36872:   "SL_ILM_TOOMANY_BACKUP_NHLFES",
	36873:   "SL_ILM_LSD_ADD_LABEL_ALLOC_FAILED",
	36874:   "SL_ILM_LSD_NHLFE_INVALID_ATTRIB",
	36875:   "SL_ILM_EEXIST",
	36876:   "SL_ILM_DB_NOMEM",
	36877:   "SL_ILM_INVALID_ELSP_EXP",
	36878:   "SL_ILM_ELSP_EXP_OR_DFLT_ALREADY_SET",
	36879:   "SL_ILM_ADD_NO_PATHS",
	36880:   "SL_ILM_UPDATE_NO_PATHS",
	36881:   "SL_ILM_UNSUPPORTED_ELSP",
	36882:   "SL_ILM_LABEL_TOOMANY_EXP_CLASSES",
	36883:   "SL_ILM_REPLAY_FATAL_ERROR",
	36884:   "SL_ILM_REPLAY_OK",
	40960:   "SL_NHLFE_ERR_OFFSET",
	40961:   "SL_NHLFE_NH_NO_TABLE",
	40962:   "SL_NHLFE_NH_INVALID_ADDR_SZ",
	40963:   "SL_NHLFE_INVALID_NEXT_HOP_ADDR",
	40964:   "SL_NHLFE_VRF_NAME_TOOLONG",
	40965:   "SL_NHLFE_NH_INF_NAME_MISSING",
	40966:   "SL_NHLFE_NH_INTF_NAME_TOOLONG",
	40967:   "SL_NHLFE_INVALID_LABEL_COUNT",
	40968:   "SL_NHLFE_INVALID_PATH_ID",
	40969:   "SL_NHLFE_INVALID_LABEL",
	40970:   "SL_NHLFE_INVALID_PROTECTED_BITMAP",
	40971:   "SL_NHLFE_INVALID_REMOTE_ADDR_COUNT",
	40972:   "SL_NHLFE_REMOTE_ADDR_INVALID_SZ",
	40973:   "SL_NHLFE_PRIMARY_TOOMANY_LABELS",
	40974:   "SL_NHLFE_PRIMARY_TOOMANY_REMOTE_ADDR",
	40975:   "SL_NHLFE_BACKUP_ID_REPEATED",
	40976:   "SL_NHLFE_PRIMARY_ID_REPEATED",
	40977:   "SL_NHLFE_BACKUP_PROTECTED_BITMAP_EMPTY",
	40978:   "SL_NHLFE_PRIMARY_TOOMANY_BACKUP_PATHS",
	40979:   "SL_NHLFE_REMOTE_ADDR_INVALID",
	40980:   "SL_NHLFE_BACKUP_MISSING_PRIMARY_PATH",
	40981:   "SL_NHLFE_NEXT_HOP_MISSING",
	40982:   "SL_NHLFE_LABEL_ACTION_INVALID",
	40983:   "SL_NHLFE_NH_INTF_NOT_FOUND",
	40984:   "SL_NHLFE_OPER_FAILED",
	40985:   "SL_NHLFE_LABEL_ACTION_MISSING",
	40986:   "SL_NHLFE_EXP_SET_FAILED",
	40987:   "SL_NHLFE_ELSP_PROTECTION_UNSUPPORTED",
	45056:   "SL_LABEL_BLK_ERR_OFFSET",
	45057:   "SL_LABEL_BLK_LSD_ADD_FAILED",
	45058:   "SL_LABEL_BLK_LSD_DELETE_FAILED",
	45059:   "SL_LABEL_BLK_LSD_LABEL_BLK_NOT_FOUND",
	45060:   "SL_LABEL_BLK_LSD_LABEL_BLK_IN_USE",
	45061:   "SL_LABEL_BLK_LSD_INVALID_ATTRIB",
	45062:   "SL_LABEL_BLK_INVALID_BLOCK_SIZE",
	45063:   "SL_LABEL_BLK_INVALID_START_LABEL",
	45064:   "SL_LABEL_BLK_EEXIST",
	45065:   "SL_LABEL_BLK_DB_NOMEM",
	45066:   "SL_LABEL_BLK_TYPE_INVALID",
	45067:   "SL_LABEL_BLK_CLIENT_NAME_TOOLONG",
	49152:   "SL_MPLS_REG_ERR_OFFSET",
	49153:   "SL_MPLS_REG_ERR",
	49154:   "SL_MPLS_UNREG_ERR",
	49155:   "SL_MPLS_EOF_ERR",
	53248:   "SL_RPC_INTF_START_OFFSET",
	53249:   "SL_RPC_INTF_TOO_MANY_INTERFACES",
	53250:   "SL_RPC_INTF_SERVER_NOT_INITIALIZED",
	53251:   "SL_RPC_INTF_API_CLIENT_NOT_REGISTERED",
	57344:   "SL_INTF_START_OFFSET",
	57345:   "SL_INTF_INTERFACE_NAME_MISSING",
	57346:   "SL_INTF_INTERFACE_NAME_TOOLONG",
	57347:   "SL_INTF_INTERFACE_REG_ERR",
	57348:   "SL_INTF_INTERNAL_DB_ERROR",
	57349:   "SL_INTF_RECOVERY_ERROR",
	57350:   "SL_INTF_INTERFACE_EXISTS",
	57351:   "SL_INTF_INTERFACE_NOT_FOUND",
	61440:   "SL_L2_REG_START_OFFSET",
	61441:   "SL_L2_REGISTRATION_ERR",
	61442:   "SL_L2_UNREGISTRATION_ERR",
	61443:   "SL_L2_EOF_ERR",
	61444:   "SL_L2_REG_INVALID_ADMIN_DISTANCE",
	61445:   "SL_L2_REG_IS_DUPLICATE",
	61446:   "SL_L2_REG_SERVER_NOT_INITIALIZED",
	65536:   "SL_RPC_L2_BD_REG_START_OFFSET",
	65537:   "SL_RPC_L2_BD_REG_NAME_MISSING",
	65538:   "SL_RPC_L2_BD_REG_TOO_MANY_MSGS",
	65539:   "SL_RPC_L2_BD_REG_SERVER_NOT_INITIALIZED",
	65540:   "SL_RPC_L2_BD_REG_CLIENT_NOT_REGISTERED",
	69632:   "SL_L2_BD_REG_START_OFFSET",
	69633:   "SL_L2_BD_REGISTRATION_ERR",
	69634:   "SL_L2_BD_UNREGISTRATION_ERR",
	69635:   "SL_L2_BD_EOF_ERR",
	69636:   "SL_L2_BD_REG_NAME_TOO_LONG",
	69637:   "SL_L2_BD_REG_BD_NOT_FOUND",
	73728:   "SL_RPC_L2_ROUTE_START_OFFSET",
	73729:   "SL_RPC_L2_ROUTE_TOO_MANY_MSGS",
	73730:   "SL_RPC_L2_ROUTE_SERVER_NOT_INITIALIZED",
	73731:   "SL_RPC_L2_ROUTE_CLIENT_NOT_REGISTERED",
	77824:   "SL_L2_ROUTE_START_OFFSET",
	77825:   "SL_L2_ROUTE_BD_NAME_MISSING",
	77826:   "SL_L2_ROUTE_BD_NAME_TOOLONG",
	77827:   "SL_L2_ROUTE_BD_NOT_FOUND",
	77828:   "SL_L2_ROUTE_BD_NOT_REGISTERED",
	77829:   "SL_L2_ROUTE_INVALID_ARGS",
	81921:   "SL_RPC_L2_NOTIF_START_OFFSET",
	81922:   "SL_RPC_L2_NOTIF_SERVER_NOT_INITIALIZED",
	81923:   "SL_RPC_L2_NOTIF_CLIENT_NOT_REGISTERED",
	81924:   "SL_RPC_L2_NOTIF_ENABLE_ERR",
	81925:   "SL_RPC_L2_NOTIF_DISABLE_ERR",
	81926:   "SL_RPC_L2_NOTIF_EOF_ERR",
	81927:   "SL_RPC_L2_NOTIF_BD_NAME_MISSING",
	81928:   "SL_RPC_L2_NOTIF_BD_NAME_TOOLONG",
	81929:   "SL_RPC_L2_NOTIF_BD_NOT_FOUND",
	1048576: "SL_INTERNAL_START_OFFSET",
}
var SLErrorStatus_SLErrno_value = map[string]int32{
	"SL_SUCCESS":                                0,
	"SL_NOT_CONNECTED":                          1,
	"SL_EAGAIN":                                 2,
	"SL_ENOMEM":                                 3,
	"SL_EBUSY":                                  4,
	"SL_EINVAL":                                 5,
	"SL_UNSUPPORTED_VER":                        6,
	"SL_NOT_AVAILABLE":                          7,
	"SL_STREAM_NOT_SUPPORTED":                   8,
	"SL_ENOTSUP":                                9,
	"SL_SOME_ERR":                               10,
	"SL_TIMEOUT":                                11,
	"SL_NOTIF_TERM":                             12,
	"SL_AUTH_FAIL":                              13,
	"SL_INIT_START_OFFSET":                      1280,
	"SL_INIT_STATE_CLEAR":                       1281,
	"SL_INIT_STATE_READY":                       1282,
	"SL_INIT_UNSUPPORTED_VER":                   1283,
	"SL_INIT_SERVER_NOT_INITIALIZED":            1284,
	"SL_INIT_SERVER_MODE_CHANGE_FAILED":         1285,
	"SL_RPC_VRF_START_OFFSET":                   4096,
	"SL_RPC_VRF_TOO_MANY_VRF_REG_MSGS":          4097,
	"SL_RPC_VRF_SERVER_NOT_INITIALIZED":         4098,
	"SL_VRF_START_OFFSET":                       8192,
	"SL_VRF_NAME_TOOLONG":                       8193,
	"SL_VRF_NOT_FOUND":                          8194,
	"SL_VRF_NO_TABLE_ID":                        8195,
	"SL_VRF_REG_INVALID_ADMIN_DISTANCE":         8196,
	"SL_VRF_TABLE_ADD_ERR":                      8197,
	"SL_VRF_TABLE_REGISTRATION_ERR":             8198,
	"SL_VRF_TABLE_UNREGISTRATION_ERR":           8199,
	"SL_VRF_TABLE_EOF_ERR":                      8200,
	"SL_VRF_REG_VRF_NAME_MISSING":               8201,
	"SL_VRF_V4_ROUTE_REPLAY_FATAL_ERROR":        8208,
	"SL_VRF_V6_ROUTE_REPLAY_FATAL_ERROR":        8209,
	"SL_VRF_V4_ROUTE_REPLAY_OK":                 8210,
	"SL_VRF_V6_ROUTE_REPLAY_OK":                 8211,
	"SL_RPC_ROUTE_START_OFFSET":                 12288,
	"SL_RPC_ROUTE_TOO_MANY_ROUTES":              12289,
	"SL_RPC_ROUTE_VRF_NAME_TOOLONG":             12290,
	"SL_RPC_ROUTE_VRF_NOT_FOUND":                12291,
	"SL_RPC_ROUTE_VRF_NO_TABLE":                 12292,
	"SL_RPC_ROUTE_VRF_TABLE_NOT_REGISTERED":     12293,
	"SL_RPC_ROUTE_VRF_NAME_MISSING":             12294,
	"SL_RPC_ROUTE_INIT_MODE_INCOMPATIBLE":       12295,
	"SL_RPC_ROUTE_SERVER_NOT_INITIALIZED":       12296,
	"SL_RPC_ROUTE_NOTIF_SRC_PROTO_TOOLONG":      12297,
	"SL_RPC_ROUTE_NOTIF_SRC_PROTO_TAG_TOOLONG":  12298,
	"SL_ROUTE_START_OFFSET":                     16384,
	"SL_ROUTE_ADD_NO_PATHS":                     16385,
	"SL_ROUTE_UPDATE_NO_PATHS":                  16386,
	"SL_ROUTE_INVALID_PREFIX_LEN":               16387,
	"SL_ROUTE_INVALID_ADMIN_DISTANCE":           16388,
	"SL_ROUTE_INVALID_NUM_PATHS":                16389,
	"SL_ROUTE_INVALID_PREFIX_SZ":                16390,
	"SL_ROUTE_INVALID_PREFIX":                   16391,
	"SL_ROUTE_ERR_RIB_TABLE_LIMIT_REACHED":      16392,
	"SL_ROUTE_ERR_RIB_INVALID_ARGS":             16393,
	"SL_ROUTE_ERR_RIB_PATH_TABLE_LIMIT":         16394,
	"SL_ROUTE_ERR_RIB_TOOMANYPATHS":             16395,
	"SL_ROUTE_EEXIST":                           16396,
	"SL_ROUTE_HOST_BITS_SET":                    16397,
	"SL_ROUTE_INVALID_PREFIX_MCAST":             16398,
	"SL_ROUTE_PATH_AFI_MISMATCH":                16399,
	"SL_ROUTE_TOOMANY_PRIMARY_PATHS":            16400,
	"SL_ROUTE_TOOMANY_BACKUP_PATHS":             16401,
	"SL_ROUTE_DB_NOMEM":                         16402,
	"SL_ROUTE_INVALID_LOCAL_LABEL":              16403,
	"SL_PATH_START_OFFSET":                      20480,
	"SL_PATH_NH_NO_TABLE":                       20481,
	"SL_PATH_NH_INTF_NOT_FOUND":                 20482,
	"SL_PATH_INVALID_LABEL_COUNT":               20483,
	"SL_PATH_INVALID_ID":                        20484,
	"SL_PATH_VRF_NAME_TOOLONG":                  20485,
	"SL_PATH_NH_INTF_NAME_TOOLONG":              20486,
	"SL_PATH_NH_INVALID_ADDR_SZ":                20487,
	"SL_PATH_NH_INF_NAME_MISSING":               20488,
	"SL_PATH_INVALID_NEXT_HOP_ADDR":             20489,
	"SL_PATH_INVALID_REMOTE_ADDR_COUNT":         20490,
	"SL_PATH_REMOTE_ADDR_INVALID_SZ":            20491,
	"SL_PATH_REMOTE_ADDR_AFI_MISMATCH":          20492,
	"SL_PATH_INVALID_PROTECTED_BITMAP":          20493,
	"SL_PATH_BACKUP_MISSING_PRIMARY_PATH":       20494,
	"SL_PATH_PRIMARY_ID_REPEATED":               20495,
	"SL_PATH_BACKUP_ID_REPEATED":                20496,
	"SL_PATH_PRIMARY_TOOMANY_BACKUP_PATHS":      20497,
	"SL_PATH_PRIMARY_TOOMANY_LABELS":            20498,
	"SL_PATH_PRIMARY_TOOMANY_REMOTE_ADDR":       20499,
	"SL_PATH_REMOTE_ADDR_INVALID":               20500,
	"SL_PATH_INVALID_LABEL":                     20501,
	"SL_PATH_ROUTER_MAC_ADDR_INVALID_SZ":        20502,
	"SL_RPC_BFD_START_OFFSET":                   24576,
	"SL_RPC_BFD_TOO_MANY_BFD_SESSIONS":          24577,
	"SL_RPC_BFD_API_BAD_PARAMETER":              24578,
	"SL_RPC_BFD_API_CLIENT_NOT_REGISTERED":      24579,
	"SL_RPC_BFD_API_INTERNAL_ERROR":             24580,
	"SL_RPC_BFD_SERVER_NOT_INITIALIZED":         24581,
	"SL_RPC_BFD_V4_NOT_REGISTERED":              24582,
	"SL_RPC_BFD_V6_NOT_REGISTERED":              24583,
	"SL_BFD_START_OFFSET":                       28672,
	"SL_BFD_INTF_NAME_TOOLONG":                  28673,
	"SL_BFD_INTF_NOT_FOUND":                     28674,
	"SL_BFD_INVALID_ATTRIBUTE":                  28675,
	"SL_BFD_INTF_NAME_MISSING":                  28676,
	"SL_BFD_INVALID_NBR_MCAST":                  28677,
	"SL_BFD_INVALID_NBR":                        28678,
	"SL_BFD_VRF_NAME_TOOLONG":                   28679,
	"SL_BFD_BAD_PARAMETER":                      28680,
	"SL_BFD_API_INTERNAL_ERROR":                 28681,
	"SL_BFD_VRF_NOT_FOUND":                      28682,
	"SL_BFD_INVALID_PREFIX_SIZE":                28683,
	"SL_BFD_INVALID_SESSION_TYPE":               28684,
	"SL_BFD_INVALID_VRF":                        28685,
	"SL_BFD_SESSION_NOT_FOUND":                  28686,
	"SL_BFD_SESSION_EXISTS":                     28687,
	"SL_BFD_INTERNAL_DB_ERROR":                  28688,
	"SL_BFD_RECOVERY_ERROR":                     28689,
	"SL_RPC_MPLS_START_OFFSET":                  32768,
	"SL_RPC_MPLS_ILM_TOO_MANY_ILMS":             32769,
	"SL_RPC_MPLS_SERVER_NOT_INITIALIZED":        32770,
	"SL_RPC_MPLS_INIT_MODE_INCOMPATIBLE":        32771,
	"SL_RPC_MPLS_LABEL_BLK_TOO_MANY_LABEL_BLKS": 32772,
	"SL_RPC_MPLS_NOT_REGISTERED":                32773,
	"SL_ILM_ERR_OFFSET":                         36864,
	"SL_ILM_ADD_FAILED":                         36865,
	"SL_ILM_LSD_ADD_FAILED":                     36866,
	"SL_ILM_INVALID_NUM_NHLFE":                  36867,
	"SL_ILM_INVALID_LABEL":                      36868,
	"SL_ILM_DELETE_FAILED":                      36869,
	"SL_ILM_LSD_DELETE_FAILED":                  36870,
	"SL_ILM_TOOMANY_PRIMARY_NHLFES":             36871,
	"SL_ILM_TOOMANY_BACKUP_NHLFES":              36872,
	"SL_ILM_LSD_ADD_LABEL_ALLOC_FAILED":         36873,
	"SL_ILM_LSD_NHLFE_INVALID_ATTRIB":           36874,
	"SL_ILM_EEXIST":                             36875,
	"SL_ILM_DB_NOMEM":                           36876,
	"SL_ILM_INVALID_ELSP_EXP":                   36877,
	"SL_ILM_ELSP_EXP_OR_DFLT_ALREADY_SET":       36878,
	"SL_ILM_ADD_NO_PATHS":                       36879,
	"SL_ILM_UPDATE_NO_PATHS":                    36880,
	"SL_ILM_UNSUPPORTED_ELSP":                   36881,
	"SL_ILM_LABEL_TOOMANY_EXP_CLASSES":          36882,
	"SL_ILM_REPLAY_FATAL_ERROR":                 36883,
	"SL_ILM_REPLAY_OK":                          36884,
	"SL_NHLFE_ERR_OFFSET":                       40960,
	"SL_NHLFE_NH_NO_TABLE":                      40961,
	"SL_NHLFE_NH_INVALID_ADDR_SZ":               40962,
	"SL_NHLFE_INVALID_NEXT_HOP_ADDR":            40963,
	"SL_NHLFE_VRF_NAME_TOOLONG":                 40964,
	"SL_NHLFE_NH_INF_NAME_MISSING":              40965,
	"SL_NHLFE_NH_INTF_NAME_TOOLONG":             40966,
	"SL_NHLFE_INVALID_LABEL_COUNT":              40967,
	"SL_NHLFE_INVALID_PATH_ID":                  40968,
	"SL_NHLFE_INVALID_LABEL":                    40969,
	"SL_NHLFE_INVALID_PROTECTED_BITMAP":         40970,
	"SL_NHLFE_INVALID_REMOTE_ADDR_COUNT":        40971,
	"SL_NHLFE_REMOTE_ADDR_INVALID_SZ":           40972,
	"SL_NHLFE_PRIMARY_TOOMANY_LABELS":           40973,
	"SL_NHLFE_PRIMARY_TOOMANY_REMOTE_ADDR":      40974,
	"SL_NHLFE_BACKUP_ID_REPEATED":               40975,
	"SL_NHLFE_PRIMARY_ID_REPEATED":              40976,
	"SL_NHLFE_BACKUP_PROTECTED_BITMAP_EMPTY":    40977,
	"SL_NHLFE_PRIMARY_TOOMANY_BACKUP_PATHS":     40978,
	"SL_NHLFE_REMOTE_ADDR_INVALID":              40979,
	"SL_NHLFE_BACKUP_MISSING_PRIMARY_PATH":      40980,
	"SL_NHLFE_NEXT_HOP_MISSING":                 40981,
	"SL_NHLFE_LABEL_ACTION_INVALID":             40982,
	"SL_NHLFE_NH_INTF_NOT_FOUND":                40983,
	"SL_NHLFE_OPER_FAILED":                      40984,
	"SL_NHLFE_LABEL_ACTION_MISSING":             40985,
	"SL_NHLFE_EXP_SET_FAILED":                   40986,
	"SL_NHLFE_ELSP_PROTECTION_UNSUPPORTED":      40987,
	"SL_LABEL_BLK_ERR_OFFSET":                   45056,
	"SL_LABEL_BLK_LSD_ADD_FAILED":               45057,
	"SL_LABEL_BLK_LSD_DELETE_FAILED":            45058,
	"SL_LABEL_BLK_LSD_LABEL_BLK_NOT_FOUND":      45059,
	"SL_LABEL_BLK_LSD_LABEL_BLK_IN_USE":         45060,
	"SL_LABEL_BLK_LSD_INVALID_ATTRIB":           45061,
	"SL_LABEL_BLK_INVALID_BLOCK_SIZE":           45062,
	"SL_LABEL_BLK_INVALID_START_LABEL":          45063,
	"SL_LABEL_BLK_EEXIST":                       45064,
	"SL_LABEL_BLK_DB_NOMEM":                     45065,
	"SL_LABEL_BLK_TYPE_INVALID":                 45066,
	"SL_LABEL_BLK_CLIENT_NAME_TOOLONG":          45067,
	"SL_MPLS_REG_ERR_OFFSET":                    49152,
	"SL_MPLS_REG_ERR":                           49153,
	"SL_MPLS_UNREG_ERR":                         49154,
	"SL_MPLS_EOF_ERR":                           49155,
	"SL_RPC_INTF_START_OFFSET":                  53248,
	"SL_RPC_INTF_TOO_MANY_INTERFACES":           53249,
	"SL_RPC_INTF_SERVER_NOT_INITIALIZED":        53250,
	"SL_RPC_INTF_API_CLIENT_NOT_REGISTERED":     53251,
	"SL_INTF_START_OFFSET":                      57344,
	"SL_INTF_INTERFACE_NAME_MISSING":            57345,
	"SL_INTF_INTERFACE_NAME_TOOLONG":            57346,
	"SL_INTF_INTERFACE_REG_ERR":                 57347,
	"SL_INTF_INTERNAL_DB_ERROR":                 57348,
	"SL_INTF_RECOVERY_ERROR":                    57349,
	"SL_INTF_INTERFACE_EXISTS":                  57350,
	"SL_INTF_INTERFACE_NOT_FOUND":               57351,
	"SL_L2_REG_START_OFFSET":                    61440,
	"SL_L2_REGISTRATION_ERR":                    61441,
	"SL_L2_UNREGISTRATION_ERR":                  61442,
	"SL_L2_EOF_ERR":                             61443,
	"SL_L2_REG_INVALID_ADMIN_DISTANCE":          61444,
	"SL_L2_REG_IS_DUPLICATE":                    61445,
	"SL_L2_REG_SERVER_NOT_INITIALIZED":          61446,
	"SL_RPC_L2_BD_REG_START_OFFSET":             65536,
	"SL_RPC_L2_BD_REG_NAME_MISSING":             65537,
	"SL_RPC_L2_BD_REG_TOO_MANY_MSGS":            65538,
	"SL_RPC_L2_BD_REG_SERVER_NOT_INITIALIZED":   65539,
	"SL_RPC_L2_BD_REG_CLIENT_NOT_REGISTERED":    65540,
	"SL_L2_BD_REG_START_OFFSET":                 69632,
	"SL_L2_BD_REGISTRATION_ERR":                 69633,
	"SL_L2_BD_UNREGISTRATION_ERR":               69634,
	"SL_L2_BD_EOF_ERR":                          69635,
	"SL_L2_BD_REG_NAME_TOO_LONG":                69636,
	"SL_L2_BD_REG_BD_NOT_FOUND":                 69637,
	"SL_RPC_L2_ROUTE_START_OFFSET":              73728,
	"SL_RPC_L2_ROUTE_TOO_MANY_MSGS":             73729,
	"SL_RPC_L2_ROUTE_SERVER_NOT_INITIALIZED":    73730,
	"SL_RPC_L2_ROUTE_CLIENT_NOT_REGISTERED":     73731,
	"SL_L2_ROUTE_START_OFFSET":                  77824,
	"SL_L2_ROUTE_BD_NAME_MISSING":               77825,
	"SL_L2_ROUTE_BD_NAME_TOOLONG":               77826,
	"SL_L2_ROUTE_BD_NOT_FOUND":                  77827,
	"SL_L2_ROUTE_BD_NOT_REGISTERED":             77828,
	"SL_L2_ROUTE_INVALID_ARGS":                  77829,
	"SL_RPC_L2_NOTIF_START_OFFSET":              81921,
	"SL_RPC_L2_NOTIF_SERVER_NOT_INITIALIZED":    81922,
	"SL_RPC_L2_NOTIF_CLIENT_NOT_REGISTERED":     81923,
	"SL_RPC_L2_NOTIF_ENABLE_ERR":                81924,
	"SL_RPC_L2_NOTIF_DISABLE_ERR":               81925,
	"SL_RPC_L2_NOTIF_EOF_ERR":                   81926,
	"SL_RPC_L2_NOTIF_BD_NAME_MISSING":           81927,
	"SL_RPC_L2_NOTIF_BD_NAME_TOOLONG":           81928,
	"SL_RPC_L2_NOTIF_BD_NOT_FOUND":              81929,
	"SL_INTERNAL_START_OFFSET":                  1048576,
}

func (x SLErrorStatus_SLErrno) String() string {
	return proto.EnumName(SLErrorStatus_SLErrno_name, int32(x))
}
func (SLErrorStatus_SLErrno) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_sl_common_types_1c42a54af85a4fcb, []int{0, 0}
}

// Status codes, including errors and success codes.
// All service layer errors are defined below.
type SLErrorStatus struct {
	Status               SLErrorStatus_SLErrno `protobuf:"varint,1,opt,name=Status,proto3,enum=service_layer.SLErrorStatus_SLErrno" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SLErrorStatus) Reset()         { *m = SLErrorStatus{} }
func (m *SLErrorStatus) String() string { return proto.CompactTextString(m) }
func (*SLErrorStatus) ProtoMessage()    {}
func (*SLErrorStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_sl_common_types_1c42a54af85a4fcb, []int{0}
}
func (m *SLErrorStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SLErrorStatus.Unmarshal(m, b)
}
func (m *SLErrorStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SLErrorStatus.Marshal(b, m, deterministic)
}
func (dst *SLErrorStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SLErrorStatus.Merge(dst, src)
}
func (m *SLErrorStatus) XXX_Size() int {
	return xxx_messageInfo_SLErrorStatus.Size(m)
}
func (m *SLErrorStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SLErrorStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SLErrorStatus proto.InternalMessageInfo

func (m *SLErrorStatus) GetStatus() SLErrorStatus_SLErrno {
	if m != nil {
		return m.Status
	}
	return SLErrorStatus_SL_SUCCESS
}

// Interface info.
type SLInterface struct {
	// One of Interface name or handle
	//
	// Types that are valid to be assigned to Interface:
	//	*SLInterface_Name
	//	*SLInterface_Handle
	Interface            isSLInterface_Interface `protobuf_oneof:"Interface"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SLInterface) Reset()         { *m = SLInterface{} }
func (m *SLInterface) String() string { return proto.CompactTextString(m) }
func (*SLInterface) ProtoMessage()    {}
func (*SLInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_sl_common_types_1c42a54af85a4fcb, []int{1}
}
func (m *SLInterface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SLInterface.Unmarshal(m, b)
}
func (m *SLInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SLInterface.Marshal(b, m, deterministic)
}
func (dst *SLInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SLInterface.Merge(dst, src)
}
func (m *SLInterface) XXX_Size() int {
	return xxx_messageInfo_SLInterface.Size(m)
}
func (m *SLInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_SLInterface.DiscardUnknown(m)
}

var xxx_messageInfo_SLInterface proto.InternalMessageInfo

type isSLInterface_Interface interface {
	isSLInterface_Interface()
}

type SLInterface_Name struct {
	Name string `protobuf:"bytes,1,opt,name=Name,proto3,oneof"`
}

type SLInterface_Handle struct {
	Handle uint32 `protobuf:"varint,2,opt,name=Handle,proto3,oneof"`
}

func (*SLInterface_Name) isSLInterface_Interface() {}

func (*SLInterface_Handle) isSLInterface_Interface() {}

func (m *SLInterface) GetInterface() isSLInterface_Interface {
	if m != nil {
		return m.Interface
	}
	return nil
}

func (m *SLInterface) GetName() string {
	if x, ok := m.GetInterface().(*SLInterface_Name); ok {
		return x.Name
	}
	return ""
}

func (m *SLInterface) GetHandle() uint32 {
	if x, ok := m.GetInterface().(*SLInterface_Handle); ok {
		return x.Handle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SLInterface) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SLInterface_OneofMarshaler, _SLInterface_OneofUnmarshaler, _SLInterface_OneofSizer, []interface{}{
		(*SLInterface_Name)(nil),
		(*SLInterface_Handle)(nil),
	}
}

func _SLInterface_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SLInterface)
	// Interface
	switch x := m.Interface.(type) {
	case *SLInterface_Name:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Name)
	case *SLInterface_Handle:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Handle))
	case nil:
	default:
		return fmt.Errorf("SLInterface.Interface has unexpected type %T", x)
	}
	return nil
}

func _SLInterface_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SLInterface)
	switch tag {
	case 1: // Interface.Name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Interface = &SLInterface_Name{x}
		return true, err
	case 2: // Interface.Handle
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Interface = &SLInterface_Handle{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _SLInterface_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SLInterface)
	// Interface
	switch x := m.Interface.(type) {
	case *SLInterface_Name:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Name)))
		n += len(x.Name)
	case *SLInterface_Handle:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Handle))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// One of IPv4 or IPv6 addresses.
type SLIpAddress struct {
	// One of IPv4 or IPv6 address
	//
	// Types that are valid to be assigned to Address:
	//	*SLIpAddress_V4Address
	//	*SLIpAddress_V6Address
	Address              isSLIpAddress_Address `protobuf_oneof:"Address"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SLIpAddress) Reset()         { *m = SLIpAddress{} }
func (m *SLIpAddress) String() string { return proto.CompactTextString(m) }
func (*SLIpAddress) ProtoMessage()    {}
func (*SLIpAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_sl_common_types_1c42a54af85a4fcb, []int{2}
}
func (m *SLIpAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SLIpAddress.Unmarshal(m, b)
}
func (m *SLIpAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SLIpAddress.Marshal(b, m, deterministic)
}
func (dst *SLIpAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SLIpAddress.Merge(dst, src)
}
func (m *SLIpAddress) XXX_Size() int {
	return xxx_messageInfo_SLIpAddress.Size(m)
}
func (m *SLIpAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_SLIpAddress.DiscardUnknown(m)
}

var xxx_messageInfo_SLIpAddress proto.InternalMessageInfo

type isSLIpAddress_Address interface {
	isSLIpAddress_Address()
}

type SLIpAddress_V4Address struct {
	V4Address uint32 `protobuf:"varint,1,opt,name=V4Address,proto3,oneof"`
}

type SLIpAddress_V6Address struct {
	V6Address []byte `protobuf:"bytes,2,opt,name=V6Address,proto3,oneof"`
}

func (*SLIpAddress_V4Address) isSLIpAddress_Address() {}

func (*SLIpAddress_V6Address) isSLIpAddress_Address() {}

func (m *SLIpAddress) GetAddress() isSLIpAddress_Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *SLIpAddress) GetV4Address() uint32 {
	if x, ok := m.GetAddress().(*SLIpAddress_V4Address); ok {
		return x.V4Address
	}
	return 0
}

func (m *SLIpAddress) GetV6Address() []byte {
	if x, ok := m.GetAddress().(*SLIpAddress_V6Address); ok {
		return x.V6Address
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SLIpAddress) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SLIpAddress_OneofMarshaler, _SLIpAddress_OneofUnmarshaler, _SLIpAddress_OneofSizer, []interface{}{
		(*SLIpAddress_V4Address)(nil),
		(*SLIpAddress_V6Address)(nil),
	}
}

func _SLIpAddress_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SLIpAddress)
	// Address
	switch x := m.Address.(type) {
	case *SLIpAddress_V4Address:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.V4Address))
	case *SLIpAddress_V6Address:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.V6Address)
	case nil:
	default:
		return fmt.Errorf("SLIpAddress.Address has unexpected type %T", x)
	}
	return nil
}

func _SLIpAddress_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SLIpAddress)
	switch tag {
	case 1: // Address.V4Address
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Address = &SLIpAddress_V4Address{uint32(x)}
		return true, err
	case 2: // Address.V6Address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Address = &SLIpAddress_V6Address{x}
		return true, err
	default:
		return false, nil
	}
}

func _SLIpAddress_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SLIpAddress)
	// Address
	switch x := m.Address.(type) {
	case *SLIpAddress_V4Address:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.V4Address))
	case *SLIpAddress_V6Address:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.V6Address)))
		n += len(x.V6Address)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*SLErrorStatus)(nil), "service_layer.SLErrorStatus")
	proto.RegisterType((*SLInterface)(nil), "service_layer.SLInterface")
	proto.RegisterType((*SLIpAddress)(nil), "service_layer.SLIpAddress")
	proto.RegisterEnum("service_layer.SLRegOp", SLRegOp_name, SLRegOp_value)
	proto.RegisterEnum("service_layer.SLObjectOp", SLObjectOp_name, SLObjectOp_value)
	proto.RegisterEnum("service_layer.SLNotifOp", SLNotifOp_name, SLNotifOp_value)
	proto.RegisterEnum("service_layer.SLEncapType", SLEncapType_name, SLEncapType_value)
	proto.RegisterEnum("service_layer.SLErrorStatus_SLErrno", SLErrorStatus_SLErrno_name, SLErrorStatus_SLErrno_value)
}

func init() {
	proto.RegisterFile("sl_common_types.proto", fileDescriptor_sl_common_types_1c42a54af85a4fcb)
}

<<<<<<< HEAD
var fileDescriptor_sl_common_types_1c42a54af85a4fcb = []byte{
	// 2807 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x5a, 0x5b, 0x73, 0xdc, 0x44,
	0x16, 0x8e, 0x34, 0x76, 0x82, 0x3b, 0x09, 0x34, 0x0d, 0x21, 0xe1, 0x16, 0x8c, 0x09, 0x10, 0xb2,
	0x0b, 0x5b, 0x95, 0xa5, 0x78, 0x5a, 0xaa, 0xac, 0x91, 0x7a, 0x6c, 0x11, 0xdd, 0xaa, 0x5b, 0xe3,
	0xb2, 0xf3, 0xd2, 0x0e, 0xc1, 0x6c, 0xb1, 0x05, 0xb1, 0xcb, 0xf1, 0x6e, 0x15, 0x6f, 0x1a, 0x8f,
	0xc7, 0xb7, 0xdc, 0x09, 0xb0, 0xb7, 0x17, 0xfd, 0x14, 0xfd, 0x90, 0x7d, 0xd0, 0x4f, 0xd9, 0xea,
	0x56, 0xb7, 0x46, 0xdd, 0xd2, 0xf8, 0x29, 0x1e, 0x9d, 0xaf, 0xfb, 0xdc, 0xbe, 0x73, 0xfa, 0xa8,
	0x15, 0x70, 0xe5, 0xe1, 0x8f, 0xec, 0xfe, 0xf6, 0x4f, 0x3f, 0x6d, 0x3f, 0x60, 0x7b, 0x3f, 0xef,
	0x6c, 0x3d, 0xfc, 0x62, 0x67, 0x77, 0x7b, 0x6f, 0x1b, 0x5d, 0x7e, 0xb8, 0xb5, 0xfb, 0x8f, 0x1f,
	0xee, 0x6f, 0xb1, 0x1f, 0xef, 0xfd, 0xbc, 0xb5, 0xbb, 0xf4, 0xbf, 0xaf, 0xc1, 0x65, 0x1a, 0xe0,
	0xdd, 0xdd, 0xed, 0x5d, 0xba, 0x77, 0x6f, 0xef, 0xef, 0x0f, 0xd1, 0x5f, 0xc0, 0xf9, 0xea, 0xaf,
	0x6b, 0xd6, 0xa2, 0x75, 0xf3, 0xd5, 0xdb, 0x37, 0xbe, 0xd0, 0x56, 0x7c, 0xa1, 0xa1, 0xab, 0x5f,
	0x0f, 0xb6, 0x89, 0x5c, 0xb3, 0xf4, 0xf8, 0x6b, 0x70, 0x41, 0x3e, 0x43, 0xaf, 0x02, 0x40, 0x03,
	0x46, 0x87, 0xae, 0x8b, 0x29, 0x85, 0xe7, 0xd0, 0x9b, 0x00, 0xd2, 0x80, 0x45, 0x71, 0xca, 0xdc,
	0x38, 0x8a, 0xb0, 0x9b, 0x62, 0x0f, 0x5a, 0xe8, 0x32, 0x58, 0xa0, 0x01, 0xc3, 0xce, 0x8a, 0xe3,
	0x47, 0xd0, 0x56, 0x3f, 0xa3, 0x38, 0xc4, 0x21, 0xec, 0xa1, 0x4b, 0xe0, 0x15, 0xfe, 0xb3, 0x3f,
	0xa4, 0x1b, 0x70, 0x4e, 0x09, 0xfd, 0x68, 0xcd, 0x09, 0xe0, 0x3c, 0x7a, 0x0b, 0x20, 0x1a, 0xb0,
	0x61, 0x44, 0x87, 0x49, 0x12, 0x93, 0x14, 0x7b, 0x6c, 0x0d, 0x13, 0x78, 0xbe, 0xa1, 0xc8, 0x59,
	0x73, 0xfc, 0xc0, 0xe9, 0x07, 0x18, 0x5e, 0x40, 0xef, 0x82, 0xab, 0xdc, 0x9c, 0x94, 0x60, 0x27,
	0x14, 0xc2, 0x7a, 0x19, 0x7c, 0x45, 0xda, 0x8a, 0xa3, 0x38, 0xa5, 0xc3, 0x04, 0x2e, 0xa0, 0xd7,
	0xc0, 0x45, 0x0e, 0x8e, 0x43, 0xcc, 0x30, 0x21, 0x10, 0x48, 0x40, 0xea, 0x87, 0x38, 0x1e, 0xa6,
	0xf0, 0x22, 0x7a, 0x9d, 0xc7, 0x8d, 0x6f, 0xe3, 0x0f, 0x58, 0x8a, 0x49, 0x08, 0x2f, 0x21, 0x08,
	0x2e, 0xd1, 0x80, 0x39, 0xc3, 0x74, 0x95, 0x0d, 0x1c, 0x3f, 0x80, 0x97, 0xd1, 0xdb, 0xe0, 0x4d,
	0x1a, 0x30, 0x3f, 0xf2, 0x53, 0x46, 0x53, 0x87, 0xa4, 0x2c, 0x1e, 0x0c, 0x28, 0x4e, 0x61, 0x06,
	0xd0, 0x35, 0xf0, 0x46, 0x43, 0x94, 0x62, 0xe6, 0x06, 0xd8, 0x21, 0x70, 0xd4, 0x21, 0x21, 0xd8,
	0xf1, 0x36, 0xe0, 0x3e, 0x40, 0xef, 0x09, 0x0f, 0x84, 0xc4, 0x74, 0x7a, 0x0c, 0xd0, 0x47, 0xe0,
	0x7a, 0xbd, 0x0e, 0x93, 0x35, 0x4c, 0x84, 0x93, 0xfc, 0xb7, 0xef, 0x04, 0xfe, 0x5d, 0xec, 0xc1,
	0x03, 0x80, 0x3e, 0x01, 0x1f, 0x1a, 0xa0, 0x30, 0xf6, 0x30, 0x73, 0x57, 0x9d, 0x68, 0x05, 0x0b,
	0xb3, 0xb1, 0x07, 0x27, 0x4a, 0x15, 0x49, 0x5c, 0xb6, 0x46, 0x06, 0x86, 0xf1, 0x8b, 0xe8, 0x63,
	0xb0, 0xd8, 0x90, 0xa6, 0x71, 0xcc, 0x42, 0x27, 0xda, 0x10, 0x3f, 0x08, 0x5e, 0x61, 0x21, 0x5d,
	0xa1, 0x70, 0xb4, 0x28, 0x95, 0xd5, 0x9b, 0x74, 0x1b, 0xb5, 0xbf, 0x28, 0x3d, 0x6e, 0x2b, 0x5a,
	0x6e, 0x48, 0x22, 0x27, 0xc4, 0x5c, 0x53, 0x10, 0x47, 0x2b, 0x70, 0xb4, 0x8c, 0xae, 0x88, 0x1c,
	0x0b, 0x49, 0x9c, 0xb2, 0x41, 0x3c, 0x8c, 0x3c, 0xb8, 0xbf, 0x8c, 0xae, 0x0a, 0x4a, 0x54, 0x8f,
	0x59, 0xca, 0x33, 0xcf, 0x7c, 0x0f, 0x8e, 0x97, 0xa5, 0x2d, 0xca, 0x42, 0xc1, 0x20, 0xdf, 0x63,
	0x8e, 0x17, 0xfa, 0x11, 0xf3, 0x7c, 0x9a, 0x3a, 0x91, 0x8b, 0xe1, 0xc1, 0xb2, 0x4c, 0x99, 0x70,
	0x4b, 0xac, 0x76, 0x3c, 0x4f, 0x30, 0x60, 0xb2, 0x8c, 0x96, 0xc0, 0xfb, 0x9a, 0x88, 0xe0, 0x15,
	0x9f, 0xa6, 0xc4, 0x49, 0xfd, 0x38, 0x12, 0x98, 0xc3, 0x65, 0x74, 0x03, 0x7c, 0xa0, 0x61, 0x86,
	0x51, 0x0b, 0x75, 0xd4, 0x56, 0x82, 0xe3, 0x81, 0x10, 0x1d, 0x2f, 0xa3, 0x45, 0xf0, 0x6e, 0xc3,
	0xce, 0xda, 0xf3, 0xd0, 0xa7, 0xd4, 0x8f, 0x56, 0xe0, 0xc9, 0x32, 0xba, 0x0e, 0xde, 0x96, 0x51,
	0x25, 0xf1, 0x30, 0xc5, 0x46, 0xcc, 0x36, 0xd1, 0x87, 0xe0, 0x3d, 0x4d, 0x5e, 0xa7, 0x47, 0xfc,
	0xa4, 0x70, 0xb4, 0x29, 0x3d, 0x99, 0x42, 0x5a, 0x01, 0xde, 0xdf, 0x44, 0x1f, 0x80, 0x77, 0xda,
	0x98, 0x3a, 0xd4, 0xe3, 0xcd, 0x96, 0x1d, 0xcd, 0xa0, 0xc3, 0x83, 0x4d, 0x74, 0x0b, 0x7c, 0xdc,
	0x92, 0x57, 0xee, 0xf2, 0x6d, 0xaa, 0xb0, 0x60, 0xc2, 0xe9, 0x76, 0x86, 0x41, 0xca, 0xef, 0xc3,
	0x4d, 0x74, 0x13, 0x7c, 0xa4, 0x61, 0x04, 0x89, 0x05, 0x7b, 0xfd, 0xc8, 0x8d, 0xc3, 0xc4, 0x49,
	0x7d, 0xae, 0xf9, 0xa8, 0x8d, 0x9c, 0xc1, 0xbc, 0xe3, 0x4d, 0xf4, 0x19, 0xb8, 0xa1, 0x21, 0xab,
	0x7a, 0xa6, 0xc4, 0x65, 0x09, 0x89, 0xd3, 0xb8, 0x8e, 0xc7, 0xc9, 0x26, 0xfa, 0x1c, 0xdc, 0x3c,
	0x1b, 0xea, 0xac, 0xd4, 0xf0, 0xd3, 0x4d, 0xf4, 0x2e, 0xb8, 0xc2, 0xe1, 0x1d, 0x19, 0xca, 0x2c,
	0x4d, 0xc8, 0x09, 0x16, 0xc5, 0x2c, 0x71, 0xd2, 0x55, 0x0a, 0x47, 0x99, 0x85, 0xae, 0x83, 0x6b,
	0xb5, 0x70, 0x98, 0x78, 0x8e, 0xd0, 0x25, 0xe5, 0xfb, 0x99, 0x85, 0x3e, 0x14, 0x0c, 0x51, 0x31,
	0xa8, 0x78, 0x9c, 0x10, 0x3c, 0xf0, 0xd7, 0x59, 0x80, 0x23, 0x38, 0xce, 0x2c, 0xf4, 0xb1, 0x60,
	0xa1, 0x0e, 0x31, 0xa9, 0x9e, 0x59, 0x68, 0xb1, 0x4a, 0xb1, 0x06, 0x8b, 0x86, 0xa1, 0xd4, 0x35,
	0x99, 0x81, 0x90, 0xba, 0xe8, 0x5d, 0x78, 0x98, 0x59, 0xe8, 0xfd, 0xaa, 0x51, 0x74, 0x20, 0xe0,
	0x51, 0x66, 0xa1, 0x5b, 0x55, 0x80, 0x85, 0x18, 0x13, 0xc2, 0x88, 0xdf, 0x97, 0x24, 0x08, 0xfc,
	0xd0, 0xe7, 0x34, 0x70, 0xdc, 0x55, 0x9e, 0x8b, 0xcc, 0x42, 0x1f, 0x55, 0x24, 0xd0, 0xb0, 0xb5,
	0xf5, 0x64, 0x85, 0xc2, 0x93, 0xcc, 0x42, 0x9f, 0x56, 0x3d, 0x45, 0x03, 0x71, 0x7b, 0x9b, 0xbb,
	0xc2, 0xd3, 0x19, 0xbb, 0xa5, 0x71, 0xcc, 0x2b, 0xa1, 0xf2, 0xef, 0x51, 0x66, 0xa1, 0x2b, 0xe0,
	0xb5, 0x29, 0x08, 0xaf, 0xfb, 0x34, 0x85, 0x8f, 0x33, 0x0b, 0xbd, 0x07, 0xde, 0xaa, 0x1f, 0xaf,
	0xc6, 0x34, 0x65, 0x7d, 0x3f, 0xa5, 0x8c, 0x67, 0xef, 0x89, 0xb1, 0xb3, 0x11, 0x94, 0xd0, 0x75,
	0x68, 0x0a, 0x9f, 0x1a, 0x91, 0x13, 0xf6, 0x39, 0x03, 0x9f, 0xb3, 0x39, 0x74, 0x52, 0x77, 0x15,
	0x3e, 0xcb, 0x2c, 0x74, 0x43, 0xf4, 0xeb, 0xba, 0x46, 0x45, 0x89, 0x26, 0xc4, 0x0f, 0x1d, 0xb2,
	0x21, 0x33, 0xf0, 0xdc, 0x50, 0xa6, 0x50, 0x7d, 0xc7, 0xbd, 0x33, 0x4c, 0x24, 0xe8, 0x45, 0x66,
	0xa1, 0xab, 0xe0, 0xf5, 0x1a, 0xe4, 0xf5, 0x59, 0x75, 0x78, 0xfe, 0x92, 0x59, 0x68, 0xa9, 0xea,
	0x05, 0x9a, 0xa9, 0x41, 0xec, 0x3a, 0x01, 0x0b, 0x9c, 0x3e, 0x0e, 0xe0, 0xcb, 0xcc, 0x42, 0xef,
	0x88, 0x66, 0x24, 0x6c, 0xd4, 0x89, 0x9a, 0x5b, 0xe8, 0x6d, 0xd1, 0x7f, 0x85, 0x2c, 0x5a, 0x9d,
	0x56, 0xf7, 0x28, 0xb7, 0xd0, 0x07, 0xa2, 0xfc, 0x95, 0xc8, 0x8f, 0x52, 0xad, 0x13, 0xe7, 0x8a,
	0xa7, 0x02, 0x50, 0xab, 0xe6, 0x4a, 0x99, 0x1b, 0x0f, 0xa3, 0x14, 0x8e, 0x73, 0x0b, 0x5d, 0x13,
	0xdd, 0x5a, 0x83, 0xf8, 0x1e, 0x3c, 0xc8, 0x55, 0x11, 0x08, 0x49, 0xab, 0x39, 0x4d, 0x72, 0xe5,
	0x98, 0xae, 0xbd, 0x89, 0x39, 0xcc, 0x55, 0x0a, 0xa6, 0x18, 0x55, 0x07, 0x1e, 0xe1, 0xe4, 0x3d,
	0xd2, 0x4d, 0x14, 0x08, 0xa3, 0xe9, 0x1c, 0xe7, 0x2a, 0xfe, 0x9a, 0x89, 0x11, 0x5e, 0x4f, 0xd9,
	0x6a, 0x9c, 0x88, 0xad, 0xe0, 0x49, 0xae, 0x48, 0xa9, 0x81, 0x08, 0x0e, 0xe3, 0xaa, 0xba, 0x89,
	0x74, 0xf8, 0x34, 0x57, 0x39, 0x17, 0xc0, 0x26, 0x40, 0x2d, 0xa2, 0x77, 0xe1, 0xa3, 0xdc, 0x42,
	0x9f, 0x88, 0xe3, 0xb5, 0x85, 0xd2, 0x18, 0xf4, 0x58, 0xc7, 0x4d, 0x79, 0x18, 0xa7, 0x62, 0xb2,
	0xe2, 0x94, 0x0d, 0x9d, 0x04, 0x3e, 0xc9, 0x2d, 0xf4, 0x99, 0xe8, 0x87, 0x02, 0x27, 0xa9, 0x23,
	0x3d, 0xd4, 0xf8, 0x06, 0x9f, 0xea, 0x11, 0x51, 0x32, 0xe1, 0x4c, 0x82, 0x1d, 0x3e, 0x28, 0x3d,
	0xd3, 0xc3, 0x2a, 0x77, 0x6b, 0x22, 0x9e, 0xe7, 0xaa, 0xe8, 0xb5, 0x4d, 0xba, 0xa9, 0xab, 0x47,
	0xc4, 0xc4, 0x0a, 0xb6, 0x50, 0xf8, 0x8b, 0xee, 0x81, 0x89, 0x6a, 0x44, 0x08, 0xbe, 0xd4, 0x3d,
	0xe8, 0x08, 0x31, 0xfc, 0x35, 0x57, 0xed, 0xb7, 0xcd, 0x4c, 0xf8, 0x5b, 0x6e, 0xa1, 0x9b, 0x60,
	0xa9, 0x5e, 0xcf, 0xeb, 0x86, 0xb0, 0xd0, 0x71, 0x5b, 0x69, 0xfa, 0x3d, 0xaf, 0x5b, 0x5f, 0xe2,
	0xb2, 0xfe, 0xc0, 0x33, 0x6a, 0xa7, 0x50, 0xd9, 0x51, 0xe2, 0xfa, 0x14, 0x16, 0x58, 0x4c, 0xa9,
	0x1f, 0x47, 0x14, 0x8e, 0x8a, 0xba, 0x46, 0x25, 0xce, 0x49, 0x7c, 0xd6, 0x77, 0x3c, 0x96, 0x38,
	0xc4, 0x09, 0x71, 0x8a, 0x09, 0xdc, 0x2f, 0xea, 0x36, 0xda, 0xc0, 0xb8, 0x81, 0x8f, 0xa3, 0xd4,
	0x3c, 0x4a, 0xc7, 0x45, 0xdd, 0x31, 0x1a, 0x58, 0x3f, 0x4a, 0x31, 0x89, 0x9c, 0x80, 0xf7, 0xc1,
	0x98, 0xc0, 0x83, 0xa2, 0x6e, 0xa3, 0xca, 0xf6, 0xee, 0x03, 0x72, 0xd2, 0xb2, 0x6e, 0xed, 0x4b,
	0x53, 0xe3, 0x61, 0x1b, 0xf3, 0x95, 0x89, 0x39, 0x2a, 0x54, 0x27, 0x69, 0x07, 0xaa, 0x54, 0xb5,
	0xce, 0x45, 0xed, 0x3a, 0x1e, 0x95, 0x2a, 0x5d, 0x53, 0xf9, 0xb4, 0xcb, 0x18, 0x8b, 0x65, 0x81,
	0xa7, 0x29, 0xf1, 0xfb, 0xc3, 0x14, 0xc3, 0xf1, 0x8c, 0xcd, 0x55, 0x7d, 0x1f, 0x74, 0xae, 0x8f,
	0xfa, 0x44, 0xf6, 0xf1, 0x49, 0xa9, 0x5a, 0x94, 0x21, 0x87, 0x87, 0xa5, 0x4a, 0xbf, 0xf0, 0xd8,
	0xec, 0x50, 0x47, 0xa5, 0x6a, 0xab, 0x5c, 0xac, 0xa7, 0xf3, 0xb8, 0x54, 0xbd, 0x73, 0x46, 0x7a,
	0x4e, 0xb4, 0xc5, 0xfa, 0xd8, 0x75, 0x5a, 0xaa, 0xfa, 0x6b, 0x5a, 0xa4, 0x4e, 0x64, 0xff, 0x2e,
	0x86, 0x8f, 0x4a, 0x55, 0x02, 0x4d, 0x84, 0x24, 0x1c, 0x4b, 0x37, 0x12, 0x0c, 0x1f, 0x77, 0xba,
	0xb5, 0x46, 0x06, 0xf0, 0x89, 0x16, 0x10, 0xb5, 0x68, 0xaa, 0xfe, 0xa9, 0x96, 0x0d, 0x25, 0x17,
	0xe7, 0x26, 0x85, 0xcf, 0xcc, 0x68, 0x57, 0x4e, 0x79, 0x7d, 0xe9, 0xd7, 0x73, 0x6d, 0x31, 0xc1,
	0x6e, 0xbc, 0x86, 0xc9, 0x86, 0x14, 0xbe, 0xa8, 0x17, 0x73, 0x1a, 0x85, 0x49, 0x40, 0xcd, 0xa9,
	0xc9, 0x6e, 0x10, 0x5b, 0xc8, 0xfd, 0x20, 0x9c, 0x56, 0x95, 0x1f, 0x84, 0x7c, 0x7a, 0xb2, 0x65,
	0xf9, 0x4e, 0x37, 0x99, 0xf1, 0xd2, 0xd1, 0x46, 0xce, 0x18, 0x27, 0xc7, 0x99, 0x8d, 0xfe, 0x04,
	0x3e, 0x6b, 0x22, 0xab, 0x53, 0xac, 0x1f, 0xdc, 0x99, 0xaa, 0xaf, 0x1f, 0x51, 0x78, 0x90, 0xd9,
	0xea, 0xf0, 0x57, 0x0b, 0xcc, 0x79, 0x37, 0xb3, 0xe5, 0x89, 0xcd, 0x5d, 0xe0, 0xb3, 0x49, 0x7d,
	0xe2, 0x36, 0x05, 0x7c, 0x30, 0x94, 0x2f, 0x64, 0xa3, 0xdc, 0x96, 0xa1, 0xe3, 0x82, 0x80, 0x7a,
	0x4d, 0xe1, 0x7e, 0x6e, 0xcb, 0xd0, 0x71, 0x61, 0x73, 0x8e, 0x8b, 0x56, 0x83, 0x01, 0x86, 0xe3,
	0xdc, 0x96, 0x7c, 0x6a, 0xca, 0xab, 0x86, 0x77, 0xa0, 0xc9, 0x3c, 0x1c, 0xe0, 0x74, 0xfa, 0x16,
	0xa8, 0xed, 0xcb, 0x95, 0xea, 0xf2, 0xc3, 0x5c, 0xa5, 0x44, 0x66, 0x42, 0x9b, 0x60, 0x84, 0x6e,
	0x0a, 0x8f, 0x72, 0x5b, 0xb6, 0x87, 0x26, 0x48, 0x9e, 0x02, 0x12, 0x73, 0x9c, 0xdb, 0xb2, 0x1f,
	0x35, 0xbd, 0xab, 0x42, 0xea, 0x04, 0x41, 0xec, 0x2a, 0x8d, 0x27, 0xb9, 0x2d, 0x47, 0x5b, 0x05,
	0x14, 0x3b, 0x18, 0x95, 0x0f, 0x4f, 0x73, 0x1b, 0xbd, 0x21, 0x5e, 0xcf, 0x45, 0x7c, 0xab, 0xb1,
	0xee, 0x51, 0x6e, 0xcb, 0x69, 0x4f, 0x78, 0xaa, 0x86, 0xa4, 0xc7, 0xb9, 0x2d, 0x0b, 0xb9, 0x19,
	0x1c, 0x1c, 0xd0, 0x84, 0xe1, 0x75, 0x7e, 0x7a, 0xda, 0xf2, 0xec, 0x11, 0x5b, 0xc9, 0xc7, 0x2c,
	0x26, 0xcc, 0x1b, 0x04, 0x29, 0x73, 0x02, 0xf1, 0x6e, 0x2e, 0x26, 0xc3, 0xa7, 0xb9, 0x2d, 0x9b,
	0x9c, 0x4a, 0x5e, 0x3d, 0xb5, 0x3f, 0xcb, 0x6d, 0x39, 0x52, 0x72, 0x91, 0x39, 0xd3, 0x3f, 0xd7,
	0x4c, 0x68, 0xbe, 0xd8, 0x73, 0x7d, 0xf0, 0x45, 0x6e, 0xcb, 0xa3, 0x44, 0x38, 0x2d, 0xa2, 0xa2,
	0xe2, 0xc8, 0x6d, 0x71, 0x03, 0x87, 0x52, 0xcc, 0x8f, 0x49, 0xa5, 0xbf, 0x0a, 0x4a, 0x93, 0x57,
	0x85, 0xca, 0x72, 0x25, 0xd2, 0x46, 0xb9, 0xc2, 0x96, 0xfd, 0xa2, 0x96, 0x99, 0x93, 0xd2, 0x7e,
	0x61, 0xcb, 0x63, 0x5a, 0x0f, 0xb7, 0x3e, 0x07, 0x8d, 0x0b, 0x5b, 0xf6, 0xb5, 0x0a, 0xd5, 0x6a,
	0x8a, 0x07, 0x85, 0xa2, 0x42, 0x43, 0x93, 0xd1, 0x91, 0x27, 0x85, 0xe2, 0x54, 0x03, 0xd3, 0x9a,
	0xed, 0x8c, 0x8d, 0xba, 0xa6, 0xcb, 0xa3, 0x42, 0x91, 0x57, 0xc7, 0x54, 0x87, 0xbe, 0x07, 0x8f,
	0x0b, 0x95, 0x92, 0x8e, 0x3d, 0xe0, 0x49, 0xa1, 0x18, 0x69, 0xac, 0x36, 0xa7, 0xab, 0xd3, 0x42,
	0xf5, 0x11, 0x1d, 0xd8, 0x9e, 0xfe, 0x1e, 0x15, 0x8a, 0xbb, 0x15, 0x72, 0xc6, 0xf8, 0xf7, 0xd8,
	0x80, 0xcd, 0x98, 0x89, 0x9e, 0x14, 0xb6, 0x9c, 0x09, 0xba, 0x61, 0xcd, 0xa1, 0xe8, 0xa9, 0x91,
	0xe1, 0x8e, 0xa1, 0xed, 0x99, 0x11, 0xd1, 0xae, 0xd1, 0xef, 0x79, 0x61, 0xa3, 0x3f, 0x82, 0x4f,
	0xcc, 0x6d, 0xcc, 0x90, 0x30, 0x1c, 0x26, 0xe9, 0x06, 0x7c, 0x51, 0xd8, 0xe8, 0x0f, 0xe2, 0x02,
	0xa0, 0xdb, 0x40, 0x6d, 0x0e, 0xfc, 0xc5, 0x50, 0xdf, 0x35, 0xb7, 0xbd, 0x34, 0x3c, 0x3e, 0x6b,
	0x90, 0xfd, 0xd5, 0xa0, 0x62, 0x4d, 0x54, 0x45, 0xb3, 0xdf, 0x0c, 0x9a, 0xc9, 0x5e, 0xe3, 0x8a,
	0x3b, 0x1a, 0xa5, 0xf1, 0xf7, 0x42, 0x35, 0x72, 0x83, 0x8b, 0xf5, 0x71, 0xf8, 0x4f, 0xa3, 0xae,
	0xe2, 0x04, 0x13, 0xd5, 0xab, 0xfe, 0x75, 0x96, 0x0a, 0x65, 0xc7, 0xbf, 0x0b, 0x55, 0xfa, 0xb2,
	0x66, 0xd7, 0x13, 0xde, 0x4b, 0xd4, 0x1e, 0xff, 0x31, 0x7c, 0x16, 0xfd, 0x47, 0x06, 0x9c, 0x6f,
	0xd3, 0xe8, 0x15, 0xf0, 0xbf, 0xf5, 0x56, 0xd3, 0xe3, 0xa9, 0xd9, 0x02, 0x4a, 0x45, 0x82, 0xa9,
	0xd8, 0x38, 0x47, 0x46, 0xa5, 0x2a, 0x73, 0x1d, 0xa2, 0x77, 0xfd, 0xfd, 0x52, 0xd9, 0xa4, 0xa3,
	0xa6, 0xbf, 0x1a, 0x97, 0x44, 0xa5, 0x2a, 0xa3, 0x59, 0x58, 0x3f, 0x62, 0x43, 0x8a, 0xe1, 0x41,
	0xa9, 0x58, 0xaf, 0x03, 0x8d, 0xc6, 0x3e, 0xe9, 0x80, 0x29, 0x48, 0x3f, 0x88, 0xdd, 0x3b, 0xd5,
	0x08, 0x74, 0x58, 0xaa, 0x8e, 0xd9, 0x86, 0x55, 0x43, 0x45, 0x55, 0xe5, 0x47, 0xa5, 0xea, 0x98,
	0x8d, 0x90, 0x55, 0xa7, 0xc5, 0x71, 0xa9, 0x0e, 0xdc, 0xa9, 0xa8, 0x3e, 0x33, 0x4e, 0x4a, 0x45,
	0xaf, 0xc6, 0x24, 0xb0, 0x91, 0xd4, 0xd5, 0x0f, 0x4f, 0x3b, 0x0c, 0x50, 0xf3, 0x7a, 0xb3, 0x91,
	0x3d, 0x2a, 0x55, 0x13, 0x12, 0x63, 0x02, 0xc1, 0x2b, 0x5a, 0xca, 0xb2, 0x9e, 0x3c, 0xb1, 0x9a,
	0x52, 0x38, 0xca, 0x7a, 0x72, 0x48, 0x10, 0x8f, 0xc5, 0x05, 0xa3, 0x10, 0xec, 0xeb, 0x78, 0x75,
	0xa7, 0x38, 0xce, 0x7a, 0x8d, 0xc9, 0x4a, 0x30, 0xd8, 0x78, 0xcd, 0xef, 0xa9, 0xfb, 0x22, 0x25,
	0x9f, 0x4e, 0x55, 0x7c, 0x88, 0x1b, 0x38, 0x2e, 0xa6, 0x70, 0x94, 0xf7, 0x1a, 0x13, 0x53, 0xb5,
	0xcd, 0x8c, 0xd9, 0x2a, 0xef, 0xc9, 0xd2, 0xaf, 0x91, 0x67, 0xbc, 0xb0, 0xe4, 0x3d, 0x35, 0x80,
	0xb4, 0x2d, 0x2b, 0x7a, 0x92, 0x90, 0x42, 0x56, 0x1b, 0xa3, 0x1f, 0x19, 0xa3, 0x33, 0x51, 0xf5,
	0x85, 0x66, 0xd1, 0x93, 0x39, 0x33, 0x50, 0x2a, 0x7a, 0xe3, 0x0e, 0x80, 0x36, 0xbe, 0x1e, 0x14,
	0x3d, 0x75, 0x88, 0x73, 0x80, 0x31, 0xbf, 0x4e, 0x0a, 0x15, 0x65, 0x63, 0x7f, 0x39, 0x1c, 0x1f,
	0x16, 0x3d, 0x59, 0x7f, 0xa6, 0x95, 0x75, 0xb5, 0x1c, 0xd5, 0x0a, 0x82, 0xdb, 0xc2, 0x2c, 0xe3,
	0x45, 0x49, 0x97, 0xea, 0x77, 0xca, 0xa3, 0x52, 0xa9, 0x0f, 0x6e, 0x77, 0xdd, 0x39, 0xef, 0x97,
	0x3d, 0x39, 0x12, 0x05, 0xb7, 0xa7, 0xcc, 0x28, 0x7b, 0x8a, 0xa6, 0xb7, 0xcf, 0xbc, 0x15, 0x37,
	0x54, 0x33, 0x9f, 0x32, 0x6f, 0x98, 0x04, 0xbe, 0xeb, 0xa4, 0x18, 0x4e, 0xcc, 0x5d, 0x66, 0xd0,
	0xe2, 0xb0, 0xec, 0x35, 0x26, 0xf8, 0xe0, 0x36, 0xeb, 0x7b, 0x1d, 0x5e, 0x66, 0x73, 0x9d, 0x20,
	0x3d, 0xe3, 0xd9, 0x9c, 0xba, 0x3c, 0xd3, 0x40, 0x35, 0x6d, 0xc5, 0xf7, 0x87, 0xfd, 0x6c, 0x0e,
	0x7d, 0x0e, 0x3e, 0x6d, 0xeb, 0xeb, 0x36, 0x6f, 0x9c, 0xcd, 0xc9, 0xe3, 0x4d, 0x87, 0x77, 0xd3,
	0xf6, 0x20, 0x9b, 0x53, 0x2d, 0x60, 0x86, 0x23, 0x79, 0x0b, 0x60, 0x64, 0x2c, 0x9f, 0x53, 0x0d,
	0x59, 0x00, 0xba, 0x92, 0x96, 0xcf, 0xa1, 0xb7, 0xc4, 0x67, 0x8e, 0x0a, 0x52, 0xe7, 0x2d, 0x9f,
	0x93, 0x07, 0x93, 0x11, 0x20, 0x1e, 0x80, 0x6a, 0xd4, 0x6a, 0x6b, 0xe7, 0xff, 0x4c, 0xb9, 0x36,
	0xc9, 0xe7, 0x1a, 0x6f, 0xed, 0x3c, 0x71, 0x1d, 0x17, 0xd5, 0x85, 0x91, 0x0b, 0xe3, 0x73, 0x42,
	0xf5, 0x95, 0xa7, 0x30, 0xc2, 0x76, 0xe6, 0x8d, 0xfb, 0x7e, 0x31, 0xd7, 0x68, 0x0d, 0x35, 0x7a,
	0xd6, 0x5d, 0xc6, 0xdc, 0x94, 0xd3, 0x5d, 0xf6, 0x95, 0x8d, 0x08, 0x56, 0x72, 0xee, 0xa3, 0xc6,
	0x94, 0xd9, 0x90, 0xba, 0x31, 0x94, 0x2d, 0x2d, 0x5a, 0xa4, 0xc6, 0xa5, 0x8a, 0x82, 0x29, 0x6f,
	0xd2, 0xa1, 0xbd, 0x89, 0x76, 0x71, 0x3d, 0x29, 0x8d, 0x70, 0xcb, 0x8f, 0x07, 0x4d, 0x77, 0x46,
	0xd9, 0xbc, 0x1e, 0x49, 0x89, 0x99, 0xf5, 0x02, 0x3b, 0xaf, 0x47, 0xb2, 0x42, 0xcf, 0x88, 0x64,
	0x36, 0xdf, 0x78, 0x25, 0xad, 0xc1, 0x38, 0xaa, 0x3e, 0x3e, 0x11, 0x02, 0x0f, 0xb2, 0x79, 0xf5,
	0x5d, 0xa1, 0x89, 0xf0, 0x7c, 0x5a, 0x43, 0x26, 0xd9, 0x7c, 0xe3, 0xc6, 0x6b, 0xba, 0x89, 0x24,
	0xe5, 0x61, 0x36, 0xdf, 0x38, 0x46, 0x6a, 0xb1, 0x99, 0x91, 0xa3, 0xb3, 0x61, 0x2a, 0x2b, 0xc7,
	0xd9, 0x7c, 0x57, 0xc0, 0xb4, 0xcc, 0x9c, 0x64, 0xf3, 0xd3, 0x96, 0x5b, 0x35, 0x6b, 0xa3, 0x97,
	0x2c, 0x2f, 0x7d, 0x03, 0x2e, 0xd2, 0xc0, 0x7f, 0xb0, 0xb7, 0xb5, 0xfb, 0xfd, 0xbd, 0xfb, 0x5b,
	0xe8, 0x4d, 0x30, 0x17, 0xdd, 0xfb, 0x69, 0x4b, 0x7c, 0xd9, 0x5e, 0x58, 0x3d, 0x47, 0xc4, 0x2f,
	0x74, 0x0d, 0x9c, 0x5f, 0xbd, 0xf7, 0xe0, 0xbb, 0x1f, 0xb7, 0xae, 0xd9, 0x8b, 0xd6, 0xcd, 0xcb,
	0xab, 0xe7, 0x88, 0xfc, 0xdd, 0xbf, 0x08, 0x16, 0xea, 0xc5, 0x4b, 0xeb, 0x62, 0xaf, 0x1d, 0xe7,
	0xbb, 0xef, 0x76, 0xb7, 0x1e, 0x3e, 0x44, 0xd7, 0xc1, 0xc2, 0xda, 0x97, 0xf2, 0x87, 0xd8, 0x90,
	0x2f, 0x9c, 0x3e, 0x12, 0xf2, 0xaf, 0x94, 0x9c, 0x6f, 0x7c, 0x49, 0xc8, 0xd5, 0xa3, 0xfe, 0x02,
	0xb8, 0x20, 0xff, 0xbc, 0xf5, 0x2d, 0xb8, 0x40, 0x03, 0xb2, 0xf5, 0xd7, 0x78, 0x07, 0x5d, 0xa9,
	0x6e, 0xf2, 0xf1, 0x4a, 0x9c, 0x30, 0x82, 0x45, 0xf2, 0x3d, 0x78, 0xce, 0x78, 0x5c, 0x25, 0x16,
	0x5a, 0xe8, 0xaa, 0x98, 0x5e, 0xaa, 0xc7, 0xaa, 0x81, 0x60, 0x02, 0x6d, 0xf9, 0x29, 0xba, 0x12,
	0xe0, 0x78, 0x00, 0x7b, 0xb7, 0x18, 0x00, 0x34, 0x88, 0xbf, 0xfd, 0xdb, 0xd6, 0xfd, 0xbd, 0x5a,
	0x4d, 0xdc, 0xff, 0x46, 0x57, 0x53, 0x2d, 0xab, 0x1e, 0x3b, 0x9e, 0x07, 0x2d, 0xf4, 0x86, 0x18,
	0x28, 0xaa, 0x27, 0xd5, 0x8b, 0x2b, 0xb4, 0xb5, 0x87, 0xd5, 0x74, 0x08, 0x7b, 0xb7, 0x28, 0x58,
	0xa0, 0x41, 0xb4, 0xbd, 0xf7, 0xc3, 0xf7, 0xf1, 0x8e, 0x34, 0x4c, 0x24, 0xad, 0xcb, 0x11, 0x25,
	0xa8, 0x18, 0x08, 0x2d, 0xf9, 0x25, 0x5f, 0x3d, 0x96, 0xb4, 0x83, 0xf6, 0xad, 0x3b, 0x3c, 0xe6,
	0xf8, 0xc1, 0xfd, 0x7b, 0x3b, 0xe9, 0xcf, 0x3b, 0x5b, 0x72, 0x35, 0x8e, 0x5c, 0x47, 0xdb, 0x14,
	0x81, 0x57, 0xeb, 0xc7, 0x6b, 0xeb, 0x81, 0x13, 0x41, 0x4b, 0x7e, 0x9f, 0xaf, 0x9e, 0xf1, 0x79,
	0x08, 0xda, 0xdf, 0x9e, 0x17, 0xff, 0x03, 0xe2, 0xcf, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xc9,
	0xe7, 0x59, 0xb0, 0x1a, 0x21, 0x00, 0x00,
=======
var fileDescriptor3 = []byte{
<<<<<<< HEAD
	// 2844 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x5a, 0xdb, 0x72, 0xdc, 0x44,
	0xfa, 0x8f, 0x34, 0x76, 0x82, 0x3b, 0x09, 0x34, 0x0d, 0x21, 0xe1, 0x14, 0x8c, 0x09, 0x10, 0xf2,
	0xff, 0xc3, 0x56, 0x65, 0x29, 0xae, 0x76, 0xb7, 0xac, 0x91, 0x7a, 0x6c, 0x11, 0x9d, 0x4a, 0xad,
	0x71, 0xd9, 0xb9, 0x69, 0x87, 0x60, 0xb6, 0xd8, 0x82, 0xd8, 0xe5, 0x78, 0xb7, 0x8a, 0x3b, 0x8d,
	0xc7, 0xe3, 0x53, 0xce, 0x04, 0xd8, 0xd3, 0x8d, 0x1e, 0x45, 0x6f, 0xb0, 0xaf, 0xa0, 0x37, 0xd9,
	0xad, 0x3e, 0x69, 0xd4, 0x2d, 0x8d, 0xaf, 0x12, 0xe9, 0xfb, 0x75, 0x7f, 0x5f, 0x7f, 0xc7, 0x9f,
	0x7a, 0x0c, 0xae, 0x3c, 0xfc, 0x81, 0xde, 0xdf, 0xfe, 0xf1, 0xc7, 0xed, 0x07, 0x74, 0xef, 0xa7,
	0x9d, 0xad, 0x87, 0x5f, 0xec, 0xec, 0x6e, 0xef, 0x6d, 0xa3, 0xcb, 0x0f, 0xb7, 0x76, 0xff, 0xf6,
	0xfd, 0xfd, 0x2d, 0xfa, 0xc3, 0xbd, 0x9f, 0xb6, 0x76, 0x97, 0xfe, 0xf3, 0x27, 0x70, 0x99, 0x04,
	0x78, 0x77, 0x77, 0x7b, 0x97, 0xec, 0xdd, 0xdb, 0xfb, 0xeb, 0x43, 0xf4, 0x07, 0x70, 0x5e, 0xfc,
	0xef, 0x9a, 0xb5, 0x68, 0xdd, 0x7c, 0xf5, 0xf6, 0x8d, 0x2f, 0xb4, 0x15, 0x5f, 0x68, 0x68, 0xf1,
	0xf4, 0x60, 0x3b, 0x95, 0x6b, 0x96, 0xfe, 0xfb, 0x47, 0x70, 0x41, 0xbe, 0x43, 0xaf, 0x02, 0x40,
	0x02, 0x4a, 0x86, 0xae, 0x8b, 0x09, 0x81, 0xe7, 0xd0, 0x9b, 0x00, 0x92, 0x80, 0x46, 0x71, 0x46,
	0xdd, 0x38, 0x8a, 0xb0, 0x9b, 0x61, 0x0f, 0x5a, 0xe8, 0x32, 0x58, 0x20, 0x01, 0xc5, 0xce, 0x8a,
	0xe3, 0x47, 0xd0, 0x56, 0x8f, 0x51, 0x1c, 0xe2, 0x10, 0xf6, 0xd0, 0x25, 0xf0, 0x0a, 0x7b, 0xec,
	0x0f, 0xc9, 0x06, 0x9c, 0x53, 0x42, 0x3f, 0x5a, 0x73, 0x02, 0x38, 0x8f, 0xde, 0x02, 0x88, 0x04,
	0x74, 0x18, 0x91, 0x61, 0x92, 0xc4, 0x69, 0x86, 0x3d, 0xba, 0x86, 0x53, 0x78, 0xbe, 0xa1, 0xc8,
	0x59, 0x73, 0xfc, 0xc0, 0xe9, 0x07, 0x18, 0x5e, 0x40, 0xef, 0x82, 0xab, 0xcc, 0x9c, 0x2c, 0xc5,
	0x4e, 0xc8, 0x85, 0xf5, 0x32, 0xf8, 0x8a, 0xb4, 0x15, 0x47, 0x71, 0x46, 0x86, 0x09, 0x5c, 0x40,
	0xaf, 0x81, 0x8b, 0x0c, 0x1c, 0x87, 0x98, 0xe2, 0x34, 0x85, 0x40, 0x02, 0x32, 0x3f, 0xc4, 0xf1,
	0x30, 0x83, 0x17, 0xd1, 0xeb, 0xcc, 0x6f, 0x6c, 0x1b, 0x7f, 0x40, 0x33, 0x9c, 0x86, 0xf0, 0x12,
	0x82, 0xe0, 0x12, 0x09, 0xa8, 0x33, 0xcc, 0x56, 0xe9, 0xc0, 0xf1, 0x03, 0x78, 0x19, 0xbd, 0x0d,
	0xde, 0x24, 0x01, 0xf5, 0x23, 0x3f, 0xa3, 0x24, 0x73, 0xd2, 0x8c, 0xc6, 0x83, 0x01, 0xc1, 0x19,
	0xcc, 0x01, 0xba, 0x06, 0xde, 0x68, 0x88, 0x32, 0x4c, 0xdd, 0x00, 0x3b, 0x29, 0x1c, 0x75, 0x48,
	0x52, 0xec, 0x78, 0x1b, 0x70, 0x1f, 0xa0, 0xf7, 0xf8, 0x09, 0xb8, 0xc4, 0x3c, 0xf4, 0x18, 0xa0,
	0x8f, 0xc0, 0xf5, 0x7a, 0x1d, 0x4e, 0xd7, 0x70, 0xca, 0x0f, 0xc9, 0x9e, 0x7d, 0x27, 0xf0, 0xef,
	0x62, 0x0f, 0x1e, 0x00, 0xf4, 0x09, 0xf8, 0xd0, 0x00, 0x85, 0xb1, 0x87, 0xa9, 0xbb, 0xea, 0x44,
	0x2b, 0x98, 0x9b, 0x8d, 0x3d, 0x38, 0x51, 0xaa, 0xd2, 0xc4, 0xa5, 0x6b, 0xe9, 0xc0, 0x30, 0x7e,
	0x11, 0x7d, 0x0c, 0x16, 0x1b, 0xd2, 0x2c, 0x8e, 0x69, 0xe8, 0x44, 0x1b, 0xfc, 0x21, 0xc5, 0x2b,
	0x34, 0x24, 0x2b, 0x04, 0x8e, 0x16, 0xa5, 0xb2, 0x7a, 0x93, 0x6e, 0xa3, 0xf6, 0x17, 0xe5, 0x89,
	0xdb, 0x8a, 0x96, 0x1b, 0x92, 0xc8, 0x09, 0x31, 0xd3, 0x14, 0xc4, 0xd1, 0x0a, 0x1c, 0x2d, 0xa3,
	0x2b, 0x3c, 0xc6, 0x5c, 0x12, 0x67, 0x74, 0x10, 0x0f, 0x23, 0x0f, 0xee, 0x2f, 0xa3, 0xab, 0x3c,
	0x25, 0xc4, 0x6b, 0x9a, 0xb1, 0xc8, 0x53, 0xdf, 0x83, 0xe3, 0x65, 0x69, 0x8b, 0xb2, 0x90, 0x67,
	0x90, 0xef, 0x51, 0xc7, 0x0b, 0xfd, 0x88, 0x7a, 0x3e, 0xc9, 0x9c, 0xc8, 0xc5, 0xf0, 0x60, 0x59,
	0x86, 0x8c, 0x1f, 0x8b, 0xaf, 0x76, 0x3c, 0x8f, 0x67, 0xc0, 0x64, 0x19, 0x2d, 0x81, 0xf7, 0x35,
	0x51, 0x8a, 0x57, 0x7c, 0x92, 0xa5, 0x4e, 0xe6, 0xc7, 0x11, 0xc7, 0x1c, 0x2e, 0xa3, 0x1b, 0xe0,
	0x03, 0x0d, 0x33, 0x8c, 0x5a, 0xa8, 0xa3, 0xb6, 0x12, 0x1c, 0x0f, 0xb8, 0xe8, 0x78, 0x19, 0x2d,
	0x82, 0x77, 0x1b, 0x76, 0xd6, 0x27, 0x0f, 0x7d, 0x42, 0xfc, 0x68, 0x05, 0x9e, 0x2c, 0xa3, 0x4f,
	0xc1, 0x92, 0x44, 0xac, 0x7d, 0x49, 0xd3, 0x78, 0xc8, 0x33, 0x24, 0x09, 0x9c, 0x0d, 0x3a, 0x70,
	0x32, 0x27, 0x60, 0x1b, 0xc5, 0x29, 0x7c, 0xae, 0x01, 0xbf, 0x9a, 0x0d, 0x7c, 0xb1, 0x8c, 0xae,
	0x83, 0xb7, 0x65, 0x9c, 0x04, 0x4a, 0x8f, 0xc2, 0x26, 0xfa, 0x10, 0xbc, 0xa7, 0xc9, 0xeb, 0x80,
	0xf3, 0x47, 0x02, 0x47, 0x9b, 0xd2, 0x37, 0x53, 0x48, 0x2b, 0x64, 0xfb, 0x9b, 0xe8, 0x03, 0xf0,
	0x4e, 0x1b, 0x53, 0x07, 0x6f, 0xbc, 0xd9, 0xb2, 0xa3, 0x19, 0x46, 0x78, 0xb0, 0x89, 0x6e, 0x81,
	0x8f, 0x5b, 0x72, 0xe1, 0x40, 0xb6, 0x8d, 0x70, 0x34, 0x4e, 0x59, 0x02, 0x9f, 0x61, 0x90, 0xf2,
	0xe4, 0xe1, 0x26, 0xba, 0x09, 0x3e, 0xd2, 0x30, 0xbc, 0x2c, 0x78, 0x3d, 0xf8, 0x91, 0x1b, 0x87,
	0x89, 0x93, 0xf9, 0x4c, 0xf3, 0x51, 0x1b, 0x39, 0x23, 0x97, 0x8f, 0x37, 0xd1, 0x67, 0xe0, 0x86,
	0x86, 0x14, 0x1d, 0x82, 0xa4, 0x2e, 0x4d, 0xd2, 0x38, 0x8b, 0x6b, 0x7f, 0x9c, 0x6c, 0xa2, 0xcf,
	0xc1, 0xcd, 0xb3, 0xa1, 0xce, 0x4a, 0x0d, 0x3f, 0xdd, 0x44, 0xef, 0x82, 0x2b, 0x0c, 0xde, 0x11,
	0xa1, 0xdc, 0xd2, 0x84, 0x2c, 0x65, 0xa3, 0x98, 0x26, 0x4e, 0xb6, 0x4a, 0xe0, 0x28, 0xb7, 0xd0,
	0x75, 0x70, 0xad, 0x16, 0x0e, 0x13, 0xcf, 0xe1, 0xba, 0xa4, 0x7c, 0x3f, 0xb7, 0xd0, 0x87, 0x3c,
	0xe7, 0x94, 0x0f, 0x44, 0x65, 0x24, 0x29, 0x1e, 0xf8, 0xeb, 0x34, 0xc0, 0x11, 0x1c, 0xe7, 0x16,
	0xfa, 0x98, 0xe7, 0xb5, 0x0e, 0x31, 0x8b, 0x27, 0xb7, 0xd0, 0xa2, 0x08, 0xb1, 0x06, 0x8b, 0x86,
	0xa1, 0xd4, 0x35, 0x99, 0x81, 0x90, 0xba, 0xc8, 0x5d, 0x78, 0x98, 0x5b, 0xe8, 0x7d, 0xd1, 0x7a,
	0x3a, 0x10, 0xf0, 0x28, 0xb7, 0xd0, 0x2d, 0xe1, 0x60, 0x2e, 0xc6, 0x69, 0x4a, 0x53, 0xbf, 0x2f,
	0x93, 0x20, 0xf0, 0x43, 0x9f, 0xa5, 0x81, 0xe3, 0xae, 0xb2, 0x58, 0xe4, 0x16, 0xfa, 0x48, 0x24,
	0x81, 0x86, 0xad, 0xad, 0x4f, 0x57, 0x08, 0x3c, 0xc9, 0x2d, 0xf4, 0xa9, 0xe8, 0x52, 0x1a, 0x88,
	0xd9, 0xdb, 0xdc, 0x15, 0x9e, 0xce, 0xd8, 0x2d, 0x8b, 0x63, 0x56, 0x09, 0xe2, 0x7c, 0x8f, 0x72,
	0x0b, 0x5d, 0x01, 0xaf, 0x4d, 0x41, 0x78, 0xdd, 0x27, 0x19, 0x7c, 0x9c, 0x5b, 0xe8, 0x3d, 0xf0,
	0x56, 0xfd, 0x7a, 0x35, 0x26, 0x19, 0xed, 0xfb, 0x19, 0xa1, 0x2c, 0x7a, 0x4f, 0x8c, 0x9d, 0x0d,
	0xa7, 0x84, 0xae, 0x43, 0x32, 0xf8, 0xd4, 0xf0, 0x1c, 0xb7, 0xcf, 0x19, 0xf8, 0x2c, 0x9b, 0x43,
	0x27, 0x73, 0x57, 0xe1, 0xb3, 0xdc, 0x42, 0x37, 0xf8, 0x04, 0xa8, 0x6b, 0x94, 0x97, 0x68, 0x92,
	0xfa, 0xa1, 0x93, 0x6e, 0xc8, 0x08, 0x3c, 0x37, 0x94, 0x29, 0x54, 0xdf, 0x71, 0xef, 0x0c, 0x13,
	0x09, 0x7a, 0x91, 0x5b, 0xe8, 0x2a, 0x78, 0xbd, 0x06, 0x79, 0x7d, 0x2a, 0xc6, 0xf1, 0xcf, 0xb9,
	0x85, 0x96, 0x44, 0x2f, 0xd0, 0x4c, 0x0d, 0x62, 0xd7, 0x09, 0x68, 0xe0, 0xf4, 0x71, 0x00, 0x5f,
	0xe6, 0x16, 0x7a, 0x87, 0xb7, 0x37, 0x6e, 0xa3, 0x9e, 0xa8, 0x85, 0x85, 0xde, 0xe6, 0x1d, 0x9d,
	0xcb, 0xa2, 0xd5, 0x69, 0x75, 0x8f, 0x0a, 0x0b, 0x7d, 0xc0, 0xcb, 0x5f, 0x89, 0xfc, 0x28, 0xd3,
	0x7a, 0x7b, 0xa1, 0xf2, 0x94, 0x03, 0x6a, 0xd5, 0x4c, 0x29, 0x75, 0xe3, 0x61, 0x94, 0xc1, 0x71,
	0x61, 0xa1, 0x6b, 0xbc, 0xff, 0x6b, 0x10, 0xdf, 0x83, 0x07, 0x85, 0x2a, 0x02, 0x2e, 0x69, 0x35,
	0xa7, 0x49, 0xa1, 0x0e, 0xa6, 0x6b, 0x6f, 0x62, 0x0e, 0x0b, 0x15, 0x82, 0x29, 0x46, 0xd5, 0x81,
	0x97, 0xb2, 0xe4, 0x3d, 0xd2, 0x4d, 0xe4, 0x08, 0xa3, 0xe9, 0x1c, 0x17, 0xca, 0xff, 0x9a, 0x89,
	0x11, 0x5e, 0xcf, 0xe8, 0x6a, 0x9c, 0xf0, 0xad, 0xe0, 0x49, 0xa1, 0x92, 0x52, 0x03, 0xa5, 0x38,
	0x8c, 0x45, 0x75, 0xa7, 0xf2, 0xc0, 0xa7, 0x85, 0x8a, 0x39, 0x07, 0x36, 0x01, 0x6a, 0x11, 0xb9,
	0x0b, 0x1f, 0x15, 0x16, 0xfa, 0x84, 0x0f, 0xec, 0x16, 0x4a, 0xcb, 0xa0, 0xc7, 0x3a, 0x6e, 0x9a,
	0x87, 0x71, 0xc6, 0xb9, 0x1a, 0x4b, 0xd9, 0xd0, 0x49, 0xe0, 0x93, 0xc2, 0x42, 0x9f, 0xf1, 0x7e,
	0xc8, 0x71, 0x32, 0x75, 0xe4, 0x09, 0xb5, 0x7c, 0x83, 0x4f, 0x75, 0x8f, 0x28, 0x19, 0x3f, 0x4c,
	0x82, 0x1d, 0x46, 0xbd, 0x9e, 0xe9, 0x6e, 0x95, 0xbb, 0x35, 0x11, 0xcf, 0x0b, 0x55, 0xf4, 0xda,
	0x26, 0xdd, 0xa9, 0xab, 0x7b, 0xc4, 0xc4, 0xf2, 0x6c, 0x21, 0xf0, 0x67, 0xfd, 0x04, 0x26, 0xaa,
	0xe1, 0x21, 0xf8, 0x52, 0x3f, 0x41, 0x87, 0x8b, 0xe1, 0x2f, 0x85, 0x6a, 0xbf, 0xed, 0xcc, 0x84,
	0xbf, 0x16, 0x16, 0xba, 0xc9, 0xe7, 0xb0, 0x58, 0xcf, 0xea, 0x26, 0xa5, 0xa1, 0xe3, 0xb6, 0xc2,
	0xf4, 0x5b, 0x51, 0xb7, 0xbe, 0xc4, 0xa5, 0xfd, 0x81, 0x67, 0xd4, 0x4e, 0xa9, 0xa2, 0xa3, 0xc4,
	0xf5, 0x14, 0xe6, 0x58, 0x4c, 0x88, 0x1f, 0x47, 0x04, 0x8e, 0xca, 0xba, 0x46, 0x25, 0xce, 0x49,
	0x7c, 0xda, 0x77, 0x3c, 0x9a, 0x38, 0xa9, 0x13, 0xe2, 0x0c, 0xa7, 0x70, 0xbf, 0xac, 0xdb, 0x68,
	0x03, 0xe3, 0x06, 0x3e, 0x8e, 0x32, 0x73, 0x94, 0x8e, 0xcb, 0xba, 0x63, 0x34, 0xb0, 0x7e, 0x94,
	0xe1, 0x34, 0xaa, 0x39, 0xc4, 0x41, 0x59, 0xb7, 0x51, 0x65, 0x7b, 0xf7, 0x80, 0x9c, 0xb4, 0xac,
	0x5b, 0xfb, 0xd2, 0xd4, 0x78, 0xd8, 0xc6, 0x7c, 0x65, 0x62, 0x8e, 0x4a, 0xd5, 0x49, 0xda, 0x8e,
	0xaa, 0x54, 0xad, 0x33, 0x51, 0xbb, 0x8e, 0x47, 0x95, 0x0a, 0xd7, 0x54, 0x3e, 0xed, 0x32, 0xc6,
	0x62, 0x59, 0xe0, 0x59, 0x96, 0xfa, 0xfd, 0x61, 0x86, 0xe1, 0x78, 0xc6, 0xe6, 0xaa, 0xbe, 0x0f,
	0x3a, 0xd7, 0x47, 0xfd, 0x54, 0xf6, 0xf1, 0x49, 0xa5, 0x5a, 0x94, 0x21, 0x87, 0x87, 0x95, 0x0a,
	0x3f, 0x3f, 0xb1, 0xd9, 0xa1, 0x8e, 0x2a, 0xd5, 0x56, 0x99, 0x58, 0x0f, 0xe7, 0x71, 0xa5, 0x7a,
	0xe7, 0x8c, 0xf0, 0x9c, 0x68, 0x8b, 0x75, 0xda, 0x75, 0x5a, 0xa9, 0xfa, 0x6b, 0x5a, 0xa4, 0x26,
	0xb2, 0x7f, 0x17, 0xc3, 0x47, 0x95, 0x2a, 0x81, 0x26, 0x42, 0x26, 0x1c, 0xcd, 0x36, 0x12, 0x0c,
	0x1f, 0x77, 0x1e, 0x6b, 0x2d, 0x1d, 0xc0, 0x27, 0x9a, 0x43, 0xd4, 0xa2, 0xa9, 0xfa, 0xa7, 0x5a,
	0x34, 0x94, 0x9c, 0xcf, 0x4d, 0x02, 0x9f, 0x99, 0xde, 0x16, 0x87, 0xf2, 0xfa, 0x8a, 0xe3, 0x6a,
	0x8b, 0x53, 0xec, 0xc6, 0x6b, 0x38, 0xdd, 0x50, 0xbc, 0xb6, 0x5e, 0xcc, 0xd2, 0x28, 0x4c, 0x02,
	0x62, 0xb2, 0x26, 0xbb, 0x91, 0xd8, 0x5c, 0xee, 0x07, 0xe1, 0xb4, 0xaa, 0xfc, 0x20, 0x64, 0xec,
	0xc9, 0x96, 0xe5, 0x3b, 0xdd, 0x64, 0xc6, 0x67, 0x4c, 0x1b, 0x39, 0x83, 0x4e, 0x8e, 0x73, 0x1b,
	0xfd, 0x0e, 0x7c, 0xd6, 0x44, 0x8a, 0x29, 0xd6, 0x0f, 0xee, 0x4c, 0xd5, 0xd7, 0xaf, 0x08, 0x3c,
	0xc8, 0x6d, 0x35, 0xfc, 0xd5, 0x02, 0x93, 0xef, 0xe6, 0xb6, 0x9c, 0xd8, 0xec, 0x08, 0x8c, 0x9b,
	0xd4, 0x13, 0xb7, 0x29, 0x60, 0xc4, 0x50, 0x7e, 0xe2, 0x8d, 0x0a, 0x5b, 0xba, 0x8e, 0x09, 0x02,
	0xe2, 0x35, 0x85, 0xfb, 0x85, 0x2d, 0x5d, 0xc7, 0x84, 0x4d, 0x1e, 0x17, 0xad, 0x06, 0x03, 0x0c,
	0xc7, 0x85, 0x2d, 0xf3, 0xa9, 0x29, 0x17, 0x0d, 0xef, 0x40, 0x93, 0x79, 0x38, 0xc0, 0xd9, 0xf4,
	0xbb, 0x52, 0xdb, 0x97, 0x29, 0xd5, 0xe5, 0x87, 0x85, 0x0a, 0x89, 0x8c, 0x84, 0xc6, 0x60, 0xb8,
	0x6e, 0x02, 0x8f, 0x0a, 0x5b, 0xb6, 0x87, 0x26, 0x48, 0x4e, 0x01, 0x89, 0x39, 0x2e, 0x6c, 0xd9,
	0x8f, 0x9a, 0xa7, 0x13, 0x2e, 0x75, 0x82, 0x20, 0x76, 0x95, 0xc6, 0x93, 0xc2, 0x96, 0xd4, 0x56,
	0x01, 0xf9, 0x0e, 0x46, 0xe5, 0xc3, 0xd3, 0xc2, 0x46, 0x6f, 0xf0, 0x0f, 0x7e, 0xee, 0x5f, 0x41,
	0xeb, 0x1e, 0x15, 0xb6, 0x64, 0x7b, 0xfc, 0xa4, 0x8a, 0x24, 0x3d, 0x2e, 0x6c, 0x59, 0xc8, 0x4d,
	0xe7, 0xe0, 0x80, 0x24, 0x14, 0xaf, 0xb3, 0xe9, 0x69, 0xcb, 0xd9, 0xc3, 0xb7, 0x92, 0xaf, 0x69,
	0x9c, 0x52, 0x6f, 0x10, 0x64, 0xd4, 0x09, 0xf8, 0xd7, 0x3e, 0x67, 0x86, 0x4f, 0x0b, 0x5b, 0x36,
	0x39, 0x15, 0xbc, 0x9a, 0xb5, 0x3f, 0x2b, 0x6c, 0x49, 0x29, 0x99, 0xc8, 0xe4, 0xf4, 0xcf, 0x35,
	0x13, 0x9a, 0x57, 0x05, 0x4c, 0x1f, 0x7c, 0x51, 0xd8, 0x72, 0x94, 0xf0, 0x43, 0x73, 0xaf, 0x28,
	0x3f, 0x32, 0x5b, 0xdc, 0xc0, 0x21, 0x04, 0xb3, 0x31, 0x69, 0xcb, 0xbe, 0xc2, 0x70, 0x1d, 0x9f,
	0x8e, 0x2f, 0x6b, 0x03, 0x85, 0xd7, 0x9a, 0x89, 0x57, 0xaa, 0x34, 0x10, 0x22, 0x8d, 0xeb, 0x95,
	0xb6, 0x6c, 0x28, 0xb5, 0xcc, 0xa4, 0x52, 0xfb, 0xa5, 0x2d, 0xe7, 0xb8, 0x1e, 0x0f, 0x9d, 0x28,
	0x8d, 0x4b, 0x65, 0xa0, 0x40, 0xb5, 0xba, 0xe6, 0x41, 0xa9, 0x72, 0xa5, 0xa1, 0xc9, 0x68, 0xd9,
	0x93, 0x52, 0x25, 0x5d, 0x03, 0xd3, 0x22, 0x7f, 0xc6, 0x46, 0x5d, 0xf4, 0xf3, 0xa8, 0x54, 0xd9,
	0xad, 0x63, 0x04, 0x2b, 0xf0, 0xe0, 0x71, 0xa9, 0x62, 0xd6, 0xb1, 0x07, 0x3c, 0x29, 0x55, 0xca,
	0x1a, 0xab, 0x4d, 0xfa, 0x75, 0x5a, 0xaa, 0x46, 0xa3, 0x03, 0xdb, 0xf4, 0xf0, 0x51, 0xa9, 0x92,
	0x5b, 0x20, 0x67, 0xf0, 0xc3, 0xc7, 0x06, 0x6c, 0x06, 0x69, 0x7a, 0x52, 0xda, 0x92, 0x34, 0x74,
	0xc3, 0x9a, 0xac, 0xe9, 0xa9, 0x11, 0xe1, 0x0e, 0x56, 0xf7, 0xcc, 0xf0, 0x68, 0x17, 0x37, 0x7c,
	0x5e, 0xda, 0xe8, 0xff, 0xc1, 0x27, 0xe6, 0x36, 0xa6, 0x4b, 0x28, 0x0e, 0x93, 0x6c, 0x03, 0xbe,
	0x28, 0x6d, 0xf4, 0x7f, 0xfc, 0x86, 0xa0, 0xdb, 0x40, 0x8d, 0x28, 0xfe, 0x6c, 0xa8, 0xef, 0x22,
	0x76, 0x2f, 0x8d, 0x13, 0x9f, 0xc5, 0x74, 0x7f, 0x31, 0x52, 0xb1, 0x4e, 0x54, 0x95, 0x66, 0xbf,
	0x1a, 0x69, 0x26, 0x9b, 0x91, 0xcb, 0xaf, 0x85, 0x94, 0xc6, 0xdf, 0x4a, 0xd5, 0xe9, 0x8d, 0x5c,
	0xac, 0xe7, 0xe5, 0xdf, 0x8d, 0xba, 0x8a, 0x13, 0x9c, 0xaa, 0x66, 0xf6, 0x8f, 0xb3, 0x54, 0x28,
	0x3b, 0xfe, 0x59, 0xaa, 0xde, 0x20, 0x6b, 0x76, 0x3d, 0x61, 0xcd, 0x46, 0xed, 0xf1, 0x2f, 0xe3,
	0xcc, 0xbc, 0x41, 0x49, 0x87, 0xb3, 0x6d, 0x1a, 0xcd, 0x04, 0xfe, 0xbb, 0xde, 0x6a, 0x3a, 0xbf,
	0x9a, 0x2d, 0xa0, 0x52, 0x49, 0x30, 0x15, 0x1b, 0x83, 0x66, 0x54, 0xa9, 0x32, 0xd7, 0x21, 0xfa,
	0x58, 0xd8, 0xaf, 0x94, 0x4d, 0x3a, 0x6a, 0xfa, 0xd4, 0xb8, 0x45, 0xaa, 0x54, 0x19, 0xcd, 0xc2,
	0xfa, 0x11, 0x1d, 0x12, 0x0c, 0x0f, 0x2a, 0x95, 0xf5, 0x3a, 0xd0, 0xe8, 0xfc, 0x93, 0x0e, 0x98,
	0x82, 0xf4, 0x83, 0xd8, 0xbd, 0x23, 0x38, 0xd2, 0x61, 0xa5, 0x5a, 0x6a, 0x1b, 0x26, 0x58, 0x87,
	0xa8, 0xf2, 0xa3, 0x4a, 0x75, 0xcc, 0x86, 0xcb, 0xc4, 0x38, 0x39, 0xae, 0xd4, 0x44, 0x9e, 0x8a,
	0xea, 0xa1, 0x72, 0x52, 0xa9, 0xf4, 0x6a, 0x50, 0x85, 0x8d, 0xa4, 0xae, 0x7e, 0x78, 0xda, 0x61,
	0x80, 0x22, 0xf4, 0xcd, 0x46, 0xf6, 0xa8, 0x52, 0x4d, 0x88, 0xf3, 0x88, 0x14, 0xaf, 0x68, 0x21,
	0xcb, 0x7b, 0x72, 0xa4, 0x35, 0xa5, 0x70, 0x94, 0xf7, 0x24, 0x8b, 0xe0, 0xaf, 0xf9, 0x9d, 0x26,
	0x17, 0xec, 0xeb, 0x78, 0x75, 0x8d, 0x39, 0xce, 0x7b, 0x0d, 0xea, 0xc5, 0x33, 0xd8, 0xb8, 0x07,
	0xe8, 0xa9, 0x0b, 0x25, 0x25, 0x9f, 0xd2, 0x2e, 0xc6, 0xf2, 0x06, 0x8e, 0x8b, 0x09, 0x1c, 0x15,
	0xbd, 0x06, 0xa5, 0x12, 0xdb, 0xcc, 0x20, 0x5f, 0x45, 0x4f, 0x96, 0x7e, 0x8d, 0x3c, 0xe3, 0x8b,
	0xa6, 0xe8, 0x29, 0x86, 0xd2, 0xb6, 0xac, 0xec, 0xc9, 0x84, 0xe4, 0xb2, 0xda, 0x18, 0x7d, 0x64,
	0x8c, 0xce, 0x44, 0xd5, 0x37, 0x9e, 0x65, 0x4f, 0x8d, 0x4f, 0x1d, 0xa5, 0xbc, 0x37, 0xee, 0x00,
	0x68, 0xfc, 0xf6, 0xa0, 0xec, 0xa9, 0x29, 0xcf, 0x00, 0x06, 0xc1, 0x9d, 0x94, 0xca, 0xcb, 0xc6,
	0xfe, 0x92, 0x3d, 0x1f, 0x96, 0x3d, 0x59, 0x7f, 0xa6, 0x95, 0x75, 0xb5, 0x1c, 0xd5, 0x0a, 0x82,
	0xdb, 0xdc, 0x2c, 0xe3, 0x4b, 0x4a, 0x97, 0xea, 0xd7, 0xd8, 0xa3, 0x4a, 0xa9, 0x0f, 0x6e, 0x77,
	0x5d, 0x73, 0xef, 0x57, 0x3d, 0xc9, 0x99, 0x82, 0xdb, 0xd3, 0xcc, 0xa8, 0x7a, 0x2a, 0x4d, 0x6f,
	0x9f, 0x79, 0x11, 0x6f, 0xa8, 0xa6, 0x3e, 0xa1, 0xde, 0x30, 0x09, 0x7c, 0xd7, 0xc9, 0x30, 0x9c,
	0x98, 0xbb, 0xcc, 0x48, 0x8b, 0xc3, 0xaa, 0xd7, 0xa0, 0xf8, 0xc1, 0x6d, 0xda, 0xf7, 0x3a, 0x4e,
	0x99, 0xcf, 0x75, 0x82, 0xf4, 0x88, 0xe7, 0x73, 0xea, 0x76, 0x4d, 0x03, 0xd5, 0x69, 0xcb, 0x7f,
	0xf2, 0xd8, 0xcf, 0xe7, 0xd0, 0xe7, 0xe0, 0xd3, 0xb6, 0xbe, 0x6e, 0xf3, 0xc6, 0xf9, 0x9c, 0x1c,
	0x6f, 0x3a, 0xbc, 0x3b, 0x6d, 0x0f, 0xf2, 0x39, 0xd5, 0x02, 0x66, 0x1c, 0xa4, 0x68, 0x01, 0x8c,
	0x88, 0x15, 0x73, 0xaa, 0x21, 0x73, 0x40, 0x57, 0xd0, 0x8a, 0x39, 0xf4, 0x16, 0xff, 0x65, 0x45,
	0x40, 0xea, 0xb8, 0x15, 0x73, 0x72, 0x30, 0x19, 0x0e, 0x62, 0x0e, 0x10, 0x54, 0xab, 0xad, 0x9d,
	0xfd, 0x33, 0xcd, 0xb5, 0x49, 0x31, 0xd7, 0xf8, 0xac, 0x67, 0x81, 0xeb, 0xb8, 0xc9, 0x2e, 0x8d,
	0x58, 0x18, 0xbf, 0x37, 0x88, 0x1f, 0x96, 0x4a, 0xc3, 0x6d, 0x67, 0x5e, 0xc9, 0xef, 0x97, 0x73,
	0x8d, 0xd6, 0x50, 0xa3, 0x67, 0x5d, 0x76, 0xcc, 0x4d, 0x73, 0xba, 0xcb, 0xbe, 0xaa, 0xe1, 0x41,
	0x21, 0x67, 0x67, 0xd4, 0x32, 0x65, 0x36, 0xa4, 0x6e, 0x0c, 0x55, 0x4b, 0x8b, 0xe6, 0xa9, 0x71,
	0xa5, 0xbc, 0x60, 0xca, 0x9b, 0xe9, 0xd0, 0xde, 0x44, 0xbb, 0xd9, 0x9e, 0x54, 0x86, 0xbb, 0xe5,
	0xaf, 0x0b, 0xcd, 0xe3, 0x8c, 0xf2, 0x79, 0xdd, 0x93, 0x12, 0x33, 0xeb, 0x0b, 0x77, 0x5e, 0xf7,
	0xa4, 0x40, 0xcf, 0xf0, 0x64, 0x3e, 0xdf, 0xf8, 0x66, 0xad, 0xc1, 0x38, 0x12, 0xbf, 0x77, 0xa5,
	0x29, 0x3c, 0xc8, 0xe7, 0xd5, 0x0f, 0x0f, 0x4d, 0x84, 0xe7, 0x93, 0x1a, 0x32, 0xc9, 0xe7, 0x1b,
	0x57, 0x62, 0xd3, 0x4d, 0x64, 0x52, 0x1e, 0xe6, 0xf3, 0x8d, 0x31, 0x52, 0x8b, 0xcd, 0x88, 0x1c,
	0x9d, 0x0d, 0x53, 0x51, 0x39, 0xce, 0xe7, 0xbb, 0x1c, 0xa6, 0x45, 0xe6, 0x24, 0x9f, 0x9f, 0xb6,
	0x5c, 0xd1, 0xac, 0x8d, 0x5e, 0xb2, 0xbc, 0xf4, 0x35, 0xb8, 0x48, 0x02, 0xff, 0xc1, 0xde, 0xd6,
	0xee, 0x77, 0xf7, 0xee, 0x6f, 0xa1, 0x37, 0xc1, 0x5c, 0x74, 0xef, 0xc7, 0x2d, 0xfe, 0x63, 0xfa,
	0xc2, 0xea, 0xb9, 0x94, 0x3f, 0xa1, 0x6b, 0xe0, 0xfc, 0xea, 0xbd, 0x07, 0xdf, 0xfe, 0xb0, 0x75,
	0xcd, 0x5e, 0xb4, 0x6e, 0x5e, 0x5e, 0x3d, 0x97, 0xca, 0xe7, 0xfe, 0x45, 0xb0, 0x50, 0x2f, 0x5e,
	0x5a, 0xe7, 0x7b, 0xed, 0x38, 0xdf, 0x7e, 0xbb, 0xbb, 0xf5, 0xf0, 0x21, 0xba, 0x0e, 0x16, 0xd6,
	0xbe, 0x94, 0x0f, 0x7c, 0x43, 0xb6, 0x70, 0xfa, 0x8a, 0xcb, 0xbf, 0x52, 0x72, 0xb6, 0xf1, 0x25,
	0x2e, 0x57, 0xaf, 0xfa, 0x0b, 0xe0, 0x82, 0xfc, 0xef, 0xad, 0x6f, 0xc0, 0x05, 0x12, 0xa4, 0x5b,
	0x7f, 0x8e, 0x77, 0xd0, 0x15, 0x71, 0xd5, 0x8f, 0x57, 0xe2, 0x84, 0xa6, 0x98, 0x07, 0xdf, 0x83,
	0xe7, 0x8c, 0xd7, 0x22, 0xb0, 0xd0, 0x42, 0x57, 0x39, 0x7b, 0x11, 0xaf, 0x55, 0x03, 0xc1, 0x29,
	0xb4, 0xe5, 0xaf, 0xdf, 0x42, 0x80, 0xe3, 0x01, 0xec, 0xdd, 0xa2, 0x00, 0x90, 0x20, 0xfe, 0xe6,
	0x2f, 0x5b, 0xf7, 0xf7, 0x6a, 0x35, 0x71, 0xff, 0x6b, 0x5d, 0x8d, 0x58, 0x26, 0x5e, 0x3b, 0x9e,
	0x07, 0x2d, 0xf4, 0x06, 0x27, 0x14, 0xe2, 0x8d, 0xf8, 0xb2, 0x85, 0xb6, 0xf6, 0x52, 0xb0, 0x43,
	0xd8, 0xbb, 0x45, 0xc0, 0x02, 0x09, 0xa2, 0xed, 0xbd, 0xef, 0xbf, 0x8b, 0x77, 0xa4, 0x61, 0x3c,
	0x68, 0x5d, 0x07, 0x51, 0x02, 0x91, 0x81, 0xd0, 0x92, 0x7f, 0x3c, 0xa0, 0x5e, 0xcb, 0xb4, 0x83,
	0xf6, 0xad, 0x3b, 0xcc, 0xe7, 0xf8, 0xc1, 0xfd, 0x7b, 0x3b, 0xd9, 0x4f, 0x3b, 0x5b, 0x72, 0x35,
	0x8e, 0x5c, 0x47, 0xdb, 0x14, 0x81, 0x57, 0xeb, 0xd7, 0x6b, 0xeb, 0x81, 0x13, 0x41, 0x4b, 0xfe,
	0x49, 0x80, 0x78, 0xc7, 0xf8, 0x10, 0xb4, 0xbf, 0x39, 0xcf, 0xff, 0xe8, 0xe2, 0xf7, 0xff, 0x0b,
	0x00, 0x00, 0xff, 0xff, 0x15, 0x01, 0xfb, 0x0b, 0x8d, 0x21, 0x00, 0x00,
>>>>>>> b7d180f... gen bindings
=======
	// 2867 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x5a, 0x49, 0x73, 0xdc, 0x36,
	0xf6, 0x37, 0xd9, 0x2d, 0x3b, 0x82, 0xed, 0x04, 0x41, 0xe2, 0xd8, 0xd9, 0x1c, 0x45, 0x71, 0x12,
	0xc7, 0xff, 0x7f, 0x32, 0x55, 0x9e, 0x94, 0x4f, 0x53, 0x33, 0x62, 0x93, 0x68, 0x89, 0x31, 0xb7,
	0x22, 0xd8, 0x2a, 0xc9, 0x17, 0xc8, 0x71, 0x94, 0xa9, 0x4c, 0x25, 0x96, 0x4a, 0xd6, 0x4c, 0x55,
	0x6e, 0xec, 0x4d, 0xab, 0x77, 0x27, 0x99, 0xed, 0xc2, 0xdb, 0x7c, 0x0d, 0x7e, 0x8b, 0xb9, 0xf2,
	0xa3, 0x4c, 0x01, 0x04, 0xd8, 0x04, 0xc8, 0xd6, 0xc9, 0x26, 0xdf, 0x0f, 0x78, 0x0f, 0x6f, 0xfd,
	0x11, 0x2d, 0x70, 0xe5, 0xd1, 0x8f, 0xf4, 0xc1, 0xce, 0x4f, 0x3f, 0xed, 0x3c, 0xa4, 0xfb, 0x3f,
	0xef, 0x6e, 0x3f, 0xfa, 0x6a, 0x77, 0x6f, 0x67, 0x7f, 0x07, 0x5d, 0x7e, 0xb4, 0xbd, 0xf7, 0xb7,
	0x1f, 0x1e, 0x6c, 0xd3, 0x1f, 0xef, 0xff, 0xbc, 0xbd, 0xb7, 0xfc, 0x9f, 0x3f, 0x81, 0xcb, 0xc4,
	0xc3, 0x7b, 0x7b, 0x3b, 0x7b, 0x64, 0xff, 0xfe, 0xfe, 0x5f, 0x1f, 0xa1, 0x3f, 0x80, 0xf3, 0xe5,
	0xff, 0xae, 0x19, 0x4b, 0xc6, 0xcd, 0xd7, 0x6f, 0xdf, 0xf8, 0x4a, 0x59, 0xf1, 0x95, 0x82, 0x2e,
	0x9f, 0x1e, 0xee, 0xc4, 0x62, 0xcd, 0xf2, 0x7f, 0xff, 0x08, 0x2e, 0x88, 0x77, 0xe8, 0x75, 0x00,
	0x88, 0x47, 0xc9, 0xc0, 0xb6, 0x31, 0x21, 0xf0, 0x1c, 0x7a, 0x1b, 0x40, 0xe2, 0xd1, 0x20, 0x4c,
	0xa8, 0x1d, 0x06, 0x01, 0xb6, 0x13, 0xec, 0x40, 0x03, 0x5d, 0x06, 0x8b, 0xc4, 0xa3, 0xd8, 0x5a,
	0xb5, 0xdc, 0x00, 0x9a, 0xf2, 0x31, 0x08, 0x7d, 0xec, 0xc3, 0x0e, 0xba, 0x04, 0x5e, 0x63, 0x8f,
	0xbd, 0x01, 0xd9, 0x84, 0x5d, 0x29, 0x74, 0x83, 0x75, 0xcb, 0x83, 0x0b, 0xe8, 0x1d, 0x80, 0x88,
	0x47, 0x07, 0x01, 0x19, 0x44, 0x51, 0x18, 0x27, 0xd8, 0xa1, 0xeb, 0x38, 0x86, 0xe7, 0x6b, 0x8a,
	0xac, 0x75, 0xcb, 0xf5, 0xac, 0x9e, 0x87, 0xe1, 0x05, 0xf4, 0x3e, 0xb8, 0xca, 0xcc, 0x49, 0x62,
	0x6c, 0xf9, 0x5c, 0x58, 0x2d, 0x83, 0xaf, 0x09, 0x5b, 0x71, 0x10, 0x26, 0x64, 0x10, 0xc1, 0x45,
	0xf4, 0x06, 0xb8, 0xc8, 0xc0, 0xa1, 0x8f, 0x29, 0x8e, 0x63, 0x08, 0x04, 0x20, 0x71, 0x7d, 0x1c,
	0x0e, 0x12, 0x78, 0x11, 0xbd, 0xc9, 0xfc, 0xc6, 0xb6, 0x71, 0xfb, 0x34, 0xc1, 0xb1, 0x0f, 0x2f,
	0x21, 0x08, 0x2e, 0x11, 0x8f, 0x5a, 0x83, 0x64, 0x8d, 0xf6, 0x2d, 0xd7, 0x83, 0x97, 0xd1, 0xbb,
	0xe0, 0x6d, 0xe2, 0x51, 0x37, 0x70, 0x13, 0x4a, 0x12, 0x2b, 0x4e, 0x68, 0xd8, 0xef, 0x13, 0x9c,
	0xc0, 0x14, 0xa0, 0x6b, 0xe0, 0xad, 0x9a, 0x28, 0xc1, 0xd4, 0xf6, 0xb0, 0x15, 0xc3, 0x61, 0x8b,
	0x24, 0xc6, 0x96, 0xb3, 0x09, 0x47, 0x00, 0x7d, 0xc0, 0x4f, 0xc0, 0x25, 0xfa, 0xa1, 0xc7, 0x00,
	0x7d, 0x02, 0xae, 0x57, 0xeb, 0x70, 0xbc, 0x8e, 0x63, 0x7e, 0x48, 0xf6, 0xec, 0x5a, 0x9e, 0x7b,
	0x0f, 0x3b, 0x70, 0x02, 0xd0, 0x67, 0xe0, 0x63, 0x0d, 0xe4, 0x87, 0x0e, 0xa6, 0xf6, 0x9a, 0x15,
	0xac, 0x62, 0x6e, 0x36, 0x76, 0xe0, 0x54, 0xaa, 0x8a, 0x23, 0x9b, 0xae, 0xc7, 0x7d, 0xcd, 0xf8,
	0x25, 0xf4, 0x29, 0x58, 0xaa, 0x49, 0x93, 0x30, 0xa4, 0xbe, 0x15, 0x6c, 0xf2, 0x87, 0x18, 0xaf,
	0x52, 0x9f, 0xac, 0x12, 0x38, 0x5c, 0x12, 0xca, 0xaa, 0x4d, 0xda, 0x8d, 0x1a, 0x2d, 0x89, 0x13,
	0x37, 0x15, 0xad, 0xd4, 0x24, 0x81, 0xe5, 0x63, 0xa6, 0xc9, 0x0b, 0x83, 0x55, 0x38, 0x5c, 0x41,
	0x57, 0x78, 0x8c, 0xb9, 0x24, 0x4c, 0x68, 0x3f, 0x1c, 0x04, 0x0e, 0x1c, 0xad, 0xa0, 0xab, 0x3c,
	0x25, 0xca, 0xd7, 0x34, 0x61, 0x91, 0xa7, 0xae, 0x03, 0xc7, 0x2b, 0xc2, 0x16, 0x69, 0x21, 0xcf,
	0x20, 0xd7, 0xa1, 0x96, 0xe3, 0xbb, 0x01, 0x75, 0x5c, 0x92, 0x58, 0x81, 0x8d, 0xe1, 0x64, 0x45,
	0x84, 0x8c, 0x1f, 0x8b, 0xaf, 0xb6, 0x1c, 0x87, 0x67, 0xc0, 0x74, 0x05, 0x2d, 0x83, 0x0f, 0x15,
	0x51, 0x8c, 0x57, 0x5d, 0x92, 0xc4, 0x56, 0xe2, 0x86, 0x01, 0xc7, 0x1c, 0xac, 0xa0, 0x1b, 0xe0,
	0x23, 0x05, 0x33, 0x08, 0x1a, 0xa8, 0xc3, 0xa6, 0x12, 0x1c, 0xf6, 0xb9, 0xe8, 0x68, 0x05, 0x2d,
	0x81, 0xf7, 0x6b, 0x76, 0x56, 0x27, 0xf7, 0x5d, 0x42, 0xdc, 0x60, 0x15, 0x1e, 0xaf, 0xa0, 0xcf,
	0xc1, 0xb2, 0x40, 0xac, 0x7f, 0x4d, 0xe3, 0x70, 0xc0, 0x33, 0x24, 0xf2, 0xac, 0x4d, 0xda, 0xb7,
	0x12, 0xcb, 0x63, 0x1b, 0x85, 0x31, 0x7c, 0xae, 0x00, 0xef, 0xcc, 0x07, 0xbe, 0x58, 0x41, 0xd7,
	0xc1, 0xbb, 0x73, 0x76, 0x0c, 0xef, 0xc2, 0x97, 0x8a, 0xfc, 0x4e, 0x43, 0xfe, 0x4a, 0xca, 0x59,
	0x9c, 0x4b, 0xa1, 0x1a, 0xc5, 0x2d, 0xf4, 0x31, 0xf8, 0x40, 0x91, 0x57, 0x09, 0xc3, 0x1f, 0x09,
	0x1c, 0x6e, 0x09, 0xdf, 0xce, 0x20, 0x8d, 0x90, 0x8f, 0xb6, 0xd0, 0x47, 0xe0, 0xbd, 0x26, 0xa6,
	0x0a, 0xfe, 0x78, 0xab, 0x61, 0x47, 0x3d, 0x0d, 0xe0, 0x64, 0x0b, 0xdd, 0x02, 0x9f, 0x36, 0xe4,
	0x65, 0x00, 0xd8, 0x36, 0x65, 0xa0, 0x70, 0xcc, 0x0a, 0xe0, 0x0c, 0x83, 0x64, 0x24, 0x0e, 0xb6,
	0xd0, 0x4d, 0xf0, 0x89, 0x82, 0xe1, 0x65, 0xc5, 0xeb, 0xc9, 0x0d, 0xec, 0xd0, 0x8f, 0xac, 0xc4,
	0x65, 0x9a, 0x0f, 0x9b, 0xc8, 0x39, 0xb5, 0x70, 0xb4, 0x85, 0xbe, 0x00, 0x37, 0x14, 0x64, 0xd9,
	0x61, 0x48, 0x6c, 0xd3, 0x28, 0x0e, 0x93, 0xb0, 0xf2, 0xc7, 0xf1, 0x16, 0xfa, 0x12, 0xdc, 0x3c,
	0x1b, 0x6a, 0xad, 0x56, 0xf0, 0x93, 0x2d, 0xf4, 0x3e, 0xb8, 0xc2, 0xe0, 0x2d, 0x11, 0x4a, 0x0d,
	0x45, 0xc8, 0x52, 0x3e, 0x08, 0x69, 0x64, 0x25, 0x6b, 0x04, 0x0e, 0x53, 0x03, 0x5d, 0x07, 0xd7,
	0x2a, 0xe1, 0x20, 0x72, 0x2c, 0xae, 0x4b, 0xc8, 0x47, 0xa9, 0x81, 0x3e, 0xe6, 0x39, 0x2b, 0x7d,
	0x50, 0x56, 0x56, 0x14, 0xe3, 0xbe, 0xbb, 0x41, 0x3d, 0x1c, 0xc0, 0x71, 0x6a, 0xa0, 0x4f, 0x79,
	0x5d, 0xa8, 0x10, 0xbd, 0xf8, 0x52, 0x03, 0x2d, 0x95, 0x21, 0x56, 0x60, 0xc1, 0xc0, 0x17, 0xba,
	0xa6, 0x73, 0x10, 0x42, 0x17, 0xb9, 0x07, 0x0f, 0x52, 0x03, 0x7d, 0x58, 0xb6, 0xae, 0x16, 0x04,
	0x3c, 0x4c, 0x0d, 0x74, 0xab, 0x74, 0x30, 0x17, 0xe3, 0x38, 0xa6, 0xb1, 0xdb, 0x13, 0x49, 0xe0,
	0xb9, 0xbe, 0xcb, 0xd2, 0xc0, 0xb2, 0xd7, 0x58, 0x2c, 0x52, 0x03, 0x7d, 0x52, 0x26, 0x81, 0x82,
	0xad, 0xac, 0x8f, 0x57, 0x09, 0x3c, 0x4e, 0x0d, 0xf4, 0x79, 0xd9, 0xe5, 0x14, 0x10, 0xb3, 0xb7,
	0xbe, 0x2b, 0x3c, 0x99, 0xb3, 0x5b, 0x12, 0x86, 0xac, 0x12, 0xca, 0xf3, 0x9d, 0xa6, 0x06, 0xba,
	0x02, 0xde, 0x98, 0x81, 0xf0, 0x86, 0x4b, 0x12, 0xf8, 0x38, 0x35, 0xd0, 0x07, 0xe0, 0x9d, 0xea,
	0xf5, 0x5a, 0x48, 0x12, 0xda, 0x73, 0x13, 0x42, 0x59, 0xf4, 0x9e, 0x68, 0x3b, 0x6b, 0x4e, 0xf1,
	0x6d, 0x8b, 0x24, 0xf0, 0xa9, 0xe6, 0x39, 0x6e, 0x9f, 0xd5, 0x77, 0x59, 0x36, 0xfb, 0x56, 0x62,
	0xaf, 0xc1, 0x67, 0xa9, 0x81, 0x6e, 0xf0, 0x09, 0x52, 0xd5, 0x28, 0x2f, 0xd1, 0x28, 0x76, 0x7d,
	0x2b, 0xde, 0x14, 0x11, 0x78, 0xae, 0x29, 0x93, 0xa8, 0x9e, 0x65, 0xdf, 0x1d, 0x44, 0x02, 0xf4,
	0x22, 0x35, 0xd0, 0x55, 0xf0, 0x66, 0x05, 0x72, 0x7a, 0xb4, 0x1c, 0xe7, 0x2f, 0x53, 0x03, 0x2d,
	0x97, 0xbd, 0x40, 0x31, 0xd5, 0x0b, 0x6d, 0xcb, 0xa3, 0x9e, 0xd5, 0xc3, 0x1e, 0x7c, 0x95, 0x1a,
	0xe8, 0x3d, 0xde, 0x1e, 0xb9, 0x8d, 0x6a, 0xa2, 0x66, 0x06, 0x7a, 0x97, 0x4f, 0x04, 0x2e, 0x0b,
	0xd6, 0x66, 0xd5, 0x3d, 0xcc, 0x0c, 0xf4, 0x11, 0x2f, 0x7f, 0x29, 0x72, 0x83, 0x44, 0x99, 0x0d,
	0x99, 0xcc, 0x53, 0x0e, 0xa8, 0x54, 0x33, 0xa5, 0xd4, 0x0e, 0x07, 0x41, 0x02, 0xc7, 0x99, 0x81,
	0xae, 0xf1, 0xf9, 0xa1, 0x40, 0x5c, 0x07, 0x4e, 0x32, 0x59, 0x04, 0x5c, 0xd2, 0x68, 0x4e, 0xd3,
	0x4c, 0x1e, 0x4c, 0xd5, 0x5e, 0xc7, 0x1c, 0x64, 0x32, 0x04, 0x33, 0x8c, 0xac, 0x03, 0x27, 0x66,
	0xc9, 0x7b, 0xa8, 0x9a, 0xc8, 0x11, 0x5a, 0xd3, 0x39, 0xca, 0xa4, 0xff, 0x15, 0x13, 0x03, 0xbc,
	0x91, 0xd0, 0xb5, 0x30, 0xe2, 0x5b, 0xc1, 0xe3, 0x4c, 0x26, 0xa5, 0x02, 0x8a, 0xb1, 0x1f, 0x96,
	0xd5, 0x1d, 0x8b, 0x03, 0x9f, 0x64, 0x32, 0xe6, 0x1c, 0x58, 0x07, 0xc8, 0x45, 0xe4, 0x1e, 0x3c,
	0xcd, 0x0c, 0xf4, 0x19, 0x1f, 0xf8, 0x0d, 0x94, 0x92, 0x41, 0x8f, 0x55, 0xdc, 0x2c, 0x0f, 0xc3,
	0x84, 0x73, 0x3d, 0x96, 0xb2, 0xbe, 0x15, 0xc1, 0x27, 0x99, 0x81, 0xbe, 0xe0, 0xfd, 0x90, 0xe3,
	0x44, 0xea, 0x88, 0x13, 0x2a, 0xf9, 0x06, 0x9f, 0xaa, 0x1e, 0x91, 0x32, 0x7e, 0x98, 0x08, 0x5b,
	0x8c, 0xba, 0x3d, 0x53, 0xdd, 0x2a, 0x76, 0xab, 0x23, 0x9e, 0x67, 0xb2, 0xe8, 0x95, 0x4d, 0xda,
	0x53, 0x57, 0xf5, 0x88, 0x8e, 0xe5, 0xd9, 0x42, 0xe0, 0x4b, 0xf5, 0x04, 0x3a, 0xaa, 0xe6, 0x21,
	0xf8, 0x4a, 0x3d, 0x41, 0x8b, 0x8b, 0xe1, 0x2f, 0x99, 0x6c, 0xbf, 0xcd, 0xcc, 0x84, 0xbf, 0x66,
	0x06, 0xba, 0xc9, 0xe7, 0x78, 0xb9, 0x9e, 0xd5, 0x4d, 0x4c, 0x7d, 0xcb, 0x6e, 0x84, 0xe9, 0xb7,
	0xac, 0x6a, 0x7d, 0x91, 0x4d, 0x7b, 0x7d, 0x47, 0xab, 0x9d, 0x5c, 0x46, 0x47, 0x8a, 0xab, 0x29,
	0xcc, 0xb1, 0x98, 0x10, 0x37, 0x0c, 0x08, 0x1c, 0xe6, 0x55, 0x8d, 0x0a, 0x9c, 0x15, 0xb9, 0xb4,
	0x67, 0x39, 0x34, 0xb2, 0x62, 0xcb, 0xc7, 0x09, 0x8e, 0xe1, 0x28, 0xaf, 0xda, 0x68, 0x0d, 0x63,
	0x7b, 0x2e, 0x0e, 0x12, 0x7d, 0x94, 0x8e, 0xf3, 0xaa, 0x63, 0xd4, 0xb0, 0x6e, 0x90, 0xe0, 0x38,
	0xa8, 0x38, 0xc8, 0x24, 0xaf, 0xda, 0xa8, 0xb4, 0xbd, 0x7d, 0x40, 0x4e, 0x1b, 0xd6, 0xad, 0x7f,
	0xad, 0x6b, 0x3c, 0x68, 0x62, 0xee, 0xe8, 0x98, 0xc3, 0x5c, 0x76, 0x92, 0xa6, 0xa3, 0x0a, 0x59,
	0xeb, 0x4c, 0xd4, 0xac, 0xe3, 0x61, 0x21, 0xc3, 0x35, 0x93, 0xcf, 0xba, 0x8c, 0xb6, 0x58, 0x14,
	0x78, 0x92, 0xc4, 0x6e, 0x6f, 0x90, 0x60, 0x38, 0x9e, 0xb3, 0xb9, 0xac, 0xef, 0x49, 0xeb, 0xfa,
	0xa0, 0x17, 0x8b, 0x3e, 0x3e, 0x2d, 0x64, 0x8b, 0xd2, 0xe4, 0xf0, 0xa0, 0x90, 0xe1, 0xe7, 0x27,
	0xd6, 0x3b, 0xd4, 0x61, 0x21, 0xdb, 0x2a, 0x13, 0xab, 0xe1, 0x3c, 0x2a, 0x64, 0xef, 0x9c, 0x13,
	0x9e, 0x63, 0x65, 0xb1, 0x4a, 0xbb, 0x4e, 0x0a, 0x59, 0x7f, 0x75, 0x8b, 0xe4, 0x44, 0x76, 0xef,
	0x61, 0x78, 0x5a, 0xc8, 0x12, 0xa8, 0x23, 0x44, 0xc2, 0xd1, 0x64, 0x33, 0xc2, 0xf0, 0x71, 0xeb,
	0xb1, 0xd6, 0xe3, 0x3e, 0x7c, 0xa2, 0x38, 0x44, 0x2e, 0x9a, 0xa9, 0x7f, 0xaa, 0x44, 0x43, 0xca,
	0xf9, 0xdc, 0x24, 0xf0, 0x99, 0xee, 0xed, 0xf2, 0x50, 0x4e, 0x4f, 0x72, 0x64, 0x65, 0x71, 0x8c,
	0xed, 0x70, 0x1d, 0xc7, 0x9b, 0x92, 0x17, 0x57, 0x8b, 0x59, 0x1a, 0xf9, 0x91, 0x47, 0x74, 0xd6,
	0x64, 0xd6, 0x12, 0x9b, 0xcb, 0x5d, 0xcf, 0x9f, 0x55, 0x95, 0xeb, 0xf9, 0x8c, 0x3d, 0x99, 0xa2,
	0x7c, 0x67, 0x9b, 0xcc, 0xf9, 0x0c, 0x6a, 0x22, 0xe7, 0xd0, 0xc9, 0x71, 0x6a, 0xa2, 0xdf, 0x81,
	0x2f, 0xea, 0xc8, 0x72, 0x8a, 0xf5, 0xbc, 0xbb, 0x33, 0xf5, 0xd5, 0x2b, 0x02, 0x27, 0xa9, 0x29,
	0x87, 0xbf, 0x5c, 0xa0, 0xf3, 0xdd, 0xd4, 0x14, 0x13, 0x9b, 0x1d, 0x81, 0x71, 0x93, 0x6a, 0xe2,
	0xd6, 0x05, 0x8c, 0x18, 0x8a, 0x4f, 0xc4, 0x61, 0x66, 0x0a, 0xd7, 0x31, 0x81, 0x47, 0x9c, 0xba,
	0x70, 0x94, 0x99, 0xc2, 0x75, 0x4c, 0x58, 0xe7, 0x71, 0xc1, 0x9a, 0xd7, 0xc7, 0x70, 0x9c, 0x99,
	0x22, 0x9f, 0xea, 0xf2, 0xb2, 0xe1, 0x4d, 0x14, 0x99, 0x83, 0x3d, 0x9c, 0xcc, 0xbe, 0x4b, 0x95,
	0x7d, 0x99, 0x52, 0x55, 0x7e, 0x90, 0xc9, 0x90, 0x88, 0x48, 0x28, 0x0c, 0x86, 0xeb, 0x26, 0xf0,
	0x30, 0x33, 0x45, 0x7b, 0xa8, 0x83, 0xc4, 0x14, 0x10, 0x98, 0xa3, 0xcc, 0x14, 0xfd, 0xa8, 0x7e,
	0xba, 0xd2, 0xa5, 0x96, 0xe7, 0x85, 0xb6, 0xd4, 0x78, 0x9c, 0x99, 0x82, 0xda, 0x4a, 0x20, 0xdf,
	0x41, 0xab, 0x7c, 0x78, 0x92, 0x99, 0xe8, 0x2d, 0x7e, 0x61, 0xc0, 0xfd, 0x5b, 0xd2, 0xba, 0xd3,
	0xcc, 0x14, 0x6c, 0x8f, 0x9f, 0x54, 0x92, 0xa4, 0xc7, 0x99, 0x29, 0x0a, 0xb9, 0xee, 0x1c, 0xec,
	0x91, 0x88, 0xe2, 0x0d, 0x36, 0x3d, 0x4d, 0x31, 0x7b, 0xf8, 0x56, 0xe2, 0x35, 0x0d, 0x63, 0xea,
	0xf4, 0xbd, 0x84, 0x5a, 0x1e, 0xbf, 0x2d, 0xe0, 0xcc, 0xf0, 0x69, 0x66, 0x8a, 0x26, 0x27, 0x83,
	0x57, 0xb1, 0xf6, 0x67, 0x99, 0x29, 0x28, 0x25, 0x13, 0xe9, 0x9c, 0xfe, 0xb9, 0x62, 0x42, 0xfd,
	0xaa, 0x81, 0xe9, 0x83, 0x2f, 0x32, 0x53, 0x8c, 0x12, 0x7e, 0x68, 0xee, 0x15, 0xe9, 0x47, 0x66,
	0x8b, 0xed, 0x59, 0x84, 0x60, 0x36, 0x26, 0x4d, 0xd1, 0x57, 0x18, 0xae, 0xe5, 0xd3, 0xf3, 0x55,
	0x66, 0xa2, 0x77, 0xf8, 0x77, 0x7c, 0x0d, 0x10, 0xde, 0x85, 0xbf, 0x54, 0x86, 0x97, 0xde, 0xac,
	0x27, 0x64, 0x2e, 0xd3, 0xa3, 0x14, 0x29, 0x1c, 0x30, 0x37, 0x45, 0xa3, 0xa9, 0x64, 0x3a, 0xc5,
	0x1a, 0xe5, 0xa6, 0x98, 0xef, 0x6a, 0x9c, 0x54, 0x02, 0x35, 0xce, 0xa5, 0xe1, 0x25, 0xaa, 0xd1,
	0x4d, 0x27, 0xb9, 0xcc, 0xa1, 0x9a, 0x26, 0xad, 0x95, 0x4f, 0x73, 0x99, 0x8c, 0x35, 0x4c, 0x83,
	0x14, 0x6a, 0x1b, 0xb5, 0xd1, 0xd2, 0xc3, 0x5c, 0x66, 0xbd, 0x8a, 0x29, 0xd9, 0x82, 0x03, 0x8f,
	0x72, 0x19, 0xcb, 0x96, 0x3d, 0xe0, 0x71, 0x2e, 0x53, 0x59, 0x5b, 0xad, 0xd3, 0xb2, 0x93, 0x5c,
	0x36, 0x20, 0x15, 0xd8, 0xa4, 0x8d, 0xa7, 0xb9, 0x4c, 0xfa, 0x12, 0x39, 0x87, 0x37, 0x3e, 0xd6,
	0x60, 0x73, 0xc8, 0xd4, 0x93, 0xdc, 0x14, 0x64, 0xa2, 0x1d, 0x56, 0x67, 0x53, 0x4f, 0xb5, 0x08,
	0xb7, 0xb0, 0xbd, 0x67, 0x9a, 0x47, 0xdb, 0x38, 0xe3, 0xf3, 0xdc, 0x44, 0xff, 0x0f, 0x3e, 0xd3,
	0xb7, 0xd1, 0x5d, 0x42, 0xb1, 0x1f, 0x25, 0x9b, 0xf0, 0x45, 0x6e, 0xa2, 0xff, 0xe3, 0x37, 0x07,
	0xed, 0x06, 0x2a, 0x04, 0xf2, 0xa5, 0xa6, 0xbe, 0x8d, 0xf0, 0xbd, 0xd2, 0x4e, 0x7c, 0x16, 0x03,
	0xfe, 0x45, 0x4b, 0xc5, 0x2a, 0x51, 0x65, 0x9a, 0xfd, 0xaa, 0xa5, 0x99, 0x68, 0x52, 0x36, 0xbf,
	0x6e, 0x92, 0x1a, 0x7f, 0xcb, 0xe5, 0x04, 0xd0, 0x72, 0xb1, 0x9a, 0xa3, 0x7f, 0xd7, 0xea, 0x2a,
	0x8c, 0x70, 0x2c, 0x9b, 0xdc, 0x3f, 0xce, 0x52, 0x21, 0xed, 0xf8, 0x67, 0x2e, 0x7b, 0x86, 0xa8,
	0xd9, 0x8d, 0x88, 0x35, 0x21, 0xb9, 0xc7, 0xbf, 0xb4, 0x33, 0xf3, 0xc6, 0x25, 0x1c, 0xce, 0xb6,
	0xa9, 0x35, 0x19, 0xf8, 0xef, 0x6a, 0xab, 0xd9, 0x5c, 0xab, 0xb7, 0x80, 0x42, 0x26, 0xc1, 0x4c,
	0xac, 0x0d, 0xa0, 0x61, 0x21, 0xcb, 0x5c, 0x85, 0xa8, 0xe3, 0x62, 0x54, 0x48, 0x9b, 0x54, 0xd4,
	0xec, 0xa9, 0x76, 0xbb, 0x54, 0xc8, 0x32, 0x9a, 0x87, 0x75, 0x03, 0x3a, 0x20, 0x18, 0x4e, 0x0a,
	0x99, 0xf5, 0x2a, 0x50, 0x9b, 0x08, 0xd3, 0x16, 0x98, 0x84, 0xf4, 0xbc, 0xd0, 0xbe, 0x5b, 0x72,
	0xa7, 0x83, 0x42, 0xb6, 0xda, 0x26, 0xac, 0x64, 0x23, 0x65, 0x95, 0x1f, 0x16, 0xb2, 0x63, 0xd6,
	0x5c, 0x56, 0x8e, 0x99, 0xa3, 0x42, 0x4e, 0xea, 0x99, 0xa8, 0x1a, 0x36, 0xc7, 0x85, 0x4c, 0xaf,
	0x1a, 0x85, 0xd8, 0x8c, 0xaa, 0xea, 0x87, 0x27, 0x2d, 0x06, 0x48, 0xa2, 0x5f, 0x6f, 0x64, 0xa7,
	0x85, 0x6c, 0x42, 0x9c, 0x5f, 0xc4, 0x78, 0x55, 0x09, 0x59, 0xda, 0x11, 0xa3, 0xae, 0x2e, 0x85,
	0xc3, 0xb4, 0x23, 0xd8, 0x05, 0x7f, 0xcd, 0xef, 0x4a, 0xb9, 0x60, 0xa4, 0xe2, 0xe5, 0xf5, 0xe8,
	0x38, 0xed, 0xd4, 0x28, 0x19, 0xcf, 0x60, 0xed, 0x7e, 0xa0, 0x23, 0x2f, 0x9a, 0xa4, 0x7c, 0x46,
	0xc7, 0x18, 0xfb, 0xeb, 0x5b, 0x36, 0x26, 0x70, 0x98, 0x75, 0x6a, 0x54, 0xab, 0xdc, 0x66, 0x0e,
	0x29, 0xcb, 0x3a, 0xa2, 0xf4, 0x2b, 0xe4, 0x19, 0x5f, 0x3a, 0x59, 0x47, 0x32, 0x97, 0xa6, 0x65,
	0x79, 0x47, 0x24, 0x24, 0x97, 0x55, 0xc6, 0xa8, 0x23, 0x63, 0x78, 0x26, 0xaa, 0xba, 0x09, 0xcd,
	0x3b, 0x72, 0xac, 0xaa, 0x28, 0xe9, 0xbd, 0x71, 0x0b, 0x40, 0xe1, 0xbd, 0x93, 0xbc, 0x23, 0xa7,
	0x3f, 0x03, 0x68, 0xc4, 0x77, 0x9a, 0x4b, 0x2f, 0x6b, 0xfb, 0x0b, 0x56, 0x7d, 0x90, 0x77, 0x44,
	0xfd, 0xe9, 0x56, 0x56, 0xd5, 0x72, 0x58, 0x29, 0xf0, 0x6e, 0x73, 0xb3, 0xb4, 0x2f, 0x2c, 0x55,
	0xaa, 0x5e, 0x8f, 0x0f, 0x0b, 0xa9, 0xde, 0xbb, 0xdd, 0x76, 0x7d, 0x3e, 0x2a, 0x3a, 0x82, 0x4b,
	0x79, 0xb7, 0x67, 0x99, 0x51, 0x74, 0x64, 0x9a, 0xde, 0x3e, 0xf3, 0x82, 0x5f, 0x53, 0x4d, 0x5d,
	0x42, 0x9d, 0x41, 0xe4, 0xb9, 0xb6, 0x95, 0x60, 0x38, 0xd5, 0x77, 0x99, 0x93, 0x16, 0x07, 0x45,
	0xa7, 0x46, 0xfd, 0xbd, 0xdb, 0xb4, 0xe7, 0xb4, 0x9c, 0x32, 0xed, 0xb6, 0x82, 0xd4, 0x88, 0xa7,
	0x5d, 0x79, 0xeb, 0xa6, 0x80, 0xaa, 0xb4, 0xe5, 0x3f, 0xa5, 0x8c, 0xd2, 0x2e, 0xfa, 0x12, 0x7c,
	0xde, 0xd4, 0xd7, 0x6e, 0xde, 0x38, 0xed, 0x8a, 0xf1, 0xa6, 0xc2, 0xdb, 0xd3, 0x76, 0x92, 0x76,
	0x65, 0x0b, 0x98, 0x73, 0x90, 0xac, 0x01, 0xd0, 0x22, 0x96, 0x75, 0x65, 0x43, 0xe6, 0x80, 0xb6,
	0xa0, 0x65, 0x5d, 0xc1, 0xf4, 0x4a, 0x48, 0x15, 0xb7, 0xac, 0x2b, 0x06, 0x93, 0xe6, 0x20, 0xe6,
	0x80, 0x92, 0x6a, 0x35, 0xb5, 0xb3, 0x7f, 0x66, 0xb9, 0x36, 0xcd, 0xba, 0xb5, 0xcf, 0x7d, 0x16,
	0xb8, 0x96, 0x1b, 0xee, 0x5c, 0x8b, 0x85, 0xf6, 0x3b, 0x44, 0xf9, 0x83, 0x55, 0xae, 0xb9, 0xed,
	0xcc, 0xab, 0xfa, 0x51, 0xde, 0xad, 0xb5, 0x86, 0x0a, 0x3d, 0xef, 0x12, 0xa4, 0x3b, 0xcb, 0xe9,
	0x36, 0xfb, 0x8a, 0x9a, 0x07, 0x4b, 0x39, 0x3b, 0xa3, 0x92, 0x29, 0xf3, 0x21, 0x55, 0x63, 0x28,
	0x1a, 0x5a, 0x14, 0x4f, 0x8d, 0x0b, 0xe9, 0x05, 0x5d, 0x5e, 0x4f, 0x87, 0xe6, 0x26, 0xca, 0x8d,
	0xf7, 0xb4, 0xd0, 0xdc, 0x2d, 0x7e, 0x75, 0xa8, 0x1f, 0x67, 0x98, 0x2e, 0xa8, 0x9e, 0x14, 0x98,
	0x79, 0x5f, 0xbe, 0x0b, 0xaa, 0x27, 0x4b, 0xf4, 0x1c, 0x4f, 0xa6, 0x0b, 0xb5, 0x6f, 0xd9, 0x0a,
	0x8c, 0x83, 0xf2, 0x77, 0xb4, 0x38, 0x86, 0x93, 0x74, 0x41, 0xfe, 0x20, 0x51, 0x47, 0x38, 0x2e,
	0xa9, 0x20, 0xd3, 0x74, 0xa1, 0x76, 0x55, 0x36, 0xdb, 0x44, 0x24, 0xe5, 0x41, 0xba, 0x50, 0x1b,
	0x23, 0x95, 0x58, 0x8f, 0xc8, 0xe1, 0xd9, 0x30, 0x19, 0x95, 0xa3, 0x74, 0xa1, 0xcd, 0x61, 0x4a,
	0x64, 0x8e, 0xd3, 0x85, 0x59, 0xcb, 0x2d, 0x9b, 0xb5, 0xd6, 0x4b, 0x56, 0x96, 0xbf, 0x01, 0x17,
	0x89, 0xe7, 0x3e, 0xdc, 0xdf, 0xde, 0xfb, 0xfe, 0xfe, 0x83, 0x6d, 0xf4, 0x36, 0xe8, 0x06, 0xf7,
	0x7f, 0xda, 0xe6, 0x3f, 0xd2, 0x2f, 0xae, 0x9d, 0x8b, 0xf9, 0x13, 0xba, 0x06, 0xce, 0xaf, 0xdd,
	0x7f, 0xf8, 0xdd, 0x8f, 0xdb, 0xd7, 0xcc, 0x25, 0xe3, 0xe6, 0xe5, 0xb5, 0x73, 0xb1, 0x78, 0xee,
	0x5d, 0x04, 0x8b, 0xd5, 0xe2, 0xe5, 0x0d, 0xbe, 0xd7, 0xae, 0xf5, 0xdd, 0x77, 0x7b, 0xdb, 0x8f,
	0x1e, 0xa1, 0xeb, 0x60, 0x71, 0xfd, 0x6b, 0xf1, 0xc0, 0x37, 0x64, 0x0b, 0x67, 0xaf, 0xb8, 0xfc,
	0x8e, 0x94, 0xb3, 0x8d, 0x2f, 0x71, 0xb9, 0x7c, 0xd5, 0x5b, 0x04, 0x17, 0xc4, 0x7f, 0x6f, 0x7d,
	0x0b, 0x2e, 0x10, 0x2f, 0xde, 0xfe, 0x73, 0xb8, 0x8b, 0xae, 0x94, 0x3f, 0x01, 0xe0, 0xd5, 0x30,
	0xa2, 0x31, 0xe6, 0xc1, 0x77, 0xe0, 0x39, 0xed, 0x75, 0x19, 0x58, 0x68, 0xa0, 0xab, 0x9c, 0xbd,
	0x94, 0xaf, 0x65, 0x03, 0xc1, 0x31, 0x34, 0xc5, 0xaf, 0xea, 0xa5, 0x00, 0x87, 0x7d, 0xd8, 0xb9,
	0x45, 0x01, 0x20, 0x5e, 0xf8, 0xed, 0x5f, 0xb6, 0x1f, 0xec, 0x57, 0x6a, 0xc2, 0xde, 0x37, 0xaa,
	0x9a, 0x72, 0x59, 0xf9, 0xda, 0x72, 0x1c, 0x68, 0xa0, 0xb7, 0x38, 0xa1, 0x28, 0xdf, 0x94, 0x5f,
	0xbc, 0xd0, 0x54, 0x5e, 0x96, 0xec, 0x10, 0x76, 0x6e, 0x11, 0xb0, 0x48, 0xbc, 0x60, 0x67, 0xff,
	0x87, 0xef, 0xc3, 0x5d, 0x61, 0x18, 0x0f, 0x5a, 0xdb, 0x41, 0xa4, 0xa0, 0xcc, 0x40, 0x68, 0x88,
	0x3f, 0x4a, 0x90, 0xaf, 0x45, 0xda, 0x41, 0xf3, 0xd6, 0x5d, 0xe6, 0x73, 0xfc, 0xf0, 0xc1, 0xfd,
	0xdd, 0xe4, 0xe7, 0xdd, 0x6d, 0xb1, 0x1a, 0x07, 0xb6, 0xa5, 0x6c, 0x8a, 0xc0, 0xeb, 0xd5, 0xeb,
	0xf5, 0x0d, 0xcf, 0x0a, 0xa0, 0x21, 0xfe, 0xd4, 0xa0, 0x7c, 0xc7, 0xf8, 0x10, 0x34, 0xbf, 0x3d,
	0xcf, 0xff, 0x98, 0xe3, 0xf7, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x08, 0x5f, 0x24, 0xe5,
	0x21, 0x00, 0x00,
>>>>>>> 572b9d3... new error codes for fatal clear
}
