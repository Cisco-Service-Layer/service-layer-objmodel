// @file
// @brief Common definitions for all of the service layer proto files.
//
//---------------------------------------------------------------------
// Copyright (c) 2019 by Cisco Systems, Inc.
// All rights reserved.
//---------------------------------------------------------------------
//
//

//@defgroup Common
//@brief Common service definitions and Global initializations.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.1
// source: sl_common_types.proto

package service_layer

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Registration Operations.
type SLRegOp int32

const (
	// Reserved. 0x0
	SLRegOp_SL_REGOP_RESERVED SLRegOp = 0
	// Register. 0x1
	SLRegOp_SL_REGOP_REGISTER SLRegOp = 1
	// Un-Register. 0x2
	SLRegOp_SL_REGOP_UNREGISTER SLRegOp = 2
	// End Of File. 0x3
	SLRegOp_SL_REGOP_EOF SLRegOp = 3
)

// Enum value maps for SLRegOp.
var (
	SLRegOp_name = map[int32]string{
		0: "SL_REGOP_RESERVED",
		1: "SL_REGOP_REGISTER",
		2: "SL_REGOP_UNREGISTER",
		3: "SL_REGOP_EOF",
	}
	SLRegOp_value = map[string]int32{
		"SL_REGOP_RESERVED":   0,
		"SL_REGOP_REGISTER":   1,
		"SL_REGOP_UNREGISTER": 2,
		"SL_REGOP_EOF":        3,
	}
)

func (x SLRegOp) Enum() *SLRegOp {
	p := new(SLRegOp)
	*p = x
	return p
}

func (x SLRegOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLRegOp) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_common_types_proto_enumTypes[0].Descriptor()
}

func (SLRegOp) Type() protoreflect.EnumType {
	return &file_sl_common_types_proto_enumTypes[0]
}

func (x SLRegOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLRegOp.Descriptor instead.
func (SLRegOp) EnumDescriptor() ([]byte, []int) {
	return file_sl_common_types_proto_rawDescGZIP(), []int{0}
}

// Object Operations.
type SLObjectOp int32

const (
	// Reserved. 0x0
	SLObjectOp_SL_OBJOP_RESERVED SLObjectOp = 0
	// Add. 0x1
	SLObjectOp_SL_OBJOP_ADD SLObjectOp = 1
	// Update. 0x2
	SLObjectOp_SL_OBJOP_UPDATE SLObjectOp = 2
	// Delete. 0x3
	SLObjectOp_SL_OBJOP_DELETE SLObjectOp = 3
)

// Enum value maps for SLObjectOp.
var (
	SLObjectOp_name = map[int32]string{
		0: "SL_OBJOP_RESERVED",
		1: "SL_OBJOP_ADD",
		2: "SL_OBJOP_UPDATE",
		3: "SL_OBJOP_DELETE",
	}
	SLObjectOp_value = map[string]int32{
		"SL_OBJOP_RESERVED": 0,
		"SL_OBJOP_ADD":      1,
		"SL_OBJOP_UPDATE":   2,
		"SL_OBJOP_DELETE":   3,
	}
)

func (x SLObjectOp) Enum() *SLObjectOp {
	p := new(SLObjectOp)
	*p = x
	return p
}

func (x SLObjectOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLObjectOp) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_common_types_proto_enumTypes[1].Descriptor()
}

func (SLObjectOp) Type() protoreflect.EnumType {
	return &file_sl_common_types_proto_enumTypes[1]
}

func (x SLObjectOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLObjectOp.Descriptor instead.
func (SLObjectOp) EnumDescriptor() ([]byte, []int) {
	return file_sl_common_types_proto_rawDescGZIP(), []int{1}
}

// Notification Operations.
type SLNotifOp int32

const (
	// Reserved. 0x0
	SLNotifOp_SL_NOTIFOP_RESERVED SLNotifOp = 0
	// Enable. 0x1
	SLNotifOp_SL_NOTIFOP_ENABLE SLNotifOp = 1
	// Disable. 0x2
	SLNotifOp_SL_NOTIFOP_DISABLE SLNotifOp = 2
)

// Enum value maps for SLNotifOp.
var (
	SLNotifOp_name = map[int32]string{
		0: "SL_NOTIFOP_RESERVED",
		1: "SL_NOTIFOP_ENABLE",
		2: "SL_NOTIFOP_DISABLE",
	}
	SLNotifOp_value = map[string]int32{
		"SL_NOTIFOP_RESERVED": 0,
		"SL_NOTIFOP_ENABLE":   1,
		"SL_NOTIFOP_DISABLE":  2,
	}
)

func (x SLNotifOp) Enum() *SLNotifOp {
	p := new(SLNotifOp)
	*p = x
	return p
}

func (x SLNotifOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLNotifOp) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_common_types_proto_enumTypes[2].Descriptor()
}

func (SLNotifOp) Type() protoreflect.EnumType {
	return &file_sl_common_types_proto_enumTypes[2]
}

func (x SLNotifOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLNotifOp.Descriptor instead.
func (SLNotifOp) EnumDescriptor() ([]byte, []int) {
	return file_sl_common_types_proto_rawDescGZIP(), []int{2}
}

// Encapsulation Types.
// Specify tunnel encapsulation types: VXLAN or MPLS.
// This will determine the interpretation of some fields VrfName and
// LabelStack in SLRoutePath. It will mandate the presence of certain fields.
type SLEncapType int32

const (
	// Reserved. 0x0
	SLEncapType_SL_ENCAP_RESERVED SLEncapType = 0
	// Vxlan encap. 0x1
	SLEncapType_SL_ENCAP_VXLAN SLEncapType = 1
	// Mpls encap. 0x2
	SLEncapType_SL_ENCAP_MPLS SLEncapType = 2
)

// Enum value maps for SLEncapType.
var (
	SLEncapType_name = map[int32]string{
		0: "SL_ENCAP_RESERVED",
		1: "SL_ENCAP_VXLAN",
		2: "SL_ENCAP_MPLS",
	}
	SLEncapType_value = map[string]int32{
		"SL_ENCAP_RESERVED": 0,
		"SL_ENCAP_VXLAN":    1,
		"SL_ENCAP_MPLS":     2,
	}
)

func (x SLEncapType) Enum() *SLEncapType {
	p := new(SLEncapType)
	*p = x
	return p
}

func (x SLEncapType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLEncapType) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_common_types_proto_enumTypes[3].Descriptor()
}

func (SLEncapType) Type() protoreflect.EnumType {
	return &file_sl_common_types_proto_enumTypes[3]
}

func (x SLEncapType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLEncapType.Descriptor instead.
func (SLEncapType) EnumDescriptor() ([]byte, []int) {
	return file_sl_common_types_proto_rawDescGZIP(), []int{3}
}

type SLErrorStatus_SLErrno int32

const (
	// Success, no errors detected. 0x0.
	SLErrorStatus_SL_SUCCESS SLErrorStatus_SLErrno = 0
	// Client is not connected.
	// The client is expected to remain connected after init and version
	// validation, RPC calls can fail with this error code otherwise.
	// Refer to RPC SLGlobalInitNotif. 0x1
	SLErrorStatus_SL_NOT_CONNECTED SLErrorStatus_SLErrno = 1
	// Operation must be retried. 0x2
	SLErrorStatus_SL_EAGAIN SLErrorStatus_SLErrno = 2
	// One or more components does not have sufficient memory. 0x3
	SLErrorStatus_SL_ENOMEM SLErrorStatus_SLErrno = 3
	// Too many outstanding requests. 0x4
	SLErrorStatus_SL_EBUSY SLErrorStatus_SLErrno = 4
	// One or more arguments are invalid. 0x5
	SLErrorStatus_SL_EINVAL SLErrorStatus_SLErrno = 5
	// Unsupported version. 0x6
	SLErrorStatus_SL_UNSUPPORTED_VER SLErrorStatus_SLErrno = 6
	// Not Available. 0x7
	SLErrorStatus_SL_NOT_AVAILABLE SLErrorStatus_SLErrno = 7
	// Stream mode not supported. 0x8
	SLErrorStatus_SL_STREAM_NOT_SUPPORTED SLErrorStatus_SLErrno = 8
	// Operation not supported. 0x9
	SLErrorStatus_SL_ENOTSUP SLErrorStatus_SLErrno = 9
	// One or more objects is errored:
	// Each object must be individually examined. 0xa
	SLErrorStatus_SL_SOME_ERR SLErrorStatus_SLErrno = 10
	// Operation Timed out.
	// The result of the operation is undeterministic (success or fail). 0xb
	SLErrorStatus_SL_TIMEOUT SLErrorStatus_SLErrno = 11
	// Due to some event, the client will no longer receive notification
	// events on this channel. 0xc
	// Such events include:
	// - Notification Session was hijacked by another client.
	SLErrorStatus_SL_NOTIF_TERM SLErrorStatus_SLErrno = 12
	// Authentication failure.
	// Incorrect credentials passed in by RPC. 0xd
	SLErrorStatus_SL_AUTH_FAIL SLErrorStatus_SLErrno = 13
	// Offset for INIT errors. 0x500
	SLErrorStatus_SL_INIT_START_OFFSET SLErrorStatus_SLErrno = 1280
	// Success, no errors detected - clear state.
	// This error is returned on the first-ever initialization, or,
	// when a fatal event has occured and all previous state was lost. 0x501
	SLErrorStatus_SL_INIT_STATE_CLEAR SLErrorStatus_SLErrno = 1281
	// Success, no errors detected - previous state is recovered.
	// This error is returned on a client re-initialization with
	// successful recovery of state. Note that any unacknowledged
	// data previously sent should be considered lost. 0x502
	SLErrorStatus_SL_INIT_STATE_READY SLErrorStatus_SLErrno = 1282
	// Server software incompatible with client software version. 0x503
	SLErrorStatus_SL_INIT_UNSUPPORTED_VER SLErrorStatus_SLErrno = 1283
	// Initialization request received while server is not ready. 0x504
	SLErrorStatus_SL_INIT_SERVER_NOT_INITIALIZED SLErrorStatus_SLErrno = 1284
	// Server operational mode change from stream to non-stream
	// or vice-versa failed. 0x505
	SLErrorStatus_SL_INIT_SERVER_MODE_CHANGE_FAILED SLErrorStatus_SLErrno = 1285
	// Offset for VRF errors. 0x1000
	SLErrorStatus_SL_RPC_VRF_START_OFFSET SLErrorStatus_SLErrno = 4096
	// Operation rejected for ALL VRFs due to too many VRF registration
	// messages in the request. 0x1001
	SLErrorStatus_SL_RPC_VRF_TOO_MANY_VRF_REG_MSGS SLErrorStatus_SLErrno = 4097
	// Operation rejected for all VRFs as server is not initialized. 0x1002
	SLErrorStatus_SL_RPC_VRF_SERVER_NOT_INITIALIZED SLErrorStatus_SLErrno = 4098
	// Offset for VRF errors. 0x2000
	SLErrorStatus_SL_VRF_START_OFFSET SLErrorStatus_SLErrno = 8192
	// VRF name in the VRF registration message is too long. 0x2001
	SLErrorStatus_SL_VRF_NAME_TOOLONG SLErrorStatus_SLErrno = 8193
	// VRF not found during a unregister or EOF. 0x2002
	SLErrorStatus_SL_VRF_NOT_FOUND SLErrorStatus_SLErrno = 8194
	// On a VRF registration, Table ID for the VRF is not found. 0x2003
	SLErrorStatus_SL_VRF_NO_TABLE_ID SLErrorStatus_SLErrno = 8195
	// VRF add registration message with invalid administrative distance. 0x2004
	SLErrorStatus_SL_VRF_REG_INVALID_ADMIN_DISTANCE SLErrorStatus_SLErrno = 8196
	// On a VRF registration, Table cannot be added to persistent memory. 0x2005
	SLErrorStatus_SL_VRF_TABLE_ADD_ERR SLErrorStatus_SLErrno = 8197
	// VRF table cannot be registered with RIB. 0x2006
	SLErrorStatus_SL_VRF_TABLE_REGISTRATION_ERR SLErrorStatus_SLErrno = 8198
	// VRF table cannot be unregistered with RIB. 0x2007
	SLErrorStatus_SL_VRF_TABLE_UNREGISTRATION_ERR SLErrorStatus_SLErrno = 8199
	// VRF table RIB EOF operation error. 0x2008
	SLErrorStatus_SL_VRF_TABLE_EOF_ERR SLErrorStatus_SLErrno = 8200
	// VRF registration message does not have a VRF name. 0x2009
	SLErrorStatus_SL_VRF_REG_VRF_NAME_MISSING SLErrorStatus_SLErrno = 8201
	// IPv4 routes in VRF cannot be played to Routing Information Base
	// on a process restart or connection re-establishment.
	// The Forwarding Information Base can
	// can be inconsistent. Agent/Controller should initiate a
	// recovery action by reloading the device. 0x2010
	SLErrorStatus_SL_VRF_V4_ROUTE_REPLAY_FATAL_ERROR SLErrorStatus_SLErrno = 8208
	// IPv6 routes in VRF cannot be played to Routing Information Base
	// on a process restart or connection re-establishment.
	// The Forwarding Information Base can
	// can be inconsistent. Agent/Controller should initiate a
	// recovery action by reloading the device. 0x2011
	SLErrorStatus_SL_VRF_V6_ROUTE_REPLAY_FATAL_ERROR SLErrorStatus_SLErrno = 8209
	// IPv4 routes in VRF were played to Routing Information Base
	// on a process restart or connection re-establishment. 0x2012
	SLErrorStatus_SL_VRF_V4_ROUTE_REPLAY_OK SLErrorStatus_SLErrno = 8210
	// IPv6 routes in VRF were played to Routing Information Base
	// on a process restart or connection re-establishment. 0x2013
	SLErrorStatus_SL_VRF_V6_ROUTE_REPLAY_OK SLErrorStatus_SLErrno = 8211
	// Offset for Route operation errors. 0x3000
	SLErrorStatus_SL_RPC_ROUTE_START_OFFSET SLErrorStatus_SLErrno = 12288
	// Operation rejected for ALL routes due to too many routes in the
	// request. 0x3001
	SLErrorStatus_SL_RPC_ROUTE_TOO_MANY_ROUTES SLErrorStatus_SLErrno = 12289
	// Operation rejected for ALL routes as the request's VRF name
	// is too long. 0x3002
	SLErrorStatus_SL_RPC_ROUTE_VRF_NAME_TOOLONG SLErrorStatus_SLErrno = 12290
	// Operation rejected for ALL routes as VRF for the given name
	// is not found. 0x3003
	SLErrorStatus_SL_RPC_ROUTE_VRF_NOT_FOUND SLErrorStatus_SLErrno = 12291
	// Operation rejected for ALL routes as VRF's Table ID is not found.
	// 0x3004
	SLErrorStatus_SL_RPC_ROUTE_VRF_NO_TABLE SLErrorStatus_SLErrno = 12292
	// Operation rejected for ALL routes as VRF is not registered with RIB.
	// 0x3005
	SLErrorStatus_SL_RPC_ROUTE_VRF_TABLE_NOT_REGISTERED SLErrorStatus_SLErrno = 12293
	// Route Operation rejected for ALL objects as VRF name is missing.
	// 0x3006
	SLErrorStatus_SL_RPC_ROUTE_VRF_NAME_MISSING SLErrorStatus_SLErrno = 12294
	// Operation rejected for all routes as the RPC request is
	// not supported for the library's initialization mode. 0x3007
	SLErrorStatus_SL_RPC_ROUTE_INIT_MODE_INCOMPATIBLE SLErrorStatus_SLErrno = 12295
	// Operation rejected for all routes as server is not initialized.
	// 0x3008
	SLErrorStatus_SL_RPC_ROUTE_SERVER_NOT_INITIALIZED SLErrorStatus_SLErrno = 12296
	// Operation rejected as the request's SrcProto is too long. 0x3009
	SLErrorStatus_SL_RPC_ROUTE_NOTIF_SRC_PROTO_TOOLONG SLErrorStatus_SLErrno = 12297
	// Operation rejected as the request's SrcProtoTag is too long. 0x300a
	SLErrorStatus_SL_RPC_ROUTE_NOTIF_SRC_PROTO_TAG_TOOLONG SLErrorStatus_SLErrno = 12298
	// Offset for route errors. 0x4000
	SLErrorStatus_SL_ROUTE_START_OFFSET SLErrorStatus_SLErrno = 16384
	// Route add operation requested but no paths were provided. 0x4001
	SLErrorStatus_SL_ROUTE_ADD_NO_PATHS SLErrorStatus_SLErrno = 16385
	// Route update operation requested but no paths were provided. 0x4002
	SLErrorStatus_SL_ROUTE_UPDATE_NO_PATHS SLErrorStatus_SLErrno = 16386
	// Route's prefix length is invalid. 0x4003
	SLErrorStatus_SL_ROUTE_INVALID_PREFIX_LEN SLErrorStatus_SLErrno = 16387
	// Route's admininstrative distance is invalid. 0x4004
	SLErrorStatus_SL_ROUTE_INVALID_ADMIN_DISTANCE SLErrorStatus_SLErrno = 16388
	// Route's number of paths exceeds system capabilities. 0x4005
	SLErrorStatus_SL_ROUTE_INVALID_NUM_PATHS SLErrorStatus_SLErrno = 16389
	// Size of IPv6 prefix is invalid. 0x4006
	SLErrorStatus_SL_ROUTE_INVALID_PREFIX_SZ SLErrorStatus_SLErrno = 16390
	// Route's prefix is invalid. 0x4007
	SLErrorStatus_SL_ROUTE_INVALID_PREFIX SLErrorStatus_SLErrno = 16391
	// Route programming failed in RIB as VRF table limit reached. 0x4008
	SLErrorStatus_SL_ROUTE_ERR_RIB_TABLE_LIMIT_REACHED SLErrorStatus_SLErrno = 16392
	// RIB route programming failed in RIB due to invalid arguments. 0x4009
	SLErrorStatus_SL_ROUTE_ERR_RIB_INVALID_ARGS SLErrorStatus_SLErrno = 16393
	// One or more paths could not be programmed in RIB as VRF
	// table limit reached. 0x400a
	SLErrorStatus_SL_ROUTE_ERR_RIB_PATH_TABLE_LIMIT SLErrorStatus_SLErrno = 16394
	// One or more paths could not be programmed in RIB as number of paths
	// reached system limit. 0x400b
	SLErrorStatus_SL_ROUTE_ERR_RIB_TOOMANYPATHS SLErrorStatus_SLErrno = 16395
	// This route already exists in the database. 0x400c
	SLErrorStatus_SL_ROUTE_EEXIST SLErrorStatus_SLErrno = 16396
	// Route prefix has host bits set. 0x400d
	SLErrorStatus_SL_ROUTE_HOST_BITS_SET SLErrorStatus_SLErrno = 16397
	// IPv4 Route prefix is a multicast address. 0x400e
	SLErrorStatus_SL_ROUTE_INVALID_PREFIX_MCAST SLErrorStatus_SLErrno = 16398
	// Route and Path AFI does not match. 0x400f
	SLErrorStatus_SL_ROUTE_PATH_AFI_MISMATCH SLErrorStatus_SLErrno = 16399
	// Number of primary paths exceeds system capabilities. 0x4010
	SLErrorStatus_SL_ROUTE_TOOMANY_PRIMARY_PATHS SLErrorStatus_SLErrno = 16400
	// Number of backup paths exceeds system capabilities. 0x4011
	SLErrorStatus_SL_ROUTE_TOOMANY_BACKUP_PATHS SLErrorStatus_SLErrno = 16401
	// The route database is out of memory. 0x4012
	SLErrorStatus_SL_ROUTE_DB_NOMEM SLErrorStatus_SLErrno = 16402
	// The route has an invalid local label. 0x4013
	SLErrorStatus_SL_ROUTE_INVALID_LOCAL_LABEL SLErrorStatus_SLErrno = 16403
	// Offset for route path errors. 0x5000
	SLErrorStatus_SL_PATH_START_OFFSET SLErrorStatus_SLErrno = 20480
	// VRF table for the path could not be determined. 0x5001
	SLErrorStatus_SL_PATH_NH_NO_TABLE SLErrorStatus_SLErrno = 20481
	// Path next hop interface not found. 0x5002
	SLErrorStatus_SL_PATH_NH_INTF_NOT_FOUND SLErrorStatus_SLErrno = 20482
	// Number of labels in the path exceeds system capabilities. 0x5003
	SLErrorStatus_SL_PATH_INVALID_LABEL_COUNT SLErrorStatus_SLErrno = 20483
	// Path ID assigned to the path falls outside the supported range. 0x5004
	SLErrorStatus_SL_PATH_INVALID_ID SLErrorStatus_SLErrno = 20484
	// Path VRF name exceeds supported length. 0x5005
	SLErrorStatus_SL_PATH_VRF_NAME_TOOLONG SLErrorStatus_SLErrno = 20485
	// Path next hop interface name exceeds supported length. 0x5006
	SLErrorStatus_SL_PATH_NH_INTF_NAME_TOOLONG SLErrorStatus_SLErrno = 20486
	// Size of next hop IPv6 address is invalid. 0x5007
	SLErrorStatus_SL_PATH_NH_INVALID_ADDR_SZ SLErrorStatus_SLErrno = 20487
	// Next hop interface name is missing from path. 0x5008
	SLErrorStatus_SL_PATH_NH_INF_NAME_MISSING SLErrorStatus_SLErrno = 20488
	// Path has an invalid next hop address. 0x5009
	SLErrorStatus_SL_PATH_INVALID_NEXT_HOP_ADDR SLErrorStatus_SLErrno = 20489
	// Number of remote backup addresses in the path exceeds
	// system capabilities. 0x500a
	SLErrorStatus_SL_PATH_INVALID_REMOTE_ADDR_COUNT SLErrorStatus_SLErrno = 20490
	// Size of IPv6 remote backup address is invalid. 0x500b
	SLErrorStatus_SL_PATH_REMOTE_ADDR_INVALID_SZ SLErrorStatus_SLErrno = 20491
	// Route and Path remote backup address AFI does not match. 0x500c
	SLErrorStatus_SL_PATH_REMOTE_ADDR_AFI_MISMATCH SLErrorStatus_SLErrno = 20492
	// Path has an invalid protection bitmap. 0x500d
	SLErrorStatus_SL_PATH_INVALID_PROTECTED_BITMAP SLErrorStatus_SLErrno = 20493
	// Protection bitmap of a backup path refers to a missing path. 0x500e
	SLErrorStatus_SL_PATH_BACKUP_MISSING_PRIMARY_PATH SLErrorStatus_SLErrno = 20494
	// Too many primary paths with same Path ID. 0x500f
	SLErrorStatus_SL_PATH_PRIMARY_ID_REPEATED SLErrorStatus_SLErrno = 20495
	// Too many pure backup paths with same Path ID. 0x5010
	SLErrorStatus_SL_PATH_BACKUP_ID_REPEATED SLErrorStatus_SLErrno = 20496
	// A primary path has too many backup paths. 0x5011
	SLErrorStatus_SL_PATH_PRIMARY_TOOMANY_BACKUP_PATHS SLErrorStatus_SLErrno = 20497
	// A primary path has too many labels. 0x5012
	SLErrorStatus_SL_PATH_PRIMARY_TOOMANY_LABELS SLErrorStatus_SLErrno = 20498
	// A primary path has too many remote addresses. 0x5013
	SLErrorStatus_SL_PATH_PRIMARY_TOOMANY_REMOTE_ADDR SLErrorStatus_SLErrno = 20499
	// A pure backup remote address is invalid. 0x5014
	SLErrorStatus_SL_PATH_REMOTE_ADDR_INVALID SLErrorStatus_SLErrno = 20500
	// Path has an invalid label. 0x5015
	SLErrorStatus_SL_PATH_INVALID_LABEL SLErrorStatus_SLErrno = 20501
	// Size of router mac address is invalid. 0x5016
	SLErrorStatus_SL_PATH_ROUTER_MAC_ADDR_INVALID_SZ SLErrorStatus_SLErrno = 20502
	// Offset for BFD operation errors. 0x6000
	SLErrorStatus_SL_RPC_BFD_START_OFFSET SLErrorStatus_SLErrno = 24576
	// BFD Operation rejected for ALL Sessions as the BFD Session count
	// is beyond supported limit. 0x6001
	SLErrorStatus_SL_RPC_BFD_TOO_MANY_BFD_SESSIONS SLErrorStatus_SLErrno = 24577
	// BFD Operation rejected due to one or many invalid parameters. 0x6002
	SLErrorStatus_SL_RPC_BFD_API_BAD_PARAMETER SLErrorStatus_SLErrno = 24578
	// BFD Operation failed as server is not registered with BFD. 0x6003
	SLErrorStatus_SL_RPC_BFD_API_CLIENT_NOT_REGISTERED SLErrorStatus_SLErrno = 24579
	// BFD Operation failed with internal error. 0x6004
	SLErrorStatus_SL_RPC_BFD_API_INTERNAL_ERROR SLErrorStatus_SLErrno = 24580
	// BFD Operation rejected as server is not initialized. 0x6005
	SLErrorStatus_SL_RPC_BFD_SERVER_NOT_INITIALIZED SLErrorStatus_SLErrno = 24581
	// BFD IPv4 not registered. 0x6006
	SLErrorStatus_SL_RPC_BFD_V4_NOT_REGISTERED SLErrorStatus_SLErrno = 24582
	// BFD IPv6 not registered. 0x6007
	SLErrorStatus_SL_RPC_BFD_V6_NOT_REGISTERED SLErrorStatus_SLErrno = 24583
	// Offset for BFD errors. 0x7000
	SLErrorStatus_SL_BFD_START_OFFSET SLErrorStatus_SLErrno = 28672
	// BFD Session's interface name exceeds supported length. 0x7001
	SLErrorStatus_SL_BFD_INTF_NAME_TOOLONG SLErrorStatus_SLErrno = 28673
	// BFD Session's interface not found. 0x7002
	SLErrorStatus_SL_BFD_INTF_NOT_FOUND SLErrorStatus_SLErrno = 28674
	// BFD Session's tx interval or multiplier are beyond the
	// supported range. 0x7003
	SLErrorStatus_SL_BFD_INVALID_ATTRIBUTE SLErrorStatus_SLErrno = 28675
	// BFD Session's interface name is missing. 0x7004
	SLErrorStatus_SL_BFD_INTF_NAME_MISSING SLErrorStatus_SLErrno = 28676
	// BFD Session's neighbor is mcast address. 0x7005
	SLErrorStatus_SL_BFD_INVALID_NBR_MCAST SLErrorStatus_SLErrno = 28677
	// BFD Session's neighbor address is invalid. 0x7006
	SLErrorStatus_SL_BFD_INVALID_NBR SLErrorStatus_SLErrno = 28678
	// BFD Session's VRF Name is too long. 0x7007
	SLErrorStatus_SL_BFD_VRF_NAME_TOOLONG SLErrorStatus_SLErrno = 28679
	// BFD Session's one or more parameters are invalid.
	// For example, Multihop BFD can not have the interface name set. 0x7008
	SLErrorStatus_SL_BFD_BAD_PARAMETER SLErrorStatus_SLErrno = 28680
	// BFD Session failed with internal error. 0x7009
	SLErrorStatus_SL_BFD_API_INTERNAL_ERROR SLErrorStatus_SLErrno = 28681
	// BFD Session's VRF not found. 0x700a
	SLErrorStatus_SL_BFD_VRF_NOT_FOUND SLErrorStatus_SLErrno = 28682
	// BFD Session's neighbor IPv6 prefix size is invalid. 0x700b
	SLErrorStatus_SL_BFD_INVALID_PREFIX_SIZE SLErrorStatus_SLErrno = 28683
	// BFD Session type invalid. 0x700c
	SLErrorStatus_SL_BFD_INVALID_SESSION_TYPE SLErrorStatus_SLErrno = 28684
	// BFD Session's VRF is Invalid. 0x700d
	SLErrorStatus_SL_BFD_INVALID_VRF SLErrorStatus_SLErrno = 28685
	// BFD Session not found. 0x700e
	SLErrorStatus_SL_BFD_SESSION_NOT_FOUND SLErrorStatus_SLErrno = 28686
	// BFD Session exists. 0x700f
	SLErrorStatus_SL_BFD_SESSION_EXISTS SLErrorStatus_SLErrno = 28687
	// BFD Internal database error. 0x7010
	SLErrorStatus_SL_BFD_INTERNAL_DB_ERROR SLErrorStatus_SLErrno = 28688
	// BFD Recovery error. 0x7011
	SLErrorStatus_SL_BFD_RECOVERY_ERROR SLErrorStatus_SLErrno = 28689
	// Offset for MPLS operation errors. 0x8000
	SLErrorStatus_SL_RPC_MPLS_START_OFFSET SLErrorStatus_SLErrno = 32768
	// Operation rejected for ALL ILMS due to too many ILMS in the
	// request. 0x8001
	SLErrorStatus_SL_RPC_MPLS_ILM_TOO_MANY_ILMS SLErrorStatus_SLErrno = 32769
	// Operation rejected for all ILMs as server is not initialized.
	// 0x0x8002
	SLErrorStatus_SL_RPC_MPLS_SERVER_NOT_INITIALIZED SLErrorStatus_SLErrno = 32770
	// Operation rejected for all ILMs as the RPC request is
	// not supported for the library's initialization mode. 0x8003
	SLErrorStatus_SL_RPC_MPLS_INIT_MODE_INCOMPATIBLE SLErrorStatus_SLErrno = 32771
	// Operation rejected for ALL label blocks due to too many
	// label blocks in the request. 0x8004
	SLErrorStatus_SL_RPC_MPLS_LABEL_BLK_TOO_MANY_LABEL_BLKS SLErrorStatus_SLErrno = 32772
	// Operation rejected for ALL ILMs as MPLS layer is not registered.
	// 0x8005
	SLErrorStatus_SL_RPC_MPLS_NOT_REGISTERED SLErrorStatus_SLErrno = 32773
	// Offset for MPLS ILM errors. 0x9000
	SLErrorStatus_SL_ILM_ERR_OFFSET SLErrorStatus_SLErrno = 36864
	// MPLS ILM add to service layer failed. 0x9001
	SLErrorStatus_SL_ILM_ADD_FAILED SLErrorStatus_SLErrno = 36865
	// MPLS ILM add to Label Switching Database failed. 0x9002
	SLErrorStatus_SL_ILM_LSD_ADD_FAILED SLErrorStatus_SLErrno = 36866
	// MPLS ILM NHLFE count exceeded max supported number. 0x9003
	SLErrorStatus_SL_ILM_INVALID_NUM_NHLFE SLErrorStatus_SLErrno = 36867
	// MPLS ILM label value out of range. 0x9004
	SLErrorStatus_SL_ILM_INVALID_LABEL SLErrorStatus_SLErrno = 36868
	// MPLS ILM delete from service layer failed. 0x9005
	SLErrorStatus_SL_ILM_DELETE_FAILED SLErrorStatus_SLErrno = 36869
	// MPLS ILM delete from Label Switching Database failed. 0x9006
	SLErrorStatus_SL_ILM_LSD_DELETE_FAILED SLErrorStatus_SLErrno = 36870
	// Number of primary NHLFEs exceeds system capabilities. 0x9007
	SLErrorStatus_SL_ILM_TOOMANY_PRIMARY_NHLFES SLErrorStatus_SLErrno = 36871
	// Number of backup NHLFEs exceeds system capabilities. 0x9008
	SLErrorStatus_SL_ILM_TOOMANY_BACKUP_NHLFES SLErrorStatus_SLErrno = 36872
	// MPLS ILM label alloc failed in Label switching database. 0x9009
	SLErrorStatus_SL_ILM_LSD_ADD_LABEL_ALLOC_FAILED SLErrorStatus_SLErrno = 36873
	// MPLS ILM NHLFE attribute invalid. 0x900a
	SLErrorStatus_SL_ILM_LSD_NHLFE_INVALID_ATTRIB SLErrorStatus_SLErrno = 36874
	// MPLS ILM already exists in the database. 0x900b
	SLErrorStatus_SL_ILM_EEXIST SLErrorStatus_SLErrno = 36875
	// The ILM database is out of memory. 0x900c
	SLErrorStatus_SL_ILM_DB_NOMEM SLErrorStatus_SLErrno = 36876
	// EXP value is outside of the valid range of <0-7>. 0x900d
	SLErrorStatus_SL_ILM_INVALID_ELSP_EXP SLErrorStatus_SLErrno = 36877
	// EXP value or Default already set. 0x900e
	SLErrorStatus_SL_ILM_ELSP_EXP_OR_DFLT_ALREADY_SET SLErrorStatus_SLErrno = 36878
	// MPLS ILM add operation requested but no paths were provided. 0x900f
	SLErrorStatus_SL_ILM_ADD_NO_PATHS SLErrorStatus_SLErrno = 36879
	// MPLS ILM update operation requested but no paths were provided. 0x9010
	SLErrorStatus_SL_ILM_UPDATE_NO_PATHS SLErrorStatus_SLErrno = 36880
	// LSP and ELSP on the same label not supported. 0x9011
	SLErrorStatus_SL_ILM_UNSUPPORTED_ELSP SLErrorStatus_SLErrno = 36881
	// Number of EXP classes on the label exceed system capabilities. 0x9012
	SLErrorStatus_SL_ILM_LABEL_TOOMANY_EXP_CLASSES SLErrorStatus_SLErrno = 36882
	// MPLS ILMs cannot be played to Label Switching Database
	// on a process restart or connection re-establishment.
	// The Forwarding Information Base can
	// can be inconsistent. Agent/Controller should initiate a
	// recovery action by reloading the device. 0x9013
	SLErrorStatus_SL_ILM_REPLAY_FATAL_ERROR SLErrorStatus_SLErrno = 36883
	// MPLS ILMs were played to Label Switching Database
	// on a process restart or connection re-establishment. 0x9014
	SLErrorStatus_SL_ILM_REPLAY_OK SLErrorStatus_SLErrno = 36884
	// Offset for MPLS NHLFE errors. 0xa000
	SLErrorStatus_SL_NHLFE_ERR_OFFSET SLErrorStatus_SLErrno = 40960
	// MPLS NHLFE vrf table could not be determined. 0xa001
	SLErrorStatus_SL_NHLFE_NH_NO_TABLE SLErrorStatus_SLErrno = 40961
	// Size of next hop IPv6 address is invalid. 0xa002
	SLErrorStatus_SL_NHLFE_NH_INVALID_ADDR_SZ SLErrorStatus_SLErrno = 40962
	// NHLFE has an invalid next hop address. 0xa003
	SLErrorStatus_SL_NHLFE_INVALID_NEXT_HOP_ADDR SLErrorStatus_SLErrno = 40963
	// Path VRF name exceeds supported length. 0xa004
	SLErrorStatus_SL_NHLFE_VRF_NAME_TOOLONG SLErrorStatus_SLErrno = 40964
	// Next hop interface name is missing from path. 0xa005
	SLErrorStatus_SL_NHLFE_NH_INF_NAME_MISSING SLErrorStatus_SLErrno = 40965
	// Interface name exceeds supported length. 0xa006
	SLErrorStatus_SL_NHLFE_NH_INTF_NAME_TOOLONG SLErrorStatus_SLErrno = 40966
	// Number of labels in the path incompatible with system capabilities
	// for the given label action. 0xa007
	SLErrorStatus_SL_NHLFE_INVALID_LABEL_COUNT SLErrorStatus_SLErrno = 40967
	// Path id is invalid in NHLFE. 0xa008
	SLErrorStatus_SL_NHLFE_INVALID_PATH_ID SLErrorStatus_SLErrno = 40968
	// MPLS NHLFE label value out of range. 0xa009
	SLErrorStatus_SL_NHLFE_INVALID_LABEL SLErrorStatus_SLErrno = 40969
	// NHLFE has an invalid protection bitmap. 0xa00a
	SLErrorStatus_SL_NHLFE_INVALID_PROTECTED_BITMAP SLErrorStatus_SLErrno = 40970
	// Number of remote backup addresses in the NHLFE exceeds
	// system capabilities. 0xa00b
	SLErrorStatus_SL_NHLFE_INVALID_REMOTE_ADDR_COUNT SLErrorStatus_SLErrno = 40971
	// Size of IPv6 remote backup address is invalid. 0xa00c
	SLErrorStatus_SL_NHLFE_REMOTE_ADDR_INVALID_SZ SLErrorStatus_SLErrno = 40972
	// A primary NHLFE has too many labels. 0xa00d
	SLErrorStatus_SL_NHLFE_PRIMARY_TOOMANY_LABELS SLErrorStatus_SLErrno = 40973
	// A primary NHLFE has too many remote addresses. 0xa00e
	SLErrorStatus_SL_NHLFE_PRIMARY_TOOMANY_REMOTE_ADDR SLErrorStatus_SLErrno = 40974
	// Too many pure backup NHLFE with same Path ID. 0xa00f
	SLErrorStatus_SL_NHLFE_BACKUP_ID_REPEATED SLErrorStatus_SLErrno = 40975
	// Too many primary NHLFE with same Path ID. 0xa010
	SLErrorStatus_SL_NHLFE_PRIMARY_ID_REPEATED SLErrorStatus_SLErrno = 40976
	// Pure backup NHLFE has a empty protected bitmap. 0xa011
	SLErrorStatus_SL_NHLFE_BACKUP_PROTECTED_BITMAP_EMPTY SLErrorStatus_SLErrno = 40977
	// A primary NHLFE has too many backup paths. 0xa012
	SLErrorStatus_SL_NHLFE_PRIMARY_TOOMANY_BACKUP_PATHS SLErrorStatus_SLErrno = 40978
	// A pure backup remote address is invalid. 0xa013
	SLErrorStatus_SL_NHLFE_REMOTE_ADDR_INVALID SLErrorStatus_SLErrno = 40979
	// Protection bitmap of a backup NHLFE refers to a missing path. 0xa014
	SLErrorStatus_SL_NHLFE_BACKUP_MISSING_PRIMARY_PATH SLErrorStatus_SLErrno = 40980
	// NHLFE next-hop missing. 0xa015
	SLErrorStatus_SL_NHLFE_NEXT_HOP_MISSING SLErrorStatus_SLErrno = 40981
	// Label action specified is invalid. 0xa016
	SLErrorStatus_SL_NHLFE_LABEL_ACTION_INVALID SLErrorStatus_SLErrno = 40982
	// NHLFE next hop interface not found. 0xa017
	SLErrorStatus_SL_NHLFE_NH_INTF_NOT_FOUND SLErrorStatus_SLErrno = 40983
	// MPLS NHLFE operation failed. 0xa018
	SLErrorStatus_SL_NHLFE_OPER_FAILED SLErrorStatus_SLErrno = 40984
	// MPLS NHLFE label action missing. 0xa019
	SLErrorStatus_SL_NHLFE_LABEL_ACTION_MISSING SLErrorStatus_SLErrno = 40985
	// Setting EXP value failed. 0xa01a
	SLErrorStatus_SL_NHLFE_EXP_SET_FAILED SLErrorStatus_SLErrno = 40986
	// ELSP protection is unsupported. 0xa01b
	SLErrorStatus_SL_NHLFE_ELSP_PROTECTION_UNSUPPORTED SLErrorStatus_SLErrno = 40987
	// Offset for label block errors. 0xb000
	SLErrorStatus_SL_LABEL_BLK_ERR_OFFSET SLErrorStatus_SLErrno = 45056
	// MPLS label block add from Label Switching Database failed. 0xb001
	SLErrorStatus_SL_LABEL_BLK_LSD_ADD_FAILED SLErrorStatus_SLErrno = 45057
	// MPLS label block delete from Label Switching Database failed. 0xb002
	SLErrorStatus_SL_LABEL_BLK_LSD_DELETE_FAILED SLErrorStatus_SLErrno = 45058
	// MPLS label block not found. 0xb003
	SLErrorStatus_SL_LABEL_BLK_LSD_LABEL_BLK_NOT_FOUND SLErrorStatus_SLErrno = 45059
	// MPLS label block in use. 0xb004
	SLErrorStatus_SL_LABEL_BLK_LSD_LABEL_BLK_IN_USE SLErrorStatus_SLErrno = 45060
	// MPLS label block attribute invalid. 0xb005
	SLErrorStatus_SL_LABEL_BLK_LSD_INVALID_ATTRIB SLErrorStatus_SLErrno = 45061
	// MPLS label block size > max size per block. 0xb006
	SLErrorStatus_SL_LABEL_BLK_INVALID_BLOCK_SIZE SLErrorStatus_SLErrno = 45062
	// MPLS label start_label < min label for platform . 0xb007
	SLErrorStatus_SL_LABEL_BLK_INVALID_START_LABEL SLErrorStatus_SLErrno = 45063
	// MPLS label block already exists in the database. 0xb008
	SLErrorStatus_SL_LABEL_BLK_EEXIST SLErrorStatus_SLErrno = 45064
	// MPLS label database is out of memory. 0xb009
	SLErrorStatus_SL_LABEL_BLK_DB_NOMEM SLErrorStatus_SLErrno = 45065
	// MPLS label block type invalid. 0xb00a
	SLErrorStatus_SL_LABEL_BLK_TYPE_INVALID SLErrorStatus_SLErrno = 45066
	// MPLS label block client name exceeds max length. 0xb00b
	SLErrorStatus_SL_LABEL_BLK_CLIENT_NAME_TOOLONG SLErrorStatus_SLErrno = 45067
	// Offset for MPLS registration errors. 0xc000
	SLErrorStatus_SL_MPLS_REG_ERR_OFFSET SLErrorStatus_SLErrno = 49152
	// MPLS registration error. 0xc001
	SLErrorStatus_SL_MPLS_REG_ERR SLErrorStatus_SLErrno = 49153
	// MPLS unregistration error. 0xc002
	SLErrorStatus_SL_MPLS_UNREG_ERR SLErrorStatus_SLErrno = 49154
	// MPLS EOF error. 0xc003
	SLErrorStatus_SL_MPLS_EOF_ERR SLErrorStatus_SLErrno = 49155
	// Offset for Interface operation errors. 0xd000
	SLErrorStatus_SL_RPC_INTF_START_OFFSET SLErrorStatus_SLErrno = 53248
	// Interface Operation rejected for ALL Sessions as the Interface
	// Session count is beyond supported limit. 0xd001
	SLErrorStatus_SL_RPC_INTF_TOO_MANY_INTERFACES SLErrorStatus_SLErrno = 53249
	// Interface Operation rejected as server is not initialized. 0xd002
	SLErrorStatus_SL_RPC_INTF_SERVER_NOT_INITIALIZED SLErrorStatus_SLErrno = 53250
	// Interface Operation failed as server is not registered with
	// interface manager. 0xd003
	SLErrorStatus_SL_RPC_INTF_API_CLIENT_NOT_REGISTERED SLErrorStatus_SLErrno = 53251
	// Offset for Interface object errors. 0xe000
	SLErrorStatus_SL_INTF_START_OFFSET SLErrorStatus_SLErrno = 57344
	// Interface object's interface name missing. 0xe001
	SLErrorStatus_SL_INTF_INTERFACE_NAME_MISSING SLErrorStatus_SLErrno = 57345
	// Interface object's interface name exceeds supported length. 0xe002
	SLErrorStatus_SL_INTF_INTERFACE_NAME_TOOLONG SLErrorStatus_SLErrno = 57346
	// Interface internal registration error. 0xe003
	SLErrorStatus_SL_INTF_INTERFACE_REG_ERR SLErrorStatus_SLErrno = 57347
	// Internal database error. 0xe004
	SLErrorStatus_SL_INTF_INTERNAL_DB_ERROR SLErrorStatus_SLErrno = 57348
	// Interface Recovery error. 0xe005
	SLErrorStatus_SL_INTF_RECOVERY_ERROR SLErrorStatus_SLErrno = 57349
	// Interface exists. 0xe006
	SLErrorStatus_SL_INTF_INTERFACE_EXISTS SLErrorStatus_SLErrno = 57350
	// Interface not found. 0xe007
	SLErrorStatus_SL_INTF_INTERFACE_NOT_FOUND SLErrorStatus_SLErrno = 57351
	// Offset for Global L2 operation errors. 0xf000
	SLErrorStatus_SL_L2_REG_START_OFFSET SLErrorStatus_SLErrno = 61440
	// Client cannot be registered with Layer-2 RIB. 0xf001
	SLErrorStatus_SL_L2_REGISTRATION_ERR SLErrorStatus_SLErrno = 61441
	// Client cannot be unregistered with Layer-2 RIB. 0xf002
	SLErrorStatus_SL_L2_UNREGISTRATION_ERR SLErrorStatus_SLErrno = 61442
	// EOF Operation error. 0xf003
	SLErrorStatus_SL_L2_EOF_ERR SLErrorStatus_SLErrno = 61443
	// L2 registration message with invalid admin distance. 0xf004
	SLErrorStatus_SL_L2_REG_INVALID_ADMIN_DISTANCE SLErrorStatus_SLErrno = 61444
	// Duplicate L2 registration message. 0xf005
	SLErrorStatus_SL_L2_REG_IS_DUPLICATE SLErrorStatus_SLErrno = 61445
	// L2 registration rejected as server is not initialized. 0xf006
	SLErrorStatus_SL_L2_REG_SERVER_NOT_INITIALIZED SLErrorStatus_SLErrno = 61446
	// Offset for L2 BD operation errors. 0x10000
	SLErrorStatus_SL_RPC_L2_BD_REG_START_OFFSET SLErrorStatus_SLErrno = 65536
	// Operation is rejected for all BDs as name is missing. 0x10001
	SLErrorStatus_SL_RPC_L2_BD_REG_NAME_MISSING SLErrorStatus_SLErrno = 65537
	// Operation rejected for all BDs due to too many BD registration
	// messages in the request. 0x10002
	SLErrorStatus_SL_RPC_L2_BD_REG_TOO_MANY_MSGS SLErrorStatus_SLErrno = 65538
	// Operation rejected for all BDs as server is not initialized.
	// 0x10003
	SLErrorStatus_SL_RPC_L2_BD_REG_SERVER_NOT_INITIALIZED SLErrorStatus_SLErrno = 65539
	// Operation rejected for all BDs as client is not registered.
	// 0x10004
	SLErrorStatus_SL_RPC_L2_BD_REG_CLIENT_NOT_REGISTERED SLErrorStatus_SLErrno = 65540
	// Offset for L2 BD object errors. 0x11000
	SLErrorStatus_SL_L2_BD_REG_START_OFFSET SLErrorStatus_SLErrno = 69632
	// BD cannot be registered with Layer-2 RIB. 0x11001
	SLErrorStatus_SL_L2_BD_REGISTRATION_ERR SLErrorStatus_SLErrno = 69633
	// BD cannot be unregistered with Layer-2 RIB. 0x11002
	SLErrorStatus_SL_L2_BD_UNREGISTRATION_ERR SLErrorStatus_SLErrno = 69634
	// BD EOF Operation error. 0x11003;
	SLErrorStatus_SL_L2_BD_EOF_ERR SLErrorStatus_SLErrno = 69635
	// Name is too long in BD registration message. 0x11004
	SLErrorStatus_SL_L2_BD_REG_NAME_TOO_LONG SLErrorStatus_SLErrno = 69636
	// BD not found in BD registration message. 0x11005
	SLErrorStatus_SL_L2_BD_REG_BD_NOT_FOUND SLErrorStatus_SLErrno = 69637
	// Offset for L2 Route Operation errors. 0x12000
	SLErrorStatus_SL_RPC_L2_ROUTE_START_OFFSET SLErrorStatus_SLErrno = 73728
	// Operation rejected for all L2 routes due to too many messages
	// in the request. 0x12001
	SLErrorStatus_SL_RPC_L2_ROUTE_TOO_MANY_MSGS SLErrorStatus_SLErrno = 73729
	// Operation rejected for all L2 routes as server is not
	// initialized. 0x12002
	SLErrorStatus_SL_RPC_L2_ROUTE_SERVER_NOT_INITIALIZED SLErrorStatus_SLErrno = 73730
	// Operation rejected for all L2 routes as client is not
	// registered. 0x12003
	SLErrorStatus_SL_RPC_L2_ROUTE_CLIENT_NOT_REGISTERED SLErrorStatus_SLErrno = 73731
	// Offset for L2 object errors. 0x13000
	SLErrorStatus_SL_L2_ROUTE_START_OFFSET SLErrorStatus_SLErrno = 77824
	// L2 route operation rejected as BD name is missing. 0x13001
	SLErrorStatus_SL_L2_ROUTE_BD_NAME_MISSING SLErrorStatus_SLErrno = 77825
	// L2 route operation rejected as BD name is too long. 0x13002
	SLErrorStatus_SL_L2_ROUTE_BD_NAME_TOOLONG SLErrorStatus_SLErrno = 77826
	// L2 route operation rejected as BD not found. 0x13003
	SLErrorStatus_SL_L2_ROUTE_BD_NOT_FOUND SLErrorStatus_SLErrno = 77827
	// L2 route operation rejected as BD is not registered. 0x13004
	SLErrorStatus_SL_L2_ROUTE_BD_NOT_REGISTERED SLErrorStatus_SLErrno = 77828
	// L2 route operation rejected due to one or more invalid
	// arguments. 0x13005
	SLErrorStatus_SL_L2_ROUTE_INVALID_ARGS SLErrorStatus_SLErrno = 77829
	// Offset for L2 Get Notification Operation errors. 0x14000
	SLErrorStatus_SL_RPC_L2_NOTIF_START_OFFSET SLErrorStatus_SLErrno = 81921
	// L2 notification request rejected as server is not initialized.
	// 0x14002
	SLErrorStatus_SL_RPC_L2_NOTIF_SERVER_NOT_INITIALIZED SLErrorStatus_SLErrno = 81922
	// L2 notification request rejected as client is not registered.
	// 0x14003
	SLErrorStatus_SL_RPC_L2_NOTIF_CLIENT_NOT_REGISTERED SLErrorStatus_SLErrno = 81923
	// L2 notification enable error. 0x14004
	SLErrorStatus_SL_RPC_L2_NOTIF_ENABLE_ERR SLErrorStatus_SLErrno = 81924
	// L2 notification disable error. 0x14005
	SLErrorStatus_SL_RPC_L2_NOTIF_DISABLE_ERR SLErrorStatus_SLErrno = 81925
	// L2 notification EOF error. 0x14006
	SLErrorStatus_SL_RPC_L2_NOTIF_EOF_ERR SLErrorStatus_SLErrno = 81926
	// L2 notification request rejected as BD name is missing. 0x14007
	SLErrorStatus_SL_RPC_L2_NOTIF_BD_NAME_MISSING SLErrorStatus_SLErrno = 81927
	// L2 notification request rejected as BD name is too long.
	// 0x14008
	SLErrorStatus_SL_RPC_L2_NOTIF_BD_NAME_TOOLONG SLErrorStatus_SLErrno = 81928
	// L2 notification request rejected as BD not found. 0x14009
	SLErrorStatus_SL_RPC_L2_NOTIF_BD_NOT_FOUND SLErrorStatus_SLErrno = 81929
	// Offset for Internal errors. 0x100000
	SLErrorStatus_SL_INTERNAL_START_OFFSET SLErrorStatus_SLErrno = 1048576
)

// Enum value maps for SLErrorStatus_SLErrno.
var (
	SLErrorStatus_SLErrno_name = map[int32]string{
		0:       "SL_SUCCESS",
		1:       "SL_NOT_CONNECTED",
		2:       "SL_EAGAIN",
		3:       "SL_ENOMEM",
		4:       "SL_EBUSY",
		5:       "SL_EINVAL",
		6:       "SL_UNSUPPORTED_VER",
		7:       "SL_NOT_AVAILABLE",
		8:       "SL_STREAM_NOT_SUPPORTED",
		9:       "SL_ENOTSUP",
		10:      "SL_SOME_ERR",
		11:      "SL_TIMEOUT",
		12:      "SL_NOTIF_TERM",
		13:      "SL_AUTH_FAIL",
		1280:    "SL_INIT_START_OFFSET",
		1281:    "SL_INIT_STATE_CLEAR",
		1282:    "SL_INIT_STATE_READY",
		1283:    "SL_INIT_UNSUPPORTED_VER",
		1284:    "SL_INIT_SERVER_NOT_INITIALIZED",
		1285:    "SL_INIT_SERVER_MODE_CHANGE_FAILED",
		4096:    "SL_RPC_VRF_START_OFFSET",
		4097:    "SL_RPC_VRF_TOO_MANY_VRF_REG_MSGS",
		4098:    "SL_RPC_VRF_SERVER_NOT_INITIALIZED",
		8192:    "SL_VRF_START_OFFSET",
		8193:    "SL_VRF_NAME_TOOLONG",
		8194:    "SL_VRF_NOT_FOUND",
		8195:    "SL_VRF_NO_TABLE_ID",
		8196:    "SL_VRF_REG_INVALID_ADMIN_DISTANCE",
		8197:    "SL_VRF_TABLE_ADD_ERR",
		8198:    "SL_VRF_TABLE_REGISTRATION_ERR",
		8199:    "SL_VRF_TABLE_UNREGISTRATION_ERR",
		8200:    "SL_VRF_TABLE_EOF_ERR",
		8201:    "SL_VRF_REG_VRF_NAME_MISSING",
		8208:    "SL_VRF_V4_ROUTE_REPLAY_FATAL_ERROR",
		8209:    "SL_VRF_V6_ROUTE_REPLAY_FATAL_ERROR",
		8210:    "SL_VRF_V4_ROUTE_REPLAY_OK",
		8211:    "SL_VRF_V6_ROUTE_REPLAY_OK",
		12288:   "SL_RPC_ROUTE_START_OFFSET",
		12289:   "SL_RPC_ROUTE_TOO_MANY_ROUTES",
		12290:   "SL_RPC_ROUTE_VRF_NAME_TOOLONG",
		12291:   "SL_RPC_ROUTE_VRF_NOT_FOUND",
		12292:   "SL_RPC_ROUTE_VRF_NO_TABLE",
		12293:   "SL_RPC_ROUTE_VRF_TABLE_NOT_REGISTERED",
		12294:   "SL_RPC_ROUTE_VRF_NAME_MISSING",
		12295:   "SL_RPC_ROUTE_INIT_MODE_INCOMPATIBLE",
		12296:   "SL_RPC_ROUTE_SERVER_NOT_INITIALIZED",
		12297:   "SL_RPC_ROUTE_NOTIF_SRC_PROTO_TOOLONG",
		12298:   "SL_RPC_ROUTE_NOTIF_SRC_PROTO_TAG_TOOLONG",
		16384:   "SL_ROUTE_START_OFFSET",
		16385:   "SL_ROUTE_ADD_NO_PATHS",
		16386:   "SL_ROUTE_UPDATE_NO_PATHS",
		16387:   "SL_ROUTE_INVALID_PREFIX_LEN",
		16388:   "SL_ROUTE_INVALID_ADMIN_DISTANCE",
		16389:   "SL_ROUTE_INVALID_NUM_PATHS",
		16390:   "SL_ROUTE_INVALID_PREFIX_SZ",
		16391:   "SL_ROUTE_INVALID_PREFIX",
		16392:   "SL_ROUTE_ERR_RIB_TABLE_LIMIT_REACHED",
		16393:   "SL_ROUTE_ERR_RIB_INVALID_ARGS",
		16394:   "SL_ROUTE_ERR_RIB_PATH_TABLE_LIMIT",
		16395:   "SL_ROUTE_ERR_RIB_TOOMANYPATHS",
		16396:   "SL_ROUTE_EEXIST",
		16397:   "SL_ROUTE_HOST_BITS_SET",
		16398:   "SL_ROUTE_INVALID_PREFIX_MCAST",
		16399:   "SL_ROUTE_PATH_AFI_MISMATCH",
		16400:   "SL_ROUTE_TOOMANY_PRIMARY_PATHS",
		16401:   "SL_ROUTE_TOOMANY_BACKUP_PATHS",
		16402:   "SL_ROUTE_DB_NOMEM",
		16403:   "SL_ROUTE_INVALID_LOCAL_LABEL",
		20480:   "SL_PATH_START_OFFSET",
		20481:   "SL_PATH_NH_NO_TABLE",
		20482:   "SL_PATH_NH_INTF_NOT_FOUND",
		20483:   "SL_PATH_INVALID_LABEL_COUNT",
		20484:   "SL_PATH_INVALID_ID",
		20485:   "SL_PATH_VRF_NAME_TOOLONG",
		20486:   "SL_PATH_NH_INTF_NAME_TOOLONG",
		20487:   "SL_PATH_NH_INVALID_ADDR_SZ",
		20488:   "SL_PATH_NH_INF_NAME_MISSING",
		20489:   "SL_PATH_INVALID_NEXT_HOP_ADDR",
		20490:   "SL_PATH_INVALID_REMOTE_ADDR_COUNT",
		20491:   "SL_PATH_REMOTE_ADDR_INVALID_SZ",
		20492:   "SL_PATH_REMOTE_ADDR_AFI_MISMATCH",
		20493:   "SL_PATH_INVALID_PROTECTED_BITMAP",
		20494:   "SL_PATH_BACKUP_MISSING_PRIMARY_PATH",
		20495:   "SL_PATH_PRIMARY_ID_REPEATED",
		20496:   "SL_PATH_BACKUP_ID_REPEATED",
		20497:   "SL_PATH_PRIMARY_TOOMANY_BACKUP_PATHS",
		20498:   "SL_PATH_PRIMARY_TOOMANY_LABELS",
		20499:   "SL_PATH_PRIMARY_TOOMANY_REMOTE_ADDR",
		20500:   "SL_PATH_REMOTE_ADDR_INVALID",
		20501:   "SL_PATH_INVALID_LABEL",
		20502:   "SL_PATH_ROUTER_MAC_ADDR_INVALID_SZ",
		24576:   "SL_RPC_BFD_START_OFFSET",
		24577:   "SL_RPC_BFD_TOO_MANY_BFD_SESSIONS",
		24578:   "SL_RPC_BFD_API_BAD_PARAMETER",
		24579:   "SL_RPC_BFD_API_CLIENT_NOT_REGISTERED",
		24580:   "SL_RPC_BFD_API_INTERNAL_ERROR",
		24581:   "SL_RPC_BFD_SERVER_NOT_INITIALIZED",
		24582:   "SL_RPC_BFD_V4_NOT_REGISTERED",
		24583:   "SL_RPC_BFD_V6_NOT_REGISTERED",
		28672:   "SL_BFD_START_OFFSET",
		28673:   "SL_BFD_INTF_NAME_TOOLONG",
		28674:   "SL_BFD_INTF_NOT_FOUND",
		28675:   "SL_BFD_INVALID_ATTRIBUTE",
		28676:   "SL_BFD_INTF_NAME_MISSING",
		28677:   "SL_BFD_INVALID_NBR_MCAST",
		28678:   "SL_BFD_INVALID_NBR",
		28679:   "SL_BFD_VRF_NAME_TOOLONG",
		28680:   "SL_BFD_BAD_PARAMETER",
		28681:   "SL_BFD_API_INTERNAL_ERROR",
		28682:   "SL_BFD_VRF_NOT_FOUND",
		28683:   "SL_BFD_INVALID_PREFIX_SIZE",
		28684:   "SL_BFD_INVALID_SESSION_TYPE",
		28685:   "SL_BFD_INVALID_VRF",
		28686:   "SL_BFD_SESSION_NOT_FOUND",
		28687:   "SL_BFD_SESSION_EXISTS",
		28688:   "SL_BFD_INTERNAL_DB_ERROR",
		28689:   "SL_BFD_RECOVERY_ERROR",
		32768:   "SL_RPC_MPLS_START_OFFSET",
		32769:   "SL_RPC_MPLS_ILM_TOO_MANY_ILMS",
		32770:   "SL_RPC_MPLS_SERVER_NOT_INITIALIZED",
		32771:   "SL_RPC_MPLS_INIT_MODE_INCOMPATIBLE",
		32772:   "SL_RPC_MPLS_LABEL_BLK_TOO_MANY_LABEL_BLKS",
		32773:   "SL_RPC_MPLS_NOT_REGISTERED",
		36864:   "SL_ILM_ERR_OFFSET",
		36865:   "SL_ILM_ADD_FAILED",
		36866:   "SL_ILM_LSD_ADD_FAILED",
		36867:   "SL_ILM_INVALID_NUM_NHLFE",
		36868:   "SL_ILM_INVALID_LABEL",
		36869:   "SL_ILM_DELETE_FAILED",
		36870:   "SL_ILM_LSD_DELETE_FAILED",
		36871:   "SL_ILM_TOOMANY_PRIMARY_NHLFES",
		36872:   "SL_ILM_TOOMANY_BACKUP_NHLFES",
		36873:   "SL_ILM_LSD_ADD_LABEL_ALLOC_FAILED",
		36874:   "SL_ILM_LSD_NHLFE_INVALID_ATTRIB",
		36875:   "SL_ILM_EEXIST",
		36876:   "SL_ILM_DB_NOMEM",
		36877:   "SL_ILM_INVALID_ELSP_EXP",
		36878:   "SL_ILM_ELSP_EXP_OR_DFLT_ALREADY_SET",
		36879:   "SL_ILM_ADD_NO_PATHS",
		36880:   "SL_ILM_UPDATE_NO_PATHS",
		36881:   "SL_ILM_UNSUPPORTED_ELSP",
		36882:   "SL_ILM_LABEL_TOOMANY_EXP_CLASSES",
		36883:   "SL_ILM_REPLAY_FATAL_ERROR",
		36884:   "SL_ILM_REPLAY_OK",
		40960:   "SL_NHLFE_ERR_OFFSET",
		40961:   "SL_NHLFE_NH_NO_TABLE",
		40962:   "SL_NHLFE_NH_INVALID_ADDR_SZ",
		40963:   "SL_NHLFE_INVALID_NEXT_HOP_ADDR",
		40964:   "SL_NHLFE_VRF_NAME_TOOLONG",
		40965:   "SL_NHLFE_NH_INF_NAME_MISSING",
		40966:   "SL_NHLFE_NH_INTF_NAME_TOOLONG",
		40967:   "SL_NHLFE_INVALID_LABEL_COUNT",
		40968:   "SL_NHLFE_INVALID_PATH_ID",
		40969:   "SL_NHLFE_INVALID_LABEL",
		40970:   "SL_NHLFE_INVALID_PROTECTED_BITMAP",
		40971:   "SL_NHLFE_INVALID_REMOTE_ADDR_COUNT",
		40972:   "SL_NHLFE_REMOTE_ADDR_INVALID_SZ",
		40973:   "SL_NHLFE_PRIMARY_TOOMANY_LABELS",
		40974:   "SL_NHLFE_PRIMARY_TOOMANY_REMOTE_ADDR",
		40975:   "SL_NHLFE_BACKUP_ID_REPEATED",
		40976:   "SL_NHLFE_PRIMARY_ID_REPEATED",
		40977:   "SL_NHLFE_BACKUP_PROTECTED_BITMAP_EMPTY",
		40978:   "SL_NHLFE_PRIMARY_TOOMANY_BACKUP_PATHS",
		40979:   "SL_NHLFE_REMOTE_ADDR_INVALID",
		40980:   "SL_NHLFE_BACKUP_MISSING_PRIMARY_PATH",
		40981:   "SL_NHLFE_NEXT_HOP_MISSING",
		40982:   "SL_NHLFE_LABEL_ACTION_INVALID",
		40983:   "SL_NHLFE_NH_INTF_NOT_FOUND",
		40984:   "SL_NHLFE_OPER_FAILED",
		40985:   "SL_NHLFE_LABEL_ACTION_MISSING",
		40986:   "SL_NHLFE_EXP_SET_FAILED",
		40987:   "SL_NHLFE_ELSP_PROTECTION_UNSUPPORTED",
		45056:   "SL_LABEL_BLK_ERR_OFFSET",
		45057:   "SL_LABEL_BLK_LSD_ADD_FAILED",
		45058:   "SL_LABEL_BLK_LSD_DELETE_FAILED",
		45059:   "SL_LABEL_BLK_LSD_LABEL_BLK_NOT_FOUND",
		45060:   "SL_LABEL_BLK_LSD_LABEL_BLK_IN_USE",
		45061:   "SL_LABEL_BLK_LSD_INVALID_ATTRIB",
		45062:   "SL_LABEL_BLK_INVALID_BLOCK_SIZE",
		45063:   "SL_LABEL_BLK_INVALID_START_LABEL",
		45064:   "SL_LABEL_BLK_EEXIST",
		45065:   "SL_LABEL_BLK_DB_NOMEM",
		45066:   "SL_LABEL_BLK_TYPE_INVALID",
		45067:   "SL_LABEL_BLK_CLIENT_NAME_TOOLONG",
		49152:   "SL_MPLS_REG_ERR_OFFSET",
		49153:   "SL_MPLS_REG_ERR",
		49154:   "SL_MPLS_UNREG_ERR",
		49155:   "SL_MPLS_EOF_ERR",
		53248:   "SL_RPC_INTF_START_OFFSET",
		53249:   "SL_RPC_INTF_TOO_MANY_INTERFACES",
		53250:   "SL_RPC_INTF_SERVER_NOT_INITIALIZED",
		53251:   "SL_RPC_INTF_API_CLIENT_NOT_REGISTERED",
		57344:   "SL_INTF_START_OFFSET",
		57345:   "SL_INTF_INTERFACE_NAME_MISSING",
		57346:   "SL_INTF_INTERFACE_NAME_TOOLONG",
		57347:   "SL_INTF_INTERFACE_REG_ERR",
		57348:   "SL_INTF_INTERNAL_DB_ERROR",
		57349:   "SL_INTF_RECOVERY_ERROR",
		57350:   "SL_INTF_INTERFACE_EXISTS",
		57351:   "SL_INTF_INTERFACE_NOT_FOUND",
		61440:   "SL_L2_REG_START_OFFSET",
		61441:   "SL_L2_REGISTRATION_ERR",
		61442:   "SL_L2_UNREGISTRATION_ERR",
		61443:   "SL_L2_EOF_ERR",
		61444:   "SL_L2_REG_INVALID_ADMIN_DISTANCE",
		61445:   "SL_L2_REG_IS_DUPLICATE",
		61446:   "SL_L2_REG_SERVER_NOT_INITIALIZED",
		65536:   "SL_RPC_L2_BD_REG_START_OFFSET",
		65537:   "SL_RPC_L2_BD_REG_NAME_MISSING",
		65538:   "SL_RPC_L2_BD_REG_TOO_MANY_MSGS",
		65539:   "SL_RPC_L2_BD_REG_SERVER_NOT_INITIALIZED",
		65540:   "SL_RPC_L2_BD_REG_CLIENT_NOT_REGISTERED",
		69632:   "SL_L2_BD_REG_START_OFFSET",
		69633:   "SL_L2_BD_REGISTRATION_ERR",
		69634:   "SL_L2_BD_UNREGISTRATION_ERR",
		69635:   "SL_L2_BD_EOF_ERR",
		69636:   "SL_L2_BD_REG_NAME_TOO_LONG",
		69637:   "SL_L2_BD_REG_BD_NOT_FOUND",
		73728:   "SL_RPC_L2_ROUTE_START_OFFSET",
		73729:   "SL_RPC_L2_ROUTE_TOO_MANY_MSGS",
		73730:   "SL_RPC_L2_ROUTE_SERVER_NOT_INITIALIZED",
		73731:   "SL_RPC_L2_ROUTE_CLIENT_NOT_REGISTERED",
		77824:   "SL_L2_ROUTE_START_OFFSET",
		77825:   "SL_L2_ROUTE_BD_NAME_MISSING",
		77826:   "SL_L2_ROUTE_BD_NAME_TOOLONG",
		77827:   "SL_L2_ROUTE_BD_NOT_FOUND",
		77828:   "SL_L2_ROUTE_BD_NOT_REGISTERED",
		77829:   "SL_L2_ROUTE_INVALID_ARGS",
		81921:   "SL_RPC_L2_NOTIF_START_OFFSET",
		81922:   "SL_RPC_L2_NOTIF_SERVER_NOT_INITIALIZED",
		81923:   "SL_RPC_L2_NOTIF_CLIENT_NOT_REGISTERED",
		81924:   "SL_RPC_L2_NOTIF_ENABLE_ERR",
		81925:   "SL_RPC_L2_NOTIF_DISABLE_ERR",
		81926:   "SL_RPC_L2_NOTIF_EOF_ERR",
		81927:   "SL_RPC_L2_NOTIF_BD_NAME_MISSING",
		81928:   "SL_RPC_L2_NOTIF_BD_NAME_TOOLONG",
		81929:   "SL_RPC_L2_NOTIF_BD_NOT_FOUND",
		1048576: "SL_INTERNAL_START_OFFSET",
	}
	SLErrorStatus_SLErrno_value = map[string]int32{
		"SL_SUCCESS":                                0,
		"SL_NOT_CONNECTED":                          1,
		"SL_EAGAIN":                                 2,
		"SL_ENOMEM":                                 3,
		"SL_EBUSY":                                  4,
		"SL_EINVAL":                                 5,
		"SL_UNSUPPORTED_VER":                        6,
		"SL_NOT_AVAILABLE":                          7,
		"SL_STREAM_NOT_SUPPORTED":                   8,
		"SL_ENOTSUP":                                9,
		"SL_SOME_ERR":                               10,
		"SL_TIMEOUT":                                11,
		"SL_NOTIF_TERM":                             12,
		"SL_AUTH_FAIL":                              13,
		"SL_INIT_START_OFFSET":                      1280,
		"SL_INIT_STATE_CLEAR":                       1281,
		"SL_INIT_STATE_READY":                       1282,
		"SL_INIT_UNSUPPORTED_VER":                   1283,
		"SL_INIT_SERVER_NOT_INITIALIZED":            1284,
		"SL_INIT_SERVER_MODE_CHANGE_FAILED":         1285,
		"SL_RPC_VRF_START_OFFSET":                   4096,
		"SL_RPC_VRF_TOO_MANY_VRF_REG_MSGS":          4097,
		"SL_RPC_VRF_SERVER_NOT_INITIALIZED":         4098,
		"SL_VRF_START_OFFSET":                       8192,
		"SL_VRF_NAME_TOOLONG":                       8193,
		"SL_VRF_NOT_FOUND":                          8194,
		"SL_VRF_NO_TABLE_ID":                        8195,
		"SL_VRF_REG_INVALID_ADMIN_DISTANCE":         8196,
		"SL_VRF_TABLE_ADD_ERR":                      8197,
		"SL_VRF_TABLE_REGISTRATION_ERR":             8198,
		"SL_VRF_TABLE_UNREGISTRATION_ERR":           8199,
		"SL_VRF_TABLE_EOF_ERR":                      8200,
		"SL_VRF_REG_VRF_NAME_MISSING":               8201,
		"SL_VRF_V4_ROUTE_REPLAY_FATAL_ERROR":        8208,
		"SL_VRF_V6_ROUTE_REPLAY_FATAL_ERROR":        8209,
		"SL_VRF_V4_ROUTE_REPLAY_OK":                 8210,
		"SL_VRF_V6_ROUTE_REPLAY_OK":                 8211,
		"SL_RPC_ROUTE_START_OFFSET":                 12288,
		"SL_RPC_ROUTE_TOO_MANY_ROUTES":              12289,
		"SL_RPC_ROUTE_VRF_NAME_TOOLONG":             12290,
		"SL_RPC_ROUTE_VRF_NOT_FOUND":                12291,
		"SL_RPC_ROUTE_VRF_NO_TABLE":                 12292,
		"SL_RPC_ROUTE_VRF_TABLE_NOT_REGISTERED":     12293,
		"SL_RPC_ROUTE_VRF_NAME_MISSING":             12294,
		"SL_RPC_ROUTE_INIT_MODE_INCOMPATIBLE":       12295,
		"SL_RPC_ROUTE_SERVER_NOT_INITIALIZED":       12296,
		"SL_RPC_ROUTE_NOTIF_SRC_PROTO_TOOLONG":      12297,
		"SL_RPC_ROUTE_NOTIF_SRC_PROTO_TAG_TOOLONG":  12298,
		"SL_ROUTE_START_OFFSET":                     16384,
		"SL_ROUTE_ADD_NO_PATHS":                     16385,
		"SL_ROUTE_UPDATE_NO_PATHS":                  16386,
		"SL_ROUTE_INVALID_PREFIX_LEN":               16387,
		"SL_ROUTE_INVALID_ADMIN_DISTANCE":           16388,
		"SL_ROUTE_INVALID_NUM_PATHS":                16389,
		"SL_ROUTE_INVALID_PREFIX_SZ":                16390,
		"SL_ROUTE_INVALID_PREFIX":                   16391,
		"SL_ROUTE_ERR_RIB_TABLE_LIMIT_REACHED":      16392,
		"SL_ROUTE_ERR_RIB_INVALID_ARGS":             16393,
		"SL_ROUTE_ERR_RIB_PATH_TABLE_LIMIT":         16394,
		"SL_ROUTE_ERR_RIB_TOOMANYPATHS":             16395,
		"SL_ROUTE_EEXIST":                           16396,
		"SL_ROUTE_HOST_BITS_SET":                    16397,
		"SL_ROUTE_INVALID_PREFIX_MCAST":             16398,
		"SL_ROUTE_PATH_AFI_MISMATCH":                16399,
		"SL_ROUTE_TOOMANY_PRIMARY_PATHS":            16400,
		"SL_ROUTE_TOOMANY_BACKUP_PATHS":             16401,
		"SL_ROUTE_DB_NOMEM":                         16402,
		"SL_ROUTE_INVALID_LOCAL_LABEL":              16403,
		"SL_PATH_START_OFFSET":                      20480,
		"SL_PATH_NH_NO_TABLE":                       20481,
		"SL_PATH_NH_INTF_NOT_FOUND":                 20482,
		"SL_PATH_INVALID_LABEL_COUNT":               20483,
		"SL_PATH_INVALID_ID":                        20484,
		"SL_PATH_VRF_NAME_TOOLONG":                  20485,
		"SL_PATH_NH_INTF_NAME_TOOLONG":              20486,
		"SL_PATH_NH_INVALID_ADDR_SZ":                20487,
		"SL_PATH_NH_INF_NAME_MISSING":               20488,
		"SL_PATH_INVALID_NEXT_HOP_ADDR":             20489,
		"SL_PATH_INVALID_REMOTE_ADDR_COUNT":         20490,
		"SL_PATH_REMOTE_ADDR_INVALID_SZ":            20491,
		"SL_PATH_REMOTE_ADDR_AFI_MISMATCH":          20492,
		"SL_PATH_INVALID_PROTECTED_BITMAP":          20493,
		"SL_PATH_BACKUP_MISSING_PRIMARY_PATH":       20494,
		"SL_PATH_PRIMARY_ID_REPEATED":               20495,
		"SL_PATH_BACKUP_ID_REPEATED":                20496,
		"SL_PATH_PRIMARY_TOOMANY_BACKUP_PATHS":      20497,
		"SL_PATH_PRIMARY_TOOMANY_LABELS":            20498,
		"SL_PATH_PRIMARY_TOOMANY_REMOTE_ADDR":       20499,
		"SL_PATH_REMOTE_ADDR_INVALID":               20500,
		"SL_PATH_INVALID_LABEL":                     20501,
		"SL_PATH_ROUTER_MAC_ADDR_INVALID_SZ":        20502,
		"SL_RPC_BFD_START_OFFSET":                   24576,
		"SL_RPC_BFD_TOO_MANY_BFD_SESSIONS":          24577,
		"SL_RPC_BFD_API_BAD_PARAMETER":              24578,
		"SL_RPC_BFD_API_CLIENT_NOT_REGISTERED":      24579,
		"SL_RPC_BFD_API_INTERNAL_ERROR":             24580,
		"SL_RPC_BFD_SERVER_NOT_INITIALIZED":         24581,
		"SL_RPC_BFD_V4_NOT_REGISTERED":              24582,
		"SL_RPC_BFD_V6_NOT_REGISTERED":              24583,
		"SL_BFD_START_OFFSET":                       28672,
		"SL_BFD_INTF_NAME_TOOLONG":                  28673,
		"SL_BFD_INTF_NOT_FOUND":                     28674,
		"SL_BFD_INVALID_ATTRIBUTE":                  28675,
		"SL_BFD_INTF_NAME_MISSING":                  28676,
		"SL_BFD_INVALID_NBR_MCAST":                  28677,
		"SL_BFD_INVALID_NBR":                        28678,
		"SL_BFD_VRF_NAME_TOOLONG":                   28679,
		"SL_BFD_BAD_PARAMETER":                      28680,
		"SL_BFD_API_INTERNAL_ERROR":                 28681,
		"SL_BFD_VRF_NOT_FOUND":                      28682,
		"SL_BFD_INVALID_PREFIX_SIZE":                28683,
		"SL_BFD_INVALID_SESSION_TYPE":               28684,
		"SL_BFD_INVALID_VRF":                        28685,
		"SL_BFD_SESSION_NOT_FOUND":                  28686,
		"SL_BFD_SESSION_EXISTS":                     28687,
		"SL_BFD_INTERNAL_DB_ERROR":                  28688,
		"SL_BFD_RECOVERY_ERROR":                     28689,
		"SL_RPC_MPLS_START_OFFSET":                  32768,
		"SL_RPC_MPLS_ILM_TOO_MANY_ILMS":             32769,
		"SL_RPC_MPLS_SERVER_NOT_INITIALIZED":        32770,
		"SL_RPC_MPLS_INIT_MODE_INCOMPATIBLE":        32771,
		"SL_RPC_MPLS_LABEL_BLK_TOO_MANY_LABEL_BLKS": 32772,
		"SL_RPC_MPLS_NOT_REGISTERED":                32773,
		"SL_ILM_ERR_OFFSET":                         36864,
		"SL_ILM_ADD_FAILED":                         36865,
		"SL_ILM_LSD_ADD_FAILED":                     36866,
		"SL_ILM_INVALID_NUM_NHLFE":                  36867,
		"SL_ILM_INVALID_LABEL":                      36868,
		"SL_ILM_DELETE_FAILED":                      36869,
		"SL_ILM_LSD_DELETE_FAILED":                  36870,
		"SL_ILM_TOOMANY_PRIMARY_NHLFES":             36871,
		"SL_ILM_TOOMANY_BACKUP_NHLFES":              36872,
		"SL_ILM_LSD_ADD_LABEL_ALLOC_FAILED":         36873,
		"SL_ILM_LSD_NHLFE_INVALID_ATTRIB":           36874,
		"SL_ILM_EEXIST":                             36875,
		"SL_ILM_DB_NOMEM":                           36876,
		"SL_ILM_INVALID_ELSP_EXP":                   36877,
		"SL_ILM_ELSP_EXP_OR_DFLT_ALREADY_SET":       36878,
		"SL_ILM_ADD_NO_PATHS":                       36879,
		"SL_ILM_UPDATE_NO_PATHS":                    36880,
		"SL_ILM_UNSUPPORTED_ELSP":                   36881,
		"SL_ILM_LABEL_TOOMANY_EXP_CLASSES":          36882,
		"SL_ILM_REPLAY_FATAL_ERROR":                 36883,
		"SL_ILM_REPLAY_OK":                          36884,
		"SL_NHLFE_ERR_OFFSET":                       40960,
		"SL_NHLFE_NH_NO_TABLE":                      40961,
		"SL_NHLFE_NH_INVALID_ADDR_SZ":               40962,
		"SL_NHLFE_INVALID_NEXT_HOP_ADDR":            40963,
		"SL_NHLFE_VRF_NAME_TOOLONG":                 40964,
		"SL_NHLFE_NH_INF_NAME_MISSING":              40965,
		"SL_NHLFE_NH_INTF_NAME_TOOLONG":             40966,
		"SL_NHLFE_INVALID_LABEL_COUNT":              40967,
		"SL_NHLFE_INVALID_PATH_ID":                  40968,
		"SL_NHLFE_INVALID_LABEL":                    40969,
		"SL_NHLFE_INVALID_PROTECTED_BITMAP":         40970,
		"SL_NHLFE_INVALID_REMOTE_ADDR_COUNT":        40971,
		"SL_NHLFE_REMOTE_ADDR_INVALID_SZ":           40972,
		"SL_NHLFE_PRIMARY_TOOMANY_LABELS":           40973,
		"SL_NHLFE_PRIMARY_TOOMANY_REMOTE_ADDR":      40974,
		"SL_NHLFE_BACKUP_ID_REPEATED":               40975,
		"SL_NHLFE_PRIMARY_ID_REPEATED":              40976,
		"SL_NHLFE_BACKUP_PROTECTED_BITMAP_EMPTY":    40977,
		"SL_NHLFE_PRIMARY_TOOMANY_BACKUP_PATHS":     40978,
		"SL_NHLFE_REMOTE_ADDR_INVALID":              40979,
		"SL_NHLFE_BACKUP_MISSING_PRIMARY_PATH":      40980,
		"SL_NHLFE_NEXT_HOP_MISSING":                 40981,
		"SL_NHLFE_LABEL_ACTION_INVALID":             40982,
		"SL_NHLFE_NH_INTF_NOT_FOUND":                40983,
		"SL_NHLFE_OPER_FAILED":                      40984,
		"SL_NHLFE_LABEL_ACTION_MISSING":             40985,
		"SL_NHLFE_EXP_SET_FAILED":                   40986,
		"SL_NHLFE_ELSP_PROTECTION_UNSUPPORTED":      40987,
		"SL_LABEL_BLK_ERR_OFFSET":                   45056,
		"SL_LABEL_BLK_LSD_ADD_FAILED":               45057,
		"SL_LABEL_BLK_LSD_DELETE_FAILED":            45058,
		"SL_LABEL_BLK_LSD_LABEL_BLK_NOT_FOUND":      45059,
		"SL_LABEL_BLK_LSD_LABEL_BLK_IN_USE":         45060,
		"SL_LABEL_BLK_LSD_INVALID_ATTRIB":           45061,
		"SL_LABEL_BLK_INVALID_BLOCK_SIZE":           45062,
		"SL_LABEL_BLK_INVALID_START_LABEL":          45063,
		"SL_LABEL_BLK_EEXIST":                       45064,
		"SL_LABEL_BLK_DB_NOMEM":                     45065,
		"SL_LABEL_BLK_TYPE_INVALID":                 45066,
		"SL_LABEL_BLK_CLIENT_NAME_TOOLONG":          45067,
		"SL_MPLS_REG_ERR_OFFSET":                    49152,
		"SL_MPLS_REG_ERR":                           49153,
		"SL_MPLS_UNREG_ERR":                         49154,
		"SL_MPLS_EOF_ERR":                           49155,
		"SL_RPC_INTF_START_OFFSET":                  53248,
		"SL_RPC_INTF_TOO_MANY_INTERFACES":           53249,
		"SL_RPC_INTF_SERVER_NOT_INITIALIZED":        53250,
		"SL_RPC_INTF_API_CLIENT_NOT_REGISTERED":     53251,
		"SL_INTF_START_OFFSET":                      57344,
		"SL_INTF_INTERFACE_NAME_MISSING":            57345,
		"SL_INTF_INTERFACE_NAME_TOOLONG":            57346,
		"SL_INTF_INTERFACE_REG_ERR":                 57347,
		"SL_INTF_INTERNAL_DB_ERROR":                 57348,
		"SL_INTF_RECOVERY_ERROR":                    57349,
		"SL_INTF_INTERFACE_EXISTS":                  57350,
		"SL_INTF_INTERFACE_NOT_FOUND":               57351,
		"SL_L2_REG_START_OFFSET":                    61440,
		"SL_L2_REGISTRATION_ERR":                    61441,
		"SL_L2_UNREGISTRATION_ERR":                  61442,
		"SL_L2_EOF_ERR":                             61443,
		"SL_L2_REG_INVALID_ADMIN_DISTANCE":          61444,
		"SL_L2_REG_IS_DUPLICATE":                    61445,
		"SL_L2_REG_SERVER_NOT_INITIALIZED":          61446,
		"SL_RPC_L2_BD_REG_START_OFFSET":             65536,
		"SL_RPC_L2_BD_REG_NAME_MISSING":             65537,
		"SL_RPC_L2_BD_REG_TOO_MANY_MSGS":            65538,
		"SL_RPC_L2_BD_REG_SERVER_NOT_INITIALIZED":   65539,
		"SL_RPC_L2_BD_REG_CLIENT_NOT_REGISTERED":    65540,
		"SL_L2_BD_REG_START_OFFSET":                 69632,
		"SL_L2_BD_REGISTRATION_ERR":                 69633,
		"SL_L2_BD_UNREGISTRATION_ERR":               69634,
		"SL_L2_BD_EOF_ERR":                          69635,
		"SL_L2_BD_REG_NAME_TOO_LONG":                69636,
		"SL_L2_BD_REG_BD_NOT_FOUND":                 69637,
		"SL_RPC_L2_ROUTE_START_OFFSET":              73728,
		"SL_RPC_L2_ROUTE_TOO_MANY_MSGS":             73729,
		"SL_RPC_L2_ROUTE_SERVER_NOT_INITIALIZED":    73730,
		"SL_RPC_L2_ROUTE_CLIENT_NOT_REGISTERED":     73731,
		"SL_L2_ROUTE_START_OFFSET":                  77824,
		"SL_L2_ROUTE_BD_NAME_MISSING":               77825,
		"SL_L2_ROUTE_BD_NAME_TOOLONG":               77826,
		"SL_L2_ROUTE_BD_NOT_FOUND":                  77827,
		"SL_L2_ROUTE_BD_NOT_REGISTERED":             77828,
		"SL_L2_ROUTE_INVALID_ARGS":                  77829,
		"SL_RPC_L2_NOTIF_START_OFFSET":              81921,
		"SL_RPC_L2_NOTIF_SERVER_NOT_INITIALIZED":    81922,
		"SL_RPC_L2_NOTIF_CLIENT_NOT_REGISTERED":     81923,
		"SL_RPC_L2_NOTIF_ENABLE_ERR":                81924,
		"SL_RPC_L2_NOTIF_DISABLE_ERR":               81925,
		"SL_RPC_L2_NOTIF_EOF_ERR":                   81926,
		"SL_RPC_L2_NOTIF_BD_NAME_MISSING":           81927,
		"SL_RPC_L2_NOTIF_BD_NAME_TOOLONG":           81928,
		"SL_RPC_L2_NOTIF_BD_NOT_FOUND":              81929,
		"SL_INTERNAL_START_OFFSET":                  1048576,
	}
)

func (x SLErrorStatus_SLErrno) Enum() *SLErrorStatus_SLErrno {
	p := new(SLErrorStatus_SLErrno)
	*p = x
	return p
}

func (x SLErrorStatus_SLErrno) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLErrorStatus_SLErrno) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_common_types_proto_enumTypes[4].Descriptor()
}

func (SLErrorStatus_SLErrno) Type() protoreflect.EnumType {
	return &file_sl_common_types_proto_enumTypes[4]
}

func (x SLErrorStatus_SLErrno) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLErrorStatus_SLErrno.Descriptor instead.
func (SLErrorStatus_SLErrno) EnumDescriptor() ([]byte, []int) {
	return file_sl_common_types_proto_rawDescGZIP(), []int{0, 0}
}

// Status codes, including errors and success codes.
// All service layer errors are defined below.
type SLErrorStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status SLErrorStatus_SLErrno `protobuf:"varint,1,opt,name=Status,proto3,enum=service_layer.SLErrorStatus_SLErrno" json:"Status,omitempty"`
}

func (x *SLErrorStatus) Reset() {
	*x = SLErrorStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_common_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLErrorStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLErrorStatus) ProtoMessage() {}

func (x *SLErrorStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sl_common_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLErrorStatus.ProtoReflect.Descriptor instead.
func (*SLErrorStatus) Descriptor() ([]byte, []int) {
	return file_sl_common_types_proto_rawDescGZIP(), []int{0}
}

func (x *SLErrorStatus) GetStatus() SLErrorStatus_SLErrno {
	if x != nil {
		return x.Status
	}
	return SLErrorStatus_SL_SUCCESS
}

// Interface info.
type SLInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One of Interface name or handle
	//
	// Types that are assignable to Interface:
	//	*SLInterface_Name
	//	*SLInterface_Handle
	Interface isSLInterface_Interface `protobuf_oneof:"Interface"`
}

func (x *SLInterface) Reset() {
	*x = SLInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_common_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLInterface) ProtoMessage() {}

func (x *SLInterface) ProtoReflect() protoreflect.Message {
	mi := &file_sl_common_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLInterface.ProtoReflect.Descriptor instead.
func (*SLInterface) Descriptor() ([]byte, []int) {
	return file_sl_common_types_proto_rawDescGZIP(), []int{1}
}

func (m *SLInterface) GetInterface() isSLInterface_Interface {
	if m != nil {
		return m.Interface
	}
	return nil
}

func (x *SLInterface) GetName() string {
	if x, ok := x.GetInterface().(*SLInterface_Name); ok {
		return x.Name
	}
	return ""
}

func (x *SLInterface) GetHandle() uint32 {
	if x, ok := x.GetInterface().(*SLInterface_Handle); ok {
		return x.Handle
	}
	return 0
}

type isSLInterface_Interface interface {
	isSLInterface_Interface()
}

type SLInterface_Name struct {
	// Interface name.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3,oneof"`
}

type SLInterface_Handle struct {
	// Interface handle. Can be retrieved from Interface API.
	Handle uint32 `protobuf:"varint,2,opt,name=Handle,proto3,oneof"`
}

func (*SLInterface_Name) isSLInterface_Interface() {}

func (*SLInterface_Handle) isSLInterface_Interface() {}

// One of IPv4 or IPv6 addresses.
type SLIpAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One of IPv4 or IPv6 address
	//
	// Types that are assignable to Address:
	//	*SLIpAddress_V4Address
	//	*SLIpAddress_V6Address
	Address isSLIpAddress_Address `protobuf_oneof:"Address"`
}

func (x *SLIpAddress) Reset() {
	*x = SLIpAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_common_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLIpAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLIpAddress) ProtoMessage() {}

func (x *SLIpAddress) ProtoReflect() protoreflect.Message {
	mi := &file_sl_common_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLIpAddress.ProtoReflect.Descriptor instead.
func (*SLIpAddress) Descriptor() ([]byte, []int) {
	return file_sl_common_types_proto_rawDescGZIP(), []int{2}
}

func (m *SLIpAddress) GetAddress() isSLIpAddress_Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (x *SLIpAddress) GetV4Address() uint32 {
	if x, ok := x.GetAddress().(*SLIpAddress_V4Address); ok {
		return x.V4Address
	}
	return 0
}

func (x *SLIpAddress) GetV6Address() []byte {
	if x, ok := x.GetAddress().(*SLIpAddress_V6Address); ok {
		return x.V6Address
	}
	return nil
}

type isSLIpAddress_Address interface {
	isSLIpAddress_Address()
}

type SLIpAddress_V4Address struct {
	V4Address uint32 `protobuf:"varint,1,opt,name=V4Address,proto3,oneof"`
}

type SLIpAddress_V6Address struct {
	V6Address []byte `protobuf:"bytes,2,opt,name=V6Address,proto3,oneof"`
}

func (*SLIpAddress_V4Address) isSLIpAddress_Address() {}

func (*SLIpAddress_V6Address) isSLIpAddress_Address() {}

var File_sl_common_types_proto protoreflect.FileDescriptor

var file_sl_common_types_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0xa7, 0x3f, 0x0a, 0x0d, 0x53, 0x4c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6e, 0x6f, 0x52, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd7, 0x3e, 0x0a, 0x07, 0x53, 0x4c, 0x45, 0x72, 0x72,
	0x6e, 0x6f, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4c, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4c, 0x5f, 0x45,
	0x41, 0x47, 0x41, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4c, 0x5f, 0x45, 0x4e,
	0x4f, 0x4d, 0x45, 0x4d, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4c, 0x5f, 0x45, 0x42, 0x55,
	0x53, 0x59, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4c, 0x5f, 0x45, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x07, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4c, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x4c, 0x5f, 0x45, 0x4e, 0x4f, 0x54, 0x53, 0x55, 0x50, 0x10, 0x09, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x4c, 0x5f, 0x53, 0x4f, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x0a, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x0b, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x45, 0x52, 0x4d,
	0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4c, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x4c, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x80, 0x0a, 0x12,
	0x18, 0x0a, 0x13, 0x53, 0x4c, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x81, 0x0a, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x4c, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x10, 0x82, 0x0a, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x4c, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x55,
	0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x10, 0x83,
	0x0a, 0x12, 0x23, 0x0a, 0x1e, 0x53, 0x4c, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x84, 0x0a, 0x12, 0x26, 0x0a, 0x21, 0x53, 0x4c, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x85, 0x0a, 0x12, 0x1c,
	0x0a, 0x17, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x56, 0x52, 0x46, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x80, 0x20, 0x12, 0x25, 0x0a, 0x20,
	0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x56, 0x52, 0x46, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d,
	0x41, 0x4e, 0x59, 0x5f, 0x56, 0x52, 0x46, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x4d, 0x53, 0x47, 0x53,
	0x10, 0x81, 0x20, 0x12, 0x26, 0x0a, 0x21, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x56, 0x52,
	0x46, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x82, 0x20, 0x12, 0x18, 0x0a, 0x13, 0x53,
	0x4c, 0x5f, 0x56, 0x52, 0x46, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53,
	0x45, 0x54, 0x10, 0x80, 0x40, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x4c, 0x5f, 0x56, 0x52, 0x46, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x81, 0x40, 0x12,
	0x15, 0x0a, 0x10, 0x53, 0x4c, 0x5f, 0x56, 0x52, 0x46, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x82, 0x40, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x4c, 0x5f, 0x56, 0x52, 0x46,
	0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x83, 0x40, 0x12,
	0x26, 0x0a, 0x21, 0x53, 0x4c, 0x5f, 0x56, 0x52, 0x46, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0x84, 0x40, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x4c, 0x5f, 0x56, 0x52,
	0x46, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10,
	0x85, 0x40, 0x12, 0x22, 0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x56, 0x52, 0x46, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x10, 0x86, 0x40, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x4c, 0x5f, 0x56, 0x52, 0x46,
	0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x87, 0x40, 0x12, 0x19, 0x0a, 0x14,
	0x53, 0x4c, 0x5f, 0x56, 0x52, 0x46, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4f, 0x46,
	0x5f, 0x45, 0x52, 0x52, 0x10, 0x88, 0x40, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x4c, 0x5f, 0x56, 0x52,
	0x46, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x56, 0x52, 0x46, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x89, 0x40, 0x12, 0x27, 0x0a, 0x22, 0x53, 0x4c, 0x5f,
	0x56, 0x52, 0x46, 0x5f, 0x56, 0x34, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x41, 0x59, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x90, 0x40, 0x12, 0x27, 0x0a, 0x22, 0x53, 0x4c, 0x5f, 0x56, 0x52, 0x46, 0x5f, 0x56, 0x36, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x46, 0x41, 0x54,
	0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x91, 0x40, 0x12, 0x1e, 0x0a, 0x19, 0x53,
	0x4c, 0x5f, 0x56, 0x52, 0x46, 0x5f, 0x56, 0x34, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4f, 0x4b, 0x10, 0x92, 0x40, 0x12, 0x1e, 0x0a, 0x19, 0x53,
	0x4c, 0x5f, 0x56, 0x52, 0x46, 0x5f, 0x56, 0x36, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4f, 0x4b, 0x10, 0x93, 0x40, 0x12, 0x1e, 0x0a, 0x19, 0x53,
	0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x80, 0x60, 0x12, 0x21, 0x0a, 0x1c, 0x53,
	0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f,
	0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x53, 0x10, 0x81, 0x60, 0x12, 0x22,
	0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x56,
	0x52, 0x46, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x4f, 0x4e, 0x47, 0x10,
	0x82, 0x60, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x5f, 0x56, 0x52, 0x46, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x83, 0x60, 0x12, 0x1e, 0x0a, 0x19, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x5f, 0x56, 0x52, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x84, 0x60, 0x12, 0x2a, 0x0a, 0x25, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x5f, 0x56, 0x52, 0x46, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x85, 0x60, 0x12,
	0x22, 0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f,
	0x56, 0x52, 0x46, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47,
	0x10, 0x86, 0x60, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e,
	0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x87, 0x60, 0x12, 0x28, 0x0a,
	0x23, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x88, 0x60, 0x12, 0x29, 0x0a, 0x24, 0x53, 0x4c, 0x5f, 0x52, 0x50,
	0x43, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x5f, 0x53, 0x52,
	0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x4f, 0x4e, 0x47, 0x10,
	0x89, 0x60, 0x12, 0x2d, 0x0a, 0x28, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x8a,
	0x60, 0x12, 0x1b, 0x0a, 0x15, 0x53, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x80, 0x80, 0x01, 0x12, 0x1b,
	0x0a, 0x15, 0x53, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4e,
	0x4f, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x53, 0x10, 0x81, 0x80, 0x01, 0x12, 0x1e, 0x0a, 0x18, 0x53,
	0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4e,
	0x4f, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x53, 0x10, 0x82, 0x80, 0x01, 0x12, 0x21, 0x0a, 0x1b, 0x53,
	0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x83, 0x80, 0x01, 0x12, 0x25,
	0x0a, 0x1f, 0x53, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x84, 0x80, 0x01, 0x12, 0x20, 0x0a, 0x1a, 0x53, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x41,
	0x54, 0x48, 0x53, 0x10, 0x85, 0x80, 0x01, 0x12, 0x20, 0x0a, 0x1a, 0x53, 0x4c, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x46,
	0x49, 0x58, 0x5f, 0x53, 0x5a, 0x10, 0x86, 0x80, 0x01, 0x12, 0x1d, 0x0a, 0x17, 0x53, 0x4c, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x52,
	0x45, 0x46, 0x49, 0x58, 0x10, 0x87, 0x80, 0x01, 0x12, 0x2a, 0x0a, 0x24, 0x53, 0x4c, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x52, 0x49, 0x42, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44,
	0x10, 0x88, 0x80, 0x01, 0x12, 0x23, 0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x52, 0x49, 0x42, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x41, 0x52, 0x47, 0x53, 0x10, 0x89, 0x80, 0x01, 0x12, 0x27, 0x0a, 0x21, 0x53, 0x4c, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x52, 0x49, 0x42, 0x5f, 0x50, 0x41,
	0x54, 0x48, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x8a,
	0x80, 0x01, 0x12, 0x23, 0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x5f, 0x52, 0x49, 0x42, 0x5f, 0x54, 0x4f, 0x4f, 0x4d, 0x41, 0x4e, 0x59, 0x50, 0x41,
	0x54, 0x48, 0x53, 0x10, 0x8b, 0x80, 0x01, 0x12, 0x15, 0x0a, 0x0f, 0x53, 0x4c, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x5f, 0x45, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x8c, 0x80, 0x01, 0x12, 0x1c,
	0x0a, 0x16, 0x53, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f,
	0x42, 0x49, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x8d, 0x80, 0x01, 0x12, 0x23, 0x0a, 0x1d,
	0x53, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x4d, 0x43, 0x41, 0x53, 0x54, 0x10, 0x8e, 0x80,
	0x01, 0x12, 0x20, 0x0a, 0x1a, 0x53, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x50, 0x41,
	0x54, 0x48, 0x5f, 0x41, 0x46, 0x49, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x8f, 0x80, 0x01, 0x12, 0x24, 0x0a, 0x1e, 0x53, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f,
	0x54, 0x4f, 0x4f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f,
	0x50, 0x41, 0x54, 0x48, 0x53, 0x10, 0x90, 0x80, 0x01, 0x12, 0x23, 0x0a, 0x1d, 0x53, 0x4c, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x42, 0x41,
	0x43, 0x4b, 0x55, 0x50, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x53, 0x10, 0x91, 0x80, 0x01, 0x12, 0x17,
	0x0a, 0x11, 0x53, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x44, 0x42, 0x5f, 0x4e, 0x4f,
	0x4d, 0x45, 0x4d, 0x10, 0x92, 0x80, 0x01, 0x12, 0x22, 0x0a, 0x1c, 0x53, 0x4c, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x93, 0x80, 0x01, 0x12, 0x1a, 0x0a, 0x14, 0x53,
	0x4c, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x46,
	0x53, 0x45, 0x54, 0x10, 0x80, 0xa0, 0x01, 0x12, 0x19, 0x0a, 0x13, 0x53, 0x4c, 0x5f, 0x50, 0x41,
	0x54, 0x48, 0x5f, 0x4e, 0x48, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x81,
	0xa0, 0x01, 0x12, 0x1f, 0x0a, 0x19, 0x53, 0x4c, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x4e, 0x48,
	0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x82, 0xa0, 0x01, 0x12, 0x21, 0x0a, 0x1b, 0x53, 0x4c, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x83, 0xa0, 0x01, 0x12, 0x18, 0x0a, 0x12, 0x53, 0x4c, 0x5f, 0x50, 0x41, 0x54,
	0x48, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x84, 0xa0, 0x01,
	0x12, 0x1e, 0x0a, 0x18, 0x53, 0x4c, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x56, 0x52, 0x46, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x85, 0xa0, 0x01,
	0x12, 0x22, 0x0a, 0x1c, 0x53, 0x4c, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x4e, 0x48, 0x5f, 0x49,
	0x4e, 0x54, 0x46, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x4f, 0x4e, 0x47,
	0x10, 0x86, 0xa0, 0x01, 0x12, 0x20, 0x0a, 0x1a, 0x53, 0x4c, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f,
	0x4e, 0x48, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f,
	0x53, 0x5a, 0x10, 0x87, 0xa0, 0x01, 0x12, 0x21, 0x0a, 0x1b, 0x53, 0x4c, 0x5f, 0x50, 0x41, 0x54,
	0x48, 0x5f, 0x4e, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x88, 0xa0, 0x01, 0x12, 0x23, 0x0a, 0x1d, 0x53, 0x4c, 0x5f,
	0x50, 0x41, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x58,
	0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x89, 0xa0, 0x01, 0x12, 0x27,
	0x0a, 0x21, 0x53, 0x4c, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x8a, 0xa0, 0x01, 0x12, 0x24, 0x0a, 0x1e, 0x53, 0x4c, 0x5f, 0x50, 0x41,
	0x54, 0x48, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x5a, 0x10, 0x8b, 0xa0, 0x01, 0x12, 0x26, 0x0a,
	0x20, 0x53, 0x4c, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x5f, 0x41, 0x46, 0x49, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x8c, 0xa0, 0x01, 0x12, 0x26, 0x0a, 0x20, 0x53, 0x4c, 0x5f, 0x50, 0x41, 0x54, 0x48,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x10, 0x8d, 0xa0, 0x01, 0x12, 0x29, 0x0a,
	0x23, 0x53, 0x4c, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f,
	0x50, 0x41, 0x54, 0x48, 0x10, 0x8e, 0xa0, 0x01, 0x12, 0x21, 0x0a, 0x1b, 0x53, 0x4c, 0x5f, 0x50,
	0x41, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x50, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x8f, 0xa0, 0x01, 0x12, 0x20, 0x0a, 0x1a, 0x53,
	0x4c, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x49, 0x44,
	0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x90, 0xa0, 0x01, 0x12, 0x2a, 0x0a,
	0x24, 0x53, 0x4c, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59,
	0x5f, 0x54, 0x4f, 0x4f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f,
	0x50, 0x41, 0x54, 0x48, 0x53, 0x10, 0x91, 0xa0, 0x01, 0x12, 0x24, 0x0a, 0x1e, 0x53, 0x4c, 0x5f,
	0x50, 0x41, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x54, 0x4f, 0x4f,
	0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x10, 0x92, 0xa0, 0x01, 0x12,
	0x29, 0x0a, 0x23, 0x53, 0x4c, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41,
	0x52, 0x59, 0x5f, 0x54, 0x4f, 0x4f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54,
	0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x93, 0xa0, 0x01, 0x12, 0x21, 0x0a, 0x1b, 0x53, 0x4c,
	0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x94, 0xa0, 0x01, 0x12, 0x1b, 0x0a,
	0x15, 0x53, 0x4c, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x95, 0xa0, 0x01, 0x12, 0x28, 0x0a, 0x22, 0x53, 0x4c,
	0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x43,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x5a,
	0x10, 0x96, 0xa0, 0x01, 0x12, 0x1d, 0x0a, 0x17, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x42,
	0x46, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10,
	0x80, 0xc0, 0x01, 0x12, 0x26, 0x0a, 0x20, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x42, 0x46,
	0x44, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x42, 0x46, 0x44, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x81, 0xc0, 0x01, 0x12, 0x22, 0x0a, 0x1c, 0x53,
	0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x42, 0x46, 0x44, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x42, 0x41,
	0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x82, 0xc0, 0x01, 0x12,
	0x2a, 0x0a, 0x24, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x42, 0x46, 0x44, 0x5f, 0x41, 0x50,
	0x49, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x83, 0xc0, 0x01, 0x12, 0x23, 0x0a, 0x1d, 0x53,
	0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x42, 0x46, 0x44, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x84, 0xc0, 0x01,
	0x12, 0x27, 0x0a, 0x21, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x42, 0x46, 0x44, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x85, 0xc0, 0x01, 0x12, 0x22, 0x0a, 0x1c, 0x53, 0x4c, 0x5f,
	0x52, 0x50, 0x43, 0x5f, 0x42, 0x46, 0x44, 0x5f, 0x56, 0x34, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x86, 0xc0, 0x01, 0x12, 0x22, 0x0a,
	0x1c, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x42, 0x46, 0x44, 0x5f, 0x56, 0x36, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x87, 0xc0,
	0x01, 0x12, 0x19, 0x0a, 0x13, 0x53, 0x4c, 0x5f, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x80, 0xe0, 0x01, 0x12, 0x1e, 0x0a, 0x18,
	0x53, 0x4c, 0x5f, 0x42, 0x46, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x81, 0xe0, 0x01, 0x12, 0x1b, 0x0a, 0x15,
	0x53, 0x4c, 0x5f, 0x42, 0x46, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x82, 0xe0, 0x01, 0x12, 0x1e, 0x0a, 0x18, 0x53, 0x4c, 0x5f,
	0x42, 0x46, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0x83, 0xe0, 0x01, 0x12, 0x1e, 0x0a, 0x18, 0x53, 0x4c, 0x5f,
	0x42, 0x46, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x84, 0xe0, 0x01, 0x12, 0x1e, 0x0a, 0x18, 0x53, 0x4c, 0x5f,
	0x42, 0x46, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x42, 0x52, 0x5f,
	0x4d, 0x43, 0x41, 0x53, 0x54, 0x10, 0x85, 0xe0, 0x01, 0x12, 0x18, 0x0a, 0x12, 0x53, 0x4c, 0x5f,
	0x42, 0x46, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x42, 0x52, 0x10,
	0x86, 0xe0, 0x01, 0x12, 0x1d, 0x0a, 0x17, 0x53, 0x4c, 0x5f, 0x42, 0x46, 0x44, 0x5f, 0x56, 0x52,
	0x46, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x87,
	0xe0, 0x01, 0x12, 0x1a, 0x0a, 0x14, 0x53, 0x4c, 0x5f, 0x42, 0x46, 0x44, 0x5f, 0x42, 0x41, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x88, 0xe0, 0x01, 0x12, 0x1f,
	0x0a, 0x19, 0x53, 0x4c, 0x5f, 0x42, 0x46, 0x44, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x89, 0xe0, 0x01, 0x12,
	0x1a, 0x0a, 0x14, 0x53, 0x4c, 0x5f, 0x42, 0x46, 0x44, 0x5f, 0x56, 0x52, 0x46, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x8a, 0xe0, 0x01, 0x12, 0x20, 0x0a, 0x1a, 0x53,
	0x4c, 0x5f, 0x42, 0x46, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x52,
	0x45, 0x46, 0x49, 0x58, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x8b, 0xe0, 0x01, 0x12, 0x21, 0x0a,
	0x1b, 0x53, 0x4c, 0x5f, 0x42, 0x46, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x8c, 0xe0, 0x01,
	0x12, 0x18, 0x0a, 0x12, 0x53, 0x4c, 0x5f, 0x42, 0x46, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x56, 0x52, 0x46, 0x10, 0x8d, 0xe0, 0x01, 0x12, 0x1e, 0x0a, 0x18, 0x53, 0x4c,
	0x5f, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x8e, 0xe0, 0x01, 0x12, 0x1b, 0x0a, 0x15, 0x53, 0x4c,
	0x5f, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x53, 0x10, 0x8f, 0xe0, 0x01, 0x12, 0x1e, 0x0a, 0x18, 0x53, 0x4c, 0x5f, 0x42, 0x46,
	0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x44, 0x42, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x90, 0xe0, 0x01, 0x12, 0x1b, 0x0a, 0x15, 0x53, 0x4c, 0x5f, 0x42, 0x46,
	0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x91, 0xe0, 0x01, 0x12, 0x1e, 0x0a, 0x18, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x4d,
	0x50, 0x4c, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54,
	0x10, 0x80, 0x80, 0x02, 0x12, 0x23, 0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x4d,
	0x50, 0x4c, 0x53, 0x5f, 0x49, 0x4c, 0x4d, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59,
	0x5f, 0x49, 0x4c, 0x4d, 0x53, 0x10, 0x81, 0x80, 0x02, 0x12, 0x28, 0x0a, 0x22, 0x53, 0x4c, 0x5f,
	0x52, 0x50, 0x43, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x82, 0x80, 0x02, 0x12, 0x28, 0x0a, 0x22, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x4d, 0x50,
	0x4c, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x43,
	0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x83, 0x80, 0x02, 0x12, 0x2f, 0x0a,
	0x29, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x5f, 0x42, 0x4c, 0x4b, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x42, 0x4c, 0x4b, 0x53, 0x10, 0x84, 0x80, 0x02, 0x12, 0x20,
	0x0a, 0x1a, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x85, 0x80, 0x02,
	0x12, 0x17, 0x0a, 0x11, 0x53, 0x4c, 0x5f, 0x49, 0x4c, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4f,
	0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x80, 0xa0, 0x02, 0x12, 0x17, 0x0a, 0x11, 0x53, 0x4c, 0x5f,
	0x49, 0x4c, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x81,
	0xa0, 0x02, 0x12, 0x1b, 0x0a, 0x15, 0x53, 0x4c, 0x5f, 0x49, 0x4c, 0x4d, 0x5f, 0x4c, 0x53, 0x44,
	0x5f, 0x41, 0x44, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x82, 0xa0, 0x02, 0x12,
	0x1e, 0x0a, 0x18, 0x53, 0x4c, 0x5f, 0x49, 0x4c, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x10, 0x83, 0xa0, 0x02, 0x12,
	0x1a, 0x0a, 0x14, 0x53, 0x4c, 0x5f, 0x49, 0x4c, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x84, 0xa0, 0x02, 0x12, 0x1a, 0x0a, 0x14, 0x53,
	0x4c, 0x5f, 0x49, 0x4c, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x85, 0xa0, 0x02, 0x12, 0x1e, 0x0a, 0x18, 0x53, 0x4c, 0x5f, 0x49, 0x4c,
	0x4d, 0x5f, 0x4c, 0x53, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x86, 0xa0, 0x02, 0x12, 0x23, 0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x49, 0x4c,
	0x4d, 0x5f, 0x54, 0x4f, 0x4f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52,
	0x59, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x53, 0x10, 0x87, 0xa0, 0x02, 0x12, 0x22, 0x0a, 0x1c,
	0x53, 0x4c, 0x5f, 0x49, 0x4c, 0x4d, 0x5f, 0x54, 0x4f, 0x4f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x42,
	0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x53, 0x10, 0x88, 0xa0, 0x02,
	0x12, 0x27, 0x0a, 0x21, 0x53, 0x4c, 0x5f, 0x49, 0x4c, 0x4d, 0x5f, 0x4c, 0x53, 0x44, 0x5f, 0x41,
	0x44, 0x44, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x89, 0xa0, 0x02, 0x12, 0x25, 0x0a, 0x1f, 0x53, 0x4c, 0x5f,
	0x49, 0x4c, 0x4d, 0x5f, 0x4c, 0x53, 0x44, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x10, 0x8a, 0xa0, 0x02,
	0x12, 0x13, 0x0a, 0x0d, 0x53, 0x4c, 0x5f, 0x49, 0x4c, 0x4d, 0x5f, 0x45, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x10, 0x8b, 0xa0, 0x02, 0x12, 0x15, 0x0a, 0x0f, 0x53, 0x4c, 0x5f, 0x49, 0x4c, 0x4d, 0x5f,
	0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x4d, 0x45, 0x4d, 0x10, 0x8c, 0xa0, 0x02, 0x12, 0x1d, 0x0a, 0x17,
	0x53, 0x4c, 0x5f, 0x49, 0x4c, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4c, 0x53, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x10, 0x8d, 0xa0, 0x02, 0x12, 0x29, 0x0a, 0x23, 0x53,
	0x4c, 0x5f, 0x49, 0x4c, 0x4d, 0x5f, 0x45, 0x4c, 0x53, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4f,
	0x52, 0x5f, 0x44, 0x46, 0x4c, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x53,
	0x45, 0x54, 0x10, 0x8e, 0xa0, 0x02, 0x12, 0x19, 0x0a, 0x13, 0x53, 0x4c, 0x5f, 0x49, 0x4c, 0x4d,
	0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x53, 0x10, 0x8f, 0xa0,
	0x02, 0x12, 0x1c, 0x0a, 0x16, 0x53, 0x4c, 0x5f, 0x49, 0x4c, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x53, 0x10, 0x90, 0xa0, 0x02, 0x12,
	0x1d, 0x0a, 0x17, 0x53, 0x4c, 0x5f, 0x49, 0x4c, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x4c, 0x53, 0x50, 0x10, 0x91, 0xa0, 0x02, 0x12, 0x26,
	0x0a, 0x20, 0x53, 0x4c, 0x5f, 0x49, 0x4c, 0x4d, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x54,
	0x4f, 0x4f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x45, 0x53, 0x10, 0x92, 0xa0, 0x02, 0x12, 0x1f, 0x0a, 0x19, 0x53, 0x4c, 0x5f, 0x49, 0x4c, 0x4d,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x93, 0xa0, 0x02, 0x12, 0x16, 0x0a, 0x10, 0x53, 0x4c, 0x5f, 0x49, 0x4c,
	0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4f, 0x4b, 0x10, 0x94, 0xa0, 0x02, 0x12,
	0x19, 0x0a, 0x13, 0x53, 0x4c, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x80, 0xc0, 0x02, 0x12, 0x1a, 0x0a, 0x14, 0x53, 0x4c,
	0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f, 0x4e, 0x48, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x81, 0xc0, 0x02, 0x12, 0x21, 0x0a, 0x1b, 0x53, 0x4c, 0x5f, 0x4e, 0x48, 0x4c,
	0x46, 0x45, 0x5f, 0x4e, 0x48, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x5f, 0x53, 0x5a, 0x10, 0x82, 0xc0, 0x02, 0x12, 0x24, 0x0a, 0x1e, 0x53, 0x4c, 0x5f,
	0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x45,
	0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x83, 0xc0, 0x02, 0x12,
	0x1f, 0x0a, 0x19, 0x53, 0x4c, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f, 0x56, 0x52, 0x46, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x84, 0xc0, 0x02,
	0x12, 0x22, 0x0a, 0x1c, 0x53, 0x4c, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f, 0x4e, 0x48, 0x5f,
	0x49, 0x4e, 0x46, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47,
	0x10, 0x85, 0xc0, 0x02, 0x12, 0x23, 0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45,
	0x5f, 0x4e, 0x48, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f,
	0x4f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x86, 0xc0, 0x02, 0x12, 0x22, 0x0a, 0x1c, 0x53, 0x4c, 0x5f,
	0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x87, 0xc0, 0x02, 0x12, 0x1e, 0x0a,
	0x18, 0x53, 0x4c, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x49, 0x44, 0x10, 0x88, 0xc0, 0x02, 0x12, 0x1c, 0x0a,
	0x16, 0x53, 0x4c, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x89, 0xc0, 0x02, 0x12, 0x27, 0x0a, 0x21, 0x53,
	0x4c, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50,
	0x10, 0x8a, 0xc0, 0x02, 0x12, 0x28, 0x0a, 0x22, 0x53, 0x4c, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x8b, 0xc0, 0x02, 0x12, 0x25,
	0x0a, 0x1f, 0x53, 0x4c, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54,
	0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53,
	0x5a, 0x10, 0x8c, 0xc0, 0x02, 0x12, 0x25, 0x0a, 0x1f, 0x53, 0x4c, 0x5f, 0x4e, 0x48, 0x4c, 0x46,
	0x45, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x54, 0x4f, 0x4f, 0x4d, 0x41, 0x4e,
	0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x10, 0x8d, 0xc0, 0x02, 0x12, 0x2a, 0x0a, 0x24,
	0x53, 0x4c, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59,
	0x5f, 0x54, 0x4f, 0x4f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x10, 0x8e, 0xc0, 0x02, 0x12, 0x21, 0x0a, 0x1b, 0x53, 0x4c, 0x5f, 0x4e,
	0x48, 0x4c, 0x46, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x50, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x8f, 0xc0, 0x02, 0x12, 0x22, 0x0a, 0x1c, 0x53,
	0x4c, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x90, 0xc0, 0x02, 0x12,
	0x2c, 0x0a, 0x26, 0x53, 0x4c, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b,
	0x55, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x49, 0x54,
	0x4d, 0x41, 0x50, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x91, 0xc0, 0x02, 0x12, 0x2b, 0x0a,
	0x25, 0x53, 0x4c, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52,
	0x59, 0x5f, 0x54, 0x4f, 0x4f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50,
	0x5f, 0x50, 0x41, 0x54, 0x48, 0x53, 0x10, 0x92, 0xc0, 0x02, 0x12, 0x22, 0x0a, 0x1c, 0x53, 0x4c,
	0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x93, 0xc0, 0x02, 0x12, 0x2a,
	0x0a, 0x24, 0x53, 0x4c, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55,
	0x50, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52,
	0x59, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x94, 0xc0, 0x02, 0x12, 0x1f, 0x0a, 0x19, 0x53, 0x4c,
	0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x95, 0xc0, 0x02, 0x12, 0x23, 0x0a, 0x1d, 0x53,
	0x4c, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x96, 0xc0, 0x02,
	0x12, 0x20, 0x0a, 0x1a, 0x53, 0x4c, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f, 0x4e, 0x48, 0x5f,
	0x49, 0x4e, 0x54, 0x46, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x97,
	0xc0, 0x02, 0x12, 0x1a, 0x0a, 0x14, 0x53, 0x4c, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x98, 0xc0, 0x02, 0x12, 0x23,
	0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10,
	0x99, 0xc0, 0x02, 0x12, 0x1d, 0x0a, 0x17, 0x53, 0x4c, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f,
	0x45, 0x58, 0x50, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x9a,
	0xc0, 0x02, 0x12, 0x2a, 0x0a, 0x24, 0x53, 0x4c, 0x5f, 0x4e, 0x48, 0x4c, 0x46, 0x45, 0x5f, 0x45,
	0x4c, 0x53, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x9b, 0xc0, 0x02, 0x12, 0x1d,
	0x0a, 0x17, 0x53, 0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x42, 0x4c, 0x4b, 0x5f, 0x45,
	0x52, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x80, 0xe0, 0x02, 0x12, 0x21, 0x0a,
	0x1b, 0x53, 0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x42, 0x4c, 0x4b, 0x5f, 0x4c, 0x53,
	0x44, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x81, 0xe0, 0x02,
	0x12, 0x24, 0x0a, 0x1e, 0x53, 0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x42, 0x4c, 0x4b,
	0x5f, 0x4c, 0x53, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x82, 0xe0, 0x02, 0x12, 0x2a, 0x0a, 0x24, 0x53, 0x4c, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x5f, 0x42, 0x4c, 0x4b, 0x5f, 0x4c, 0x53, 0x44, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x5f, 0x42, 0x4c, 0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x83,
	0xe0, 0x02, 0x12, 0x27, 0x0a, 0x21, 0x53, 0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x42,
	0x4c, 0x4b, 0x5f, 0x4c, 0x53, 0x44, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x42, 0x4c, 0x4b,
	0x5f, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x84, 0xe0, 0x02, 0x12, 0x25, 0x0a, 0x1f, 0x53,
	0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x42, 0x4c, 0x4b, 0x5f, 0x4c, 0x53, 0x44, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x10, 0x85,
	0xe0, 0x02, 0x12, 0x25, 0x0a, 0x1f, 0x53, 0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x42,
	0x4c, 0x4b, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x86, 0xe0, 0x02, 0x12, 0x26, 0x0a, 0x20, 0x53, 0x4c, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x42, 0x4c, 0x4b, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x87, 0xe0,
	0x02, 0x12, 0x19, 0x0a, 0x13, 0x53, 0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x42, 0x4c,
	0x4b, 0x5f, 0x45, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x88, 0xe0, 0x02, 0x12, 0x1b, 0x0a, 0x15,
	0x53, 0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x42, 0x4c, 0x4b, 0x5f, 0x44, 0x42, 0x5f,
	0x4e, 0x4f, 0x4d, 0x45, 0x4d, 0x10, 0x89, 0xe0, 0x02, 0x12, 0x1f, 0x0a, 0x19, 0x53, 0x4c, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x42, 0x4c, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x8a, 0xe0, 0x02, 0x12, 0x26, 0x0a, 0x20, 0x53, 0x4c,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x42, 0x4c, 0x4b, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x8b,
	0xe0, 0x02, 0x12, 0x1c, 0x0a, 0x16, 0x53, 0x4c, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x52, 0x45,
	0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x80, 0x80, 0x03,
	0x12, 0x15, 0x0a, 0x0f, 0x53, 0x4c, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x52, 0x45, 0x47, 0x5f,
	0x45, 0x52, 0x52, 0x10, 0x81, 0x80, 0x03, 0x12, 0x17, 0x0a, 0x11, 0x53, 0x4c, 0x5f, 0x4d, 0x50,
	0x4c, 0x53, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x82, 0x80, 0x03,
	0x12, 0x15, 0x0a, 0x0f, 0x53, 0x4c, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x45, 0x4f, 0x46, 0x5f,
	0x45, 0x52, 0x52, 0x10, 0x83, 0x80, 0x03, 0x12, 0x1e, 0x0a, 0x18, 0x53, 0x4c, 0x5f, 0x52, 0x50,
	0x43, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x46,
	0x53, 0x45, 0x54, 0x10, 0x80, 0xa0, 0x03, 0x12, 0x25, 0x0a, 0x1f, 0x53, 0x4c, 0x5f, 0x52, 0x50,
	0x43, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x10, 0x81, 0xa0, 0x03, 0x12, 0x28,
	0x0a, 0x22, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x82, 0xa0, 0x03, 0x12, 0x2b, 0x0a, 0x25, 0x53, 0x4c, 0x5f, 0x52,
	0x50, 0x43, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45,
	0x44, 0x10, 0x83, 0xa0, 0x03, 0x12, 0x1a, 0x0a, 0x14, 0x53, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x46,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x80, 0xc0,
	0x03, 0x12, 0x24, 0x0a, 0x1e, 0x53, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x10, 0x81, 0xc0, 0x03, 0x12, 0x24, 0x0a, 0x1e, 0x53, 0x4c, 0x5f, 0x49, 0x4e,
	0x54, 0x46, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x82, 0xc0, 0x03, 0x12, 0x1f, 0x0a,
	0x19, 0x53, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x83, 0xc0, 0x03, 0x12, 0x1f,
	0x0a, 0x19, 0x53, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x5f, 0x44, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x84, 0xc0, 0x03, 0x12,
	0x1c, 0x0a, 0x16, 0x53, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x85, 0xc0, 0x03, 0x12, 0x1e, 0x0a,
	0x18, 0x53, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x86, 0xc0, 0x03, 0x12, 0x21, 0x0a,
	0x1b, 0x53, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x87, 0xc0, 0x03,
	0x12, 0x1c, 0x0a, 0x16, 0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x80, 0xe0, 0x03, 0x12, 0x1c,
	0x0a, 0x16, 0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x81, 0xe0, 0x03, 0x12, 0x1e, 0x0a, 0x18,
	0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x82, 0xe0, 0x03, 0x12, 0x13, 0x0a, 0x0d,
	0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x45, 0x4f, 0x46, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x83, 0xe0,
	0x03, 0x12, 0x26, 0x0a, 0x20, 0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x44, 0x49, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x84, 0xe0, 0x03, 0x12, 0x1c, 0x0a, 0x16, 0x53, 0x4c, 0x5f,
	0x4c, 0x32, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x49, 0x53, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x10, 0x85, 0xe0, 0x03, 0x12, 0x26, 0x0a, 0x20, 0x53, 0x4c, 0x5f, 0x4c, 0x32,
	0x5f, 0x52, 0x45, 0x47, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x86, 0xe0, 0x03, 0x12,
	0x23, 0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x4c, 0x32, 0x5f, 0x42, 0x44, 0x5f,
	0x52, 0x45, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54,
	0x10, 0x80, 0x80, 0x04, 0x12, 0x23, 0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x4c,
	0x32, 0x5f, 0x42, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x81, 0x80, 0x04, 0x12, 0x24, 0x0a, 0x1e, 0x53, 0x4c, 0x5f,
	0x52, 0x50, 0x43, 0x5f, 0x4c, 0x32, 0x5f, 0x42, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x4d, 0x53, 0x47, 0x53, 0x10, 0x82, 0x80, 0x04, 0x12,
	0x2d, 0x0a, 0x27, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x4c, 0x32, 0x5f, 0x42, 0x44, 0x5f,
	0x52, 0x45, 0x47, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x83, 0x80, 0x04, 0x12, 0x2c,
	0x0a, 0x26, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x4c, 0x32, 0x5f, 0x42, 0x44, 0x5f, 0x52,
	0x45, 0x47, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x84, 0x80, 0x04, 0x12, 0x1f, 0x0a, 0x19,
	0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x42, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x80, 0xa0, 0x04, 0x12, 0x1f, 0x0a,
	0x19, 0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x42, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x81, 0xa0, 0x04, 0x12, 0x21,
	0x0a, 0x1b, 0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x42, 0x44, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x82, 0xa0,
	0x04, 0x12, 0x16, 0x0a, 0x10, 0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x42, 0x44, 0x5f, 0x45, 0x4f,
	0x46, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x83, 0xa0, 0x04, 0x12, 0x20, 0x0a, 0x1a, 0x53, 0x4c, 0x5f,
	0x4c, 0x32, 0x5f, 0x42, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54,
	0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x84, 0xa0, 0x04, 0x12, 0x1f, 0x0a, 0x19, 0x53,
	0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x42, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x42, 0x44, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x85, 0xa0, 0x04, 0x12, 0x22, 0x0a, 0x1c,
	0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x4c, 0x32, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x80, 0xc0, 0x04,
	0x12, 0x23, 0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x4c, 0x32, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x4d, 0x53, 0x47,
	0x53, 0x10, 0x81, 0xc0, 0x04, 0x12, 0x2c, 0x0a, 0x26, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f,
	0x4c, 0x32, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x82, 0xc0, 0x04, 0x12, 0x2b, 0x0a, 0x25, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x4c, 0x32,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x83, 0xc0, 0x04,
	0x12, 0x1e, 0x0a, 0x18, 0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x80, 0xe0, 0x04,
	0x12, 0x21, 0x0a, 0x1b, 0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f,
	0x42, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10,
	0x81, 0xe0, 0x04, 0x12, 0x21, 0x0a, 0x1b, 0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x5f, 0x42, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x4f,
	0x4e, 0x47, 0x10, 0x82, 0xe0, 0x04, 0x12, 0x1e, 0x0a, 0x18, 0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x42, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x83, 0xe0, 0x04, 0x12, 0x23, 0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x42, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x84, 0xe0, 0x04, 0x12, 0x1e, 0x0a, 0x18, 0x53,
	0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x53, 0x10, 0x85, 0xe0, 0x04, 0x12, 0x22, 0x0a, 0x1c, 0x53,
	0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x4c, 0x32, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x81, 0x80, 0x05, 0x12,
	0x2c, 0x0a, 0x26, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x4c, 0x32, 0x5f, 0x4e, 0x4f, 0x54,
	0x49, 0x46, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x82, 0x80, 0x05, 0x12, 0x2b, 0x0a,
	0x25, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x4c, 0x32, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x83, 0x80, 0x05, 0x12, 0x20, 0x0a, 0x1a, 0x53, 0x4c,
	0x5f, 0x52, 0x50, 0x43, 0x5f, 0x4c, 0x32, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x84, 0x80, 0x05, 0x12, 0x21, 0x0a, 0x1b,
	0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x4c, 0x32, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x85, 0x80, 0x05, 0x12,
	0x1d, 0x0a, 0x17, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x4c, 0x32, 0x5f, 0x4e, 0x4f, 0x54,
	0x49, 0x46, 0x5f, 0x45, 0x4f, 0x46, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x86, 0x80, 0x05, 0x12, 0x25,
	0x0a, 0x1f, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x4c, 0x32, 0x5f, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x5f, 0x42, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x10, 0x87, 0x80, 0x05, 0x12, 0x25, 0x0a, 0x1f, 0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f,
	0x4c, 0x32, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x5f, 0x42, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x88, 0x80, 0x05, 0x12, 0x22, 0x0a, 0x1c,
	0x53, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x4c, 0x32, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x5f,
	0x42, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x89, 0x80, 0x05,
	0x12, 0x1e, 0x0a, 0x18, 0x53, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x80, 0x80, 0x40,
	0x22, 0x4a, 0x0a, 0x0b, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x58, 0x0a, 0x0b,
	0x53, 0x4c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x09, 0x56,
	0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x09, 0x56, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x09, 0x56,
	0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x09, 0x56, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2a, 0x62, 0x0a, 0x07, 0x53, 0x4c, 0x52, 0x65, 0x67, 0x4f,
	0x70, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4c, 0x5f, 0x52, 0x45, 0x47, 0x4f, 0x50, 0x5f, 0x52, 0x45,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4c, 0x5f, 0x52,
	0x45, 0x47, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x4c, 0x5f, 0x52, 0x45, 0x47, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4c, 0x5f, 0x52,
	0x45, 0x47, 0x4f, 0x50, 0x5f, 0x45, 0x4f, 0x46, 0x10, 0x03, 0x2a, 0x5f, 0x0a, 0x0a, 0x53, 0x4c,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4c, 0x5f, 0x4f,
	0x42, 0x4a, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x4f, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x4f, 0x50, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4c, 0x5f, 0x4f, 0x42, 0x4a,
	0x4f, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x2a, 0x53, 0x0a, 0x09, 0x53,
	0x4c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x4f, 0x70, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4c, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x4f, 0x50, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4c, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x4f, 0x50, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02,
	0x2a, 0x4b, 0x0a, 0x0b, 0x53, 0x4c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x4c, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4c, 0x5f, 0x45, 0x4e, 0x43,
	0x41, 0x50, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4c,
	0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x02, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sl_common_types_proto_rawDescOnce sync.Once
	file_sl_common_types_proto_rawDescData = file_sl_common_types_proto_rawDesc
)

func file_sl_common_types_proto_rawDescGZIP() []byte {
	file_sl_common_types_proto_rawDescOnce.Do(func() {
		file_sl_common_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_sl_common_types_proto_rawDescData)
	})
	return file_sl_common_types_proto_rawDescData
}

var file_sl_common_types_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_sl_common_types_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_sl_common_types_proto_goTypes = []interface{}{
	(SLRegOp)(0),               // 0: service_layer.SLRegOp
	(SLObjectOp)(0),            // 1: service_layer.SLObjectOp
	(SLNotifOp)(0),             // 2: service_layer.SLNotifOp
	(SLEncapType)(0),           // 3: service_layer.SLEncapType
	(SLErrorStatus_SLErrno)(0), // 4: service_layer.SLErrorStatus.SLErrno
	(*SLErrorStatus)(nil),      // 5: service_layer.SLErrorStatus
	(*SLInterface)(nil),        // 6: service_layer.SLInterface
	(*SLIpAddress)(nil),        // 7: service_layer.SLIpAddress
}
var file_sl_common_types_proto_depIdxs = []int32{
	4, // 0: service_layer.SLErrorStatus.Status:type_name -> service_layer.SLErrorStatus.SLErrno
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_sl_common_types_proto_init() }
func file_sl_common_types_proto_init() {
	if File_sl_common_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sl_common_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLErrorStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_common_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_common_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLIpAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sl_common_types_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SLInterface_Name)(nil),
		(*SLInterface_Handle)(nil),
	}
	file_sl_common_types_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SLIpAddress_V4Address)(nil),
		(*SLIpAddress_V6Address)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sl_common_types_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sl_common_types_proto_goTypes,
		DependencyIndexes: file_sl_common_types_proto_depIdxs,
		EnumInfos:         file_sl_common_types_proto_enumTypes,
		MessageInfos:      file_sl_common_types_proto_msgTypes,
	}.Build()
	File_sl_common_types_proto = out.File
	file_sl_common_types_proto_rawDesc = nil
	file_sl_common_types_proto_goTypes = nil
	file_sl_common_types_proto_depIdxs = nil
}
