// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.3
// source: sl_global.proto

package service_layer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SLGlobalClient is the client API for SLGlobal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SLGlobalClient interface {
	// Initialize the connection, and setup a application level heartbeat channel.
	//
	// The caller must send its version information as part of the SLInitMsg
	// message. The server will reply with SL_GLOBAL_EVENT_TYPE_VERSION
	// that tells the caller whether he can proceed or not.
	// Refer to message SLGlobalNotif below for further details.
	//
	// After the version handshake, the notification channel is used for
	// "push" event notifications, such as:
	//   - SLGlobalNotif.EventType = SL_GLOBAL_EVENT_TYPE_HEARTBEAT
	//     heartbeat notification messages are sent to the client on
	//     a periodic basis.
	//     Refer to SLGlobalNotif definition for further info.
	SLGlobalInitNotif(ctx context.Context, in *SLInitMsg, opts ...grpc.CallOption) (SLGlobal_SLGlobalInitNotifClient, error)
	// Get platform specific globals
	SLGlobalsGet(ctx context.Context, in *SLGlobalsGetMsg, opts ...grpc.CallOption) (*SLGlobalsGetMsgRsp, error)
}

type sLGlobalClient struct {
	cc grpc.ClientConnInterface
}

func NewSLGlobalClient(cc grpc.ClientConnInterface) SLGlobalClient {
	return &sLGlobalClient{cc}
}

func (c *sLGlobalClient) SLGlobalInitNotif(ctx context.Context, in *SLInitMsg, opts ...grpc.CallOption) (SLGlobal_SLGlobalInitNotifClient, error) {
	stream, err := c.cc.NewStream(ctx, &SLGlobal_ServiceDesc.Streams[0], "/service_layer.SLGlobal/SLGlobalInitNotif", opts...)
	if err != nil {
		return nil, err
	}
	x := &sLGlobalSLGlobalInitNotifClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SLGlobal_SLGlobalInitNotifClient interface {
	Recv() (*SLGlobalNotif, error)
	grpc.ClientStream
}

type sLGlobalSLGlobalInitNotifClient struct {
	grpc.ClientStream
}

func (x *sLGlobalSLGlobalInitNotifClient) Recv() (*SLGlobalNotif, error) {
	m := new(SLGlobalNotif)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sLGlobalClient) SLGlobalsGet(ctx context.Context, in *SLGlobalsGetMsg, opts ...grpc.CallOption) (*SLGlobalsGetMsgRsp, error) {
	out := new(SLGlobalsGetMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLGlobal/SLGlobalsGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SLGlobalServer is the server API for SLGlobal service.
// All implementations must embed UnimplementedSLGlobalServer
// for forward compatibility
type SLGlobalServer interface {
	// Initialize the connection, and setup a application level heartbeat channel.
	//
	// The caller must send its version information as part of the SLInitMsg
	// message. The server will reply with SL_GLOBAL_EVENT_TYPE_VERSION
	// that tells the caller whether he can proceed or not.
	// Refer to message SLGlobalNotif below for further details.
	//
	// After the version handshake, the notification channel is used for
	// "push" event notifications, such as:
	//   - SLGlobalNotif.EventType = SL_GLOBAL_EVENT_TYPE_HEARTBEAT
	//     heartbeat notification messages are sent to the client on
	//     a periodic basis.
	//     Refer to SLGlobalNotif definition for further info.
	SLGlobalInitNotif(*SLInitMsg, SLGlobal_SLGlobalInitNotifServer) error
	// Get platform specific globals
	SLGlobalsGet(context.Context, *SLGlobalsGetMsg) (*SLGlobalsGetMsgRsp, error)
	mustEmbedUnimplementedSLGlobalServer()
}

// UnimplementedSLGlobalServer must be embedded to have forward compatible implementations.
type UnimplementedSLGlobalServer struct {
}

func (UnimplementedSLGlobalServer) SLGlobalInitNotif(*SLInitMsg, SLGlobal_SLGlobalInitNotifServer) error {
	return status.Errorf(codes.Unimplemented, "method SLGlobalInitNotif not implemented")
}
func (UnimplementedSLGlobalServer) SLGlobalsGet(context.Context, *SLGlobalsGetMsg) (*SLGlobalsGetMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLGlobalsGet not implemented")
}
func (UnimplementedSLGlobalServer) mustEmbedUnimplementedSLGlobalServer() {}

// UnsafeSLGlobalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SLGlobalServer will
// result in compilation errors.
type UnsafeSLGlobalServer interface {
	mustEmbedUnimplementedSLGlobalServer()
}

func RegisterSLGlobalServer(s grpc.ServiceRegistrar, srv SLGlobalServer) {
	s.RegisterService(&SLGlobal_ServiceDesc, srv)
}

func _SLGlobal_SLGlobalInitNotif_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SLInitMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SLGlobalServer).SLGlobalInitNotif(m, &sLGlobalSLGlobalInitNotifServer{stream})
}

type SLGlobal_SLGlobalInitNotifServer interface {
	Send(*SLGlobalNotif) error
	grpc.ServerStream
}

type sLGlobalSLGlobalInitNotifServer struct {
	grpc.ServerStream
}

func (x *sLGlobalSLGlobalInitNotifServer) Send(m *SLGlobalNotif) error {
	return x.ServerStream.SendMsg(m)
}

func _SLGlobal_SLGlobalsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLGlobalsGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLGlobalServer).SLGlobalsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLGlobal/SLGlobalsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLGlobalServer).SLGlobalsGet(ctx, req.(*SLGlobalsGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// SLGlobal_ServiceDesc is the grpc.ServiceDesc for SLGlobal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SLGlobal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service_layer.SLGlobal",
	HandlerType: (*SLGlobalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SLGlobalsGet",
			Handler:    _SLGlobal_SLGlobalsGet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SLGlobalInitNotif",
			Handler:       _SLGlobal_SLGlobalInitNotif_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sl_global.proto",
}
