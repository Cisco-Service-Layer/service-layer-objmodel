// @file
// @brief Server RPC proto file for Interface handles.
// Declares an RPC that gets interface details.
// ----------------------------------------------------------------
//  Copyright (c) 2016 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.1
// source: sl_interface.proto

package service_layer

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The current state of the interface.
type SLInterfaceState int32

const (
	// State unknown.
	SLInterfaceState_SL_IF_STATE_UNKNOWN SLInterfaceState = 0
	// State Operationally down.
	SLInterfaceState_SL_IF_STATE_DOWN SLInterfaceState = 1
	// State Operationally up.
	SLInterfaceState_SL_IF_STATE_UP SLInterfaceState = 2
)

// Enum value maps for SLInterfaceState.
var (
	SLInterfaceState_name = map[int32]string{
		0: "SL_IF_STATE_UNKNOWN",
		1: "SL_IF_STATE_DOWN",
		2: "SL_IF_STATE_UP",
	}
	SLInterfaceState_value = map[string]int32{
		"SL_IF_STATE_UNKNOWN": 0,
		"SL_IF_STATE_DOWN":    1,
		"SL_IF_STATE_UP":      2,
	}
)

func (x SLInterfaceState) Enum() *SLInterfaceState {
	p := new(SLInterfaceState)
	*p = x
	return p
}

func (x SLInterfaceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLInterfaceState) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_interface_proto_enumTypes[0].Descriptor()
}

func (SLInterfaceState) Type() protoreflect.EnumType {
	return &file_sl_interface_proto_enumTypes[0]
}

func (x SLInterfaceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLInterfaceState.Descriptor instead.
func (SLInterfaceState) EnumDescriptor() ([]byte, []int) {
	return file_sl_interface_proto_rawDescGZIP(), []int{0}
}

// Interface Event Notification types
type SLInterfaceNotifType int32

const (
	// Reserved. 0x0
	SLInterfaceNotifType_SL_INTERFACE_EVENT_TYPE_RESERVED SLInterfaceNotifType = 0
	// Error - ErrStatus field elaborates on the error. 0x1
	SLInterfaceNotifType_SL_INTERFACE_EVENT_TYPE_ERROR SLInterfaceNotifType = 1
	// Interface attributes and state event. 0x2
	SLInterfaceNotifType_SL_INTERFACE_EVENT_TYPE_INTERFACE_INFO SLInterfaceNotifType = 2
)

// Enum value maps for SLInterfaceNotifType.
var (
	SLInterfaceNotifType_name = map[int32]string{
		0: "SL_INTERFACE_EVENT_TYPE_RESERVED",
		1: "SL_INTERFACE_EVENT_TYPE_ERROR",
		2: "SL_INTERFACE_EVENT_TYPE_INTERFACE_INFO",
	}
	SLInterfaceNotifType_value = map[string]int32{
		"SL_INTERFACE_EVENT_TYPE_RESERVED":       0,
		"SL_INTERFACE_EVENT_TYPE_ERROR":          1,
		"SL_INTERFACE_EVENT_TYPE_INTERFACE_INFO": 2,
	}
)

func (x SLInterfaceNotifType) Enum() *SLInterfaceNotifType {
	p := new(SLInterfaceNotifType)
	*p = x
	return p
}

func (x SLInterfaceNotifType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLInterfaceNotifType) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_interface_proto_enumTypes[1].Descriptor()
}

func (SLInterfaceNotifType) Type() protoreflect.EnumType {
	return &file_sl_interface_proto_enumTypes[1]
}

func (x SLInterfaceNotifType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLInterfaceNotifType.Descriptor instead.
func (SLInterfaceNotifType) EnumDescriptor() ([]byte, []int) {
	return file_sl_interface_proto_rawDescGZIP(), []int{1}
}

// Global Interface Registration Message.
// This message is used for interface global registration.
// Clients must register before using any interface service.
type SLInterfaceGlobalsRegMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Registration Operation.
	Oper SLRegOp `protobuf:"varint,1,opt,name=Oper,proto3,enum=service_layer.SLRegOp" json:"Oper,omitempty"`
}

func (x *SLInterfaceGlobalsRegMsg) Reset() {
	*x = SLInterfaceGlobalsRegMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_interface_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLInterfaceGlobalsRegMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLInterfaceGlobalsRegMsg) ProtoMessage() {}

func (x *SLInterfaceGlobalsRegMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_interface_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLInterfaceGlobalsRegMsg.ProtoReflect.Descriptor instead.
func (*SLInterfaceGlobalsRegMsg) Descriptor() ([]byte, []int) {
	return file_sl_interface_proto_rawDescGZIP(), []int{0}
}

func (x *SLInterfaceGlobalsRegMsg) GetOper() SLRegOp {
	if x != nil {
		return x.Oper
	}
	return SLRegOp_SL_REGOP_RESERVED
}

// interface registration response message.
// This message is used to convey the result of the interface registration.
type SLInterfaceGlobalsRegMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error code.
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
}

func (x *SLInterfaceGlobalsRegMsgRsp) Reset() {
	*x = SLInterfaceGlobalsRegMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_interface_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLInterfaceGlobalsRegMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLInterfaceGlobalsRegMsgRsp) ProtoMessage() {}

func (x *SLInterfaceGlobalsRegMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_interface_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLInterfaceGlobalsRegMsgRsp.ProtoReflect.Descriptor instead.
func (*SLInterfaceGlobalsRegMsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_interface_proto_rawDescGZIP(), []int{1}
}

func (x *SLInterfaceGlobalsRegMsgRsp) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

// Global Interface Get message.
// This message is used to query interface global capabilities.
type SLInterfaceGlobalsGetMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SLInterfaceGlobalsGetMsg) Reset() {
	*x = SLInterfaceGlobalsGetMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_interface_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLInterfaceGlobalsGetMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLInterfaceGlobalsGetMsg) ProtoMessage() {}

func (x *SLInterfaceGlobalsGetMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_interface_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLInterfaceGlobalsGetMsg.ProtoReflect.Descriptor instead.
func (*SLInterfaceGlobalsGetMsg) Descriptor() ([]byte, []int) {
	return file_sl_interface_proto_rawDescGZIP(), []int{2}
}

// Global interface Get response message.
// This message is used to convey the response to the global capabilities query.
type SLInterfaceGlobalsGetMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error code
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// Max interface objects within a single batch.
	MaxInterfacesPerBatch uint32 `protobuf:"varint,2,opt,name=MaxInterfacesPerBatch,proto3" json:"MaxInterfacesPerBatch,omitempty"`
}

func (x *SLInterfaceGlobalsGetMsgRsp) Reset() {
	*x = SLInterfaceGlobalsGetMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_interface_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLInterfaceGlobalsGetMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLInterfaceGlobalsGetMsgRsp) ProtoMessage() {}

func (x *SLInterfaceGlobalsGetMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_interface_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLInterfaceGlobalsGetMsgRsp.ProtoReflect.Descriptor instead.
func (*SLInterfaceGlobalsGetMsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_interface_proto_rawDescGZIP(), []int{3}
}

func (x *SLInterfaceGlobalsGetMsgRsp) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (x *SLInterfaceGlobalsGetMsgRsp) GetMaxInterfacesPerBatch() uint32 {
	if x != nil {
		return x.MaxInterfacesPerBatch
	}
	return 0
}

// Global Interface Get stats message.
// This message is used to convey the response to the interface statistics
// query.
type SLInterfaceGlobalsGetStatsMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error code
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// Global Interface event sequence number.
	// The sequence number is equivalent to a timestamp
	SeqNum uint64 `protobuf:"varint,2,opt,name=SeqNum,proto3" json:"SeqNum,omitempty"`
	// Num Interface notification requests added through the service layer.
	InterfaceNotifCount uint32 `protobuf:"varint,3,opt,name=InterfaceNotifCount,proto3" json:"InterfaceNotifCount,omitempty"`
}

func (x *SLInterfaceGlobalsGetStatsMsgRsp) Reset() {
	*x = SLInterfaceGlobalsGetStatsMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_interface_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLInterfaceGlobalsGetStatsMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLInterfaceGlobalsGetStatsMsgRsp) ProtoMessage() {}

func (x *SLInterfaceGlobalsGetStatsMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_interface_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLInterfaceGlobalsGetStatsMsgRsp.ProtoReflect.Descriptor instead.
func (*SLInterfaceGlobalsGetStatsMsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_interface_proto_rawDescGZIP(), []int{4}
}

func (x *SLInterfaceGlobalsGetStatsMsgRsp) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (x *SLInterfaceGlobalsGetStatsMsgRsp) GetSeqNum() uint64 {
	if x != nil {
		return x.SeqNum
	}
	return 0
}

func (x *SLInterfaceGlobalsGetStatsMsgRsp) GetInterfaceNotifCount() uint32 {
	if x != nil {
		return x.InterfaceNotifCount
	}
	return 0
}

// Interface Get message
type SLInterfaceGetMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface key attributes.
	// If the Key is not specified, then request up to the first
	// 'EntriesCount' entries.
	Key *SLInterface `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	// Number of entries requested
	EntriesCount uint32 `protobuf:"varint,2,opt,name=EntriesCount,proto3" json:"EntriesCount,omitempty"`
	// if GetNext is FALSE:
	//     request up to 'EntriesCount' entries starting from the key
	// If GetNext is TRUE, or if the key exact match is not found:
	//     request up to 'EntriesCount' entries starting from the key's next
	GetNext bool `protobuf:"varint,3,opt,name=GetNext,proto3" json:"GetNext,omitempty"`
}

func (x *SLInterfaceGetMsg) Reset() {
	*x = SLInterfaceGetMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_interface_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLInterfaceGetMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLInterfaceGetMsg) ProtoMessage() {}

func (x *SLInterfaceGetMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_interface_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLInterfaceGetMsg.ProtoReflect.Descriptor instead.
func (*SLInterfaceGetMsg) Descriptor() ([]byte, []int) {
	return file_sl_interface_proto_rawDescGZIP(), []int{5}
}

func (x *SLInterfaceGetMsg) GetKey() *SLInterface {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SLInterfaceGetMsg) GetEntriesCount() uint32 {
	if x != nil {
		return x.EntriesCount
	}
	return 0
}

func (x *SLInterfaceGetMsg) GetGetNext() bool {
	if x != nil {
		return x.GetNext
	}
	return false
}

// Interface Get Message result.
type SLInterfaceInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface info
	SLIfInfo *SLInterface `protobuf:"bytes,1,opt,name=SLIfInfo,proto3" json:"SLIfInfo,omitempty"`
	// Interface state
	IfState SLInterfaceState `protobuf:"varint,2,opt,name=IfState,proto3,enum=service_layer.SLInterfaceState" json:"IfState,omitempty"`
	// Global Interface event sequence number.
	// The sequence number is equivalent to a timestamp
	SeqNum uint64 `protobuf:"varint,3,opt,name=SeqNum,proto3" json:"SeqNum,omitempty"`
}

func (x *SLInterfaceInfoMsg) Reset() {
	*x = SLInterfaceInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_interface_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLInterfaceInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLInterfaceInfoMsg) ProtoMessage() {}

func (x *SLInterfaceInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_interface_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLInterfaceInfoMsg.ProtoReflect.Descriptor instead.
func (*SLInterfaceInfoMsg) Descriptor() ([]byte, []int) {
	return file_sl_interface_proto_rawDescGZIP(), []int{6}
}

func (x *SLInterfaceInfoMsg) GetSLIfInfo() *SLInterface {
	if x != nil {
		return x.SLIfInfo
	}
	return nil
}

func (x *SLInterfaceInfoMsg) GetIfState() SLInterfaceState {
	if x != nil {
		return x.IfState
	}
	return SLInterfaceState_SL_IF_STATE_UNKNOWN
}

func (x *SLInterfaceInfoMsg) GetSeqNum() uint64 {
	if x != nil {
		return x.SeqNum
	}
	return 0
}

// Interface Get Message Response.
type SLInterfaceGetMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// End Of File.
	// When set to True, it indicates that the server has returned M, where
	// M < N, of the original N requested Entries.
	Eof bool `protobuf:"varint,1,opt,name=Eof,proto3" json:"Eof,omitempty"`
	// Status of the Get operation
	ErrStatus *SLErrorStatus `protobuf:"bytes,2,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// Returned entries as requested in the Get operation.
	// if ErrStatus is SL_SUCCESS, Entries contains the info requested
	Entries []*SLInterfaceInfoMsg `protobuf:"bytes,3,rep,name=Entries,proto3" json:"Entries,omitempty"`
}

func (x *SLInterfaceGetMsgRsp) Reset() {
	*x = SLInterfaceGetMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_interface_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLInterfaceGetMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLInterfaceGetMsgRsp) ProtoMessage() {}

func (x *SLInterfaceGetMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_interface_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLInterfaceGetMsgRsp.ProtoReflect.Descriptor instead.
func (*SLInterfaceGetMsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_interface_proto_rawDescGZIP(), []int{7}
}

func (x *SLInterfaceGetMsgRsp) GetEof() bool {
	if x != nil {
		return x.Eof
	}
	return false
}

func (x *SLInterfaceGetMsgRsp) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (x *SLInterfaceGetMsgRsp) GetEntries() []*SLInterfaceInfoMsg {
	if x != nil {
		return x.Entries
	}
	return nil
}

// Interface Get Notification message.
type SLInterfaceGetNotifMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SLInterfaceGetNotifMsg) Reset() {
	*x = SLInterfaceGetNotifMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_interface_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLInterfaceGetNotifMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLInterfaceGetNotifMsg) ProtoMessage() {}

func (x *SLInterfaceGetNotifMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_interface_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLInterfaceGetNotifMsg.ProtoReflect.Descriptor instead.
func (*SLInterfaceGetNotifMsg) Descriptor() ([]byte, []int) {
	return file_sl_interface_proto_rawDescGZIP(), []int{8}
}

// Interface Notification Event.
type SLInterfaceNotif struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface Event Notification type
	EventType SLInterfaceNotifType `protobuf:"varint,1,opt,name=EventType,proto3,enum=service_layer.SLInterfaceNotifType" json:"EventType,omitempty"`
	// Further info based on EventType
	//
	// Types that are assignable to Event:
	//	*SLInterfaceNotif_ErrStatus
	//	*SLInterfaceNotif_Info
	Event isSLInterfaceNotif_Event `protobuf_oneof:"Event"`
}

func (x *SLInterfaceNotif) Reset() {
	*x = SLInterfaceNotif{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_interface_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLInterfaceNotif) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLInterfaceNotif) ProtoMessage() {}

func (x *SLInterfaceNotif) ProtoReflect() protoreflect.Message {
	mi := &file_sl_interface_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLInterfaceNotif.ProtoReflect.Descriptor instead.
func (*SLInterfaceNotif) Descriptor() ([]byte, []int) {
	return file_sl_interface_proto_rawDescGZIP(), []int{9}
}

func (x *SLInterfaceNotif) GetEventType() SLInterfaceNotifType {
	if x != nil {
		return x.EventType
	}
	return SLInterfaceNotifType_SL_INTERFACE_EVENT_TYPE_RESERVED
}

func (m *SLInterfaceNotif) GetEvent() isSLInterfaceNotif_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *SLInterfaceNotif) GetErrStatus() *SLErrorStatus {
	if x, ok := x.GetEvent().(*SLInterfaceNotif_ErrStatus); ok {
		return x.ErrStatus
	}
	return nil
}

func (x *SLInterfaceNotif) GetInfo() *SLInterfaceInfoMsg {
	if x, ok := x.GetEvent().(*SLInterfaceNotif_Info); ok {
		return x.Info
	}
	return nil
}

type isSLInterfaceNotif_Event interface {
	isSLInterfaceNotif_Event()
}

type SLInterfaceNotif_ErrStatus struct {
	// case EventType == SL_INTERFACE_EVENT_TYPE_ERROR:
	//    => This field carries error info, if any error occurs during
	//       notification subscription.
	ErrStatus *SLErrorStatus `protobuf:"bytes,2,opt,name=ErrStatus,proto3,oneof"`
}

type SLInterfaceNotif_Info struct {
	// case EventType == SL_INTERFACE_EVENT_TYPE_INTERFACE_INFO:
	//     => this field carries the session state info
	Info *SLInterfaceInfoMsg `protobuf:"bytes,3,opt,name=Info,proto3,oneof"`
}

func (*SLInterfaceNotif_ErrStatus) isSLInterfaceNotif_Event() {}

func (*SLInterfaceNotif_Info) isSLInterfaceNotif_Event() {}

// Interface Notification message.
type SLInterfaceNotifMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Notification Operation.
	Oper SLNotifOp `protobuf:"varint,1,opt,name=Oper,proto3,enum=service_layer.SLNotifOp" json:"Oper,omitempty"`
	// Interface key attributes.
	Entries []*SLInterface `protobuf:"bytes,2,rep,name=Entries,proto3" json:"Entries,omitempty"`
}

func (x *SLInterfaceNotifMsg) Reset() {
	*x = SLInterfaceNotifMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_interface_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLInterfaceNotifMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLInterfaceNotifMsg) ProtoMessage() {}

func (x *SLInterfaceNotifMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_interface_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLInterfaceNotifMsg.ProtoReflect.Descriptor instead.
func (*SLInterfaceNotifMsg) Descriptor() ([]byte, []int) {
	return file_sl_interface_proto_rawDescGZIP(), []int{10}
}

func (x *SLInterfaceNotifMsg) GetOper() SLNotifOp {
	if x != nil {
		return x.Oper
	}
	return SLNotifOp_SL_NOTIFOP_RESERVED
}

func (x *SLInterfaceNotifMsg) GetEntries() []*SLInterface {
	if x != nil {
		return x.Entries
	}
	return nil
}

// Interface Notification message result.
type SLInterfaceNotifMsgRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Corresponding error code
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// Interface key attributes.
	Key *SLInterface `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *SLInterfaceNotifMsgRes) Reset() {
	*x = SLInterfaceNotifMsgRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_interface_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLInterfaceNotifMsgRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLInterfaceNotifMsgRes) ProtoMessage() {}

func (x *SLInterfaceNotifMsgRes) ProtoReflect() protoreflect.Message {
	mi := &file_sl_interface_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLInterfaceNotifMsgRes.ProtoReflect.Descriptor instead.
func (*SLInterfaceNotifMsgRes) Descriptor() ([]byte, []int) {
	return file_sl_interface_proto_rawDescGZIP(), []int{11}
}

func (x *SLInterfaceNotifMsgRes) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (x *SLInterfaceNotifMsgRes) GetKey() *SLInterface {
	if x != nil {
		return x.Key
	}
	return nil
}

// Interface Notification message response.
type SLInterfaceNotifMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary result of the bulk operation (refer to enum SLErrorStatus)
	// In general, the StatusSummary implies one of 3 things:
	// 1. SL_SUCCESS: signifies that the entire bulk operation was successful.
	//         In this case, the Results list is empty.
	// 2. SL_SOME_ERR: signifies that the operation failed for one or more
	//         entries. In this case, Results holds the result for
	//         each individual entry in the bulk.
	// 3. SL_RPC_XXX: signifies that the entire bulk operation failed.
	//         In this case, the Results list is empty.
	StatusSummary *SLErrorStatus `protobuf:"bytes,1,opt,name=StatusSummary,proto3" json:"StatusSummary,omitempty"`
	// In case of errors, this field indicates which entry in the bulk was
	// erroneous.
	Results []*SLInterfaceNotifMsgRes `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *SLInterfaceNotifMsgRsp) Reset() {
	*x = SLInterfaceNotifMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_interface_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLInterfaceNotifMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLInterfaceNotifMsgRsp) ProtoMessage() {}

func (x *SLInterfaceNotifMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_interface_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLInterfaceNotifMsgRsp.ProtoReflect.Descriptor instead.
func (*SLInterfaceNotifMsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_interface_proto_rawDescGZIP(), []int{12}
}

func (x *SLInterfaceNotifMsgRsp) GetStatusSummary() *SLErrorStatus {
	if x != nil {
		return x.StatusSummary
	}
	return nil
}

func (x *SLInterfaceNotifMsgRsp) GetResults() []*SLInterfaceNotifMsgRes {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_sl_interface_proto protoreflect.FileDescriptor

var file_sl_interface_proto_rawDesc = []byte{
	0x0a, 0x12, 0x73, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x1a, 0x15, 0x73, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a, 0x18, 0x53, 0x4c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x65, 0x67, 0x4f, 0x70, 0x52, 0x04, 0x4f, 0x70,
	0x65, 0x72, 0x22, 0x59, 0x0a, 0x1b, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x73,
	0x70, 0x12, 0x3a, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1a, 0x0a,
	0x18, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x73, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x53, 0x4c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73,
	0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x45, 0x72, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x50, 0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x50, 0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x22, 0xa8, 0x01, 0x0a, 0x20,
	0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x73, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70,
	0x12, 0x3a, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x53, 0x65,
	0x71, 0x4e, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7f, 0x0a, 0x11, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x03, 0x4b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x12, 0x53, 0x4c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x36,
	0x0a, 0x08, 0x53, 0x4c, 0x49, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x08, 0x53, 0x4c,
	0x49, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x07, 0x49, 0x66, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x49, 0x66, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x22, 0xa1, 0x01, 0x0a, 0x14, 0x53, 0x4c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52,
	0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x45, 0x6f, 0x66, 0x12, 0x3a, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3b, 0x0a, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x18, 0x0a,
	0x16, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x4d, 0x73, 0x67, 0x22, 0xd5, 0x01, 0x0a, 0x10, 0x53, 0x4c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x12, 0x41, 0x0a, 0x09,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x48, 0x00, 0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x48, 0x00,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0x79, 0x0a, 0x13, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x4d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x4f, 0x70, 0x52, 0x04,
	0x4f, 0x70, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x53,
	0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2c, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22,
	0x9d, 0x01, 0x0a, 0x16, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x3f,
	0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2a,
	0x55, 0x0a, 0x10, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4c, 0x5f, 0x49, 0x46, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x4c, 0x5f, 0x49, 0x46, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4c, 0x5f, 0x49, 0x46, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x50, 0x10, 0x02, 0x2a, 0x8b, 0x01, 0x0a, 0x14, 0x53, 0x4c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x20, 0x53, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x4c, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x02, 0x32, 0x88, 0x05, 0x0a, 0x0f, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x6e, 0x0a, 0x17, 0x53, 0x4c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x67, 0x4f, 0x70, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x1a, 0x2a, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x6c, 0x0a, 0x15, 0x53, 0x4c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x47, 0x65,
	0x74, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x73, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x2a, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x47, 0x65, 0x74,
	0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x76, 0x0a, 0x1a, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x2f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x57,
	0x0a, 0x0e, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x65, 0x74,
	0x12, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4d,
	0x73, 0x67, 0x1a, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x65,
	0x74, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x65, 0x0a, 0x19, 0x53, 0x4c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x4d, 0x73, 0x67, 0x1a, 0x1f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x30, 0x01, 0x12, 0x5f,
	0x0a, 0x12, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x4f, 0x70, 0x12, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x4d, 0x73, 0x67, 0x1a, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sl_interface_proto_rawDescOnce sync.Once
	file_sl_interface_proto_rawDescData = file_sl_interface_proto_rawDesc
)

func file_sl_interface_proto_rawDescGZIP() []byte {
	file_sl_interface_proto_rawDescOnce.Do(func() {
		file_sl_interface_proto_rawDescData = protoimpl.X.CompressGZIP(file_sl_interface_proto_rawDescData)
	})
	return file_sl_interface_proto_rawDescData
}

var file_sl_interface_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_sl_interface_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_sl_interface_proto_goTypes = []interface{}{
	(SLInterfaceState)(0),                    // 0: service_layer.SLInterfaceState
	(SLInterfaceNotifType)(0),                // 1: service_layer.SLInterfaceNotifType
	(*SLInterfaceGlobalsRegMsg)(nil),         // 2: service_layer.SLInterfaceGlobalsRegMsg
	(*SLInterfaceGlobalsRegMsgRsp)(nil),      // 3: service_layer.SLInterfaceGlobalsRegMsgRsp
	(*SLInterfaceGlobalsGetMsg)(nil),         // 4: service_layer.SLInterfaceGlobalsGetMsg
	(*SLInterfaceGlobalsGetMsgRsp)(nil),      // 5: service_layer.SLInterfaceGlobalsGetMsgRsp
	(*SLInterfaceGlobalsGetStatsMsgRsp)(nil), // 6: service_layer.SLInterfaceGlobalsGetStatsMsgRsp
	(*SLInterfaceGetMsg)(nil),                // 7: service_layer.SLInterfaceGetMsg
	(*SLInterfaceInfoMsg)(nil),               // 8: service_layer.SLInterfaceInfoMsg
	(*SLInterfaceGetMsgRsp)(nil),             // 9: service_layer.SLInterfaceGetMsgRsp
	(*SLInterfaceGetNotifMsg)(nil),           // 10: service_layer.SLInterfaceGetNotifMsg
	(*SLInterfaceNotif)(nil),                 // 11: service_layer.SLInterfaceNotif
	(*SLInterfaceNotifMsg)(nil),              // 12: service_layer.SLInterfaceNotifMsg
	(*SLInterfaceNotifMsgRes)(nil),           // 13: service_layer.SLInterfaceNotifMsgRes
	(*SLInterfaceNotifMsgRsp)(nil),           // 14: service_layer.SLInterfaceNotifMsgRsp
	(SLRegOp)(0),                             // 15: service_layer.SLRegOp
	(*SLErrorStatus)(nil),                    // 16: service_layer.SLErrorStatus
	(*SLInterface)(nil),                      // 17: service_layer.SLInterface
	(SLNotifOp)(0),                           // 18: service_layer.SLNotifOp
}
var file_sl_interface_proto_depIdxs = []int32{
	15, // 0: service_layer.SLInterfaceGlobalsRegMsg.Oper:type_name -> service_layer.SLRegOp
	16, // 1: service_layer.SLInterfaceGlobalsRegMsgRsp.ErrStatus:type_name -> service_layer.SLErrorStatus
	16, // 2: service_layer.SLInterfaceGlobalsGetMsgRsp.ErrStatus:type_name -> service_layer.SLErrorStatus
	16, // 3: service_layer.SLInterfaceGlobalsGetStatsMsgRsp.ErrStatus:type_name -> service_layer.SLErrorStatus
	17, // 4: service_layer.SLInterfaceGetMsg.Key:type_name -> service_layer.SLInterface
	17, // 5: service_layer.SLInterfaceInfoMsg.SLIfInfo:type_name -> service_layer.SLInterface
	0,  // 6: service_layer.SLInterfaceInfoMsg.IfState:type_name -> service_layer.SLInterfaceState
	16, // 7: service_layer.SLInterfaceGetMsgRsp.ErrStatus:type_name -> service_layer.SLErrorStatus
	8,  // 8: service_layer.SLInterfaceGetMsgRsp.Entries:type_name -> service_layer.SLInterfaceInfoMsg
	1,  // 9: service_layer.SLInterfaceNotif.EventType:type_name -> service_layer.SLInterfaceNotifType
	16, // 10: service_layer.SLInterfaceNotif.ErrStatus:type_name -> service_layer.SLErrorStatus
	8,  // 11: service_layer.SLInterfaceNotif.Info:type_name -> service_layer.SLInterfaceInfoMsg
	18, // 12: service_layer.SLInterfaceNotifMsg.Oper:type_name -> service_layer.SLNotifOp
	17, // 13: service_layer.SLInterfaceNotifMsg.Entries:type_name -> service_layer.SLInterface
	16, // 14: service_layer.SLInterfaceNotifMsgRes.ErrStatus:type_name -> service_layer.SLErrorStatus
	17, // 15: service_layer.SLInterfaceNotifMsgRes.Key:type_name -> service_layer.SLInterface
	16, // 16: service_layer.SLInterfaceNotifMsgRsp.StatusSummary:type_name -> service_layer.SLErrorStatus
	13, // 17: service_layer.SLInterfaceNotifMsgRsp.Results:type_name -> service_layer.SLInterfaceNotifMsgRes
	2,  // 18: service_layer.SLInterfaceOper.SLInterfaceGlobalsRegOp:input_type -> service_layer.SLInterfaceGlobalsRegMsg
	4,  // 19: service_layer.SLInterfaceOper.SLInterfaceGlobalsGet:input_type -> service_layer.SLInterfaceGlobalsGetMsg
	4,  // 20: service_layer.SLInterfaceOper.SLInterfaceGlobalsGetStats:input_type -> service_layer.SLInterfaceGlobalsGetMsg
	7,  // 21: service_layer.SLInterfaceOper.SLInterfaceGet:input_type -> service_layer.SLInterfaceGetMsg
	10, // 22: service_layer.SLInterfaceOper.SLInterfaceGetNotifStream:input_type -> service_layer.SLInterfaceGetNotifMsg
	12, // 23: service_layer.SLInterfaceOper.SLInterfaceNotifOp:input_type -> service_layer.SLInterfaceNotifMsg
	3,  // 24: service_layer.SLInterfaceOper.SLInterfaceGlobalsRegOp:output_type -> service_layer.SLInterfaceGlobalsRegMsgRsp
	5,  // 25: service_layer.SLInterfaceOper.SLInterfaceGlobalsGet:output_type -> service_layer.SLInterfaceGlobalsGetMsgRsp
	6,  // 26: service_layer.SLInterfaceOper.SLInterfaceGlobalsGetStats:output_type -> service_layer.SLInterfaceGlobalsGetStatsMsgRsp
	9,  // 27: service_layer.SLInterfaceOper.SLInterfaceGet:output_type -> service_layer.SLInterfaceGetMsgRsp
	11, // 28: service_layer.SLInterfaceOper.SLInterfaceGetNotifStream:output_type -> service_layer.SLInterfaceNotif
	14, // 29: service_layer.SLInterfaceOper.SLInterfaceNotifOp:output_type -> service_layer.SLInterfaceNotifMsgRsp
	24, // [24:30] is the sub-list for method output_type
	18, // [18:24] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_sl_interface_proto_init() }
func file_sl_interface_proto_init() {
	if File_sl_interface_proto != nil {
		return
	}
	file_sl_common_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sl_interface_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLInterfaceGlobalsRegMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_interface_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLInterfaceGlobalsRegMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_interface_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLInterfaceGlobalsGetMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_interface_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLInterfaceGlobalsGetMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_interface_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLInterfaceGlobalsGetStatsMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_interface_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLInterfaceGetMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_interface_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLInterfaceInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_interface_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLInterfaceGetMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_interface_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLInterfaceGetNotifMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_interface_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLInterfaceNotif); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_interface_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLInterfaceNotifMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_interface_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLInterfaceNotifMsgRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_interface_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLInterfaceNotifMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sl_interface_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*SLInterfaceNotif_ErrStatus)(nil),
		(*SLInterfaceNotif_Info)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sl_interface_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sl_interface_proto_goTypes,
		DependencyIndexes: file_sl_interface_proto_depIdxs,
		EnumInfos:         file_sl_interface_proto_enumTypes,
		MessageInfos:      file_sl_interface_proto_msgTypes,
	}.Build()
	File_sl_interface_proto = out.File
	file_sl_interface_proto_rawDesc = nil
	file_sl_interface_proto_goTypes = nil
	file_sl_interface_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SLInterfaceOperClient is the client API for SLInterfaceOper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SLInterfaceOperClient interface {
	// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_REGISTER:
	//     Global Interface registration.
	//     A client Must Register BEFORE interfaces can be modified/queried.
	//
	// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_UNREGISTER:
	//     Global Interface un-registration.
	//     This call is used to end all interface notifications.
	//     This call cleans up all interface notifications previously requested.
	//
	// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_EOF:
	//     Interface End Of File.
	//     After Registration, the client is expected to send an EOF
	//     message to convey the end of replay of the client's known objects.
	//     This is especially useful under certain restart scenarios when the
	//     client and the server are trying to synchronize their interfaces.
	SLInterfaceGlobalsRegOp(ctx context.Context, in *SLInterfaceGlobalsRegMsg, opts ...grpc.CallOption) (*SLInterfaceGlobalsRegMsgRsp, error)
	// Used to retrieve global Interface info from the server.
	SLInterfaceGlobalsGet(ctx context.Context, in *SLInterfaceGlobalsGetMsg, opts ...grpc.CallOption) (*SLInterfaceGlobalsGetMsgRsp, error)
	// Used to retrieve global Interface stats from the server.
	SLInterfaceGlobalsGetStats(ctx context.Context, in *SLInterfaceGlobalsGetMsg, opts ...grpc.CallOption) (*SLInterfaceGlobalsGetStatsMsgRsp, error)
	// Retrieve interface attributes and state.
	// This call can be used to "poll" the current state of interfaces.
	SLInterfaceGet(ctx context.Context, in *SLInterfaceGetMsg, opts ...grpc.CallOption) (*SLInterfaceGetMsgRsp, error)
	// This call is used to get a stream of interface notifications.
	// The caller must maintain the GRPC channel as long as
	// there is interest in interface notifications.
	// This call can be used to get "push" notifications for interface info.
	// It is advised that the caller register for notifications before any
	// interfaces are used to avoid any loss of notifications.
	SLInterfaceGetNotifStream(ctx context.Context, in *SLInterfaceGetNotifMsg, opts ...grpc.CallOption) (SLInterfaceOper_SLInterfaceGetNotifStreamClient, error)
	// Used to enable/disable event notifications for a certain interface.
	// By default, all interface events are disabled. The user must enable
	// notifications for the interested interfaces.
	SLInterfaceNotifOp(ctx context.Context, in *SLInterfaceNotifMsg, opts ...grpc.CallOption) (*SLInterfaceNotifMsgRsp, error)
}

type sLInterfaceOperClient struct {
	cc grpc.ClientConnInterface
}

func NewSLInterfaceOperClient(cc grpc.ClientConnInterface) SLInterfaceOperClient {
	return &sLInterfaceOperClient{cc}
}

func (c *sLInterfaceOperClient) SLInterfaceGlobalsRegOp(ctx context.Context, in *SLInterfaceGlobalsRegMsg, opts ...grpc.CallOption) (*SLInterfaceGlobalsRegMsgRsp, error) {
	out := new(SLInterfaceGlobalsRegMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLInterfaceOper/SLInterfaceGlobalsRegOp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLInterfaceOperClient) SLInterfaceGlobalsGet(ctx context.Context, in *SLInterfaceGlobalsGetMsg, opts ...grpc.CallOption) (*SLInterfaceGlobalsGetMsgRsp, error) {
	out := new(SLInterfaceGlobalsGetMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLInterfaceOper/SLInterfaceGlobalsGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLInterfaceOperClient) SLInterfaceGlobalsGetStats(ctx context.Context, in *SLInterfaceGlobalsGetMsg, opts ...grpc.CallOption) (*SLInterfaceGlobalsGetStatsMsgRsp, error) {
	out := new(SLInterfaceGlobalsGetStatsMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLInterfaceOper/SLInterfaceGlobalsGetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLInterfaceOperClient) SLInterfaceGet(ctx context.Context, in *SLInterfaceGetMsg, opts ...grpc.CallOption) (*SLInterfaceGetMsgRsp, error) {
	out := new(SLInterfaceGetMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLInterfaceOper/SLInterfaceGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLInterfaceOperClient) SLInterfaceGetNotifStream(ctx context.Context, in *SLInterfaceGetNotifMsg, opts ...grpc.CallOption) (SLInterfaceOper_SLInterfaceGetNotifStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SLInterfaceOper_serviceDesc.Streams[0], "/service_layer.SLInterfaceOper/SLInterfaceGetNotifStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sLInterfaceOperSLInterfaceGetNotifStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SLInterfaceOper_SLInterfaceGetNotifStreamClient interface {
	Recv() (*SLInterfaceNotif, error)
	grpc.ClientStream
}

type sLInterfaceOperSLInterfaceGetNotifStreamClient struct {
	grpc.ClientStream
}

func (x *sLInterfaceOperSLInterfaceGetNotifStreamClient) Recv() (*SLInterfaceNotif, error) {
	m := new(SLInterfaceNotif)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sLInterfaceOperClient) SLInterfaceNotifOp(ctx context.Context, in *SLInterfaceNotifMsg, opts ...grpc.CallOption) (*SLInterfaceNotifMsgRsp, error) {
	out := new(SLInterfaceNotifMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLInterfaceOper/SLInterfaceNotifOp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SLInterfaceOperServer is the server API for SLInterfaceOper service.
type SLInterfaceOperServer interface {
	// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_REGISTER:
	//     Global Interface registration.
	//     A client Must Register BEFORE interfaces can be modified/queried.
	//
	// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_UNREGISTER:
	//     Global Interface un-registration.
	//     This call is used to end all interface notifications.
	//     This call cleans up all interface notifications previously requested.
	//
	// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_EOF:
	//     Interface End Of File.
	//     After Registration, the client is expected to send an EOF
	//     message to convey the end of replay of the client's known objects.
	//     This is especially useful under certain restart scenarios when the
	//     client and the server are trying to synchronize their interfaces.
	SLInterfaceGlobalsRegOp(context.Context, *SLInterfaceGlobalsRegMsg) (*SLInterfaceGlobalsRegMsgRsp, error)
	// Used to retrieve global Interface info from the server.
	SLInterfaceGlobalsGet(context.Context, *SLInterfaceGlobalsGetMsg) (*SLInterfaceGlobalsGetMsgRsp, error)
	// Used to retrieve global Interface stats from the server.
	SLInterfaceGlobalsGetStats(context.Context, *SLInterfaceGlobalsGetMsg) (*SLInterfaceGlobalsGetStatsMsgRsp, error)
	// Retrieve interface attributes and state.
	// This call can be used to "poll" the current state of interfaces.
	SLInterfaceGet(context.Context, *SLInterfaceGetMsg) (*SLInterfaceGetMsgRsp, error)
	// This call is used to get a stream of interface notifications.
	// The caller must maintain the GRPC channel as long as
	// there is interest in interface notifications.
	// This call can be used to get "push" notifications for interface info.
	// It is advised that the caller register for notifications before any
	// interfaces are used to avoid any loss of notifications.
	SLInterfaceGetNotifStream(*SLInterfaceGetNotifMsg, SLInterfaceOper_SLInterfaceGetNotifStreamServer) error
	// Used to enable/disable event notifications for a certain interface.
	// By default, all interface events are disabled. The user must enable
	// notifications for the interested interfaces.
	SLInterfaceNotifOp(context.Context, *SLInterfaceNotifMsg) (*SLInterfaceNotifMsgRsp, error)
}

// UnimplementedSLInterfaceOperServer can be embedded to have forward compatible implementations.
type UnimplementedSLInterfaceOperServer struct {
}

func (*UnimplementedSLInterfaceOperServer) SLInterfaceGlobalsRegOp(context.Context, *SLInterfaceGlobalsRegMsg) (*SLInterfaceGlobalsRegMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLInterfaceGlobalsRegOp not implemented")
}
func (*UnimplementedSLInterfaceOperServer) SLInterfaceGlobalsGet(context.Context, *SLInterfaceGlobalsGetMsg) (*SLInterfaceGlobalsGetMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLInterfaceGlobalsGet not implemented")
}
func (*UnimplementedSLInterfaceOperServer) SLInterfaceGlobalsGetStats(context.Context, *SLInterfaceGlobalsGetMsg) (*SLInterfaceGlobalsGetStatsMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLInterfaceGlobalsGetStats not implemented")
}
func (*UnimplementedSLInterfaceOperServer) SLInterfaceGet(context.Context, *SLInterfaceGetMsg) (*SLInterfaceGetMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLInterfaceGet not implemented")
}
func (*UnimplementedSLInterfaceOperServer) SLInterfaceGetNotifStream(*SLInterfaceGetNotifMsg, SLInterfaceOper_SLInterfaceGetNotifStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SLInterfaceGetNotifStream not implemented")
}
func (*UnimplementedSLInterfaceOperServer) SLInterfaceNotifOp(context.Context, *SLInterfaceNotifMsg) (*SLInterfaceNotifMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLInterfaceNotifOp not implemented")
}

func RegisterSLInterfaceOperServer(s *grpc.Server, srv SLInterfaceOperServer) {
	s.RegisterService(&_SLInterfaceOper_serviceDesc, srv)
}

func _SLInterfaceOper_SLInterfaceGlobalsRegOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLInterfaceGlobalsRegMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLInterfaceOperServer).SLInterfaceGlobalsRegOp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLInterfaceOper/SLInterfaceGlobalsRegOp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLInterfaceOperServer).SLInterfaceGlobalsRegOp(ctx, req.(*SLInterfaceGlobalsRegMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLInterfaceOper_SLInterfaceGlobalsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLInterfaceGlobalsGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLInterfaceOperServer).SLInterfaceGlobalsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLInterfaceOper/SLInterfaceGlobalsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLInterfaceOperServer).SLInterfaceGlobalsGet(ctx, req.(*SLInterfaceGlobalsGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLInterfaceOper_SLInterfaceGlobalsGetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLInterfaceGlobalsGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLInterfaceOperServer).SLInterfaceGlobalsGetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLInterfaceOper/SLInterfaceGlobalsGetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLInterfaceOperServer).SLInterfaceGlobalsGetStats(ctx, req.(*SLInterfaceGlobalsGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLInterfaceOper_SLInterfaceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLInterfaceGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLInterfaceOperServer).SLInterfaceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLInterfaceOper/SLInterfaceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLInterfaceOperServer).SLInterfaceGet(ctx, req.(*SLInterfaceGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLInterfaceOper_SLInterfaceGetNotifStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SLInterfaceGetNotifMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SLInterfaceOperServer).SLInterfaceGetNotifStream(m, &sLInterfaceOperSLInterfaceGetNotifStreamServer{stream})
}

type SLInterfaceOper_SLInterfaceGetNotifStreamServer interface {
	Send(*SLInterfaceNotif) error
	grpc.ServerStream
}

type sLInterfaceOperSLInterfaceGetNotifStreamServer struct {
	grpc.ServerStream
}

func (x *sLInterfaceOperSLInterfaceGetNotifStreamServer) Send(m *SLInterfaceNotif) error {
	return x.ServerStream.SendMsg(m)
}

func _SLInterfaceOper_SLInterfaceNotifOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLInterfaceNotifMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLInterfaceOperServer).SLInterfaceNotifOp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLInterfaceOper/SLInterfaceNotifOp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLInterfaceOperServer).SLInterfaceNotifOp(ctx, req.(*SLInterfaceNotifMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _SLInterfaceOper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service_layer.SLInterfaceOper",
	HandlerType: (*SLInterfaceOperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SLInterfaceGlobalsRegOp",
			Handler:    _SLInterfaceOper_SLInterfaceGlobalsRegOp_Handler,
		},
		{
			MethodName: "SLInterfaceGlobalsGet",
			Handler:    _SLInterfaceOper_SLInterfaceGlobalsGet_Handler,
		},
		{
			MethodName: "SLInterfaceGlobalsGetStats",
			Handler:    _SLInterfaceOper_SLInterfaceGlobalsGetStats_Handler,
		},
		{
			MethodName: "SLInterfaceGet",
			Handler:    _SLInterfaceOper_SLInterfaceGet_Handler,
		},
		{
			MethodName: "SLInterfaceNotifOp",
			Handler:    _SLInterfaceOper_SLInterfaceNotifOp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SLInterfaceGetNotifStream",
			Handler:       _SLInterfaceOper_SLInterfaceGetNotifStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sl_interface.proto",
}
