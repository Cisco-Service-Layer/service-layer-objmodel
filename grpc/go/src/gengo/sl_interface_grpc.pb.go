// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.3
// source: sl_interface.proto

package service_layer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SLInterfaceOperClient is the client API for SLInterfaceOper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SLInterfaceOperClient interface {
	// This call is used to get a stream of interface notifications.
	// The caller must maintain the GRPC channel as long as
	// there is interest in interface notifications.
	// This call can be used to get "push" notifications for interface info.
	// It is advised that the caller register for notifications before any
	// interfaces are used to avoid any loss of notifications.
	SLInterfaceNotifStream(ctx context.Context, opts ...grpc.CallOption) (SLInterfaceOper_SLInterfaceNotifStreamClient, error)
}

type sLInterfaceOperClient struct {
	cc grpc.ClientConnInterface
}

func NewSLInterfaceOperClient(cc grpc.ClientConnInterface) SLInterfaceOperClient {
	return &sLInterfaceOperClient{cc}
}

func (c *sLInterfaceOperClient) SLInterfaceNotifStream(ctx context.Context, opts ...grpc.CallOption) (SLInterfaceOper_SLInterfaceNotifStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SLInterfaceOper_ServiceDesc.Streams[0], "/service_layer.SLInterfaceOper/SLInterfaceNotifStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sLInterfaceOperSLInterfaceNotifStreamClient{stream}
	return x, nil
}

type SLInterfaceOper_SLInterfaceNotifStreamClient interface {
	Send(*SLInterfaceNotifMsg) error
	Recv() (*SLInterfaceNotif, error)
	grpc.ClientStream
}

type sLInterfaceOperSLInterfaceNotifStreamClient struct {
	grpc.ClientStream
}

func (x *sLInterfaceOperSLInterfaceNotifStreamClient) Send(m *SLInterfaceNotifMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sLInterfaceOperSLInterfaceNotifStreamClient) Recv() (*SLInterfaceNotif, error) {
	m := new(SLInterfaceNotif)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SLInterfaceOperServer is the server API for SLInterfaceOper service.
// All implementations must embed UnimplementedSLInterfaceOperServer
// for forward compatibility
type SLInterfaceOperServer interface {
	// This call is used to get a stream of interface notifications.
	// The caller must maintain the GRPC channel as long as
	// there is interest in interface notifications.
	// This call can be used to get "push" notifications for interface info.
	// It is advised that the caller register for notifications before any
	// interfaces are used to avoid any loss of notifications.
	SLInterfaceNotifStream(SLInterfaceOper_SLInterfaceNotifStreamServer) error
	mustEmbedUnimplementedSLInterfaceOperServer()
}

// UnimplementedSLInterfaceOperServer must be embedded to have forward compatible implementations.
type UnimplementedSLInterfaceOperServer struct {
}

func (UnimplementedSLInterfaceOperServer) SLInterfaceNotifStream(SLInterfaceOper_SLInterfaceNotifStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SLInterfaceNotifStream not implemented")
}
func (UnimplementedSLInterfaceOperServer) mustEmbedUnimplementedSLInterfaceOperServer() {}

// UnsafeSLInterfaceOperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SLInterfaceOperServer will
// result in compilation errors.
type UnsafeSLInterfaceOperServer interface {
	mustEmbedUnimplementedSLInterfaceOperServer()
}

func RegisterSLInterfaceOperServer(s grpc.ServiceRegistrar, srv SLInterfaceOperServer) {
	s.RegisterService(&SLInterfaceOper_ServiceDesc, srv)
}

func _SLInterfaceOper_SLInterfaceNotifStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SLInterfaceOperServer).SLInterfaceNotifStream(&sLInterfaceOperSLInterfaceNotifStreamServer{stream})
}

type SLInterfaceOper_SLInterfaceNotifStreamServer interface {
	Send(*SLInterfaceNotif) error
	Recv() (*SLInterfaceNotifMsg, error)
	grpc.ServerStream
}

type sLInterfaceOperSLInterfaceNotifStreamServer struct {
	grpc.ServerStream
}

func (x *sLInterfaceOperSLInterfaceNotifStreamServer) Send(m *SLInterfaceNotif) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sLInterfaceOperSLInterfaceNotifStreamServer) Recv() (*SLInterfaceNotifMsg, error) {
	m := new(SLInterfaceNotifMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SLInterfaceOper_ServiceDesc is the grpc.ServiceDesc for SLInterfaceOper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SLInterfaceOper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service_layer.SLInterfaceOper",
	HandlerType: (*SLInterfaceOperServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SLInterfaceNotifStream",
			Handler:       _SLInterfaceOper_SLInterfaceNotifStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sl_interface.proto",
}
