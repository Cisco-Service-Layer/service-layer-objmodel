// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: sl_interface.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SLInterfaceOperClient is the client API for SLInterfaceOper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SLInterfaceOperClient interface {
	// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_REGISTER:
	//
	//	Global Interface registration.
	//	A client Must Register BEFORE interfaces can be modified/queried.
	//
	// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_UNREGISTER:
	//
	//	Global Interface un-registration.
	//	This call is used to end all interface notifications.
	//	This call cleans up all interface notifications previously requested.
	//
	// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_EOF:
	//
	//	Interface End Of File.
	//	After Registration, the client is expected to send an EOF
	//	message to convey the end of replay of the client's known objects.
	//	This is especially useful under certain restart scenarios when the
	//	client and the server are trying to synchronize their interfaces.
	SLInterfaceGlobalsRegOp(ctx context.Context, in *SLInterfaceGlobalsRegMsg, opts ...grpc.CallOption) (*SLInterfaceGlobalsRegMsgRsp, error)
	// Used to retrieve global Interface info from the server.
	SLInterfaceGlobalsGet(ctx context.Context, in *SLInterfaceGlobalsGetMsg, opts ...grpc.CallOption) (*SLInterfaceGlobalsGetMsgRsp, error)
	// Used to retrieve global Interface stats from the server.
	SLInterfaceGlobalsGetStats(ctx context.Context, in *SLInterfaceGlobalsGetMsg, opts ...grpc.CallOption) (*SLInterfaceGlobalsGetStatsMsgRsp, error)
	// Retrieve interface attributes and state.
	// This call can be used to "poll" the current state of interfaces.
	SLInterfaceGet(ctx context.Context, in *SLInterfaceGetMsg, opts ...grpc.CallOption) (*SLInterfaceGetMsgRsp, error)
	// This call is used to get a stream of interface notifications.
	// The caller must maintain the GRPC channel as long as
	// there is interest in interface notifications.
	// This call can be used to get "push" notifications for interface info.
	// It is advised that the caller register for notifications before any
	// interfaces are used to avoid any loss of notifications.
	SLInterfaceGetNotifStream(ctx context.Context, in *SLInterfaceGetNotifMsg, opts ...grpc.CallOption) (SLInterfaceOper_SLInterfaceGetNotifStreamClient, error)
	// Used to enable/disable event notifications for a certain interface.
	// By default, all interface events are disabled. The user must enable
	// notifications for the interested interfaces.
	SLInterfaceNotifOp(ctx context.Context, in *SLInterfaceNotifMsg, opts ...grpc.CallOption) (*SLInterfaceNotifMsgRsp, error)
}

type sLInterfaceOperClient struct {
	cc grpc.ClientConnInterface
}

func NewSLInterfaceOperClient(cc grpc.ClientConnInterface) SLInterfaceOperClient {
	return &sLInterfaceOperClient{cc}
}

func (c *sLInterfaceOperClient) SLInterfaceGlobalsRegOp(ctx context.Context, in *SLInterfaceGlobalsRegMsg, opts ...grpc.CallOption) (*SLInterfaceGlobalsRegMsgRsp, error) {
	out := new(SLInterfaceGlobalsRegMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLInterfaceOper/SLInterfaceGlobalsRegOp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLInterfaceOperClient) SLInterfaceGlobalsGet(ctx context.Context, in *SLInterfaceGlobalsGetMsg, opts ...grpc.CallOption) (*SLInterfaceGlobalsGetMsgRsp, error) {
	out := new(SLInterfaceGlobalsGetMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLInterfaceOper/SLInterfaceGlobalsGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLInterfaceOperClient) SLInterfaceGlobalsGetStats(ctx context.Context, in *SLInterfaceGlobalsGetMsg, opts ...grpc.CallOption) (*SLInterfaceGlobalsGetStatsMsgRsp, error) {
	out := new(SLInterfaceGlobalsGetStatsMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLInterfaceOper/SLInterfaceGlobalsGetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLInterfaceOperClient) SLInterfaceGet(ctx context.Context, in *SLInterfaceGetMsg, opts ...grpc.CallOption) (*SLInterfaceGetMsgRsp, error) {
	out := new(SLInterfaceGetMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLInterfaceOper/SLInterfaceGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLInterfaceOperClient) SLInterfaceGetNotifStream(ctx context.Context, in *SLInterfaceGetNotifMsg, opts ...grpc.CallOption) (SLInterfaceOper_SLInterfaceGetNotifStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SLInterfaceOper_ServiceDesc.Streams[0], "/service_layer.SLInterfaceOper/SLInterfaceGetNotifStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sLInterfaceOperSLInterfaceGetNotifStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SLInterfaceOper_SLInterfaceGetNotifStreamClient interface {
	Recv() (*SLInterfaceNotif, error)
	grpc.ClientStream
}

type sLInterfaceOperSLInterfaceGetNotifStreamClient struct {
	grpc.ClientStream
}

func (x *sLInterfaceOperSLInterfaceGetNotifStreamClient) Recv() (*SLInterfaceNotif, error) {
	m := new(SLInterfaceNotif)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sLInterfaceOperClient) SLInterfaceNotifOp(ctx context.Context, in *SLInterfaceNotifMsg, opts ...grpc.CallOption) (*SLInterfaceNotifMsgRsp, error) {
	out := new(SLInterfaceNotifMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLInterfaceOper/SLInterfaceNotifOp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SLInterfaceOperServer is the server API for SLInterfaceOper service.
// All implementations must embed UnimplementedSLInterfaceOperServer
// for forward compatibility
type SLInterfaceOperServer interface {
	// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_REGISTER:
	//
	//	Global Interface registration.
	//	A client Must Register BEFORE interfaces can be modified/queried.
	//
	// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_UNREGISTER:
	//
	//	Global Interface un-registration.
	//	This call is used to end all interface notifications.
	//	This call cleans up all interface notifications previously requested.
	//
	// SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_EOF:
	//
	//	Interface End Of File.
	//	After Registration, the client is expected to send an EOF
	//	message to convey the end of replay of the client's known objects.
	//	This is especially useful under certain restart scenarios when the
	//	client and the server are trying to synchronize their interfaces.
	SLInterfaceGlobalsRegOp(context.Context, *SLInterfaceGlobalsRegMsg) (*SLInterfaceGlobalsRegMsgRsp, error)
	// Used to retrieve global Interface info from the server.
	SLInterfaceGlobalsGet(context.Context, *SLInterfaceGlobalsGetMsg) (*SLInterfaceGlobalsGetMsgRsp, error)
	// Used to retrieve global Interface stats from the server.
	SLInterfaceGlobalsGetStats(context.Context, *SLInterfaceGlobalsGetMsg) (*SLInterfaceGlobalsGetStatsMsgRsp, error)
	// Retrieve interface attributes and state.
	// This call can be used to "poll" the current state of interfaces.
	SLInterfaceGet(context.Context, *SLInterfaceGetMsg) (*SLInterfaceGetMsgRsp, error)
	// This call is used to get a stream of interface notifications.
	// The caller must maintain the GRPC channel as long as
	// there is interest in interface notifications.
	// This call can be used to get "push" notifications for interface info.
	// It is advised that the caller register for notifications before any
	// interfaces are used to avoid any loss of notifications.
	SLInterfaceGetNotifStream(*SLInterfaceGetNotifMsg, SLInterfaceOper_SLInterfaceGetNotifStreamServer) error
	// Used to enable/disable event notifications for a certain interface.
	// By default, all interface events are disabled. The user must enable
	// notifications for the interested interfaces.
	SLInterfaceNotifOp(context.Context, *SLInterfaceNotifMsg) (*SLInterfaceNotifMsgRsp, error)
	mustEmbedUnimplementedSLInterfaceOperServer()
}

// UnimplementedSLInterfaceOperServer must be embedded to have forward compatible implementations.
type UnimplementedSLInterfaceOperServer struct {
}

func (UnimplementedSLInterfaceOperServer) SLInterfaceGlobalsRegOp(context.Context, *SLInterfaceGlobalsRegMsg) (*SLInterfaceGlobalsRegMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLInterfaceGlobalsRegOp not implemented")
}
func (UnimplementedSLInterfaceOperServer) SLInterfaceGlobalsGet(context.Context, *SLInterfaceGlobalsGetMsg) (*SLInterfaceGlobalsGetMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLInterfaceGlobalsGet not implemented")
}
func (UnimplementedSLInterfaceOperServer) SLInterfaceGlobalsGetStats(context.Context, *SLInterfaceGlobalsGetMsg) (*SLInterfaceGlobalsGetStatsMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLInterfaceGlobalsGetStats not implemented")
}
func (UnimplementedSLInterfaceOperServer) SLInterfaceGet(context.Context, *SLInterfaceGetMsg) (*SLInterfaceGetMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLInterfaceGet not implemented")
}
func (UnimplementedSLInterfaceOperServer) SLInterfaceGetNotifStream(*SLInterfaceGetNotifMsg, SLInterfaceOper_SLInterfaceGetNotifStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SLInterfaceGetNotifStream not implemented")
}
func (UnimplementedSLInterfaceOperServer) SLInterfaceNotifOp(context.Context, *SLInterfaceNotifMsg) (*SLInterfaceNotifMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLInterfaceNotifOp not implemented")
}
func (UnimplementedSLInterfaceOperServer) mustEmbedUnimplementedSLInterfaceOperServer() {}

// UnsafeSLInterfaceOperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SLInterfaceOperServer will
// result in compilation errors.
type UnsafeSLInterfaceOperServer interface {
	mustEmbedUnimplementedSLInterfaceOperServer()
}

func RegisterSLInterfaceOperServer(s grpc.ServiceRegistrar, srv SLInterfaceOperServer) {
	s.RegisterService(&SLInterfaceOper_ServiceDesc, srv)
}

func _SLInterfaceOper_SLInterfaceGlobalsRegOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLInterfaceGlobalsRegMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLInterfaceOperServer).SLInterfaceGlobalsRegOp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLInterfaceOper/SLInterfaceGlobalsRegOp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLInterfaceOperServer).SLInterfaceGlobalsRegOp(ctx, req.(*SLInterfaceGlobalsRegMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLInterfaceOper_SLInterfaceGlobalsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLInterfaceGlobalsGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLInterfaceOperServer).SLInterfaceGlobalsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLInterfaceOper/SLInterfaceGlobalsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLInterfaceOperServer).SLInterfaceGlobalsGet(ctx, req.(*SLInterfaceGlobalsGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLInterfaceOper_SLInterfaceGlobalsGetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLInterfaceGlobalsGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLInterfaceOperServer).SLInterfaceGlobalsGetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLInterfaceOper/SLInterfaceGlobalsGetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLInterfaceOperServer).SLInterfaceGlobalsGetStats(ctx, req.(*SLInterfaceGlobalsGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLInterfaceOper_SLInterfaceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLInterfaceGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLInterfaceOperServer).SLInterfaceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLInterfaceOper/SLInterfaceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLInterfaceOperServer).SLInterfaceGet(ctx, req.(*SLInterfaceGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLInterfaceOper_SLInterfaceGetNotifStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SLInterfaceGetNotifMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SLInterfaceOperServer).SLInterfaceGetNotifStream(m, &sLInterfaceOperSLInterfaceGetNotifStreamServer{stream})
}

type SLInterfaceOper_SLInterfaceGetNotifStreamServer interface {
	Send(*SLInterfaceNotif) error
	grpc.ServerStream
}

type sLInterfaceOperSLInterfaceGetNotifStreamServer struct {
	grpc.ServerStream
}

func (x *sLInterfaceOperSLInterfaceGetNotifStreamServer) Send(m *SLInterfaceNotif) error {
	return x.ServerStream.SendMsg(m)
}

func _SLInterfaceOper_SLInterfaceNotifOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLInterfaceNotifMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLInterfaceOperServer).SLInterfaceNotifOp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLInterfaceOper/SLInterfaceNotifOp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLInterfaceOperServer).SLInterfaceNotifOp(ctx, req.(*SLInterfaceNotifMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// SLInterfaceOper_ServiceDesc is the grpc.ServiceDesc for SLInterfaceOper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SLInterfaceOper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service_layer.SLInterfaceOper",
	HandlerType: (*SLInterfaceOperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SLInterfaceGlobalsRegOp",
			Handler:    _SLInterfaceOper_SLInterfaceGlobalsRegOp_Handler,
		},
		{
			MethodName: "SLInterfaceGlobalsGet",
			Handler:    _SLInterfaceOper_SLInterfaceGlobalsGet_Handler,
		},
		{
			MethodName: "SLInterfaceGlobalsGetStats",
			Handler:    _SLInterfaceOper_SLInterfaceGlobalsGetStats_Handler,
		},
		{
			MethodName: "SLInterfaceGet",
			Handler:    _SLInterfaceOper_SLInterfaceGet_Handler,
		},
		{
			MethodName: "SLInterfaceNotifOp",
			Handler:    _SLInterfaceOper_SLInterfaceNotifOp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SLInterfaceGetNotifStream",
			Handler:       _SLInterfaceOper_SLInterfaceGetNotifStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sl_interface.proto",
}
