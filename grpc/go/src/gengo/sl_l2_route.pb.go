// @file
// @brief Server RPC proto file for L2 routes.
//
// ----------------------------------------------------------------
//  Copyright (c) 2016 by cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.1
// source: sl_l2_route.proto

package service_layer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// L2 Route Types that can be programmed by client.
type SLL2RouteType int32

const (
	// Reserved. 0x0
	SLL2RouteType_SL_L2_ROUTE_RESERVED SLL2RouteType = 0
	// Mac-IP route. 0x1
	SLL2RouteType_SL_L2_ROUTE_MAC SLL2RouteType = 1
	// Inclusive Multicast Ethernet Tag (IMET) route. 0x2
	SLL2RouteType_SL_L2_ROUTE_IMET SLL2RouteType = 2
)

// Enum value maps for SLL2RouteType.
var (
	SLL2RouteType_name = map[int32]string{
		0: "SL_L2_ROUTE_RESERVED",
		1: "SL_L2_ROUTE_MAC",
		2: "SL_L2_ROUTE_IMET",
	}
	SLL2RouteType_value = map[string]int32{
		"SL_L2_ROUTE_RESERVED": 0,
		"SL_L2_ROUTE_MAC":      1,
		"SL_L2_ROUTE_IMET":     2,
	}
)

func (x SLL2RouteType) Enum() *SLL2RouteType {
	p := new(SLL2RouteType)
	*p = x
	return p
}

func (x SLL2RouteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLL2RouteType) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_l2_route_proto_enumTypes[0].Descriptor()
}

func (SLL2RouteType) Type() protoreflect.EnumType {
	return &file_sl_l2_route_proto_enumTypes[0]
}

func (x SLL2RouteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLL2RouteType.Descriptor instead.
func (SLL2RouteType) EnumDescriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{0}
}

// L2 Notification types
type SLL2NotifType int32

const (
	// Reserved.
	SLL2NotifType_SL_L2_EVENT_TYPE_RESERVED SLL2NotifType = 0
	// Error - ErrStatus field elaborates on the error.
	// The client can decide to close the stream based on the error.
	SLL2NotifType_SL_L2_EVENT_TYPE_ERROR SLL2NotifType = 1
	// Status of GetNotifMsg.
	// NotifStatus field elaborates on the result
	// If the GetNotifMsg is per-BD and there was an error, only the
	// notification for the BD in the status message is not setup.
	SLL2NotifType_SL_L2_EVENT_TYPE_STATUS SLL2NotifType = 2
	// Start marker - sent before any notification is sent.
	// This is an indication to stale any objects received until now.
	SLL2NotifType_SL_L2_EVENT_TYPE_START_MARKER SLL2NotifType = 3
	// BD configuration notification
	SLL2NotifType_SL_L2_EVENT_TYPE_BD_STATE SLL2NotifType = 4
	// End marker for BD configuration notifications.
	// This is an indication to sweep any staled BD states if present.
	SLL2NotifType_SL_L2_EVENT_TYPE_BD_STATE_END_MARKER SLL2NotifType = 5
	// L2 route
	SLL2NotifType_SL_L2_EVENT_TYPE_ROUTE SLL2NotifType = 6
	// End marker for Route notifications.
	// This is an indication to sweep any staled routes if present.
	SLL2NotifType_SL_L2_EVENT_TYPE_ROUTE_END_MARKER SLL2NotifType = 7
)

// Enum value maps for SLL2NotifType.
var (
	SLL2NotifType_name = map[int32]string{
		0: "SL_L2_EVENT_TYPE_RESERVED",
		1: "SL_L2_EVENT_TYPE_ERROR",
		2: "SL_L2_EVENT_TYPE_STATUS",
		3: "SL_L2_EVENT_TYPE_START_MARKER",
		4: "SL_L2_EVENT_TYPE_BD_STATE",
		5: "SL_L2_EVENT_TYPE_BD_STATE_END_MARKER",
		6: "SL_L2_EVENT_TYPE_ROUTE",
		7: "SL_L2_EVENT_TYPE_ROUTE_END_MARKER",
	}
	SLL2NotifType_value = map[string]int32{
		"SL_L2_EVENT_TYPE_RESERVED":            0,
		"SL_L2_EVENT_TYPE_ERROR":               1,
		"SL_L2_EVENT_TYPE_STATUS":              2,
		"SL_L2_EVENT_TYPE_START_MARKER":        3,
		"SL_L2_EVENT_TYPE_BD_STATE":            4,
		"SL_L2_EVENT_TYPE_BD_STATE_END_MARKER": 5,
		"SL_L2_EVENT_TYPE_ROUTE":               6,
		"SL_L2_EVENT_TYPE_ROUTE_END_MARKER":    7,
	}
)

func (x SLL2NotifType) Enum() *SLL2NotifType {
	p := new(SLL2NotifType)
	*p = x
	return p
}

func (x SLL2NotifType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLL2NotifType) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_l2_route_proto_enumTypes[1].Descriptor()
}

func (SLL2NotifType) Type() protoreflect.EnumType {
	return &file_sl_l2_route_proto_enumTypes[1]
}

func (x SLL2NotifType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLL2NotifType.Descriptor instead.
func (SLL2NotifType) EnumDescriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{1}
}

// Next Hop types
type SLL2RouteNh_SLL2RouteNhType int32

const (
	// Reserved. 0x0
	SLL2RouteNh_SL_L2_NH_RESERVED SLL2RouteNh_SLL2RouteNhType = 0
	// Interface nexthop. 0x1
	SLL2RouteNh_SL_L2_NH_INTERFACE SLL2RouteNh_SLL2RouteNhType = 1
	// Overlay nexthop. 0x2
	SLL2RouteNh_SL_L2_NH_OVERLAY SLL2RouteNh_SLL2RouteNhType = 2
)

// Enum value maps for SLL2RouteNh_SLL2RouteNhType.
var (
	SLL2RouteNh_SLL2RouteNhType_name = map[int32]string{
		0: "SL_L2_NH_RESERVED",
		1: "SL_L2_NH_INTERFACE",
		2: "SL_L2_NH_OVERLAY",
	}
	SLL2RouteNh_SLL2RouteNhType_value = map[string]int32{
		"SL_L2_NH_RESERVED":  0,
		"SL_L2_NH_INTERFACE": 1,
		"SL_L2_NH_OVERLAY":   2,
	}
)

func (x SLL2RouteNh_SLL2RouteNhType) Enum() *SLL2RouteNh_SLL2RouteNhType {
	p := new(SLL2RouteNh_SLL2RouteNhType)
	*p = x
	return p
}

func (x SLL2RouteNh_SLL2RouteNhType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLL2RouteNh_SLL2RouteNhType) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_l2_route_proto_enumTypes[2].Descriptor()
}

func (SLL2RouteNh_SLL2RouteNhType) Type() protoreflect.EnumType {
	return &file_sl_l2_route_proto_enumTypes[2]
}

func (x SLL2RouteNh_SLL2RouteNhType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLL2RouteNh_SLL2RouteNhType.Descriptor instead.
func (SLL2RouteNh_SLL2RouteNhType) EnumDescriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{8, 0}
}

// Provider Multicast Service Interface (PMSI) tunnel type.
type SLL2ImetRoute_PMSITunnelType int32

const (
	// No tunnel information present. 0x0
	SLL2ImetRoute_PMSI_NO_TUNNEL SLL2ImetRoute_PMSITunnelType = 0
	// RSVP-TE P2MP LSP. 0x1
	SLL2ImetRoute_PMSI_RSVPP2MP_TUNNEL SLL2ImetRoute_PMSITunnelType = 1
	// mLDP P2MP LSP. 0x2
	SLL2ImetRoute_PMSI_MLDPP2MP_TUNNEL SLL2ImetRoute_PMSITunnelType = 2
	// PIM-SSM Tree. 0x3
	SLL2ImetRoute_PMSI_PIMSSM_TUNNEL SLL2ImetRoute_PMSITunnelType = 3
	// PIM-SM Tree. 0x4
	SLL2ImetRoute_PMSI_PIMSM_TUNNEL SLL2ImetRoute_PMSITunnelType = 4
	// BIDIR-PIM Tree. 0x5
	SLL2ImetRoute_PMSI_PIMBIDIR_TUNNEL SLL2ImetRoute_PMSITunnelType = 5
	// Ingress Replication. 0x6
	SLL2ImetRoute_PMSI_INGREP_TUNNEL SLL2ImetRoute_PMSITunnelType = 6
	// mLDP MP2MP LSP. 0x7
	SLL2ImetRoute_PMSI_MLDPMP2MP_TUNNEL SLL2ImetRoute_PMSITunnelType = 7
)

// Enum value maps for SLL2ImetRoute_PMSITunnelType.
var (
	SLL2ImetRoute_PMSITunnelType_name = map[int32]string{
		0: "PMSI_NO_TUNNEL",
		1: "PMSI_RSVPP2MP_TUNNEL",
		2: "PMSI_MLDPP2MP_TUNNEL",
		3: "PMSI_PIMSSM_TUNNEL",
		4: "PMSI_PIMSM_TUNNEL",
		5: "PMSI_PIMBIDIR_TUNNEL",
		6: "PMSI_INGREP_TUNNEL",
		7: "PMSI_MLDPMP2MP_TUNNEL",
	}
	SLL2ImetRoute_PMSITunnelType_value = map[string]int32{
		"PMSI_NO_TUNNEL":        0,
		"PMSI_RSVPP2MP_TUNNEL":  1,
		"PMSI_MLDPP2MP_TUNNEL":  2,
		"PMSI_PIMSSM_TUNNEL":    3,
		"PMSI_PIMSM_TUNNEL":     4,
		"PMSI_PIMBIDIR_TUNNEL":  5,
		"PMSI_INGREP_TUNNEL":    6,
		"PMSI_MLDPMP2MP_TUNNEL": 7,
	}
)

func (x SLL2ImetRoute_PMSITunnelType) Enum() *SLL2ImetRoute_PMSITunnelType {
	p := new(SLL2ImetRoute_PMSITunnelType)
	*p = x
	return p
}

func (x SLL2ImetRoute_PMSITunnelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLL2ImetRoute_PMSITunnelType) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_l2_route_proto_enumTypes[3].Descriptor()
}

func (SLL2ImetRoute_PMSITunnelType) Type() protoreflect.EnumType {
	return &file_sl_l2_route_proto_enumTypes[3]
}

func (x SLL2ImetRoute_PMSITunnelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLL2ImetRoute_PMSITunnelType.Descriptor instead.
func (SLL2ImetRoute_PMSITunnelType) EnumDescriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{13, 0}
}

// BD states
type SLL2BdStateInfo_SLL2BdState int32

const (
	// Reserved. 0x0
	SLL2BdStateInfo_SL_L2_BD_STATE_RESERVED SLL2BdStateInfo_SLL2BdState = 0
	// BD Added State.
	// Implies BD is ready for programming and notification request. 0x1
	SLL2BdStateInfo_SL_L2_BD_STATE_ADDED SLL2BdStateInfo_SLL2BdState = 1
	// BD Deleted State.
	// Implies BD has been deleted, all installed routes will be
	// deleted and no further notifications will be sent. 0x2
	SLL2BdStateInfo_SL_L2_BD_STATE_DELETED SLL2BdStateInfo_SLL2BdState = 2
	// BD Replay Needed.
	// Implies the routes in this BD could not be recovered and the
	// client has to replay the routes. 0x3
	SLL2BdStateInfo_SL_L2_BD_STATE_REPLAY_NEEDED SLL2BdStateInfo_SLL2BdState = 3
)

// Enum value maps for SLL2BdStateInfo_SLL2BdState.
var (
	SLL2BdStateInfo_SLL2BdState_name = map[int32]string{
		0: "SL_L2_BD_STATE_RESERVED",
		1: "SL_L2_BD_STATE_ADDED",
		2: "SL_L2_BD_STATE_DELETED",
		3: "SL_L2_BD_STATE_REPLAY_NEEDED",
	}
	SLL2BdStateInfo_SLL2BdState_value = map[string]int32{
		"SL_L2_BD_STATE_RESERVED":      0,
		"SL_L2_BD_STATE_ADDED":         1,
		"SL_L2_BD_STATE_DELETED":       2,
		"SL_L2_BD_STATE_REPLAY_NEEDED": 3,
	}
)

func (x SLL2BdStateInfo_SLL2BdState) Enum() *SLL2BdStateInfo_SLL2BdState {
	p := new(SLL2BdStateInfo_SLL2BdState)
	*p = x
	return p
}

func (x SLL2BdStateInfo_SLL2BdState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLL2BdStateInfo_SLL2BdState) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_l2_route_proto_enumTypes[4].Descriptor()
}

func (SLL2BdStateInfo_SLL2BdState) Type() protoreflect.EnumType {
	return &file_sl_l2_route_proto_enumTypes[4]
}

func (x SLL2BdStateInfo_SLL2BdState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLL2BdStateInfo_SLL2BdState.Descriptor instead.
func (SLL2BdStateInfo_SLL2BdState) EnumDescriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{21, 0}
}

// L2 Route Globals Get Message
type SLL2GlobalsGetMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SLL2GlobalsGetMsg) Reset() {
	*x = SLL2GlobalsGetMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2GlobalsGetMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2GlobalsGetMsg) ProtoMessage() {}

func (x *SLL2GlobalsGetMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2GlobalsGetMsg.ProtoReflect.Descriptor instead.
func (*SLL2GlobalsGetMsg) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{0}
}

// L2 Route Globals Get Message Response
type SLL2GlobalsGetMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Corresponding error code.
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// Max BD registration objects within a single BdRegMsg.
	MaxBdRegPerBdRegmsg uint32 `protobuf:"varint,2,opt,name=MaxBdRegPerBdRegmsg,proto3" json:"MaxBdRegPerBdRegmsg,omitempty"`
	// Max Route objects within a single RouteMsg.
	MaxRoutePerRoutemsg uint32 `protobuf:"varint,3,opt,name=MaxRoutePerRoutemsg,proto3" json:"MaxRoutePerRoutemsg,omitempty"`
}

func (x *SLL2GlobalsGetMsgRsp) Reset() {
	*x = SLL2GlobalsGetMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2GlobalsGetMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2GlobalsGetMsgRsp) ProtoMessage() {}

func (x *SLL2GlobalsGetMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2GlobalsGetMsgRsp.ProtoReflect.Descriptor instead.
func (*SLL2GlobalsGetMsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{1}
}

func (x *SLL2GlobalsGetMsgRsp) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (x *SLL2GlobalsGetMsgRsp) GetMaxBdRegPerBdRegmsg() uint32 {
	if x != nil {
		return x.MaxBdRegPerBdRegmsg
	}
	return 0
}

func (x *SLL2GlobalsGetMsgRsp) GetMaxRoutePerRoutemsg() uint32 {
	if x != nil {
		return x.MaxRoutePerRoutemsg
	}
	return 0
}

// Global L2 Registration Message
type SLL2RegMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Registration Operation.
	Oper SLRegOp `protobuf:"varint,1,opt,name=Oper,proto3,enum=service_layer.SLRegOp" json:"Oper,omitempty"`
	// Default Admin distance for routes programmed by this application.
	// Range [0-255].
	// If the client does not need to program routes, set this value to 0.
	AdminDistance uint32 `protobuf:"varint,2,opt,name=AdminDistance,proto3" json:"AdminDistance,omitempty"`
	// In case Service Layer -> L2RIB connection is lost, this specifies the
	// timeout period after which L2RIB will automatically purge the installed
	// routes, unless the service layer:
	//  1. Re-registers.
	//  2. Replay all routes.
	//  3. And send EOF, before the purge timeout.
	//
	// If the client does not need to program routes, set this value to 0.
	PurgeIntervalSeconds uint32 `protobuf:"varint,3,opt,name=PurgeIntervalSeconds,proto3" json:"PurgeIntervalSeconds,omitempty"`
}

func (x *SLL2RegMsg) Reset() {
	*x = SLL2RegMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2RegMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2RegMsg) ProtoMessage() {}

func (x *SLL2RegMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2RegMsg.ProtoReflect.Descriptor instead.
func (*SLL2RegMsg) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{2}
}

func (x *SLL2RegMsg) GetOper() SLRegOp {
	if x != nil {
		return x.Oper
	}
	return SLRegOp_SL_REGOP_RESERVED
}

func (x *SLL2RegMsg) GetAdminDistance() uint32 {
	if x != nil {
		return x.AdminDistance
	}
	return 0
}

func (x *SLL2RegMsg) GetPurgeIntervalSeconds() uint32 {
	if x != nil {
		return x.PurgeIntervalSeconds
	}
	return 0
}

// Global L2 Registration message Response
type SLL2RegMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error code.
	RegStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=RegStatus,proto3" json:"RegStatus,omitempty"`
}

func (x *SLL2RegMsgRsp) Reset() {
	*x = SLL2RegMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2RegMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2RegMsgRsp) ProtoMessage() {}

func (x *SLL2RegMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2RegMsgRsp.ProtoReflect.Descriptor instead.
func (*SLL2RegMsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{3}
}

func (x *SLL2RegMsgRsp) GetRegStatus() *SLErrorStatus {
	if x != nil {
		return x.RegStatus
	}
	return nil
}

// L2 Bridge-Domain (BD) Registration Messages
type SLL2BdRegMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Registration Operation.
	Oper SLRegOp `protobuf:"varint,1,opt,name=Oper,proto3,enum=service_layer.SLRegOp" json:"Oper,omitempty"`
	// List of BD names that client wants to register for.
	BdRegName []string `protobuf:"bytes,2,rep,name=BdRegName,proto3" json:"BdRegName,omitempty"`
}

func (x *SLL2BdRegMsg) Reset() {
	*x = SLL2BdRegMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2BdRegMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2BdRegMsg) ProtoMessage() {}

func (x *SLL2BdRegMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2BdRegMsg.ProtoReflect.Descriptor instead.
func (*SLL2BdRegMsg) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{4}
}

func (x *SLL2BdRegMsg) GetOper() SLRegOp {
	if x != nil {
		return x.Oper
	}
	return SLRegOp_SL_REGOP_RESERVED
}

func (x *SLL2BdRegMsg) GetBdRegName() []string {
	if x != nil {
		return x.BdRegName
	}
	return nil
}

// BD Registration message Result
type SLL2BdRegRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Corresponding error code.
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// BD Name.
	BdName string `protobuf:"bytes,2,opt,name=BdName,proto3" json:"BdName,omitempty"`
}

func (x *SLL2BdRegRes) Reset() {
	*x = SLL2BdRegRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2BdRegRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2BdRegRes) ProtoMessage() {}

func (x *SLL2BdRegRes) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2BdRegRes.ProtoReflect.Descriptor instead.
func (*SLL2BdRegRes) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{5}
}

func (x *SLL2BdRegRes) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (x *SLL2BdRegRes) GetBdName() string {
	if x != nil {
		return x.BdName
	}
	return ""
}

// BD Registration message Response.
type SLL2BdRegMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary result of the bulk operation (refer to enum SLErrorStatus)
	// In general, the StatusSummary implies one of 3 things:
	//  1. SL_SUCCESS: signifies that the entire bulk operation was successful.
	//     In this case, the Results list is empty.
	//  2. SL_SOME_ERR: signifies that the operation failed for one or more
	//     entries. In this case, Results holds the result for
	//     each individual entry in the bulk.
	//  3. SL_RPC_XXX: signifies that the entire bulk operation failed.
	//     In this case, the Results list is empty.
	StatusSummary *SLErrorStatus `protobuf:"bytes,1,opt,name=StatusSummary,proto3" json:"StatusSummary,omitempty"`
	// In case of errors, this field indicates which entry in the bulk was
	// erroneous.
	Results []*SLL2BdRegRes `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *SLL2BdRegMsgRsp) Reset() {
	*x = SLL2BdRegMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2BdRegMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2BdRegMsgRsp) ProtoMessage() {}

func (x *SLL2BdRegMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2BdRegMsgRsp.ProtoReflect.Descriptor instead.
func (*SLL2BdRegMsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{6}
}

func (x *SLL2BdRegMsgRsp) GetStatusSummary() *SLErrorStatus {
	if x != nil {
		return x.StatusSummary
	}
	return nil
}

func (x *SLL2BdRegMsgRsp) GetResults() []*SLL2BdRegRes {
	if x != nil {
		return x.Results
	}
	return nil
}

// Ethernet Segment Identifier (ESI)
type SLL2RouteEsi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 10-bytes long ESI value
	Esi []byte `protobuf:"bytes,1,opt,name=Esi,proto3" json:"Esi,omitempty"`
}

func (x *SLL2RouteEsi) Reset() {
	*x = SLL2RouteEsi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2RouteEsi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2RouteEsi) ProtoMessage() {}

func (x *SLL2RouteEsi) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2RouteEsi.ProtoReflect.Descriptor instead.
func (*SLL2RouteEsi) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{7}
}

func (x *SLL2RouteEsi) GetEsi() []byte {
	if x != nil {
		return x.Esi
	}
	return nil
}

// Nexthop info
type SLL2RouteNh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NhType SLL2RouteNh_SLL2RouteNhType `protobuf:"varint,1,opt,name=NhType,proto3,enum=service_layer.SLL2RouteNh_SLL2RouteNhType" json:"NhType,omitempty"`
	// Next Hop data based on type
	//
	// Types that are assignable to NhData:
	//
	//	*SLL2RouteNh_NhInterface
	//	*SLL2RouteNh_NhOverlay
	NhData isSLL2RouteNh_NhData `protobuf_oneof:"NhData"`
}

func (x *SLL2RouteNh) Reset() {
	*x = SLL2RouteNh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2RouteNh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2RouteNh) ProtoMessage() {}

func (x *SLL2RouteNh) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2RouteNh.ProtoReflect.Descriptor instead.
func (*SLL2RouteNh) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{8}
}

func (x *SLL2RouteNh) GetNhType() SLL2RouteNh_SLL2RouteNhType {
	if x != nil {
		return x.NhType
	}
	return SLL2RouteNh_SL_L2_NH_RESERVED
}

func (m *SLL2RouteNh) GetNhData() isSLL2RouteNh_NhData {
	if m != nil {
		return m.NhData
	}
	return nil
}

func (x *SLL2RouteNh) GetNhInterface() *SLInterface {
	if x, ok := x.GetNhData().(*SLL2RouteNh_NhInterface); ok {
		return x.NhInterface
	}
	return nil
}

func (x *SLL2RouteNh) GetNhOverlay() *SLL2OverlayNh {
	if x, ok := x.GetNhData().(*SLL2RouteNh_NhOverlay); ok {
		return x.NhOverlay
	}
	return nil
}

type isSLL2RouteNh_NhData interface {
	isSLL2RouteNh_NhData()
}

type SLL2RouteNh_NhInterface struct {
	// case NhType == SL_L2_NH_INTERFACE
	//
	//	=> This field carries the interface nexthop.
	NhInterface *SLInterface `protobuf:"bytes,2,opt,name=NhInterface,proto3,oneof"`
}

type SLL2RouteNh_NhOverlay struct {
	// case NhType == SL_L2_NH_OVERLAY
	//
	//	=> This field carries the overlay nexthop.
	NhOverlay *SLL2OverlayNh `protobuf:"bytes,3,opt,name=NhOverlay,proto3,oneof"`
}

func (*SLL2RouteNh_NhInterface) isSLL2RouteNh_NhData() {}

func (*SLL2RouteNh_NhOverlay) isSLL2RouteNh_NhData() {}

// Overlay nexthop info
type SLL2OverlayNh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv4 or IPv6 address
	OverlayNhIp *SLIpAddress `protobuf:"bytes,1,opt,name=OverlayNhIp,proto3" json:"OverlayNhIp,omitempty"`
	// Encap type
	OverlayNhEncap SLEncapType `protobuf:"varint,2,opt,name=OverlayNhEncap,proto3,enum=service_layer.SLEncapType" json:"OverlayNhEncap,omitempty"`
	// L2 label
	// for encap type MPLS, this will be remote MPLS label
	// for encap type VXLAN, this will be L2 VNI.
	OverlayNhLabel uint32 `protobuf:"varint,3,opt,name=OverlayNhLabel,proto3" json:"OverlayNhLabel,omitempty"`
	// L3 label
	// for encap type MPLS, this will be a stack of MPLS labels.
	// for encap type VXLAN, this will be L3 VNI.
	OverlayNhL3Label []uint32 `protobuf:"varint,4,rep,packed,name=OverlayNhL3Label,proto3" json:"OverlayNhL3Label,omitempty"`
	// Router MAC
	OverlayNhRouterMac []byte `protobuf:"bytes,5,opt,name=OverlayNhRouterMac,proto3" json:"OverlayNhRouterMac,omitempty"`
}

func (x *SLL2OverlayNh) Reset() {
	*x = SLL2OverlayNh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2OverlayNh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2OverlayNh) ProtoMessage() {}

func (x *SLL2OverlayNh) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2OverlayNh.ProtoReflect.Descriptor instead.
func (*SLL2OverlayNh) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{9}
}

func (x *SLL2OverlayNh) GetOverlayNhIp() *SLIpAddress {
	if x != nil {
		return x.OverlayNhIp
	}
	return nil
}

func (x *SLL2OverlayNh) GetOverlayNhEncap() SLEncapType {
	if x != nil {
		return x.OverlayNhEncap
	}
	return SLEncapType_SL_ENCAP_RESERVED
}

func (x *SLL2OverlayNh) GetOverlayNhLabel() uint32 {
	if x != nil {
		return x.OverlayNhLabel
	}
	return 0
}

func (x *SLL2OverlayNh) GetOverlayNhL3Label() []uint32 {
	if x != nil {
		return x.OverlayNhL3Label
	}
	return nil
}

func (x *SLL2OverlayNh) GetOverlayNhRouterMac() []byte {
	if x != nil {
		return x.OverlayNhRouterMac
	}
	return nil
}

// MAC route key
type SLL2MacRouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mac address
	MacAddress []byte `protobuf:"bytes,1,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	// IP address
	IpAddress *SLIpAddress `protobuf:"bytes,2,opt,name=IpAddress,proto3" json:"IpAddress,omitempty"`
}

func (x *SLL2MacRouteKey) Reset() {
	*x = SLL2MacRouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2MacRouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2MacRouteKey) ProtoMessage() {}

func (x *SLL2MacRouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2MacRouteKey.ProtoReflect.Descriptor instead.
func (*SLL2MacRouteKey) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{10}
}

func (x *SLL2MacRouteKey) GetMacAddress() []byte {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

func (x *SLL2MacRouteKey) GetIpAddress() *SLIpAddress {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

// Type 2 EVPN MAC route
type SLL2MacRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mac route key
	RouteKey *SLL2MacRouteKey `protobuf:"bytes,1,opt,name=RouteKey,proto3" json:"RouteKey,omitempty"`
	// Sequence number
	SequenceNum uint32 `protobuf:"varint,2,opt,name=SequenceNum,proto3" json:"SequenceNum,omitempty"`
	// ESI
	MacEsi *SLL2RouteEsi `protobuf:"bytes,3,opt,name=MacEsi,proto3" json:"MacEsi,omitempty"`
	// List of NHs for this host
	NextHopList []*SLL2RouteNh `protobuf:"bytes,4,rep,name=NextHopList,proto3" json:"NextHopList,omitempty"`
}

func (x *SLL2MacRoute) Reset() {
	*x = SLL2MacRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2MacRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2MacRoute) ProtoMessage() {}

func (x *SLL2MacRoute) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2MacRoute.ProtoReflect.Descriptor instead.
func (*SLL2MacRoute) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{11}
}

func (x *SLL2MacRoute) GetRouteKey() *SLL2MacRouteKey {
	if x != nil {
		return x.RouteKey
	}
	return nil
}

func (x *SLL2MacRoute) GetSequenceNum() uint32 {
	if x != nil {
		return x.SequenceNum
	}
	return 0
}

func (x *SLL2MacRoute) GetMacEsi() *SLL2RouteEsi {
	if x != nil {
		return x.MacEsi
	}
	return nil
}

func (x *SLL2MacRoute) GetNextHopList() []*SLL2RouteNh {
	if x != nil {
		return x.NextHopList
	}
	return nil
}

// IMET route key
type SLL2ImetRouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ethernet Tag ID.
	EthTagId uint32 `protobuf:"varint,1,opt,name=EthTagId,proto3" json:"EthTagId,omitempty"`
	// Ipv4 or Ipv6 address
	IpAddress *SLIpAddress `protobuf:"bytes,2,opt,name=IpAddress,proto3" json:"IpAddress,omitempty"`
}

func (x *SLL2ImetRouteKey) Reset() {
	*x = SLL2ImetRouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2ImetRouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2ImetRouteKey) ProtoMessage() {}

func (x *SLL2ImetRouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2ImetRouteKey.ProtoReflect.Descriptor instead.
func (*SLL2ImetRouteKey) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{12}
}

func (x *SLL2ImetRouteKey) GetEthTagId() uint32 {
	if x != nil {
		return x.EthTagId
	}
	return 0
}

func (x *SLL2ImetRouteKey) GetIpAddress() *SLIpAddress {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

// Type-3 EVPN IMET Route
type SLL2ImetRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IMET Route Key
	RouteKey *SLL2ImetRouteKey `protobuf:"bytes,1,opt,name=RouteKey,proto3" json:"RouteKey,omitempty"`
	// Encapsulation type (VXLAN or MPLS)
	EncapType SLEncapType `protobuf:"varint,2,opt,name=EncapType,proto3,enum=service_layer.SLEncapType" json:"EncapType,omitempty"`
	// For ENCAP_VXLAN, this field will specify the L2 Virtual Network
	// Identifier (VNI)
	Label          uint32                       `protobuf:"varint,3,opt,name=Label,proto3" json:"Label,omitempty"`
	TunnelType     SLL2ImetRoute_PMSITunnelType `protobuf:"varint,4,opt,name=TunnelType,proto3,enum=service_layer.SLL2ImetRoute_PMSITunnelType" json:"TunnelType,omitempty"`
	TunnelIdLength uint32                       `protobuf:"varint,5,opt,name=TunnelIdLength,proto3" json:"TunnelIdLength,omitempty"`
	// When the type is set to Ingress Replication the Tunnel
	// Identifier carries the unicast tunnel endpoint IP
	// address of the local PE that is to be this PE's receiving
	// endpoint address for the tunnel.
	TunnelIdValue []byte `protobuf:"bytes,6,opt,name=TunnelIdValue,proto3" json:"TunnelIdValue,omitempty"`
}

func (x *SLL2ImetRoute) Reset() {
	*x = SLL2ImetRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2ImetRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2ImetRoute) ProtoMessage() {}

func (x *SLL2ImetRoute) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2ImetRoute.ProtoReflect.Descriptor instead.
func (*SLL2ImetRoute) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{13}
}

func (x *SLL2ImetRoute) GetRouteKey() *SLL2ImetRouteKey {
	if x != nil {
		return x.RouteKey
	}
	return nil
}

func (x *SLL2ImetRoute) GetEncapType() SLEncapType {
	if x != nil {
		return x.EncapType
	}
	return SLEncapType_SL_ENCAP_RESERVED
}

func (x *SLL2ImetRoute) GetLabel() uint32 {
	if x != nil {
		return x.Label
	}
	return 0
}

func (x *SLL2ImetRoute) GetTunnelType() SLL2ImetRoute_PMSITunnelType {
	if x != nil {
		return x.TunnelType
	}
	return SLL2ImetRoute_PMSI_NO_TUNNEL
}

func (x *SLL2ImetRoute) GetTunnelIdLength() uint32 {
	if x != nil {
		return x.TunnelIdLength
	}
	return 0
}

func (x *SLL2ImetRoute) GetTunnelIdValue() []byte {
	if x != nil {
		return x.TunnelIdValue
	}
	return nil
}

// L2 route key
type SLL2RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BD name
	BdName string `protobuf:"bytes,1,opt,name=BdName,proto3" json:"BdName,omitempty"`
	// L2 Route Type
	Type SLL2RouteType `protobuf:"varint,2,opt,name=Type,proto3,enum=service_layer.SLL2RouteType" json:"Type,omitempty"`
	// Further info based on Route Type
	//
	// Types that are assignable to Event:
	//
	//	*SLL2RouteKey_MacKey
	//	*SLL2RouteKey_ImetKey
	Event isSLL2RouteKey_Event `protobuf_oneof:"Event"`
}

func (x *SLL2RouteKey) Reset() {
	*x = SLL2RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2RouteKey) ProtoMessage() {}

func (x *SLL2RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2RouteKey.ProtoReflect.Descriptor instead.
func (*SLL2RouteKey) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{14}
}

func (x *SLL2RouteKey) GetBdName() string {
	if x != nil {
		return x.BdName
	}
	return ""
}

func (x *SLL2RouteKey) GetType() SLL2RouteType {
	if x != nil {
		return x.Type
	}
	return SLL2RouteType_SL_L2_ROUTE_RESERVED
}

func (m *SLL2RouteKey) GetEvent() isSLL2RouteKey_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *SLL2RouteKey) GetMacKey() *SLL2MacRouteKey {
	if x, ok := x.GetEvent().(*SLL2RouteKey_MacKey); ok {
		return x.MacKey
	}
	return nil
}

func (x *SLL2RouteKey) GetImetKey() *SLL2ImetRouteKey {
	if x, ok := x.GetEvent().(*SLL2RouteKey_ImetKey); ok {
		return x.ImetKey
	}
	return nil
}

type isSLL2RouteKey_Event interface {
	isSLL2RouteKey_Event()
}

type SLL2RouteKey_MacKey struct {
	// case Type == SL_L2_ROUTE_MAC:
	//
	//	=> Carries the Mac Route Key
	MacKey *SLL2MacRouteKey `protobuf:"bytes,3,opt,name=MacKey,proto3,oneof"`
}

type SLL2RouteKey_ImetKey struct {
	// case Type == SL_L2_ROUTE_IMET:
	//
	//	=> Carries the IMET Route Key
	ImetKey *SLL2ImetRouteKey `protobuf:"bytes,4,opt,name=ImetKey,proto3,oneof"`
}

func (*SLL2RouteKey_MacKey) isSLL2RouteKey_Event() {}

func (*SLL2RouteKey_ImetKey) isSLL2RouteKey_Event() {}

// L2 route
type SLL2Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BD name
	BdName string `protobuf:"bytes,1,opt,name=BdName,proto3" json:"BdName,omitempty"`
	// L2 Route Type to be programmed
	Type SLL2RouteType `protobuf:"varint,2,opt,name=Type,proto3,enum=service_layer.SLL2RouteType" json:"Type,omitempty"`
	// Further info based on Route Type
	//
	// Types that are assignable to Event:
	//
	//	*SLL2Route_MacRoute
	//	*SLL2Route_ImetRoute
	Event isSLL2Route_Event `protobuf_oneof:"Event"`
}

func (x *SLL2Route) Reset() {
	*x = SLL2Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2Route) ProtoMessage() {}

func (x *SLL2Route) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2Route.ProtoReflect.Descriptor instead.
func (*SLL2Route) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{15}
}

func (x *SLL2Route) GetBdName() string {
	if x != nil {
		return x.BdName
	}
	return ""
}

func (x *SLL2Route) GetType() SLL2RouteType {
	if x != nil {
		return x.Type
	}
	return SLL2RouteType_SL_L2_ROUTE_RESERVED
}

func (m *SLL2Route) GetEvent() isSLL2Route_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *SLL2Route) GetMacRoute() *SLL2MacRoute {
	if x, ok := x.GetEvent().(*SLL2Route_MacRoute); ok {
		return x.MacRoute
	}
	return nil
}

func (x *SLL2Route) GetImetRoute() *SLL2ImetRoute {
	if x, ok := x.GetEvent().(*SLL2Route_ImetRoute); ok {
		return x.ImetRoute
	}
	return nil
}

type isSLL2Route_Event interface {
	isSLL2Route_Event()
}

type SLL2Route_MacRoute struct {
	// case Type == SL_L2_ROUTE_MAC:
	//
	//	=> Carries the Mac Route details
	MacRoute *SLL2MacRoute `protobuf:"bytes,3,opt,name=MacRoute,proto3,oneof"`
}

type SLL2Route_ImetRoute struct {
	// case Type == SL_L2_ROUTE_IMET:
	//
	//	=> Carries the IMET route details
	ImetRoute *SLL2ImetRoute `protobuf:"bytes,4,opt,name=ImetRoute,proto3,oneof"`
}

func (*SLL2Route_MacRoute) isSLL2Route_Event() {}

func (*SLL2Route_ImetRoute) isSLL2Route_Event() {}

// Batch of L2 Routes for bulk download
type SLL2RouteMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Correlator. This can be used to correlate replies with requests.
	// The Server simply reflects this field back in the reply.
	Correlator uint64 `protobuf:"varint,1,opt,name=Correlator,proto3" json:"Correlator,omitempty"`
	// Route Object Operations
	Oper SLObjectOp `protobuf:"varint,2,opt,name=Oper,proto3,enum=service_layer.SLObjectOp" json:"Oper,omitempty"`
	// List of L2 Routes
	// The list may contain routes from different BDs.
	Routes []*SLL2Route `protobuf:"bytes,3,rep,name=Routes,proto3" json:"Routes,omitempty"`
}

func (x *SLL2RouteMsg) Reset() {
	*x = SLL2RouteMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2RouteMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2RouteMsg) ProtoMessage() {}

func (x *SLL2RouteMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2RouteMsg.ProtoReflect.Descriptor instead.
func (*SLL2RouteMsg) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{16}
}

func (x *SLL2RouteMsg) GetCorrelator() uint64 {
	if x != nil {
		return x.Correlator
	}
	return 0
}

func (x *SLL2RouteMsg) GetOper() SLObjectOp {
	if x != nil {
		return x.Oper
	}
	return SLObjectOp_SL_OBJOP_RESERVED
}

func (x *SLL2RouteMsg) GetRoutes() []*SLL2Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

// L2 route result, uniquely identified by BD + L2 route key
type SLL2RouteRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Corresponding error code
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// L2 Route Key
	RouteKey *SLL2RouteKey `protobuf:"bytes,2,opt,name=RouteKey,proto3" json:"RouteKey,omitempty"`
}

func (x *SLL2RouteRes) Reset() {
	*x = SLL2RouteRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2RouteRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2RouteRes) ProtoMessage() {}

func (x *SLL2RouteRes) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2RouteRes.ProtoReflect.Descriptor instead.
func (*SLL2RouteRes) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{17}
}

func (x *SLL2RouteRes) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (x *SLL2RouteRes) GetRouteKey() *SLL2RouteKey {
	if x != nil {
		return x.RouteKey
	}
	return nil
}

// L2 bulk download response
type SLL2RouteMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Correlator. This can be used to correlate replies with requests.
	// The Server simply reflects this field back in the reply.
	Correlator uint64 `protobuf:"varint,1,opt,name=Correlator,proto3" json:"Correlator,omitempty"`
	// Summary result of the bulk operation (refer to enum SLErrorStatus)
	// In general, the StatusSummary implies one of 3 things:
	//  1. SL_SUCCESS: signifies that the entire bulk operation was successful.
	//     In this case, the Results list is empty.
	//  2. SL_SOME_ERR: signifies that the operation failed for one or more
	//     entries. In this case, Results holds the result for
	//     each individual entry in the bulk.
	//  3. SL_RPC_XXX: signifies that the entire bulk operation failed.
	//     In this case, the Results list is empty.
	StatusSummary *SLErrorStatus `protobuf:"bytes,2,opt,name=StatusSummary,proto3" json:"StatusSummary,omitempty"`
	// In case of errors, this field indicates which entry in the bulk was
	// erroneous.
	Results []*SLL2RouteRes `protobuf:"bytes,3,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *SLL2RouteMsgRsp) Reset() {
	*x = SLL2RouteMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2RouteMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2RouteMsgRsp) ProtoMessage() {}

func (x *SLL2RouteMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2RouteMsgRsp.ProtoReflect.Descriptor instead.
func (*SLL2RouteMsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{18}
}

func (x *SLL2RouteMsgRsp) GetCorrelator() uint64 {
	if x != nil {
		return x.Correlator
	}
	return 0
}

func (x *SLL2RouteMsgRsp) GetStatusSummary() *SLErrorStatus {
	if x != nil {
		return x.StatusSummary
	}
	return nil
}

func (x *SLL2RouteMsgRsp) GetResults() []*SLL2RouteRes {
	if x != nil {
		return x.Results
	}
	return nil
}

// L2 Get Notifications message.
type SLL2GetNotifMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Oper = SL_NOTIFOP_ENABLE
	//
	//	This is to enable route notifications
	//
	// Oper = SL_NOTIFOP_DISABLE
	//
	//	This is to disable route notifications
	Oper SLNotifOp `protobuf:"varint,1,opt,name=Oper,proto3,enum=service_layer.SLNotifOp" json:"Oper,omitempty"`
	// Correlator. This is used to correlate GetNotifMsg with
	// NotifMsgStatus. The server reflects this field in the reply.
	Correlator uint64 `protobuf:"varint,2,opt,name=Correlator,proto3" json:"Correlator,omitempty"`
	// End of file.
	// When set to True, it indicates that the client is done with sending
	// requests for notifications.
	//
	// It is useful when client is sending per-BD notification requests.
	// The client can send this after receiving
	// SL_L2_EVENT_TYPE_BD_STATE_END_MARKER.
	GetNotifEof bool `protobuf:"varint,3,opt,name=GetNotifEof,proto3" json:"GetNotifEof,omitempty"`
	// Types that are assignable to Request:
	//
	//	*SLL2GetNotifMsg_BdAll
	//	*SLL2GetNotifMsg_BdName
	Request isSLL2GetNotifMsg_Request `protobuf_oneof:"Request"`
}

func (x *SLL2GetNotifMsg) Reset() {
	*x = SLL2GetNotifMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2GetNotifMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2GetNotifMsg) ProtoMessage() {}

func (x *SLL2GetNotifMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2GetNotifMsg.ProtoReflect.Descriptor instead.
func (*SLL2GetNotifMsg) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{19}
}

func (x *SLL2GetNotifMsg) GetOper() SLNotifOp {
	if x != nil {
		return x.Oper
	}
	return SLNotifOp_SL_NOTIFOP_RESERVED
}

func (x *SLL2GetNotifMsg) GetCorrelator() uint64 {
	if x != nil {
		return x.Correlator
	}
	return 0
}

func (x *SLL2GetNotifMsg) GetGetNotifEof() bool {
	if x != nil {
		return x.GetNotifEof
	}
	return false
}

func (m *SLL2GetNotifMsg) GetRequest() isSLL2GetNotifMsg_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *SLL2GetNotifMsg) GetBdAll() bool {
	if x, ok := x.GetRequest().(*SLL2GetNotifMsg_BdAll); ok {
		return x.BdAll
	}
	return false
}

func (x *SLL2GetNotifMsg) GetBdName() string {
	if x, ok := x.GetRequest().(*SLL2GetNotifMsg_BdName); ok {
		return x.BdName
	}
	return ""
}

type isSLL2GetNotifMsg_Request interface {
	isSLL2GetNotifMsg_Request()
}

type SLL2GetNotifMsg_BdAll struct {
	// If the notification request is for routes in all BDs - set to TRUE.
	BdAll bool `protobuf:"varint,4,opt,name=BdAll,proto3,oneof"`
}

type SLL2GetNotifMsg_BdName struct {
	// If the notification request is for routes in a specific BD,
	// pass the name.
	BdName string `protobuf:"bytes,5,opt,name=BdName,proto3,oneof"`
}

func (*SLL2GetNotifMsg_BdAll) isSLL2GetNotifMsg_Request() {}

func (*SLL2GetNotifMsg_BdName) isSLL2GetNotifMsg_Request() {}

// L2 Route notification
type SLL2RouteNotif struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Route Object Operations
	Oper SLObjectOp `protobuf:"varint,1,opt,name=Oper,proto3,enum=service_layer.SLObjectOp" json:"Oper,omitempty"`
	// L2 route
	Routes *SLL2Route `protobuf:"bytes,2,opt,name=Routes,proto3" json:"Routes,omitempty"`
}

func (x *SLL2RouteNotif) Reset() {
	*x = SLL2RouteNotif{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2RouteNotif) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2RouteNotif) ProtoMessage() {}

func (x *SLL2RouteNotif) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2RouteNotif.ProtoReflect.Descriptor instead.
func (*SLL2RouteNotif) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{20}
}

func (x *SLL2RouteNotif) GetOper() SLObjectOp {
	if x != nil {
		return x.Oper
	}
	return SLObjectOp_SL_OBJOP_RESERVED
}

func (x *SLL2RouteNotif) GetRoutes() *SLL2Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

// Bridge-Domain (BD) state info
type SLL2BdStateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BD name
	BdName  string                      `protobuf:"bytes,1,opt,name=BdName,proto3" json:"BdName,omitempty"`
	BdState SLL2BdStateInfo_SLL2BdState `protobuf:"varint,2,opt,name=BdState,proto3,enum=service_layer.SLL2BdStateInfo_SLL2BdState" json:"BdState,omitempty"`
}

func (x *SLL2BdStateInfo) Reset() {
	*x = SLL2BdStateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2BdStateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2BdStateInfo) ProtoMessage() {}

func (x *SLL2BdStateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2BdStateInfo.ProtoReflect.Descriptor instead.
func (*SLL2BdStateInfo) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{21}
}

func (x *SLL2BdStateInfo) GetBdName() string {
	if x != nil {
		return x.BdName
	}
	return ""
}

func (x *SLL2BdStateInfo) GetBdState() SLL2BdStateInfo_SLL2BdState {
	if x != nil {
		return x.BdState
	}
	return SLL2BdStateInfo_SL_L2_BD_STATE_RESERVED
}

// L2 Notification Status message
type SLL2NotifStatusMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Notification Operation in the request
	Oper SLNotifOp `protobuf:"varint,1,opt,name=Oper,proto3,enum=service_layer.SLNotifOp" json:"Oper,omitempty"`
	// Correlator in the request.
	Correlator uint64 `protobuf:"varint,2,opt,name=Correlator,proto3" json:"Correlator,omitempty"`
	// BD in the request.
	// This is not set if the request was for all BDs
	BdName string `protobuf:"bytes,3,opt,name=BdName,proto3" json:"BdName,omitempty"`
	// The NotifStatus implies one of 2 things:
	// SL_SUCCESS: signifies that the notification request was successful
	// SL_XXX: signifies an error in setting up a notification.
	//
	//	If BdName is passed, it implies that notifications for the BD
	//	will not be sent.
	NotifStatus *SLErrorStatus `protobuf:"bytes,4,opt,name=NotifStatus,proto3" json:"NotifStatus,omitempty"`
}

func (x *SLL2NotifStatusMsg) Reset() {
	*x = SLL2NotifStatusMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2NotifStatusMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2NotifStatusMsg) ProtoMessage() {}

func (x *SLL2NotifStatusMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2NotifStatusMsg.ProtoReflect.Descriptor instead.
func (*SLL2NotifStatusMsg) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{22}
}

func (x *SLL2NotifStatusMsg) GetOper() SLNotifOp {
	if x != nil {
		return x.Oper
	}
	return SLNotifOp_SL_NOTIFOP_RESERVED
}

func (x *SLL2NotifStatusMsg) GetCorrelator() uint64 {
	if x != nil {
		return x.Correlator
	}
	return 0
}

func (x *SLL2NotifStatusMsg) GetBdName() string {
	if x != nil {
		return x.BdName
	}
	return ""
}

func (x *SLL2NotifStatusMsg) GetNotifStatus() *SLErrorStatus {
	if x != nil {
		return x.NotifStatus
	}
	return nil
}

// L2 Notification.
type SLL2Notif struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// L2 Notification type
	EventType SLL2NotifType `protobuf:"varint,1,opt,name=EventType,proto3,enum=service_layer.SLL2NotifType" json:"EventType,omitempty"`
	// Further info based on EventType
	//
	// Types that are assignable to Event:
	//
	//	*SLL2Notif_ErrStatus
	//	*SLL2Notif_NotifStatus
	//	*SLL2Notif_BdStateInfo
	//	*SLL2Notif_Route
	Event isSLL2Notif_Event `protobuf_oneof:"Event"`
}

func (x *SLL2Notif) Reset() {
	*x = SLL2Notif{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_l2_route_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLL2Notif) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLL2Notif) ProtoMessage() {}

func (x *SLL2Notif) ProtoReflect() protoreflect.Message {
	mi := &file_sl_l2_route_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLL2Notif.ProtoReflect.Descriptor instead.
func (*SLL2Notif) Descriptor() ([]byte, []int) {
	return file_sl_l2_route_proto_rawDescGZIP(), []int{23}
}

func (x *SLL2Notif) GetEventType() SLL2NotifType {
	if x != nil {
		return x.EventType
	}
	return SLL2NotifType_SL_L2_EVENT_TYPE_RESERVED
}

func (m *SLL2Notif) GetEvent() isSLL2Notif_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *SLL2Notif) GetErrStatus() *SLErrorStatus {
	if x, ok := x.GetEvent().(*SLL2Notif_ErrStatus); ok {
		return x.ErrStatus
	}
	return nil
}

func (x *SLL2Notif) GetNotifStatus() *SLL2NotifStatusMsg {
	if x, ok := x.GetEvent().(*SLL2Notif_NotifStatus); ok {
		return x.NotifStatus
	}
	return nil
}

func (x *SLL2Notif) GetBdStateInfo() *SLL2BdStateInfo {
	if x, ok := x.GetEvent().(*SLL2Notif_BdStateInfo); ok {
		return x.BdStateInfo
	}
	return nil
}

func (x *SLL2Notif) GetRoute() *SLL2RouteNotif {
	if x, ok := x.GetEvent().(*SLL2Notif_Route); ok {
		return x.Route
	}
	return nil
}

type isSLL2Notif_Event interface {
	isSLL2Notif_Event()
}

type SLL2Notif_ErrStatus struct {
	// case EventType == SL_L2_EVENT_TYPE_ERROR:
	//
	//	=> This field carries error info, if any error occurs during
	//	   notification subscription.
	ErrStatus *SLErrorStatus `protobuf:"bytes,2,opt,name=ErrStatus,proto3,oneof"`
}

type SLL2Notif_NotifStatus struct {
	// case EventType == SL_L2_EVENT_TYPE_STATUS:
	//
	//	=> This field carries the status of the GetNotifMsg request.
	NotifStatus *SLL2NotifStatusMsg `protobuf:"bytes,3,opt,name=NotifStatus,proto3,oneof"`
}

type SLL2Notif_BdStateInfo struct {
	// case EventType == SL_L2_EVENT_TYPE_BD_STATE:
	//
	//	=> This field carries the BD state notification
	BdStateInfo *SLL2BdStateInfo `protobuf:"bytes,4,opt,name=BdStateInfo,proto3,oneof"`
}

type SLL2Notif_Route struct {
	// case EventType == SL_L2_EVENT_TYPE_ROUTE:
	//
	//	=> This field carries the L2 route
	Route *SLL2RouteNotif `protobuf:"bytes,5,opt,name=Route,proto3,oneof"`
}

func (*SLL2Notif_ErrStatus) isSLL2Notif_Event() {}

func (*SLL2Notif_NotifStatus) isSLL2Notif_Event() {}

func (*SLL2Notif_BdStateInfo) isSLL2Notif_Event() {}

func (*SLL2Notif_Route) isSLL2Notif_Event() {}

var File_sl_l2_route_proto protoreflect.FileDescriptor

var file_sl_l2_route_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x6c, 0x5f, 0x6c, 0x32, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x1a, 0x15, 0x73, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x4c, 0x4c,
	0x32, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x22, 0xb6,
	0x01, 0x0a, 0x14, 0x53, 0x4c, 0x4c, 0x32, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x47, 0x65,
	0x74, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x61, 0x78, 0x42, 0x64, 0x52, 0x65, 0x67, 0x50,
	0x65, 0x72, 0x42, 0x64, 0x52, 0x65, 0x67, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x4d, 0x61, 0x78, 0x42, 0x64, 0x52, 0x65, 0x67, 0x50, 0x65, 0x72, 0x42, 0x64, 0x52,
	0x65, 0x67, 0x6d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x61, 0x78, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x4d, 0x61, 0x78, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x65, 0x72, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x6d, 0x73, 0x67, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x53, 0x4c, 0x4c, 0x32,
	0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x65, 0x67, 0x4f, 0x70, 0x52, 0x04, 0x4f, 0x70,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x50, 0x75, 0x72, 0x67,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x50, 0x75, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x4b, 0x0a, 0x0d,
	0x53, 0x4c, 0x4c, 0x32, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x3a, 0x0a,
	0x09, 0x52, 0x65, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09,
	0x52, 0x65, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x58, 0x0a, 0x0c, 0x53, 0x4c, 0x4c,
	0x32, 0x42, 0x64, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x4f, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x65, 0x67, 0x4f, 0x70, 0x52,
	0x04, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x64, 0x52, 0x65, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x42, 0x64, 0x52, 0x65, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x0c, 0x53, 0x4c, 0x4c, 0x32, 0x42, 0x64, 0x52, 0x65, 0x67,
	0x52, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x42, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x42, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0f, 0x53, 0x4c, 0x4c, 0x32,
	0x42, 0x64, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x35, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x42, 0x64, 0x52, 0x65, 0x67, 0x52, 0x65, 0x73, 0x52, 0x07, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x20, 0x0a, 0x0c, 0x53, 0x4c, 0x4c, 0x32, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x45, 0x73, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x73, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x45, 0x73, 0x69, 0x22, 0xb1, 0x02, 0x0a, 0x0b, 0x53, 0x4c, 0x4c,
	0x32, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x68, 0x12, 0x42, 0x0a, 0x06, 0x4e, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x4e, 0x68, 0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x4e, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0b,
	0x4e, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x4e, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x09,
	0x4e, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x4c, 0x32, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x68, 0x48, 0x00, 0x52,
	0x09, 0x4e, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x22, 0x56, 0x0a, 0x0f, 0x53, 0x4c,
	0x4c, 0x32, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x4e, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x4e, 0x48,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x4e, 0x48, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x59,
	0x10, 0x02, 0x42, 0x08, 0x0a, 0x06, 0x4e, 0x68, 0x44, 0x61, 0x74, 0x61, 0x22, 0x95, 0x02, 0x0a,
	0x0d, 0x53, 0x4c, 0x4c, 0x32, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x68, 0x12, 0x3c,
	0x0a, 0x0b, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x68, 0x49, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x0b, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x68, 0x49, 0x70, 0x12, 0x42, 0x0a, 0x0e,
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x68, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x68, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x68, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x4e, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x4e, 0x68, 0x4c, 0x33, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x10, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x68, 0x4c, 0x33, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e,
	0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x12, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x4d, 0x61, 0x63, 0x22, 0x6b, 0x0a, 0x0f, 0x53, 0x4c, 0x4c, 0x32, 0x4d, 0x61, 0x63, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x4d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x49, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0xdf, 0x01, 0x0a, 0x0c, 0x53, 0x4c, 0x4c, 0x32, 0x4d, 0x61, 0x63, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x4d, 0x61, 0x63, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x33, 0x0a, 0x06, 0x4d, 0x61, 0x63, 0x45, 0x73, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x73, 0x69, 0x52, 0x06, 0x4d,
	0x61, 0x63, 0x45, 0x73, 0x69, 0x12, 0x3c, 0x0a, 0x0b, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x4e, 0x68, 0x52, 0x0b, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x68, 0x0a, 0x10, 0x53, 0x4c, 0x4c, 0x32, 0x49, 0x6d, 0x65, 0x74, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x74, 0x68, 0x54, 0x61,
	0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x45, 0x74, 0x68, 0x54, 0x61,
	0x67, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x09, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8e, 0x04,
	0x0a, 0x0d, 0x53, 0x4c, 0x4c, 0x32, 0x49, 0x6d, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x3b, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x49, 0x6d, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x09,
	0x45, 0x6e, 0x63, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x4b, 0x0a, 0x0a,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x49, 0x6d, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x50,
	0x4d, 0x53, 0x49, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x0e, 0x50, 0x4d, 0x53, 0x49,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4d,
	0x53, 0x49, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x4d, 0x53, 0x49, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x50, 0x32, 0x4d, 0x50, 0x5f,
	0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4d, 0x53, 0x49,
	0x5f, 0x4d, 0x4c, 0x44, 0x50, 0x50, 0x32, 0x4d, 0x50, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4d, 0x53, 0x49, 0x5f, 0x50, 0x49, 0x4d, 0x53, 0x53,
	0x4d, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4d,
	0x53, 0x49, 0x5f, 0x50, 0x49, 0x4d, 0x53, 0x4d, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10,
	0x04, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4d, 0x53, 0x49, 0x5f, 0x50, 0x49, 0x4d, 0x42, 0x49, 0x44,
	0x49, 0x52, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x50,
	0x4d, 0x53, 0x49, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x50, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4d, 0x53, 0x49, 0x5f, 0x4d, 0x4c, 0x44, 0x50,
	0x4d, 0x50, 0x32, 0x4d, 0x50, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x07, 0x22, 0xd8,
	0x01, 0x0a, 0x0c, 0x53, 0x4c, 0x4c, 0x32, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x42, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x42, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x4d, 0x61, 0x63,
	0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x4d, 0x61,
	0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x06, 0x4d, 0x61, 0x63,
	0x4b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x07, 0x49, 0x6d, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x49, 0x6d, 0x65, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x07, 0x49, 0x6d, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x42, 0x07, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xd7, 0x01, 0x0a, 0x09, 0x53, 0x4c,
	0x4c, 0x32, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x4c, 0x32, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x39, 0x0a, 0x08, 0x4d, 0x61, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x4d, 0x61, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x4d, 0x61, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x09,
	0x49, 0x6d, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x4c, 0x32, 0x49, 0x6d, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x49, 0x6d, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x0c, 0x53, 0x4c, 0x4c, 0x32, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x52, 0x04, 0x4f,
	0x70, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0c, 0x53, 0x4c, 0x4c, 0x32, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0xac, 0x01, 0x0a, 0x0f,
	0x53, 0x4c, 0x4c, 0x32, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x42, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x0f, 0x53,
	0x4c, 0x4c, 0x32, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x4d, 0x73, 0x67, 0x12, 0x2c,
	0x0a, 0x04, 0x4f, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x4f, 0x70, 0x52, 0x04, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x45, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x45, 0x6f, 0x66, 0x12, 0x16,
	0x0a, 0x05, 0x42, 0x64, 0x41, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x05, 0x42, 0x64, 0x41, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x06, 0x42, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x42, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x71, 0x0a, 0x0e, 0x53,
	0x4c, 0x4c, 0x32, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x12, 0x2d, 0x0a,
	0x04, 0x4f, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x52, 0x04, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x06,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c,
	0x32, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0xf4,
	0x01, 0x0a, 0x0f, 0x53, 0x4c, 0x4c, 0x32, 0x42, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x42, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x42, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32,
	0x42, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x4c, 0x4c, 0x32,
	0x42, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x42, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x82, 0x01, 0x0a, 0x0b, 0x53, 0x4c, 0x4c, 0x32, 0x42, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x42, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x42, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x44, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4c, 0x5f, 0x4c, 0x32,
	0x5f, 0x42, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x42, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4e, 0x45, 0x45,
	0x44, 0x45, 0x44, 0x10, 0x03, 0x22, 0xba, 0x01, 0x0a, 0x12, 0x53, 0x4c, 0x4c, 0x32, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x04,
	0x4f, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x4f, 0x70, 0x52, 0x04, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xd0, 0x02, 0x0a, 0x09, 0x53, 0x4c, 0x4c, 0x32, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x12, 0x3a, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52,
	0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x4c, 0x32, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x73, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x42, 0x0a, 0x0b, 0x42, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x42, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x42, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x48, 0x00, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2a, 0x54, 0x0a, 0x0d, 0x53, 0x4c, 0x4c, 0x32, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f,
	0x4d, 0x41, 0x43, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x5f, 0x49, 0x4d, 0x45, 0x54, 0x10, 0x02, 0x2a, 0x96, 0x02, 0x0a, 0x0d,
	0x53, 0x4c, 0x4c, 0x32, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4c, 0x5f, 0x4c,
	0x32, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x4c, 0x5f, 0x4c,
	0x32, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x4c, 0x5f, 0x4c, 0x32,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x52, 0x10,
	0x05, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x06, 0x12, 0x25, 0x0a,
	0x21, 0x53, 0x4c, 0x5f, 0x4c, 0x32, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x52, 0x10, 0x07, 0x32, 0xeb, 0x03, 0x0a, 0x08, 0x53, 0x4c, 0x4c, 0x32, 0x4f, 0x70, 0x65,
	0x72, 0x12, 0x57, 0x0a, 0x0e, 0x53, 0x4c, 0x4c, 0x32, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73,
	0x47, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x47,
	0x65, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x73, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x4c,
	0x4c, 0x32, 0x52, 0x65, 0x67, 0x4f, 0x70, 0x12, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x52, 0x65, 0x67, 0x4d,
	0x73, 0x67, 0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70,
	0x12, 0x4a, 0x0a, 0x0b, 0x53, 0x4c, 0x4c, 0x32, 0x42, 0x64, 0x52, 0x65, 0x67, 0x4f, 0x70, 0x12,
	0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x4c, 0x32, 0x42, 0x64, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x1a, 0x1e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c,
	0x32, 0x42, 0x64, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0b,
	0x53, 0x4c, 0x4c, 0x32, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x12, 0x1b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x11, 0x53, 0x4c, 0x4c, 0x32,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x4c, 0x32, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x1e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x28, 0x01, 0x30, 0x01, 0x12, 0x52,
	0x0a, 0x12, 0x53, 0x4c, 0x4c, 0x32, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x4d, 0x73, 0x67, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4c, 0x32, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x28, 0x01,
	0x30, 0x01, 0x42, 0x51, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x43, 0x69, 0x73, 0x63, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2d, 0x6f, 0x62, 0x6a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sl_l2_route_proto_rawDescOnce sync.Once
	file_sl_l2_route_proto_rawDescData = file_sl_l2_route_proto_rawDesc
)

func file_sl_l2_route_proto_rawDescGZIP() []byte {
	file_sl_l2_route_proto_rawDescOnce.Do(func() {
		file_sl_l2_route_proto_rawDescData = protoimpl.X.CompressGZIP(file_sl_l2_route_proto_rawDescData)
	})
	return file_sl_l2_route_proto_rawDescData
}

var file_sl_l2_route_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_sl_l2_route_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_sl_l2_route_proto_goTypes = []interface{}{
	(SLL2RouteType)(0),                // 0: service_layer.SLL2RouteType
	(SLL2NotifType)(0),                // 1: service_layer.SLL2NotifType
	(SLL2RouteNh_SLL2RouteNhType)(0),  // 2: service_layer.SLL2RouteNh.SLL2RouteNhType
	(SLL2ImetRoute_PMSITunnelType)(0), // 3: service_layer.SLL2ImetRoute.PMSITunnelType
	(SLL2BdStateInfo_SLL2BdState)(0),  // 4: service_layer.SLL2BdStateInfo.SLL2BdState
	(*SLL2GlobalsGetMsg)(nil),         // 5: service_layer.SLL2GlobalsGetMsg
	(*SLL2GlobalsGetMsgRsp)(nil),      // 6: service_layer.SLL2GlobalsGetMsgRsp
	(*SLL2RegMsg)(nil),                // 7: service_layer.SLL2RegMsg
	(*SLL2RegMsgRsp)(nil),             // 8: service_layer.SLL2RegMsgRsp
	(*SLL2BdRegMsg)(nil),              // 9: service_layer.SLL2BdRegMsg
	(*SLL2BdRegRes)(nil),              // 10: service_layer.SLL2BdRegRes
	(*SLL2BdRegMsgRsp)(nil),           // 11: service_layer.SLL2BdRegMsgRsp
	(*SLL2RouteEsi)(nil),              // 12: service_layer.SLL2RouteEsi
	(*SLL2RouteNh)(nil),               // 13: service_layer.SLL2RouteNh
	(*SLL2OverlayNh)(nil),             // 14: service_layer.SLL2OverlayNh
	(*SLL2MacRouteKey)(nil),           // 15: service_layer.SLL2MacRouteKey
	(*SLL2MacRoute)(nil),              // 16: service_layer.SLL2MacRoute
	(*SLL2ImetRouteKey)(nil),          // 17: service_layer.SLL2ImetRouteKey
	(*SLL2ImetRoute)(nil),             // 18: service_layer.SLL2ImetRoute
	(*SLL2RouteKey)(nil),              // 19: service_layer.SLL2RouteKey
	(*SLL2Route)(nil),                 // 20: service_layer.SLL2Route
	(*SLL2RouteMsg)(nil),              // 21: service_layer.SLL2RouteMsg
	(*SLL2RouteRes)(nil),              // 22: service_layer.SLL2RouteRes
	(*SLL2RouteMsgRsp)(nil),           // 23: service_layer.SLL2RouteMsgRsp
	(*SLL2GetNotifMsg)(nil),           // 24: service_layer.SLL2GetNotifMsg
	(*SLL2RouteNotif)(nil),            // 25: service_layer.SLL2RouteNotif
	(*SLL2BdStateInfo)(nil),           // 26: service_layer.SLL2BdStateInfo
	(*SLL2NotifStatusMsg)(nil),        // 27: service_layer.SLL2NotifStatusMsg
	(*SLL2Notif)(nil),                 // 28: service_layer.SLL2Notif
	(*SLErrorStatus)(nil),             // 29: service_layer.SLErrorStatus
	(SLRegOp)(0),                      // 30: service_layer.SLRegOp
	(*SLInterface)(nil),               // 31: service_layer.SLInterface
	(*SLIpAddress)(nil),               // 32: service_layer.SLIpAddress
	(SLEncapType)(0),                  // 33: service_layer.SLEncapType
	(SLObjectOp)(0),                   // 34: service_layer.SLObjectOp
	(SLNotifOp)(0),                    // 35: service_layer.SLNotifOp
}
var file_sl_l2_route_proto_depIdxs = []int32{
	29, // 0: service_layer.SLL2GlobalsGetMsgRsp.ErrStatus:type_name -> service_layer.SLErrorStatus
	30, // 1: service_layer.SLL2RegMsg.Oper:type_name -> service_layer.SLRegOp
	29, // 2: service_layer.SLL2RegMsgRsp.RegStatus:type_name -> service_layer.SLErrorStatus
	30, // 3: service_layer.SLL2BdRegMsg.Oper:type_name -> service_layer.SLRegOp
	29, // 4: service_layer.SLL2BdRegRes.ErrStatus:type_name -> service_layer.SLErrorStatus
	29, // 5: service_layer.SLL2BdRegMsgRsp.StatusSummary:type_name -> service_layer.SLErrorStatus
	10, // 6: service_layer.SLL2BdRegMsgRsp.Results:type_name -> service_layer.SLL2BdRegRes
	2,  // 7: service_layer.SLL2RouteNh.NhType:type_name -> service_layer.SLL2RouteNh.SLL2RouteNhType
	31, // 8: service_layer.SLL2RouteNh.NhInterface:type_name -> service_layer.SLInterface
	14, // 9: service_layer.SLL2RouteNh.NhOverlay:type_name -> service_layer.SLL2OverlayNh
	32, // 10: service_layer.SLL2OverlayNh.OverlayNhIp:type_name -> service_layer.SLIpAddress
	33, // 11: service_layer.SLL2OverlayNh.OverlayNhEncap:type_name -> service_layer.SLEncapType
	32, // 12: service_layer.SLL2MacRouteKey.IpAddress:type_name -> service_layer.SLIpAddress
	15, // 13: service_layer.SLL2MacRoute.RouteKey:type_name -> service_layer.SLL2MacRouteKey
	12, // 14: service_layer.SLL2MacRoute.MacEsi:type_name -> service_layer.SLL2RouteEsi
	13, // 15: service_layer.SLL2MacRoute.NextHopList:type_name -> service_layer.SLL2RouteNh
	32, // 16: service_layer.SLL2ImetRouteKey.IpAddress:type_name -> service_layer.SLIpAddress
	17, // 17: service_layer.SLL2ImetRoute.RouteKey:type_name -> service_layer.SLL2ImetRouteKey
	33, // 18: service_layer.SLL2ImetRoute.EncapType:type_name -> service_layer.SLEncapType
	3,  // 19: service_layer.SLL2ImetRoute.TunnelType:type_name -> service_layer.SLL2ImetRoute.PMSITunnelType
	0,  // 20: service_layer.SLL2RouteKey.Type:type_name -> service_layer.SLL2RouteType
	15, // 21: service_layer.SLL2RouteKey.MacKey:type_name -> service_layer.SLL2MacRouteKey
	17, // 22: service_layer.SLL2RouteKey.ImetKey:type_name -> service_layer.SLL2ImetRouteKey
	0,  // 23: service_layer.SLL2Route.Type:type_name -> service_layer.SLL2RouteType
	16, // 24: service_layer.SLL2Route.MacRoute:type_name -> service_layer.SLL2MacRoute
	18, // 25: service_layer.SLL2Route.ImetRoute:type_name -> service_layer.SLL2ImetRoute
	34, // 26: service_layer.SLL2RouteMsg.Oper:type_name -> service_layer.SLObjectOp
	20, // 27: service_layer.SLL2RouteMsg.Routes:type_name -> service_layer.SLL2Route
	29, // 28: service_layer.SLL2RouteRes.ErrStatus:type_name -> service_layer.SLErrorStatus
	19, // 29: service_layer.SLL2RouteRes.RouteKey:type_name -> service_layer.SLL2RouteKey
	29, // 30: service_layer.SLL2RouteMsgRsp.StatusSummary:type_name -> service_layer.SLErrorStatus
	22, // 31: service_layer.SLL2RouteMsgRsp.Results:type_name -> service_layer.SLL2RouteRes
	35, // 32: service_layer.SLL2GetNotifMsg.Oper:type_name -> service_layer.SLNotifOp
	34, // 33: service_layer.SLL2RouteNotif.Oper:type_name -> service_layer.SLObjectOp
	20, // 34: service_layer.SLL2RouteNotif.Routes:type_name -> service_layer.SLL2Route
	4,  // 35: service_layer.SLL2BdStateInfo.BdState:type_name -> service_layer.SLL2BdStateInfo.SLL2BdState
	35, // 36: service_layer.SLL2NotifStatusMsg.Oper:type_name -> service_layer.SLNotifOp
	29, // 37: service_layer.SLL2NotifStatusMsg.NotifStatus:type_name -> service_layer.SLErrorStatus
	1,  // 38: service_layer.SLL2Notif.EventType:type_name -> service_layer.SLL2NotifType
	29, // 39: service_layer.SLL2Notif.ErrStatus:type_name -> service_layer.SLErrorStatus
	27, // 40: service_layer.SLL2Notif.NotifStatus:type_name -> service_layer.SLL2NotifStatusMsg
	26, // 41: service_layer.SLL2Notif.BdStateInfo:type_name -> service_layer.SLL2BdStateInfo
	25, // 42: service_layer.SLL2Notif.Route:type_name -> service_layer.SLL2RouteNotif
	5,  // 43: service_layer.SLL2Oper.SLL2GlobalsGet:input_type -> service_layer.SLL2GlobalsGetMsg
	7,  // 44: service_layer.SLL2Oper.SLL2RegOp:input_type -> service_layer.SLL2RegMsg
	9,  // 45: service_layer.SLL2Oper.SLL2BdRegOp:input_type -> service_layer.SLL2BdRegMsg
	21, // 46: service_layer.SLL2Oper.SLL2RouteOp:input_type -> service_layer.SLL2RouteMsg
	21, // 47: service_layer.SLL2Oper.SLL2RouteOpStream:input_type -> service_layer.SLL2RouteMsg
	24, // 48: service_layer.SLL2Oper.SLL2GetNotifStream:input_type -> service_layer.SLL2GetNotifMsg
	6,  // 49: service_layer.SLL2Oper.SLL2GlobalsGet:output_type -> service_layer.SLL2GlobalsGetMsgRsp
	8,  // 50: service_layer.SLL2Oper.SLL2RegOp:output_type -> service_layer.SLL2RegMsgRsp
	11, // 51: service_layer.SLL2Oper.SLL2BdRegOp:output_type -> service_layer.SLL2BdRegMsgRsp
	23, // 52: service_layer.SLL2Oper.SLL2RouteOp:output_type -> service_layer.SLL2RouteMsgRsp
	23, // 53: service_layer.SLL2Oper.SLL2RouteOpStream:output_type -> service_layer.SLL2RouteMsgRsp
	28, // 54: service_layer.SLL2Oper.SLL2GetNotifStream:output_type -> service_layer.SLL2Notif
	49, // [49:55] is the sub-list for method output_type
	43, // [43:49] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_sl_l2_route_proto_init() }
func file_sl_l2_route_proto_init() {
	if File_sl_l2_route_proto != nil {
		return
	}
	file_sl_common_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sl_l2_route_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2GlobalsGetMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_l2_route_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2GlobalsGetMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_l2_route_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2RegMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_l2_route_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2RegMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_l2_route_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2BdRegMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_l2_route_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2BdRegRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_l2_route_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2BdRegMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_l2_route_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2RouteEsi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_l2_route_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2RouteNh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_l2_route_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2OverlayNh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_l2_route_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2MacRouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_l2_route_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2MacRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_l2_route_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2ImetRouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_l2_route_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2ImetRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_l2_route_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_l2_route_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_l2_route_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2RouteMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_l2_route_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2RouteRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_l2_route_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2RouteMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_l2_route_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2GetNotifMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_l2_route_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2RouteNotif); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_l2_route_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2BdStateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_l2_route_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2NotifStatusMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_l2_route_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLL2Notif); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sl_l2_route_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*SLL2RouteNh_NhInterface)(nil),
		(*SLL2RouteNh_NhOverlay)(nil),
	}
	file_sl_l2_route_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*SLL2RouteKey_MacKey)(nil),
		(*SLL2RouteKey_ImetKey)(nil),
	}
	file_sl_l2_route_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*SLL2Route_MacRoute)(nil),
		(*SLL2Route_ImetRoute)(nil),
	}
	file_sl_l2_route_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*SLL2GetNotifMsg_BdAll)(nil),
		(*SLL2GetNotifMsg_BdName)(nil),
	}
	file_sl_l2_route_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*SLL2Notif_ErrStatus)(nil),
		(*SLL2Notif_NotifStatus)(nil),
		(*SLL2Notif_BdStateInfo)(nil),
		(*SLL2Notif_Route)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sl_l2_route_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sl_l2_route_proto_goTypes,
		DependencyIndexes: file_sl_l2_route_proto_depIdxs,
		EnumInfos:         file_sl_l2_route_proto_enumTypes,
		MessageInfos:      file_sl_l2_route_proto_msgTypes,
	}.Build()
	File_sl_l2_route_proto = out.File
	file_sl_l2_route_proto_rawDesc = nil
	file_sl_l2_route_proto_goTypes = nil
	file_sl_l2_route_proto_depIdxs = nil
}
