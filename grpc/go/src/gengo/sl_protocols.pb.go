// @file
// @brief Protcol definitions for BGPLS Topology service proto file.
//
//---------------------------------------------------------------------
// Copyright (c) 2024 by Cisco Systems, Inc.
// All rights reserved.
//---------------------------------------------------------------------
//
//

//@defgroup Protocol
//@brief Protocol service definitions and Global initializations.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.3
// source: sl_protocols.proto

package service_layer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NLRI type
type SLBgplsTopoNlriType int32

const (
	SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_RESERVED                 SLBgplsTopoNlriType = 0
	SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_NODE                     SLBgplsTopoNlriType = 1
	SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_LINK                     SLBgplsTopoNlriType = 2
	SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_IPV4_PREFIX              SLBgplsTopoNlriType = 3
	SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_IPV6_PREFIX              SLBgplsTopoNlriType = 4
	SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_SR_POLICY_CANDIDATE_PATH SLBgplsTopoNlriType = 5
	SLBgplsTopoNlriType_SL_BGPLS_TOPO_NLRI_TYPE_SRV6_SID                 SLBgplsTopoNlriType = 6
)

// Enum value maps for SLBgplsTopoNlriType.
var (
	SLBgplsTopoNlriType_name = map[int32]string{
		0: "SL_BGPLS_TOPO_NLRI_TYPE_RESERVED",
		1: "SL_BGPLS_TOPO_NLRI_TYPE_NODE",
		2: "SL_BGPLS_TOPO_NLRI_TYPE_LINK",
		3: "SL_BGPLS_TOPO_NLRI_TYPE_IPV4_PREFIX",
		4: "SL_BGPLS_TOPO_NLRI_TYPE_IPV6_PREFIX",
		5: "SL_BGPLS_TOPO_NLRI_TYPE_SR_POLICY_CANDIDATE_PATH",
		6: "SL_BGPLS_TOPO_NLRI_TYPE_SRV6_SID",
	}
	SLBgplsTopoNlriType_value = map[string]int32{
		"SL_BGPLS_TOPO_NLRI_TYPE_RESERVED":                 0,
		"SL_BGPLS_TOPO_NLRI_TYPE_NODE":                     1,
		"SL_BGPLS_TOPO_NLRI_TYPE_LINK":                     2,
		"SL_BGPLS_TOPO_NLRI_TYPE_IPV4_PREFIX":              3,
		"SL_BGPLS_TOPO_NLRI_TYPE_IPV6_PREFIX":              4,
		"SL_BGPLS_TOPO_NLRI_TYPE_SR_POLICY_CANDIDATE_PATH": 5,
		"SL_BGPLS_TOPO_NLRI_TYPE_SRV6_SID":                 6,
	}
)

func (x SLBgplsTopoNlriType) Enum() *SLBgplsTopoNlriType {
	p := new(SLBgplsTopoNlriType)
	*p = x
	return p
}

func (x SLBgplsTopoNlriType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoNlriType) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_protocols_proto_enumTypes[0].Descriptor()
}

func (SLBgplsTopoNlriType) Type() protoreflect.EnumType {
	return &file_sl_protocols_proto_enumTypes[0]
}

func (x SLBgplsTopoNlriType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoNlriType.Descriptor instead.
func (SLBgplsTopoNlriType) EnumDescriptor() ([]byte, []int) {
	return file_sl_protocols_proto_rawDescGZIP(), []int{0}
}

// Protocols
type SLBgplsTopoProtocol int32

const (
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_RESERVED SLBgplsTopoProtocol = 0
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_ISIS_L1  SLBgplsTopoProtocol = 1
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_ISIS_L2  SLBgplsTopoProtocol = 2
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_OSPFv2   SLBgplsTopoProtocol = 3
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_DIRECT   SLBgplsTopoProtocol = 4
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_STATIC   SLBgplsTopoProtocol = 5
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_OSPFv3   SLBgplsTopoProtocol = 6
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_BGP      SLBgplsTopoProtocol = 7
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_RSVP_TE  SLBgplsTopoProtocol = 8
	SLBgplsTopoProtocol_SL_BGPLS_TOPO_PROTOCOL_SR       SLBgplsTopoProtocol = 9
)

// Enum value maps for SLBgplsTopoProtocol.
var (
	SLBgplsTopoProtocol_name = map[int32]string{
		0: "SL_BGPLS_TOPO_PROTOCOL_RESERVED",
		1: "SL_BGPLS_TOPO_PROTOCOL_ISIS_L1",
		2: "SL_BGPLS_TOPO_PROTOCOL_ISIS_L2",
		3: "SL_BGPLS_TOPO_PROTOCOL_OSPFv2",
		4: "SL_BGPLS_TOPO_PROTOCOL_DIRECT",
		5: "SL_BGPLS_TOPO_PROTOCOL_STATIC",
		6: "SL_BGPLS_TOPO_PROTOCOL_OSPFv3",
		7: "SL_BGPLS_TOPO_PROTOCOL_BGP",
		8: "SL_BGPLS_TOPO_PROTOCOL_RSVP_TE",
		9: "SL_BGPLS_TOPO_PROTOCOL_SR",
	}
	SLBgplsTopoProtocol_value = map[string]int32{
		"SL_BGPLS_TOPO_PROTOCOL_RESERVED": 0,
		"SL_BGPLS_TOPO_PROTOCOL_ISIS_L1":  1,
		"SL_BGPLS_TOPO_PROTOCOL_ISIS_L2":  2,
		"SL_BGPLS_TOPO_PROTOCOL_OSPFv2":   3,
		"SL_BGPLS_TOPO_PROTOCOL_DIRECT":   4,
		"SL_BGPLS_TOPO_PROTOCOL_STATIC":   5,
		"SL_BGPLS_TOPO_PROTOCOL_OSPFv3":   6,
		"SL_BGPLS_TOPO_PROTOCOL_BGP":      7,
		"SL_BGPLS_TOPO_PROTOCOL_RSVP_TE":  8,
		"SL_BGPLS_TOPO_PROTOCOL_SR":       9,
	}
)

func (x SLBgplsTopoProtocol) Enum() *SLBgplsTopoProtocol {
	p := new(SLBgplsTopoProtocol)
	*p = x
	return p
}

func (x SLBgplsTopoProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_protocols_proto_enumTypes[1].Descriptor()
}

func (SLBgplsTopoProtocol) Type() protoreflect.EnumType {
	return &file_sl_protocols_proto_enumTypes[1]
}

func (x SLBgplsTopoProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoProtocol.Descriptor instead.
func (SLBgplsTopoProtocol) EnumDescriptor() ([]byte, []int) {
	return file_sl_protocols_proto_rawDescGZIP(), []int{1}
}

// OSPF Route types
type SLBgplsTopoOspfRouteType int32

const (
	SLBgplsTopoOspfRouteType_SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_RESERVED   SLBgplsTopoOspfRouteType = 0
	SLBgplsTopoOspfRouteType_SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_INTRA_AREA SLBgplsTopoOspfRouteType = 1
	SLBgplsTopoOspfRouteType_SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_INTER_AREA SLBgplsTopoOspfRouteType = 2
	SLBgplsTopoOspfRouteType_SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXTERN_1   SLBgplsTopoOspfRouteType = 3
	SLBgplsTopoOspfRouteType_SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXTERN_2   SLBgplsTopoOspfRouteType = 4
	SLBgplsTopoOspfRouteType_SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_NSSA_1     SLBgplsTopoOspfRouteType = 5
	SLBgplsTopoOspfRouteType_SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_NSSA_2     SLBgplsTopoOspfRouteType = 6
)

// Enum value maps for SLBgplsTopoOspfRouteType.
var (
	SLBgplsTopoOspfRouteType_name = map[int32]string{
		0: "SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_RESERVED",
		1: "SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_INTRA_AREA",
		2: "SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_INTER_AREA",
		3: "SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXTERN_1",
		4: "SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXTERN_2",
		5: "SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_NSSA_1",
		6: "SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_NSSA_2",
	}
	SLBgplsTopoOspfRouteType_value = map[string]int32{
		"SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_RESERVED":   0,
		"SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_INTRA_AREA": 1,
		"SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_INTER_AREA": 2,
		"SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXTERN_1":   3,
		"SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_EXTERN_2":   4,
		"SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_NSSA_1":     5,
		"SL_BGPLS_TOPO_OSPF_ROUTE_TYPE_NSSA_2":     6,
	}
)

func (x SLBgplsTopoOspfRouteType) Enum() *SLBgplsTopoOspfRouteType {
	p := new(SLBgplsTopoOspfRouteType)
	*p = x
	return p
}

func (x SLBgplsTopoOspfRouteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoOspfRouteType) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_protocols_proto_enumTypes[2].Descriptor()
}

func (SLBgplsTopoOspfRouteType) Type() protoreflect.EnumType {
	return &file_sl_protocols_proto_enumTypes[2]
}

func (x SLBgplsTopoOspfRouteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoOspfRouteType.Descriptor instead.
func (SLBgplsTopoOspfRouteType) EnumDescriptor() ([]byte, []int) {
	return file_sl_protocols_proto_rawDescGZIP(), []int{2}
}

// Protocol Originating SR Policy
type SLBgplsTopoSrPolicyProtocolOrigin int32

const (
	SLBgplsTopoSrPolicyProtocolOrigin_SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_RESERVED              SLBgplsTopoSrPolicyProtocolOrigin = 0
	SLBgplsTopoSrPolicyProtocolOrigin_SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_PCEP                  SLBgplsTopoSrPolicyProtocolOrigin = 1
	SLBgplsTopoSrPolicyProtocolOrigin_SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY         SLBgplsTopoSrPolicyProtocolOrigin = 2
	SLBgplsTopoSrPolicyProtocolOrigin_SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_CONFIG                SLBgplsTopoSrPolicyProtocolOrigin = 3
	SLBgplsTopoSrPolicyProtocolOrigin_SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_PCEP_VIA_PCE          SLBgplsTopoSrPolicyProtocolOrigin = 10
	SLBgplsTopoSrPolicyProtocolOrigin_SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY_VIA_PCE SLBgplsTopoSrPolicyProtocolOrigin = 20
	SLBgplsTopoSrPolicyProtocolOrigin_SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_PCE        SLBgplsTopoSrPolicyProtocolOrigin = 30
)

// Enum value maps for SLBgplsTopoSrPolicyProtocolOrigin.
var (
	SLBgplsTopoSrPolicyProtocolOrigin_name = map[int32]string{
		0:  "SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_RESERVED",
		1:  "SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_PCEP",
		2:  "SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY",
		3:  "SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_CONFIG",
		10: "SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_PCEP_VIA_PCE",
		20: "SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY_VIA_PCE",
		30: "SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_PCE",
	}
	SLBgplsTopoSrPolicyProtocolOrigin_value = map[string]int32{
		"SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_RESERVED":              0,
		"SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_PCEP":                  1,
		"SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY":         2,
		"SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_CONFIG":                3,
		"SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_PCEP_VIA_PCE":          10,
		"SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY_VIA_PCE": 20,
		"SL_BGPLS_TOPO_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_PCE":        30,
	}
)

func (x SLBgplsTopoSrPolicyProtocolOrigin) Enum() *SLBgplsTopoSrPolicyProtocolOrigin {
	p := new(SLBgplsTopoSrPolicyProtocolOrigin)
	*p = x
	return p
}

func (x SLBgplsTopoSrPolicyProtocolOrigin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLBgplsTopoSrPolicyProtocolOrigin) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_protocols_proto_enumTypes[3].Descriptor()
}

func (SLBgplsTopoSrPolicyProtocolOrigin) Type() protoreflect.EnumType {
	return &file_sl_protocols_proto_enumTypes[3]
}

func (x SLBgplsTopoSrPolicyProtocolOrigin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLBgplsTopoSrPolicyProtocolOrigin.Descriptor instead.
func (SLBgplsTopoSrPolicyProtocolOrigin) EnumDescriptor() ([]byte, []int) {
	return file_sl_protocols_proto_rawDescGZIP(), []int{3}
}

var File_sl_protocols_proto protoreflect.FileDescriptor

var file_sl_protocols_proto_rawDesc = []byte{
	0x0a, 0x12, 0x73, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2a, 0xad, 0x02, 0x0a, 0x13, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x4e, 0x6c, 0x72, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x53,
	0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4e, 0x4c, 0x52,
	0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f,
	0x50, 0x4f, 0x5f, 0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x44,
	0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f,
	0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c,
	0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x10, 0x03, 0x12, 0x27,
	0x0a, 0x23, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f,
	0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x50,
	0x52, 0x45, 0x46, 0x49, 0x58, 0x10, 0x04, 0x12, 0x34, 0x0a, 0x30, 0x53, 0x4c, 0x5f, 0x42, 0x47,
	0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x41, 0x4e,
	0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x05, 0x12, 0x24, 0x0a,
	0x20, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4e,
	0x4c, 0x52, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x52, 0x56, 0x36, 0x5f, 0x53, 0x49,
	0x44, 0x10, 0x06, 0x2a, 0xf1, 0x02, 0x0a, 0x13, 0x53, 0x4c, 0x42, 0x67, 0x70, 0x6c, 0x73, 0x54,
	0x6f, 0x70, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x1f, 0x53,
	0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50,
	0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f,
	0x4c, 0x31, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49,
	0x53, 0x49, 0x53, 0x5f, 0x4c, 0x32, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x42,
	0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x76, 0x32, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x53,
	0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x04, 0x12, 0x21,
	0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10,
	0x05, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f,
	0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x53, 0x50, 0x46,
	0x76, 0x33, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x42,
	0x47, 0x50, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x52,
	0x53, 0x56, 0x50, 0x5f, 0x54, 0x45, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x4c, 0x5f, 0x42,
	0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x53, 0x52, 0x10, 0x09, 0x2a, 0xce, 0x02, 0x0a, 0x18, 0x53, 0x4c, 0x42, 0x67,
	0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x2c, 0x0a, 0x28, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50,
	0x4f, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x41, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x01, 0x12, 0x2c,
	0x0a, 0x28, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f,
	0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26,
	0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4f, 0x53,
	0x50, 0x46, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x52, 0x4e, 0x5f, 0x31, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x4c, 0x5f, 0x42,
	0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e,
	0x5f, 0x32, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x53, 0x53, 0x41, 0x5f, 0x31, 0x10, 0x05, 0x12, 0x28,
	0x0a, 0x24, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f,
	0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x53, 0x53, 0x41, 0x5f, 0x32, 0x10, 0x06, 0x2a, 0xb3, 0x03, 0x0a, 0x21, 0x53, 0x4c, 0x42,
	0x67, 0x70, 0x6c, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x34,
	0x0a, 0x30, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f,
	0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53,
	0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f,
	0x50, 0x43, 0x45, 0x50, 0x10, 0x01, 0x12, 0x39, 0x0a, 0x35, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50,
	0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49,
	0x4e, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10,
	0x02, 0x12, 0x32, 0x0a, 0x2e, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f,
	0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x10, 0x03, 0x12, 0x38, 0x0a, 0x34, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c,
	0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e,
	0x5f, 0x50, 0x43, 0x45, 0x50, 0x5f, 0x56, 0x49, 0x41, 0x5f, 0x50, 0x43, 0x45, 0x10, 0x0a, 0x12,
	0x41, 0x0a, 0x3d, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x4f,
	0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x53,
	0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x56, 0x49, 0x41, 0x5f, 0x50, 0x43, 0x45,
	0x10, 0x14, 0x12, 0x3a, 0x0a, 0x36, 0x53, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x4c, 0x53, 0x5f, 0x54,
	0x4f, 0x50, 0x4f, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x56, 0x49, 0x41, 0x5f, 0x50, 0x43, 0x45, 0x10, 0x1e, 0x42, 0x51,
	0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x69, 0x73,
	0x63, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x6f,
	0x62, 0x6a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sl_protocols_proto_rawDescOnce sync.Once
	file_sl_protocols_proto_rawDescData = file_sl_protocols_proto_rawDesc
)

func file_sl_protocols_proto_rawDescGZIP() []byte {
	file_sl_protocols_proto_rawDescOnce.Do(func() {
		file_sl_protocols_proto_rawDescData = protoimpl.X.CompressGZIP(file_sl_protocols_proto_rawDescData)
	})
	return file_sl_protocols_proto_rawDescData
}

var file_sl_protocols_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_sl_protocols_proto_goTypes = []interface{}{
	(SLBgplsTopoNlriType)(0),               // 0: service_layer.SLBgplsTopoNlriType
	(SLBgplsTopoProtocol)(0),               // 1: service_layer.SLBgplsTopoProtocol
	(SLBgplsTopoOspfRouteType)(0),          // 2: service_layer.SLBgplsTopoOspfRouteType
	(SLBgplsTopoSrPolicyProtocolOrigin)(0), // 3: service_layer.SLBgplsTopoSrPolicyProtocolOrigin
}
var file_sl_protocols_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_sl_protocols_proto_init() }
func file_sl_protocols_proto_init() {
	if File_sl_protocols_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sl_protocols_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sl_protocols_proto_goTypes,
		DependencyIndexes: file_sl_protocols_proto_depIdxs,
		EnumInfos:         file_sl_protocols_proto_enumTypes,
	}.Build()
	File_sl_protocols_proto = out.File
	file_sl_protocols_proto_rawDesc = nil
	file_sl_protocols_proto_goTypes = nil
	file_sl_protocols_proto_depIdxs = nil
}
