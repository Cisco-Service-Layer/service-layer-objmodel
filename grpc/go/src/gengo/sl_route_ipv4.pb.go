// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sl_route_ipv4.proto

package service_layer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// IPv4 route
type SLRoutev4 struct {
	// IPv4 Prefix
	// Valid addresses:
	//     0.0.0.0
	//     1.0.0.0 - 223.255.255.255
	Prefix uint32 `protobuf:"varint,1,opt,name=Prefix" json:"Prefix,omitempty"`
	// IPv4 prefix length, [0-32]
	PrefixLen uint32 `protobuf:"varint,2,opt,name=PrefixLen" json:"PrefixLen,omitempty"`
	// Common route attributes
	RouteCommon *SLRouteCommon `protobuf:"bytes,3,opt,name=RouteCommon" json:"RouteCommon,omitempty"`
	// List of route paths for a particular route.
	// Specifying more than one path is allowed for ECMP/UCMP cases
	PathList []*SLRoutePath `protobuf:"bytes,4,rep,name=PathList" json:"PathList,omitempty"`
}

func (m *SLRoutev4) Reset()                    { *m = SLRoutev4{} }
func (m *SLRoutev4) String() string            { return proto.CompactTextString(m) }
func (*SLRoutev4) ProtoMessage()               {}
func (*SLRoutev4) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *SLRoutev4) GetPrefix() uint32 {
	if m != nil {
		return m.Prefix
	}
	return 0
}

func (m *SLRoutev4) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

func (m *SLRoutev4) GetRouteCommon() *SLRouteCommon {
	if m != nil {
		return m.RouteCommon
	}
	return nil
}

func (m *SLRoutev4) GetPathList() []*SLRoutePath {
	if m != nil {
		return m.PathList
	}
	return nil
}

// List of routes for bulk download
type SLRoutev4Msg struct {
	// Route Object Operations
	Oper SLObjectOp `protobuf:"varint,1,opt,name=Oper,enum=service_layer.SLObjectOp" json:"Oper,omitempty"`
	// Correlator. This can be used to correlate replies with requests.
	// The Server simply reflects this field back in the reply.
	Correlator uint64 `protobuf:"varint,2,opt,name=Correlator" json:"Correlator,omitempty"`
	// VRF name.
	VrfName string `protobuf:"bytes,3,opt,name=VrfName" json:"VrfName,omitempty"`
	// List of routes for the VRF specified above
	Routes []*SLRoutev4 `protobuf:"bytes,4,rep,name=Routes" json:"Routes,omitempty"`
}

func (m *SLRoutev4Msg) Reset()                    { *m = SLRoutev4Msg{} }
func (m *SLRoutev4Msg) String() string            { return proto.CompactTextString(m) }
func (*SLRoutev4Msg) ProtoMessage()               {}
func (*SLRoutev4Msg) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *SLRoutev4Msg) GetOper() SLObjectOp {
	if m != nil {
		return m.Oper
	}
	return SLObjectOp_SL_OBJOP_RESERVED
}

func (m *SLRoutev4Msg) GetCorrelator() uint64 {
	if m != nil {
		return m.Correlator
	}
	return 0
}

func (m *SLRoutev4Msg) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *SLRoutev4Msg) GetRoutes() []*SLRoutev4 {
	if m != nil {
		return m.Routes
	}
	return nil
}

// IPv4 route result, uniquely identified by the Prefix/PrefixLen pair
type SLRoutev4Res struct {
	// Corresponding error code
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus" json:"ErrStatus,omitempty"`
	// IPv4 Prefix
	Prefix uint32 `protobuf:"varint,2,opt,name=Prefix" json:"Prefix,omitempty"`
	// IPv4 prefix length, [0-32]
	PrefixLen uint32 `protobuf:"varint,3,opt,name=PrefixLen" json:"PrefixLen,omitempty"`
}

func (m *SLRoutev4Res) Reset()                    { *m = SLRoutev4Res{} }
func (m *SLRoutev4Res) String() string            { return proto.CompactTextString(m) }
func (*SLRoutev4Res) ProtoMessage()               {}
func (*SLRoutev4Res) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

func (m *SLRoutev4Res) GetErrStatus() *SLErrorStatus {
	if m != nil {
		return m.ErrStatus
	}
	return nil
}

func (m *SLRoutev4Res) GetPrefix() uint32 {
	if m != nil {
		return m.Prefix
	}
	return 0
}

func (m *SLRoutev4Res) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

// IPv4 bulk route result status
type SLRoutev4MsgRsp struct {
	// Correlator. This can be used to correlate replies with requests.
	// The Server simply reflects this field back in the reply.
	Correlator uint64 `protobuf:"varint,1,opt,name=Correlator" json:"Correlator,omitempty"`
	// VRF name (matches the VRF name of the original operation)
	VrfName string `protobuf:"bytes,2,opt,name=VrfName" json:"VrfName,omitempty"`
	// Summary result of the bulk operation (refer to enum SLErrorStatus)
	// In general, the StatusSummary implies one of 3 things:
	// 1. SL_SUCCESS: signifies that the entire bulk operation was successful.
	//         In this case, the Results list is empty.
	// 2. SL_SOME_ERR: signifies that the operation failed for one or more
	//         entries. In this case, Results holds the result for
	//         each individual entry in the bulk.
	// 3. SL_RPC_XXX: signifies that the entire bulk operation failed.
	//         In this case, the Results list is empty.
	StatusSummary *SLErrorStatus `protobuf:"bytes,3,opt,name=StatusSummary" json:"StatusSummary,omitempty"`
	// In case of errors, this field indicates which entry in the bulk was
	// erroneous.
	Results []*SLRoutev4Res `protobuf:"bytes,4,rep,name=Results" json:"Results,omitempty"`
}

func (m *SLRoutev4MsgRsp) Reset()                    { *m = SLRoutev4MsgRsp{} }
func (m *SLRoutev4MsgRsp) String() string            { return proto.CompactTextString(m) }
func (*SLRoutev4MsgRsp) ProtoMessage()               {}
func (*SLRoutev4MsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{3} }

func (m *SLRoutev4MsgRsp) GetCorrelator() uint64 {
	if m != nil {
		return m.Correlator
	}
	return 0
}

func (m *SLRoutev4MsgRsp) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *SLRoutev4MsgRsp) GetStatusSummary() *SLErrorStatus {
	if m != nil {
		return m.StatusSummary
	}
	return nil
}

func (m *SLRoutev4MsgRsp) GetResults() []*SLRoutev4Res {
	if m != nil {
		return m.Results
	}
	return nil
}

// Used to retrieve route attributes
type SLRoutev4GetMsg struct {
	// Correlator. This can be used to correlate stream replies with requests.
	// The Server simply reflects this field back in the reply.
	Correlator uint64 `protobuf:"varint,1,opt,name=Correlator" json:"Correlator,omitempty"`
	// VRF name.
	// If the Key is not specified, then request up to the first
	// 'EntriesCount' entries.
	VrfName string `protobuf:"bytes,2,opt,name=VrfName" json:"VrfName,omitempty"`
	// IPv4 Prefix
	Prefix uint32 `protobuf:"varint,3,opt,name=Prefix" json:"Prefix,omitempty"`
	// IPv4 prefix length, [0-32]
	PrefixLen uint32 `protobuf:"varint,4,opt,name=PrefixLen" json:"PrefixLen,omitempty"`
	// Number of entries requested
	EntriesCount uint32 `protobuf:"varint,5,opt,name=EntriesCount" json:"EntriesCount,omitempty"`
	// if GetNext is FALSE:
	//     request up to 'EntriesCount' entries starting from the key
	// If GetNext is TRUE, or if the key exact match is not found:
	//     request up to 'EntriesCount' entries starting from the key's next
	GetNext bool `protobuf:"varint,6,opt,name=GetNext" json:"GetNext,omitempty"`
}

func (m *SLRoutev4GetMsg) Reset()                    { *m = SLRoutev4GetMsg{} }
func (m *SLRoutev4GetMsg) String() string            { return proto.CompactTextString(m) }
func (*SLRoutev4GetMsg) ProtoMessage()               {}
func (*SLRoutev4GetMsg) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{4} }

func (m *SLRoutev4GetMsg) GetCorrelator() uint64 {
	if m != nil {
		return m.Correlator
	}
	return 0
}

func (m *SLRoutev4GetMsg) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *SLRoutev4GetMsg) GetPrefix() uint32 {
	if m != nil {
		return m.Prefix
	}
	return 0
}

func (m *SLRoutev4GetMsg) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

func (m *SLRoutev4GetMsg) GetEntriesCount() uint32 {
	if m != nil {
		return m.EntriesCount
	}
	return 0
}

func (m *SLRoutev4GetMsg) GetGetNext() bool {
	if m != nil {
		return m.GetNext
	}
	return false
}

// Gt Route message response
type SLRoutev4GetMsgRsp struct {
	// Correlator. This can be used to correlate replies with requests.
	// The Server simply reflects this field back in the reply.
	Correlator uint64 `protobuf:"varint,1,opt,name=Correlator" json:"Correlator,omitempty"`
	// End Of File.
	// When set to True, it indicates that the server has returned M, where
	// M < N, of the original N requested Entries.
	Eof bool `protobuf:"varint,2,opt,name=Eof" json:"Eof,omitempty"`
	// VRF name.
	VrfName string `protobuf:"bytes,3,opt,name=VrfName" json:"VrfName,omitempty"`
	// Status of the Get operation
	ErrStatus *SLErrorStatus `protobuf:"bytes,4,opt,name=ErrStatus" json:"ErrStatus,omitempty"`
	// Returned entries as requested in the Get operation.
	// if ErrStatus is SL_SUCCESS, Entries contains the info requested
	Entries []*SLRoutev4 `protobuf:"bytes,5,rep,name=Entries" json:"Entries,omitempty"`
}

func (m *SLRoutev4GetMsgRsp) Reset()                    { *m = SLRoutev4GetMsgRsp{} }
func (m *SLRoutev4GetMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*SLRoutev4GetMsgRsp) ProtoMessage()               {}
func (*SLRoutev4GetMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{5} }

func (m *SLRoutev4GetMsgRsp) GetCorrelator() uint64 {
	if m != nil {
		return m.Correlator
	}
	return 0
}

func (m *SLRoutev4GetMsgRsp) GetEof() bool {
	if m != nil {
		return m.Eof
	}
	return false
}

func (m *SLRoutev4GetMsgRsp) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *SLRoutev4GetMsgRsp) GetErrStatus() *SLErrorStatus {
	if m != nil {
		return m.ErrStatus
	}
	return nil
}

func (m *SLRoutev4GetMsgRsp) GetEntries() []*SLRoutev4 {
	if m != nil {
		return m.Entries
	}
	return nil
}

// IPv4 Route notification
type SLRoutev4NotifRoute struct {
	// VRF name.
	VrfName string `protobuf:"bytes,1,opt,name=VrfName" json:"VrfName,omitempty"`
	// IPv4 routes
	Entries []*SLRoutev4 `protobuf:"bytes,2,rep,name=Entries" json:"Entries,omitempty"`
}

func (m *SLRoutev4NotifRoute) Reset()                    { *m = SLRoutev4NotifRoute{} }
func (m *SLRoutev4NotifRoute) String() string            { return proto.CompactTextString(m) }
func (*SLRoutev4NotifRoute) ProtoMessage()               {}
func (*SLRoutev4NotifRoute) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{6} }

func (m *SLRoutev4NotifRoute) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *SLRoutev4NotifRoute) GetEntries() []*SLRoutev4 {
	if m != nil {
		return m.Entries
	}
	return nil
}

// IPv4 notification message
type SLRoutev4Notif struct {
	// Event Type
	EventType SLNotifType `protobuf:"varint,1,opt,name=EventType,enum=service_layer.SLNotifType" json:"EventType,omitempty"`
	// Further info based on EventType
	//
	// Types that are valid to be assigned to Event:
	//	*SLRoutev4Notif_ErrStatus
	//	*SLRoutev4Notif_NotifStatus
	//	*SLRoutev4Notif_Route
	//	*SLRoutev4Notif_Marker
	//	*SLRoutev4Notif_Vrf
	Event isSLRoutev4Notif_Event `protobuf_oneof:"Event"`
}

func (m *SLRoutev4Notif) Reset()                    { *m = SLRoutev4Notif{} }
func (m *SLRoutev4Notif) String() string            { return proto.CompactTextString(m) }
func (*SLRoutev4Notif) ProtoMessage()               {}
func (*SLRoutev4Notif) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{7} }

type isSLRoutev4Notif_Event interface {
	isSLRoutev4Notif_Event()
}

type SLRoutev4Notif_ErrStatus struct {
	ErrStatus *SLErrorStatus `protobuf:"bytes,2,opt,name=ErrStatus,oneof"`
}
type SLRoutev4Notif_NotifStatus struct {
	NotifStatus *SLRouteNotifStatus `protobuf:"bytes,3,opt,name=NotifStatus,oneof"`
}
type SLRoutev4Notif_Route struct {
	Route *SLRoutev4NotifRoute `protobuf:"bytes,4,opt,name=Route,oneof"`
}
type SLRoutev4Notif_Marker struct {
	Marker *SLRouteNotifMarker `protobuf:"bytes,5,opt,name=Marker,oneof"`
}
type SLRoutev4Notif_Vrf struct {
	Vrf *SLVrfNotif `protobuf:"bytes,6,opt,name=Vrf,oneof"`
}

func (*SLRoutev4Notif_ErrStatus) isSLRoutev4Notif_Event()   {}
func (*SLRoutev4Notif_NotifStatus) isSLRoutev4Notif_Event() {}
func (*SLRoutev4Notif_Route) isSLRoutev4Notif_Event()       {}
func (*SLRoutev4Notif_Marker) isSLRoutev4Notif_Event()      {}
func (*SLRoutev4Notif_Vrf) isSLRoutev4Notif_Event()         {}

func (m *SLRoutev4Notif) GetEvent() isSLRoutev4Notif_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *SLRoutev4Notif) GetEventType() SLNotifType {
	if m != nil {
		return m.EventType
	}
	return SLNotifType_SL_EVENT_TYPE_RESERVED
}

func (m *SLRoutev4Notif) GetErrStatus() *SLErrorStatus {
	if x, ok := m.GetEvent().(*SLRoutev4Notif_ErrStatus); ok {
		return x.ErrStatus
	}
	return nil
}

func (m *SLRoutev4Notif) GetNotifStatus() *SLRouteNotifStatus {
	if x, ok := m.GetEvent().(*SLRoutev4Notif_NotifStatus); ok {
		return x.NotifStatus
	}
	return nil
}

func (m *SLRoutev4Notif) GetRoute() *SLRoutev4NotifRoute {
	if x, ok := m.GetEvent().(*SLRoutev4Notif_Route); ok {
		return x.Route
	}
	return nil
}

func (m *SLRoutev4Notif) GetMarker() *SLRouteNotifMarker {
	if x, ok := m.GetEvent().(*SLRoutev4Notif_Marker); ok {
		return x.Marker
	}
	return nil
}

func (m *SLRoutev4Notif) GetVrf() *SLVrfNotif {
	if x, ok := m.GetEvent().(*SLRoutev4Notif_Vrf); ok {
		return x.Vrf
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SLRoutev4Notif) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SLRoutev4Notif_OneofMarshaler, _SLRoutev4Notif_OneofUnmarshaler, _SLRoutev4Notif_OneofSizer, []interface{}{
		(*SLRoutev4Notif_ErrStatus)(nil),
		(*SLRoutev4Notif_NotifStatus)(nil),
		(*SLRoutev4Notif_Route)(nil),
		(*SLRoutev4Notif_Marker)(nil),
		(*SLRoutev4Notif_Vrf)(nil),
	}
}

func _SLRoutev4Notif_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SLRoutev4Notif)
	// Event
	switch x := m.Event.(type) {
	case *SLRoutev4Notif_ErrStatus:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ErrStatus); err != nil {
			return err
		}
	case *SLRoutev4Notif_NotifStatus:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NotifStatus); err != nil {
			return err
		}
	case *SLRoutev4Notif_Route:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Route); err != nil {
			return err
		}
	case *SLRoutev4Notif_Marker:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Marker); err != nil {
			return err
		}
	case *SLRoutev4Notif_Vrf:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vrf); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SLRoutev4Notif.Event has unexpected type %T", x)
	}
	return nil
}

func _SLRoutev4Notif_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SLRoutev4Notif)
	switch tag {
	case 2: // Event.ErrStatus
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SLErrorStatus)
		err := b.DecodeMessage(msg)
		m.Event = &SLRoutev4Notif_ErrStatus{msg}
		return true, err
	case 3: // Event.NotifStatus
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SLRouteNotifStatus)
		err := b.DecodeMessage(msg)
		m.Event = &SLRoutev4Notif_NotifStatus{msg}
		return true, err
	case 4: // Event.Route
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SLRoutev4NotifRoute)
		err := b.DecodeMessage(msg)
		m.Event = &SLRoutev4Notif_Route{msg}
		return true, err
	case 5: // Event.Marker
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SLRouteNotifMarker)
		err := b.DecodeMessage(msg)
		m.Event = &SLRoutev4Notif_Marker{msg}
		return true, err
	case 6: // Event.Vrf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SLVrfNotif)
		err := b.DecodeMessage(msg)
		m.Event = &SLRoutev4Notif_Vrf{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SLRoutev4Notif_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SLRoutev4Notif)
	// Event
	switch x := m.Event.(type) {
	case *SLRoutev4Notif_ErrStatus:
		s := proto.Size(x.ErrStatus)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SLRoutev4Notif_NotifStatus:
		s := proto.Size(x.NotifStatus)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SLRoutev4Notif_Route:
		s := proto.Size(x.Route)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SLRoutev4Notif_Marker:
		s := proto.Size(x.Marker)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SLRoutev4Notif_Vrf:
		s := proto.Size(x.Vrf)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*SLRoutev4)(nil), "service_layer.SLRoutev4")
	proto.RegisterType((*SLRoutev4Msg)(nil), "service_layer.SLRoutev4Msg")
	proto.RegisterType((*SLRoutev4Res)(nil), "service_layer.SLRoutev4Res")
	proto.RegisterType((*SLRoutev4MsgRsp)(nil), "service_layer.SLRoutev4MsgRsp")
	proto.RegisterType((*SLRoutev4GetMsg)(nil), "service_layer.SLRoutev4GetMsg")
	proto.RegisterType((*SLRoutev4GetMsgRsp)(nil), "service_layer.SLRoutev4GetMsgRsp")
	proto.RegisterType((*SLRoutev4NotifRoute)(nil), "service_layer.SLRoutev4NotifRoute")
	proto.RegisterType((*SLRoutev4Notif)(nil), "service_layer.SLRoutev4Notif")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SLRoutev4Oper service

type SLRoutev4OperClient interface {
	// Used to retrieve Global Route information
	SLRoutev4GlobalsGet(ctx context.Context, in *SLRouteGlobalsGetMsg, opts ...grpc.CallOption) (*SLRouteGlobalsGetMsgRsp, error)
	// Used to retrieve Global Route Stats
	SLRoutev4GlobalStatsGet(ctx context.Context, in *SLRouteGlobalStatsGetMsg, opts ...grpc.CallOption) (*SLRouteGlobalStatsGetMsgRsp, error)
	// SLVrfRegMsg.Oper = SL_REGOP_REGISTER:
	//     VRF registration: Sends a list of VRF registration messages
	//     and expects a list of registration responses.
	//     A client Must Register a VRF BEFORE routes can be added/modified in
	//    the associated VRF.
	//
	// SLVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
	//     VRF Un-registeration: Sends a list of VRF un-registration messages
	//     and expects a list of un-registration responses.
	//     This can be used to convey that the client is no longer interested
	//     in this VRF. All previously installed routes would be lost.
	//
	// SLVrfRegMsg.Oper = SL_REGOP_EOF:
	//     VRF End Of File message.
	//     After Registration, the client is expected to send an EOF
	//     message to convey the end of replay of the client's known objects.
	//     This is especially useful under certain restart scenarios when the
	//     client and the server are trying to synchronize their Routes.
	SLRoutev4VrfRegOp(ctx context.Context, in *SLVrfRegMsg, opts ...grpc.CallOption) (*SLVrfRegMsgRsp, error)
	// VRF get. Used to retrieve VRF attributes from the server.
	SLRoutev4VrfRegGet(ctx context.Context, in *SLVrfRegGetMsg, opts ...grpc.CallOption) (*SLVrfRegGetMsgRsp, error)
	// Used to retrieve VRF Stats from the server.
	SLRoutev4VrfGetStats(ctx context.Context, in *SLVrfRegGetMsg, opts ...grpc.CallOption) (*SLVRFGetStatsMsgRsp, error)
	// SLRoutev4Msg.Oper = SL_OBJOP_ADD:
	//     Route add. Fails if the route already exists.
	//
	// SLRoutev4Msg.Oper = SL_OBJOP_UPDATE:
	//     Route update. Creates or updates the route.
	//
	// SLRoutev4Msg.Oper = SL_OBJOP_DELETE:
	//     Route delete. The route path is not necessary to delete the route.
	SLRoutev4Op(ctx context.Context, in *SLRoutev4Msg, opts ...grpc.CallOption) (*SLRoutev4MsgRsp, error)
	// Retrieves route attributes.
	SLRoutev4Get(ctx context.Context, in *SLRoutev4GetMsg, opts ...grpc.CallOption) (*SLRoutev4GetMsgRsp, error)
	// SLRoutev4Msg.Oper = SL_OBJOP_ADD:
	//     Route add. Fails if the route already exists.
	//
	// SLRoutev4Msg.Oper = SL_OBJOP_UPDATE:
	//     Route update. Creates or updates the route.
	//
	// SLRoutev4Msg.Oper = SL_OBJOP_DELETE:
	//     Route delete. The route path is not necessary to delete the route.
	SLRoutev4OpStream(ctx context.Context, opts ...grpc.CallOption) (SLRoutev4Oper_SLRoutev4OpStreamClient, error)
	// Retrieves route attributes.
	SLRoutev4GetStream(ctx context.Context, opts ...grpc.CallOption) (SLRoutev4Oper_SLRoutev4GetStreamClient, error)
	// This call is used to get a stream of route notifications.
	// It can be used to get "push" notifications for route
	// adds/updates/deletes.
	// The caller must maintain the GRPC channel as long as there is
	// interest in route notifications.
	//
	// The call takes a stream of per-VRF notification requests.
	// The success/failure of the notification request is relayed in the
	// SLRouteNotifStatus followed by a Start marker, any routes if present,
	// and an End Marker.
	//
	SLRoutev4GetNotifStream(ctx context.Context, opts ...grpc.CallOption) (SLRoutev4Oper_SLRoutev4GetNotifStreamClient, error)
}

type sLRoutev4OperClient struct {
	cc *grpc.ClientConn
}

func NewSLRoutev4OperClient(cc *grpc.ClientConn) SLRoutev4OperClient {
	return &sLRoutev4OperClient{cc}
}

func (c *sLRoutev4OperClient) SLRoutev4GlobalsGet(ctx context.Context, in *SLRouteGlobalsGetMsg, opts ...grpc.CallOption) (*SLRouteGlobalsGetMsgRsp, error) {
	out := new(SLRouteGlobalsGetMsgRsp)
	err := grpc.Invoke(ctx, "/service_layer.SLRoutev4Oper/SLRoutev4GlobalsGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLRoutev4OperClient) SLRoutev4GlobalStatsGet(ctx context.Context, in *SLRouteGlobalStatsGetMsg, opts ...grpc.CallOption) (*SLRouteGlobalStatsGetMsgRsp, error) {
	out := new(SLRouteGlobalStatsGetMsgRsp)
	err := grpc.Invoke(ctx, "/service_layer.SLRoutev4Oper/SLRoutev4GlobalStatsGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLRoutev4OperClient) SLRoutev4VrfRegOp(ctx context.Context, in *SLVrfRegMsg, opts ...grpc.CallOption) (*SLVrfRegMsgRsp, error) {
	out := new(SLVrfRegMsgRsp)
	err := grpc.Invoke(ctx, "/service_layer.SLRoutev4Oper/SLRoutev4VrfRegOp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLRoutev4OperClient) SLRoutev4VrfRegGet(ctx context.Context, in *SLVrfRegGetMsg, opts ...grpc.CallOption) (*SLVrfRegGetMsgRsp, error) {
	out := new(SLVrfRegGetMsgRsp)
	err := grpc.Invoke(ctx, "/service_layer.SLRoutev4Oper/SLRoutev4VrfRegGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLRoutev4OperClient) SLRoutev4VrfGetStats(ctx context.Context, in *SLVrfRegGetMsg, opts ...grpc.CallOption) (*SLVRFGetStatsMsgRsp, error) {
	out := new(SLVRFGetStatsMsgRsp)
	err := grpc.Invoke(ctx, "/service_layer.SLRoutev4Oper/SLRoutev4VrfGetStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLRoutev4OperClient) SLRoutev4Op(ctx context.Context, in *SLRoutev4Msg, opts ...grpc.CallOption) (*SLRoutev4MsgRsp, error) {
	out := new(SLRoutev4MsgRsp)
	err := grpc.Invoke(ctx, "/service_layer.SLRoutev4Oper/SLRoutev4Op", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLRoutev4OperClient) SLRoutev4Get(ctx context.Context, in *SLRoutev4GetMsg, opts ...grpc.CallOption) (*SLRoutev4GetMsgRsp, error) {
	out := new(SLRoutev4GetMsgRsp)
	err := grpc.Invoke(ctx, "/service_layer.SLRoutev4Oper/SLRoutev4Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLRoutev4OperClient) SLRoutev4OpStream(ctx context.Context, opts ...grpc.CallOption) (SLRoutev4Oper_SLRoutev4OpStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SLRoutev4Oper_serviceDesc.Streams[0], c.cc, "/service_layer.SLRoutev4Oper/SLRoutev4OpStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sLRoutev4OperSLRoutev4OpStreamClient{stream}
	return x, nil
}

type SLRoutev4Oper_SLRoutev4OpStreamClient interface {
	Send(*SLRoutev4Msg) error
	Recv() (*SLRoutev4MsgRsp, error)
	grpc.ClientStream
}

type sLRoutev4OperSLRoutev4OpStreamClient struct {
	grpc.ClientStream
}

func (x *sLRoutev4OperSLRoutev4OpStreamClient) Send(m *SLRoutev4Msg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sLRoutev4OperSLRoutev4OpStreamClient) Recv() (*SLRoutev4MsgRsp, error) {
	m := new(SLRoutev4MsgRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sLRoutev4OperClient) SLRoutev4GetStream(ctx context.Context, opts ...grpc.CallOption) (SLRoutev4Oper_SLRoutev4GetStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SLRoutev4Oper_serviceDesc.Streams[1], c.cc, "/service_layer.SLRoutev4Oper/SLRoutev4GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sLRoutev4OperSLRoutev4GetStreamClient{stream}
	return x, nil
}

type SLRoutev4Oper_SLRoutev4GetStreamClient interface {
	Send(*SLRoutev4GetMsg) error
	Recv() (*SLRoutev4GetMsgRsp, error)
	grpc.ClientStream
}

type sLRoutev4OperSLRoutev4GetStreamClient struct {
	grpc.ClientStream
}

func (x *sLRoutev4OperSLRoutev4GetStreamClient) Send(m *SLRoutev4GetMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sLRoutev4OperSLRoutev4GetStreamClient) Recv() (*SLRoutev4GetMsgRsp, error) {
	m := new(SLRoutev4GetMsgRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sLRoutev4OperClient) SLRoutev4GetNotifStream(ctx context.Context, opts ...grpc.CallOption) (SLRoutev4Oper_SLRoutev4GetNotifStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SLRoutev4Oper_serviceDesc.Streams[2], c.cc, "/service_layer.SLRoutev4Oper/SLRoutev4GetNotifStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sLRoutev4OperSLRoutev4GetNotifStreamClient{stream}
	return x, nil
}

type SLRoutev4Oper_SLRoutev4GetNotifStreamClient interface {
	Send(*SLRouteGetNotifMsg) error
	Recv() (*SLRoutev4Notif, error)
	grpc.ClientStream
}

type sLRoutev4OperSLRoutev4GetNotifStreamClient struct {
	grpc.ClientStream
}

func (x *sLRoutev4OperSLRoutev4GetNotifStreamClient) Send(m *SLRouteGetNotifMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sLRoutev4OperSLRoutev4GetNotifStreamClient) Recv() (*SLRoutev4Notif, error) {
	m := new(SLRoutev4Notif)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SLRoutev4Oper service

type SLRoutev4OperServer interface {
	// Used to retrieve Global Route information
	SLRoutev4GlobalsGet(context.Context, *SLRouteGlobalsGetMsg) (*SLRouteGlobalsGetMsgRsp, error)
	// Used to retrieve Global Route Stats
	SLRoutev4GlobalStatsGet(context.Context, *SLRouteGlobalStatsGetMsg) (*SLRouteGlobalStatsGetMsgRsp, error)
	// SLVrfRegMsg.Oper = SL_REGOP_REGISTER:
	//     VRF registration: Sends a list of VRF registration messages
	//     and expects a list of registration responses.
	//     A client Must Register a VRF BEFORE routes can be added/modified in
	//    the associated VRF.
	//
	// SLVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
	//     VRF Un-registeration: Sends a list of VRF un-registration messages
	//     and expects a list of un-registration responses.
	//     This can be used to convey that the client is no longer interested
	//     in this VRF. All previously installed routes would be lost.
	//
	// SLVrfRegMsg.Oper = SL_REGOP_EOF:
	//     VRF End Of File message.
	//     After Registration, the client is expected to send an EOF
	//     message to convey the end of replay of the client's known objects.
	//     This is especially useful under certain restart scenarios when the
	//     client and the server are trying to synchronize their Routes.
	SLRoutev4VrfRegOp(context.Context, *SLVrfRegMsg) (*SLVrfRegMsgRsp, error)
	// VRF get. Used to retrieve VRF attributes from the server.
	SLRoutev4VrfRegGet(context.Context, *SLVrfRegGetMsg) (*SLVrfRegGetMsgRsp, error)
	// Used to retrieve VRF Stats from the server.
	SLRoutev4VrfGetStats(context.Context, *SLVrfRegGetMsg) (*SLVRFGetStatsMsgRsp, error)
	// SLRoutev4Msg.Oper = SL_OBJOP_ADD:
	//     Route add. Fails if the route already exists.
	//
	// SLRoutev4Msg.Oper = SL_OBJOP_UPDATE:
	//     Route update. Creates or updates the route.
	//
	// SLRoutev4Msg.Oper = SL_OBJOP_DELETE:
	//     Route delete. The route path is not necessary to delete the route.
	SLRoutev4Op(context.Context, *SLRoutev4Msg) (*SLRoutev4MsgRsp, error)
	// Retrieves route attributes.
	SLRoutev4Get(context.Context, *SLRoutev4GetMsg) (*SLRoutev4GetMsgRsp, error)
	// SLRoutev4Msg.Oper = SL_OBJOP_ADD:
	//     Route add. Fails if the route already exists.
	//
	// SLRoutev4Msg.Oper = SL_OBJOP_UPDATE:
	//     Route update. Creates or updates the route.
	//
	// SLRoutev4Msg.Oper = SL_OBJOP_DELETE:
	//     Route delete. The route path is not necessary to delete the route.
	SLRoutev4OpStream(SLRoutev4Oper_SLRoutev4OpStreamServer) error
	// Retrieves route attributes.
	SLRoutev4GetStream(SLRoutev4Oper_SLRoutev4GetStreamServer) error
	// This call is used to get a stream of route notifications.
	// It can be used to get "push" notifications for route
	// adds/updates/deletes.
	// The caller must maintain the GRPC channel as long as there is
	// interest in route notifications.
	//
	// The call takes a stream of per-VRF notification requests.
	// The success/failure of the notification request is relayed in the
	// SLRouteNotifStatus followed by a Start marker, any routes if present,
	// and an End Marker.
	//
	SLRoutev4GetNotifStream(SLRoutev4Oper_SLRoutev4GetNotifStreamServer) error
}

func RegisterSLRoutev4OperServer(s *grpc.Server, srv SLRoutev4OperServer) {
	s.RegisterService(&_SLRoutev4Oper_serviceDesc, srv)
}

func _SLRoutev4Oper_SLRoutev4GlobalsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLRouteGlobalsGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLRoutev4OperServer).SLRoutev4GlobalsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLRoutev4Oper/SLRoutev4GlobalsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLRoutev4OperServer).SLRoutev4GlobalsGet(ctx, req.(*SLRouteGlobalsGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLRoutev4Oper_SLRoutev4GlobalStatsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLRouteGlobalStatsGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLRoutev4OperServer).SLRoutev4GlobalStatsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLRoutev4Oper/SLRoutev4GlobalStatsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLRoutev4OperServer).SLRoutev4GlobalStatsGet(ctx, req.(*SLRouteGlobalStatsGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLRoutev4Oper_SLRoutev4VrfRegOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLVrfRegMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLRoutev4OperServer).SLRoutev4VrfRegOp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLRoutev4Oper/SLRoutev4VrfRegOp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLRoutev4OperServer).SLRoutev4VrfRegOp(ctx, req.(*SLVrfRegMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLRoutev4Oper_SLRoutev4VrfRegGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLVrfRegGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLRoutev4OperServer).SLRoutev4VrfRegGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLRoutev4Oper/SLRoutev4VrfRegGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLRoutev4OperServer).SLRoutev4VrfRegGet(ctx, req.(*SLVrfRegGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLRoutev4Oper_SLRoutev4VrfGetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLVrfRegGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLRoutev4OperServer).SLRoutev4VrfGetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLRoutev4Oper/SLRoutev4VrfGetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLRoutev4OperServer).SLRoutev4VrfGetStats(ctx, req.(*SLVrfRegGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLRoutev4Oper_SLRoutev4Op_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLRoutev4Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLRoutev4OperServer).SLRoutev4Op(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLRoutev4Oper/SLRoutev4Op",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLRoutev4OperServer).SLRoutev4Op(ctx, req.(*SLRoutev4Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLRoutev4Oper_SLRoutev4Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLRoutev4GetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLRoutev4OperServer).SLRoutev4Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLRoutev4Oper/SLRoutev4Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLRoutev4OperServer).SLRoutev4Get(ctx, req.(*SLRoutev4GetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLRoutev4Oper_SLRoutev4OpStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SLRoutev4OperServer).SLRoutev4OpStream(&sLRoutev4OperSLRoutev4OpStreamServer{stream})
}

type SLRoutev4Oper_SLRoutev4OpStreamServer interface {
	Send(*SLRoutev4MsgRsp) error
	Recv() (*SLRoutev4Msg, error)
	grpc.ServerStream
}

type sLRoutev4OperSLRoutev4OpStreamServer struct {
	grpc.ServerStream
}

func (x *sLRoutev4OperSLRoutev4OpStreamServer) Send(m *SLRoutev4MsgRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sLRoutev4OperSLRoutev4OpStreamServer) Recv() (*SLRoutev4Msg, error) {
	m := new(SLRoutev4Msg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SLRoutev4Oper_SLRoutev4GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SLRoutev4OperServer).SLRoutev4GetStream(&sLRoutev4OperSLRoutev4GetStreamServer{stream})
}

type SLRoutev4Oper_SLRoutev4GetStreamServer interface {
	Send(*SLRoutev4GetMsgRsp) error
	Recv() (*SLRoutev4GetMsg, error)
	grpc.ServerStream
}

type sLRoutev4OperSLRoutev4GetStreamServer struct {
	grpc.ServerStream
}

func (x *sLRoutev4OperSLRoutev4GetStreamServer) Send(m *SLRoutev4GetMsgRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sLRoutev4OperSLRoutev4GetStreamServer) Recv() (*SLRoutev4GetMsg, error) {
	m := new(SLRoutev4GetMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SLRoutev4Oper_SLRoutev4GetNotifStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SLRoutev4OperServer).SLRoutev4GetNotifStream(&sLRoutev4OperSLRoutev4GetNotifStreamServer{stream})
}

type SLRoutev4Oper_SLRoutev4GetNotifStreamServer interface {
	Send(*SLRoutev4Notif) error
	Recv() (*SLRouteGetNotifMsg, error)
	grpc.ServerStream
}

type sLRoutev4OperSLRoutev4GetNotifStreamServer struct {
	grpc.ServerStream
}

func (x *sLRoutev4OperSLRoutev4GetNotifStreamServer) Send(m *SLRoutev4Notif) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sLRoutev4OperSLRoutev4GetNotifStreamServer) Recv() (*SLRouteGetNotifMsg, error) {
	m := new(SLRouteGetNotifMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SLRoutev4Oper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service_layer.SLRoutev4Oper",
	HandlerType: (*SLRoutev4OperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SLRoutev4GlobalsGet",
			Handler:    _SLRoutev4Oper_SLRoutev4GlobalsGet_Handler,
		},
		{
			MethodName: "SLRoutev4GlobalStatsGet",
			Handler:    _SLRoutev4Oper_SLRoutev4GlobalStatsGet_Handler,
		},
		{
			MethodName: "SLRoutev4VrfRegOp",
			Handler:    _SLRoutev4Oper_SLRoutev4VrfRegOp_Handler,
		},
		{
			MethodName: "SLRoutev4VrfRegGet",
			Handler:    _SLRoutev4Oper_SLRoutev4VrfRegGet_Handler,
		},
		{
			MethodName: "SLRoutev4VrfGetStats",
			Handler:    _SLRoutev4Oper_SLRoutev4VrfGetStats_Handler,
		},
		{
			MethodName: "SLRoutev4Op",
			Handler:    _SLRoutev4Oper_SLRoutev4Op_Handler,
		},
		{
			MethodName: "SLRoutev4Get",
			Handler:    _SLRoutev4Oper_SLRoutev4Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SLRoutev4OpStream",
			Handler:       _SLRoutev4Oper_SLRoutev4OpStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SLRoutev4GetStream",
			Handler:       _SLRoutev4Oper_SLRoutev4GetStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SLRoutev4GetNotifStream",
			Handler:       _SLRoutev4Oper_SLRoutev4GetNotifStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sl_route_ipv4.proto",
}

func init() { proto.RegisterFile("sl_route_ipv4.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 805 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcd, 0x6e, 0xda, 0x4a,
	0x14, 0xc6, 0xfc, 0x86, 0x43, 0xc8, 0xbd, 0x77, 0x72, 0x7f, 0x7c, 0xb9, 0xb9, 0x11, 0x71, 0xa5,
	0x16, 0x55, 0x4a, 0x14, 0xd1, 0xb4, 0xaa, 0xd2, 0xaa, 0x8b, 0x44, 0x14, 0x54, 0x25, 0x90, 0x0e,
	0x29, 0x52, 0xd5, 0x05, 0x32, 0x68, 0xa0, 0xb4, 0x80, 0xad, 0x99, 0x01, 0x85, 0x5d, 0x1e, 0xa3,
	0xaf, 0xd0, 0x47, 0xe8, 0xaa, 0xbb, 0xae, 0xfb, 0x48, 0xd5, 0x8c, 0xc7, 0x30, 0x26, 0x36, 0xa1,
	0xcd, 0xce, 0x9e, 0xf3, 0x9d, 0xef, 0x7c, 0xe7, 0x3b, 0xc7, 0x03, 0xb0, 0xcd, 0x86, 0x6d, 0xea,
	0x4c, 0x38, 0x69, 0x0f, 0xdc, 0xe9, 0xd1, 0x81, 0x4b, 0x1d, 0xee, 0xa0, 0x3c, 0x23, 0x74, 0x3a,
	0xe8, 0x92, 0xf6, 0xd0, 0x9e, 0x11, 0x5a, 0xf8, 0x8b, 0x0d, 0xdb, 0x5d, 0x67, 0x34, 0x72, 0xc6,
	0x6d, 0x3e, 0x73, 0x09, 0xf3, 0x50, 0xf2, 0xd8, 0x4b, 0xf5, 0x82, 0xde, 0xb1, 0xf5, 0xc5, 0x80,
	0x6c, 0xf3, 0x0c, 0x8b, 0xc0, 0xf4, 0x08, 0xfd, 0x0d, 0xe9, 0x0b, 0x4a, 0x7a, 0x83, 0x2b, 0xd3,
	0x28, 0x1a, 0xa5, 0x3c, 0x56, 0x6f, 0x68, 0x07, 0xb2, 0xde, 0xd3, 0x19, 0x19, 0x9b, 0x71, 0x19,
	0x5a, 0x1c, 0xa0, 0x17, 0x90, 0x93, 0x04, 0xa7, 0x92, 0xd8, 0x4c, 0x14, 0x8d, 0x52, 0xae, 0xbc,
	0x73, 0x10, 0x90, 0x75, 0xa0, 0x8a, 0x78, 0x18, 0xac, 0x27, 0xa0, 0x27, 0xb0, 0x71, 0x61, 0xf3,
	0xf7, 0x67, 0x03, 0xc6, 0xcd, 0x64, 0x31, 0x51, 0xca, 0x95, 0x0b, 0xe1, 0xc9, 0x02, 0x85, 0xe7,
	0x58, 0xeb, 0xb3, 0x01, 0x9b, 0x73, 0xed, 0xe7, 0xac, 0x8f, 0xf6, 0x21, 0xd9, 0x70, 0x09, 0x95,
	0xe2, 0xb7, 0xca, 0xff, 0xde, 0x20, 0x69, 0x74, 0x3e, 0x90, 0x2e, 0x6f, 0xb8, 0x58, 0xc2, 0xd0,
	0x2e, 0xc0, 0xa9, 0x43, 0x29, 0x19, 0xda, 0xdc, 0xa1, 0xb2, 0xad, 0x24, 0xd6, 0x4e, 0x90, 0x09,
	0x99, 0x16, 0xed, 0xd5, 0xed, 0x11, 0x91, 0x3d, 0x65, 0xb1, 0xff, 0x8a, 0x0e, 0x21, 0x2d, 0xcb,
	0x32, 0xa5, 0xd7, 0x0c, 0xd7, 0x3b, 0x3d, 0xc2, 0x0a, 0x67, 0x5d, 0xeb, 0x5a, 0x31, 0x61, 0xe8,
	0x18, 0xb2, 0x15, 0x4a, 0x9b, 0xdc, 0xe6, 0x13, 0x26, 0x05, 0x87, 0x59, 0x56, 0xa1, 0xd4, 0x51,
	0x18, 0xbc, 0x80, 0x6b, 0x63, 0x8a, 0x47, 0x8f, 0x29, 0xb1, 0x34, 0x26, 0xeb, 0x9b, 0x01, 0xbf,
	0xe9, 0x76, 0x61, 0xe6, 0x2e, 0x59, 0x60, 0xac, 0xb2, 0x20, 0x1e, 0xb4, 0xe0, 0x04, 0xf2, 0x9e,
	0x9a, 0xe6, 0x64, 0x34, 0xb2, 0xe9, 0x2c, 0x72, 0xec, 0x7a, 0x0f, 0xc1, 0x14, 0xf4, 0x18, 0x32,
	0x98, 0xb0, 0xc9, 0x90, 0xfb, 0x3e, 0xfe, 0x17, 0xe9, 0x23, 0x61, 0xd8, 0xc7, 0x5a, 0x5f, 0xf5,
	0x46, 0xaa, 0x84, 0x8b, 0xd1, 0xff, 0x7a, 0x23, 0x0b, 0x33, 0x13, 0xd1, 0x66, 0x26, 0x97, 0x77,
	0xde, 0x82, 0xcd, 0xca, 0x98, 0xd3, 0x01, 0x61, 0xa7, 0xce, 0x64, 0xcc, 0xcd, 0x94, 0x04, 0x04,
	0xce, 0x44, 0xcd, 0x2a, 0xe1, 0x75, 0x72, 0xc5, 0xcd, 0x74, 0xd1, 0x28, 0x6d, 0x60, 0xff, 0xd5,
	0xfa, 0x6e, 0x00, 0x5a, 0xea, 0x60, 0x9d, 0x69, 0xfc, 0x0e, 0x89, 0x8a, 0xd3, 0x93, 0x0d, 0x6c,
	0x60, 0xf1, 0xb8, 0x62, 0x45, 0x03, 0xfb, 0x95, 0xfc, 0xb9, 0xfd, 0x2a, 0x43, 0x46, 0x35, 0x62,
	0xa6, 0x6e, 0xd9, 0x6f, 0x1f, 0x68, 0x75, 0x61, 0x7b, 0x7e, 0x5a, 0x77, 0xf8, 0xa0, 0x27, 0x9f,
	0x75, 0x81, 0x46, 0x50, 0xa0, 0x56, 0x24, 0xbe, 0x6e, 0x91, 0xeb, 0x04, 0x6c, 0x05, 0xab, 0xa0,
	0xa7, 0x90, 0xad, 0x4c, 0xc9, 0x98, 0x5f, 0xce, 0x5c, 0xa2, 0x3e, 0xfc, 0x9b, 0xb7, 0x87, 0x84,
	0x0a, 0x04, 0x5e, 0x80, 0xd1, 0x73, 0xdd, 0xa1, 0xf8, 0xed, 0x0e, 0xd5, 0x62, 0xba, 0x47, 0x15,
	0xc8, 0x49, 0x56, 0x95, 0xef, 0x6d, 0xff, 0x5e, 0x78, 0x0b, 0x1a, 0xb0, 0x16, 0xc3, 0x7a, 0x1e,
	0x3a, 0x86, 0x94, 0x84, 0xa8, 0x11, 0x59, 0x51, 0x1e, 0x2c, 0x2c, 0xad, 0xc5, 0xb0, 0x97, 0x82,
	0x9e, 0x41, 0xfa, 0xdc, 0xa6, 0x1f, 0x09, 0x95, 0xdb, 0xb7, 0xba, 0xba, 0x07, 0xac, 0xc5, 0xb0,
	0x4a, 0x41, 0xfb, 0x90, 0x68, 0xd1, 0x9e, 0x5c, 0xcc, 0x5c, 0xc8, 0x55, 0x29, 0xa6, 0x24, 0xf2,
	0x6a, 0x31, 0x2c, 0x70, 0x27, 0x19, 0x48, 0x49, 0xe7, 0xca, 0x9f, 0x32, 0x90, 0x9f, 0xab, 0x92,
	0xd7, 0x68, 0x47, 0x9b, 0x7c, 0x75, 0xe8, 0x74, 0xec, 0x21, 0xab, 0x12, 0x8e, 0xee, 0x85, 0xab,
	0x59, 0x20, 0xce, 0x59, 0xbf, 0x70, 0x7f, 0x0d, 0x90, 0xf8, 0x32, 0xc6, 0xf0, 0xcf, 0x52, 0x0d,
	0xe1, 0x9f, 0xac, 0xf3, 0x60, 0x15, 0x85, 0x8f, 0x12, 0xb5, 0x1e, 0xae, 0x09, 0x14, 0xf5, 0xea,
	0xf0, 0xc7, 0xbc, 0x5e, 0x8b, 0xf6, 0x30, 0xe9, 0x37, 0x5c, 0x54, 0x08, 0x73, 0x09, 0x93, 0xbe,
	0x20, 0xff, 0x3f, 0x3a, 0x26, 0xf8, 0xde, 0x68, 0xdf, 0xbb, 0x17, 0x10, 0xd2, 0xa3, 0x92, 0x94,
	0xe0, 0xe2, 0xca, 0xb0, 0xa0, 0x7d, 0x0b, 0x7f, 0xea, 0xb4, 0x55, 0xc2, 0x65, 0x1f, 0xb7, 0x11,
	0xdf, 0xdc, 0xb2, 0x16, 0x7e, 0xe9, 0x27, 0x2b, 0xea, 0x57, 0x90, 0xd3, 0xc6, 0x8c, 0x22, 0x6f,
	0x66, 0xc1, 0xb7, 0xbb, 0x22, 0x28, 0xb8, 0x5e, 0x6b, 0xbf, 0x7d, 0xa2, 0xef, 0x48, 0xbc, 0xd2,
	0xb7, 0xb7, 0x3a, 0x2e, 0x28, 0x2f, 0xb5, 0x01, 0x35, 0xdc, 0x26, 0xa7, 0xc4, 0x1e, 0xdd, 0x49,
	0x64, 0xc9, 0x38, 0x34, 0xd0, 0xbb, 0xe0, 0xb5, 0xac, 0x68, 0xef, 0x2e, 0x57, 0x92, 0xb7, 0xf5,
	0x1d, 0x26, 0x5c, 0xdd, 0x02, 0xb2, 0x42, 0x04, 0x83, 0x8f, 0x0a, 0x5f, 0x30, 0xfd, 0x66, 0x10,
	0x05, 0x3a, 0x69, 0xf9, 0x97, 0xee, 0xd1, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xed, 0x5d, 0x3c,
	0x37, 0x26, 0x0a, 0x00, 0x00,
}
