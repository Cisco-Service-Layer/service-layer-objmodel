// @file
// @brief Server RPC proto file for IPv4.
//
// ----------------------------------------------------------------
//  Copyright (c) 2016, 2023 by cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.3
// source: sl_route_ipv4.proto

package service_layer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// IPv4 route
type SLRoutev4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv4 Prefix
	// Valid addresses:
	//
	//	0.0.0.0
	//	1.0.0.0 - 223.255.255.255
	Prefix uint32 `protobuf:"varint,1,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
	// IPv4 prefix length, [0-32]
	PrefixLen uint32 `protobuf:"varint,2,opt,name=PrefixLen,proto3" json:"PrefixLen,omitempty"`
	// Common route attributes
	RouteCommon *SLRouteCommon `protobuf:"bytes,3,opt,name=RouteCommon,proto3" json:"RouteCommon,omitempty"`
	// List of route paths for a particular route.
	// Specifying more than one path is allowed for ECMP/UCMP cases
	PathList []*SLRoutePath `protobuf:"bytes,4,rep,name=PathList,proto3" json:"PathList,omitempty"`
}

func (x *SLRoutev4) Reset() {
	*x = SLRoutev4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_route_ipv4_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLRoutev4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLRoutev4) ProtoMessage() {}

func (x *SLRoutev4) ProtoReflect() protoreflect.Message {
	mi := &file_sl_route_ipv4_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLRoutev4.ProtoReflect.Descriptor instead.
func (*SLRoutev4) Descriptor() ([]byte, []int) {
	return file_sl_route_ipv4_proto_rawDescGZIP(), []int{0}
}

func (x *SLRoutev4) GetPrefix() uint32 {
	if x != nil {
		return x.Prefix
	}
	return 0
}

func (x *SLRoutev4) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *SLRoutev4) GetRouteCommon() *SLRouteCommon {
	if x != nil {
		return x.RouteCommon
	}
	return nil
}

func (x *SLRoutev4) GetPathList() []*SLRoutePath {
	if x != nil {
		return x.PathList
	}
	return nil
}

// List of routes for bulk download
type SLRoutev4Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Route Object Operations
	Oper SLObjectOp `protobuf:"varint,1,opt,name=Oper,proto3,enum=service_layer.SLObjectOp" json:"Oper,omitempty"`
	// Correlator. This can be used to correlate replies with requests.
	// The Server simply reflects this field back in the reply.
	Correlator uint64 `protobuf:"varint,2,opt,name=Correlator,proto3" json:"Correlator,omitempty"`
	// VRF name.
	VrfName string `protobuf:"bytes,3,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// List of routes for the VRF specified above
	Routes []*SLRoutev4 `protobuf:"bytes,4,rep,name=Routes,proto3" json:"Routes,omitempty"`
}

func (x *SLRoutev4Msg) Reset() {
	*x = SLRoutev4Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_route_ipv4_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLRoutev4Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLRoutev4Msg) ProtoMessage() {}

func (x *SLRoutev4Msg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_route_ipv4_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLRoutev4Msg.ProtoReflect.Descriptor instead.
func (*SLRoutev4Msg) Descriptor() ([]byte, []int) {
	return file_sl_route_ipv4_proto_rawDescGZIP(), []int{1}
}

func (x *SLRoutev4Msg) GetOper() SLObjectOp {
	if x != nil {
		return x.Oper
	}
	return SLObjectOp_SL_OBJOP_RESERVED
}

func (x *SLRoutev4Msg) GetCorrelator() uint64 {
	if x != nil {
		return x.Correlator
	}
	return 0
}

func (x *SLRoutev4Msg) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SLRoutev4Msg) GetRoutes() []*SLRoutev4 {
	if x != nil {
		return x.Routes
	}
	return nil
}

// IPv4 route result, uniquely identified by the Prefix/PrefixLen pair
type SLRoutev4Res struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Corresponding error code
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// IPv4 Prefix
	Prefix uint32 `protobuf:"varint,2,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
	// IPv4 prefix length, [0-32]
	PrefixLen uint32 `protobuf:"varint,3,opt,name=PrefixLen,proto3" json:"PrefixLen,omitempty"`
}

func (x *SLRoutev4Res) Reset() {
	*x = SLRoutev4Res{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_route_ipv4_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLRoutev4Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLRoutev4Res) ProtoMessage() {}

func (x *SLRoutev4Res) ProtoReflect() protoreflect.Message {
	mi := &file_sl_route_ipv4_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLRoutev4Res.ProtoReflect.Descriptor instead.
func (*SLRoutev4Res) Descriptor() ([]byte, []int) {
	return file_sl_route_ipv4_proto_rawDescGZIP(), []int{2}
}

func (x *SLRoutev4Res) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (x *SLRoutev4Res) GetPrefix() uint32 {
	if x != nil {
		return x.Prefix
	}
	return 0
}

func (x *SLRoutev4Res) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

// IPv4 bulk route result status
type SLRoutev4MsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Correlator. This can be used to correlate replies with requests.
	// The Server simply reflects this field back in the reply.
	Correlator uint64 `protobuf:"varint,1,opt,name=Correlator,proto3" json:"Correlator,omitempty"`
	// VRF name (matches the VRF name of the original operation)
	VrfName string `protobuf:"bytes,2,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// Summary result of the bulk operation (refer to enum SLErrorStatus)
	// In general, the StatusSummary implies one of 3 things:
	//  1. SL_SUCCESS: signifies that the entire bulk operation was successful.
	//     In this case, the Results list is empty.
	//  2. SL_SOME_ERR: signifies that the operation failed for one or more
	//     entries. In this case, Results holds the result for
	//     each individual entry in the bulk.
	//  3. SL_RPC_XXX: signifies that the entire bulk operation failed.
	//     In this case, the Results list is empty.
	StatusSummary *SLErrorStatus `protobuf:"bytes,3,opt,name=StatusSummary,proto3" json:"StatusSummary,omitempty"`
	// In case of errors, this field indicates which entry in the bulk was
	// erroneous.
	Results []*SLRoutev4Res `protobuf:"bytes,4,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *SLRoutev4MsgRsp) Reset() {
	*x = SLRoutev4MsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_route_ipv4_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLRoutev4MsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLRoutev4MsgRsp) ProtoMessage() {}

func (x *SLRoutev4MsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_route_ipv4_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLRoutev4MsgRsp.ProtoReflect.Descriptor instead.
func (*SLRoutev4MsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_route_ipv4_proto_rawDescGZIP(), []int{3}
}

func (x *SLRoutev4MsgRsp) GetCorrelator() uint64 {
	if x != nil {
		return x.Correlator
	}
	return 0
}

func (x *SLRoutev4MsgRsp) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SLRoutev4MsgRsp) GetStatusSummary() *SLErrorStatus {
	if x != nil {
		return x.StatusSummary
	}
	return nil
}

func (x *SLRoutev4MsgRsp) GetResults() []*SLRoutev4Res {
	if x != nil {
		return x.Results
	}
	return nil
}

// Used to retrieve route attributes
type SLRoutev4GetMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Correlator. This can be used to correlate stream replies with requests.
	// The Server simply reflects this field back in the reply.
	Correlator uint64 `protobuf:"varint,1,opt,name=Correlator,proto3" json:"Correlator,omitempty"`
	// VRF name.
	// If the Key is not specified, then request up to the first
	// 'EntriesCount' entries.
	VrfName string `protobuf:"bytes,2,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// IPv4 Prefix
	Prefix uint32 `protobuf:"varint,3,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
	// IPv4 prefix length, [0-32]
	PrefixLen uint32 `protobuf:"varint,4,opt,name=PrefixLen,proto3" json:"PrefixLen,omitempty"`
	// Number of entries requested
	EntriesCount uint32 `protobuf:"varint,5,opt,name=EntriesCount,proto3" json:"EntriesCount,omitempty"`
	// if GetNext is FALSE:
	//
	//	request up to 'EntriesCount' entries starting from the key
	//
	// If GetNext is TRUE, or if the key exact match is not found:
	//
	//	request up to 'EntriesCount' entries starting from the key's next
	GetNext bool `protobuf:"varint,6,opt,name=GetNext,proto3" json:"GetNext,omitempty"`
}

func (x *SLRoutev4GetMsg) Reset() {
	*x = SLRoutev4GetMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_route_ipv4_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLRoutev4GetMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLRoutev4GetMsg) ProtoMessage() {}

func (x *SLRoutev4GetMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_route_ipv4_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLRoutev4GetMsg.ProtoReflect.Descriptor instead.
func (*SLRoutev4GetMsg) Descriptor() ([]byte, []int) {
	return file_sl_route_ipv4_proto_rawDescGZIP(), []int{4}
}

func (x *SLRoutev4GetMsg) GetCorrelator() uint64 {
	if x != nil {
		return x.Correlator
	}
	return 0
}

func (x *SLRoutev4GetMsg) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SLRoutev4GetMsg) GetPrefix() uint32 {
	if x != nil {
		return x.Prefix
	}
	return 0
}

func (x *SLRoutev4GetMsg) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *SLRoutev4GetMsg) GetEntriesCount() uint32 {
	if x != nil {
		return x.EntriesCount
	}
	return 0
}

func (x *SLRoutev4GetMsg) GetGetNext() bool {
	if x != nil {
		return x.GetNext
	}
	return false
}

// Gt Route message response
type SLRoutev4GetMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Correlator. This can be used to correlate replies with requests.
	// The Server simply reflects this field back in the reply.
	Correlator uint64 `protobuf:"varint,1,opt,name=Correlator,proto3" json:"Correlator,omitempty"`
	// End Of File.
	// When set to True, it indicates that the server has returned M, where
	// M < N, of the original N requested Entries.
	Eof bool `protobuf:"varint,2,opt,name=Eof,proto3" json:"Eof,omitempty"`
	// VRF name.
	VrfName string `protobuf:"bytes,3,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// Status of the Get operation
	ErrStatus *SLErrorStatus `protobuf:"bytes,4,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// Returned entries as requested in the Get operation.
	// if ErrStatus is SL_SUCCESS, Entries contains the info requested
	Entries []*SLRoutev4 `protobuf:"bytes,5,rep,name=Entries,proto3" json:"Entries,omitempty"`
}

func (x *SLRoutev4GetMsgRsp) Reset() {
	*x = SLRoutev4GetMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_route_ipv4_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLRoutev4GetMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLRoutev4GetMsgRsp) ProtoMessage() {}

func (x *SLRoutev4GetMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_route_ipv4_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLRoutev4GetMsgRsp.ProtoReflect.Descriptor instead.
func (*SLRoutev4GetMsgRsp) Descriptor() ([]byte, []int) {
	return file_sl_route_ipv4_proto_rawDescGZIP(), []int{5}
}

func (x *SLRoutev4GetMsgRsp) GetCorrelator() uint64 {
	if x != nil {
		return x.Correlator
	}
	return 0
}

func (x *SLRoutev4GetMsgRsp) GetEof() bool {
	if x != nil {
		return x.Eof
	}
	return false
}

func (x *SLRoutev4GetMsgRsp) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SLRoutev4GetMsgRsp) GetErrStatus() *SLErrorStatus {
	if x != nil {
		return x.ErrStatus
	}
	return nil
}

func (x *SLRoutev4GetMsgRsp) GetEntries() []*SLRoutev4 {
	if x != nil {
		return x.Entries
	}
	return nil
}

// IPv4 Route notification
type SLRoutev4NotifRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VRF name.
	VrfName string `protobuf:"bytes,1,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// IPv4 routes
	Entries []*SLRoutev4 `protobuf:"bytes,2,rep,name=Entries,proto3" json:"Entries,omitempty"`
}

func (x *SLRoutev4NotifRoute) Reset() {
	*x = SLRoutev4NotifRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_route_ipv4_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLRoutev4NotifRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLRoutev4NotifRoute) ProtoMessage() {}

func (x *SLRoutev4NotifRoute) ProtoReflect() protoreflect.Message {
	mi := &file_sl_route_ipv4_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLRoutev4NotifRoute.ProtoReflect.Descriptor instead.
func (*SLRoutev4NotifRoute) Descriptor() ([]byte, []int) {
	return file_sl_route_ipv4_proto_rawDescGZIP(), []int{6}
}

func (x *SLRoutev4NotifRoute) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *SLRoutev4NotifRoute) GetEntries() []*SLRoutev4 {
	if x != nil {
		return x.Entries
	}
	return nil
}

// IPv4 notification message
type SLRoutev4Notif struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event Type
	EventType SLNotifType `protobuf:"varint,1,opt,name=EventType,proto3,enum=service_layer.SLNotifType" json:"EventType,omitempty"`
	// Further info based on EventType
	//
	// Types that are assignable to Event:
	//
	//	*SLRoutev4Notif_ErrStatus
	//	*SLRoutev4Notif_NotifStatus
	//	*SLRoutev4Notif_Route
	//	*SLRoutev4Notif_Marker
	//	*SLRoutev4Notif_Vrf
	Event isSLRoutev4Notif_Event `protobuf_oneof:"Event"`
}

func (x *SLRoutev4Notif) Reset() {
	*x = SLRoutev4Notif{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_route_ipv4_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLRoutev4Notif) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLRoutev4Notif) ProtoMessage() {}

func (x *SLRoutev4Notif) ProtoReflect() protoreflect.Message {
	mi := &file_sl_route_ipv4_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLRoutev4Notif.ProtoReflect.Descriptor instead.
func (*SLRoutev4Notif) Descriptor() ([]byte, []int) {
	return file_sl_route_ipv4_proto_rawDescGZIP(), []int{7}
}

func (x *SLRoutev4Notif) GetEventType() SLNotifType {
	if x != nil {
		return x.EventType
	}
	return SLNotifType_SL_EVENT_TYPE_RESERVED
}

func (m *SLRoutev4Notif) GetEvent() isSLRoutev4Notif_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *SLRoutev4Notif) GetErrStatus() *SLErrorStatus {
	if x, ok := x.GetEvent().(*SLRoutev4Notif_ErrStatus); ok {
		return x.ErrStatus
	}
	return nil
}

func (x *SLRoutev4Notif) GetNotifStatus() *SLRouteNotifStatus {
	if x, ok := x.GetEvent().(*SLRoutev4Notif_NotifStatus); ok {
		return x.NotifStatus
	}
	return nil
}

func (x *SLRoutev4Notif) GetRoute() *SLRoutev4NotifRoute {
	if x, ok := x.GetEvent().(*SLRoutev4Notif_Route); ok {
		return x.Route
	}
	return nil
}

func (x *SLRoutev4Notif) GetMarker() *SLRouteNotifMarker {
	if x, ok := x.GetEvent().(*SLRoutev4Notif_Marker); ok {
		return x.Marker
	}
	return nil
}

func (x *SLRoutev4Notif) GetVrf() *SLVrfNotif {
	if x, ok := x.GetEvent().(*SLRoutev4Notif_Vrf); ok {
		return x.Vrf
	}
	return nil
}

type isSLRoutev4Notif_Event interface {
	isSLRoutev4Notif_Event()
}

type SLRoutev4Notif_ErrStatus struct {
	// case EventType == SL_EVENT_TYPE_ERROR:
	//
	//	=> This field carries error info, if any error occurs during
	//	   notification stream setup.
	ErrStatus *SLErrorStatus `protobuf:"bytes,2,opt,name=ErrStatus,proto3,oneof"`
}

type SLRoutev4Notif_NotifStatus struct {
	// case EventType == SL_EVENT_TYPE_STATUS:
	//
	//	=> This field carries the status of the GetNotifMsg request.
	NotifStatus *SLRouteNotifStatus `protobuf:"bytes,3,opt,name=NotifStatus,proto3,oneof"`
}

type SLRoutev4Notif_Route struct {
	// case EventType == SL_EVENT_TYPE_ROUTE:
	//
	//	=> This field carries the v4 route
	Route *SLRoutev4NotifRoute `protobuf:"bytes,4,opt,name=Route,proto3,oneof"`
}

type SLRoutev4Notif_Marker struct {
	// case EventType == SL_EVENT_TYPE_START_MARKER:
	// case EventType == SL_EVENT_TYPE_END_MARKER:
	//
	//	=> This field carries the start marker and end marker per-VRF.
	Marker *SLRouteNotifMarker `protobuf:"bytes,5,opt,name=Marker,proto3,oneof"`
}

type SLRoutev4Notif_Vrf struct {
	// case EventType == SL_EVENT_TYPE_VRF:
	Vrf *SLVrfNotif `protobuf:"bytes,6,opt,name=Vrf,proto3,oneof"`
}

func (*SLRoutev4Notif_ErrStatus) isSLRoutev4Notif_Event() {}

func (*SLRoutev4Notif_NotifStatus) isSLRoutev4Notif_Event() {}

func (*SLRoutev4Notif_Route) isSLRoutev4Notif_Event() {}

func (*SLRoutev4Notif_Marker) isSLRoutev4Notif_Event() {}

func (*SLRoutev4Notif_Vrf) isSLRoutev4Notif_Event() {}

var File_sl_route_ipv4_proto protoreflect.FileDescriptor

var file_sl_route_ipv4_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x1a, 0x15, 0x73, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x73, 0x6c, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb9, 0x01, 0x0a, 0x09, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x34,
	0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x08, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa9,
	0x01, 0x0a, 0x0c, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x34, 0x4d, 0x73, 0x67, 0x12,
	0x2d, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x52, 0x04, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x76, 0x34, 0x52, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x0c, 0x53,
	0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x34, 0x52, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x45, 0x72,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x1c, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x22, 0xc6, 0x01,
	0x0a, 0x0f, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x34, 0x4d, 0x73, 0x67, 0x52, 0x73,
	0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x35, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x34, 0x52, 0x65, 0x73, 0x52, 0x07, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x0f, 0x53, 0x4c, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x76, 0x34, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x72,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x72, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x12, 0x53, 0x4c, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x76, 0x34, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x45, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x45, 0x6f,
	0x66, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x45, 0x72,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x76, 0x34, 0x52, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x13, 0x53,
	0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x34, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x07,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x34, 0x52, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x22, 0x80, 0x03, 0x0a, 0x0e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x34, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00,
	0x52, 0x09, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x34, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x3b,
	0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x03, 0x56,
	0x72, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x56, 0x72, 0x66, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x48, 0x00, 0x52, 0x03, 0x56, 0x72, 0x66, 0x42, 0x07, 0x0a, 0x05, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x32, 0x98, 0x07, 0x0a, 0x0d, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76,
	0x34, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x13, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x76, 0x34, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x47, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x47, 0x65, 0x74, 0x4d, 0x73,
	0x67, 0x1a, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73,
	0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x6e, 0x0a, 0x17, 0x53, 0x4c, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x76, 0x34, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x47, 0x65, 0x74, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x2a, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x11, 0x53, 0x4c, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x76, 0x34, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x4f, 0x70, 0x12, 0x1a,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x56, 0x72, 0x66,
	0x52, 0x65, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x55, 0x0a, 0x12, 0x53, 0x4c, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x76, 0x34, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x47, 0x65, 0x74, 0x12,
	0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x20,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x56, 0x72, 0x66, 0x52, 0x65, 0x67, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70,
	0x12, 0x59, 0x0a, 0x14, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x34, 0x56, 0x72, 0x66,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x56, 0x72, 0x66, 0x52, 0x65,
	0x67, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x56, 0x52, 0x46, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0b, 0x53,
	0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x34, 0x4f, 0x70, 0x12, 0x1b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x76, 0x34, 0x4d, 0x73, 0x67, 0x1a, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76,
	0x34, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0c, 0x53, 0x4c, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x76, 0x34, 0x47, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76,
	0x34, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76,
	0x34, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x11, 0x53, 0x4c,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x34, 0x4f, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x34, 0x4d, 0x73, 0x67, 0x1a, 0x1e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x76, 0x34, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x5b, 0x0a, 0x12, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x34, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x34,
	0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x34,
	0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x28, 0x01, 0x30, 0x01, 0x12, 0x5f, 0x0a,
	0x17, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x76, 0x34, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x4d, 0x73, 0x67, 0x1a, 0x1d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x76, 0x34, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x28, 0x01, 0x30, 0x01, 0x42, 0x51,
	0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x69, 0x73,
	0x63, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x6f,
	0x62, 0x6a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sl_route_ipv4_proto_rawDescOnce sync.Once
	file_sl_route_ipv4_proto_rawDescData = file_sl_route_ipv4_proto_rawDesc
)

func file_sl_route_ipv4_proto_rawDescGZIP() []byte {
	file_sl_route_ipv4_proto_rawDescOnce.Do(func() {
		file_sl_route_ipv4_proto_rawDescData = protoimpl.X.CompressGZIP(file_sl_route_ipv4_proto_rawDescData)
	})
	return file_sl_route_ipv4_proto_rawDescData
}

var file_sl_route_ipv4_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_sl_route_ipv4_proto_goTypes = []interface{}{
	(*SLRoutev4)(nil),                   // 0: service_layer.SLRoutev4
	(*SLRoutev4Msg)(nil),                // 1: service_layer.SLRoutev4Msg
	(*SLRoutev4Res)(nil),                // 2: service_layer.SLRoutev4Res
	(*SLRoutev4MsgRsp)(nil),             // 3: service_layer.SLRoutev4MsgRsp
	(*SLRoutev4GetMsg)(nil),             // 4: service_layer.SLRoutev4GetMsg
	(*SLRoutev4GetMsgRsp)(nil),          // 5: service_layer.SLRoutev4GetMsgRsp
	(*SLRoutev4NotifRoute)(nil),         // 6: service_layer.SLRoutev4NotifRoute
	(*SLRoutev4Notif)(nil),              // 7: service_layer.SLRoutev4Notif
	(*SLRouteCommon)(nil),               // 8: service_layer.SLRouteCommon
	(*SLRoutePath)(nil),                 // 9: service_layer.SLRoutePath
	(SLObjectOp)(0),                     // 10: service_layer.SLObjectOp
	(*SLErrorStatus)(nil),               // 11: service_layer.SLErrorStatus
	(SLNotifType)(0),                    // 12: service_layer.SLNotifType
	(*SLRouteNotifStatus)(nil),          // 13: service_layer.SLRouteNotifStatus
	(*SLRouteNotifMarker)(nil),          // 14: service_layer.SLRouteNotifMarker
	(*SLVrfNotif)(nil),                  // 15: service_layer.SLVrfNotif
	(*SLRouteGlobalsGetMsg)(nil),        // 16: service_layer.SLRouteGlobalsGetMsg
	(*SLRouteGlobalStatsGetMsg)(nil),    // 17: service_layer.SLRouteGlobalStatsGetMsg
	(*SLVrfRegMsg)(nil),                 // 18: service_layer.SLVrfRegMsg
	(*SLVrfRegGetMsg)(nil),              // 19: service_layer.SLVrfRegGetMsg
	(*SLRouteGetNotifMsg)(nil),          // 20: service_layer.SLRouteGetNotifMsg
	(*SLRouteGlobalsGetMsgRsp)(nil),     // 21: service_layer.SLRouteGlobalsGetMsgRsp
	(*SLRouteGlobalStatsGetMsgRsp)(nil), // 22: service_layer.SLRouteGlobalStatsGetMsgRsp
	(*SLVrfRegMsgRsp)(nil),              // 23: service_layer.SLVrfRegMsgRsp
	(*SLVrfRegGetMsgRsp)(nil),           // 24: service_layer.SLVrfRegGetMsgRsp
	(*SLVRFGetStatsMsgRsp)(nil),         // 25: service_layer.SLVRFGetStatsMsgRsp
}
var file_sl_route_ipv4_proto_depIdxs = []int32{
	8,  // 0: service_layer.SLRoutev4.RouteCommon:type_name -> service_layer.SLRouteCommon
	9,  // 1: service_layer.SLRoutev4.PathList:type_name -> service_layer.SLRoutePath
	10, // 2: service_layer.SLRoutev4Msg.Oper:type_name -> service_layer.SLObjectOp
	0,  // 3: service_layer.SLRoutev4Msg.Routes:type_name -> service_layer.SLRoutev4
	11, // 4: service_layer.SLRoutev4Res.ErrStatus:type_name -> service_layer.SLErrorStatus
	11, // 5: service_layer.SLRoutev4MsgRsp.StatusSummary:type_name -> service_layer.SLErrorStatus
	2,  // 6: service_layer.SLRoutev4MsgRsp.Results:type_name -> service_layer.SLRoutev4Res
	11, // 7: service_layer.SLRoutev4GetMsgRsp.ErrStatus:type_name -> service_layer.SLErrorStatus
	0,  // 8: service_layer.SLRoutev4GetMsgRsp.Entries:type_name -> service_layer.SLRoutev4
	0,  // 9: service_layer.SLRoutev4NotifRoute.Entries:type_name -> service_layer.SLRoutev4
	12, // 10: service_layer.SLRoutev4Notif.EventType:type_name -> service_layer.SLNotifType
	11, // 11: service_layer.SLRoutev4Notif.ErrStatus:type_name -> service_layer.SLErrorStatus
	13, // 12: service_layer.SLRoutev4Notif.NotifStatus:type_name -> service_layer.SLRouteNotifStatus
	6,  // 13: service_layer.SLRoutev4Notif.Route:type_name -> service_layer.SLRoutev4NotifRoute
	14, // 14: service_layer.SLRoutev4Notif.Marker:type_name -> service_layer.SLRouteNotifMarker
	15, // 15: service_layer.SLRoutev4Notif.Vrf:type_name -> service_layer.SLVrfNotif
	16, // 16: service_layer.SLRoutev4Oper.SLRoutev4GlobalsGet:input_type -> service_layer.SLRouteGlobalsGetMsg
	17, // 17: service_layer.SLRoutev4Oper.SLRoutev4GlobalStatsGet:input_type -> service_layer.SLRouteGlobalStatsGetMsg
	18, // 18: service_layer.SLRoutev4Oper.SLRoutev4VrfRegOp:input_type -> service_layer.SLVrfRegMsg
	19, // 19: service_layer.SLRoutev4Oper.SLRoutev4VrfRegGet:input_type -> service_layer.SLVrfRegGetMsg
	19, // 20: service_layer.SLRoutev4Oper.SLRoutev4VrfGetStats:input_type -> service_layer.SLVrfRegGetMsg
	1,  // 21: service_layer.SLRoutev4Oper.SLRoutev4Op:input_type -> service_layer.SLRoutev4Msg
	4,  // 22: service_layer.SLRoutev4Oper.SLRoutev4Get:input_type -> service_layer.SLRoutev4GetMsg
	1,  // 23: service_layer.SLRoutev4Oper.SLRoutev4OpStream:input_type -> service_layer.SLRoutev4Msg
	4,  // 24: service_layer.SLRoutev4Oper.SLRoutev4GetStream:input_type -> service_layer.SLRoutev4GetMsg
	20, // 25: service_layer.SLRoutev4Oper.SLRoutev4GetNotifStream:input_type -> service_layer.SLRouteGetNotifMsg
	21, // 26: service_layer.SLRoutev4Oper.SLRoutev4GlobalsGet:output_type -> service_layer.SLRouteGlobalsGetMsgRsp
	22, // 27: service_layer.SLRoutev4Oper.SLRoutev4GlobalStatsGet:output_type -> service_layer.SLRouteGlobalStatsGetMsgRsp
	23, // 28: service_layer.SLRoutev4Oper.SLRoutev4VrfRegOp:output_type -> service_layer.SLVrfRegMsgRsp
	24, // 29: service_layer.SLRoutev4Oper.SLRoutev4VrfRegGet:output_type -> service_layer.SLVrfRegGetMsgRsp
	25, // 30: service_layer.SLRoutev4Oper.SLRoutev4VrfGetStats:output_type -> service_layer.SLVRFGetStatsMsgRsp
	3,  // 31: service_layer.SLRoutev4Oper.SLRoutev4Op:output_type -> service_layer.SLRoutev4MsgRsp
	5,  // 32: service_layer.SLRoutev4Oper.SLRoutev4Get:output_type -> service_layer.SLRoutev4GetMsgRsp
	3,  // 33: service_layer.SLRoutev4Oper.SLRoutev4OpStream:output_type -> service_layer.SLRoutev4MsgRsp
	5,  // 34: service_layer.SLRoutev4Oper.SLRoutev4GetStream:output_type -> service_layer.SLRoutev4GetMsgRsp
	7,  // 35: service_layer.SLRoutev4Oper.SLRoutev4GetNotifStream:output_type -> service_layer.SLRoutev4Notif
	26, // [26:36] is the sub-list for method output_type
	16, // [16:26] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_sl_route_ipv4_proto_init() }
func file_sl_route_ipv4_proto_init() {
	if File_sl_route_ipv4_proto != nil {
		return
	}
	file_sl_common_types_proto_init()
	file_sl_route_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sl_route_ipv4_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLRoutev4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_route_ipv4_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLRoutev4Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_route_ipv4_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLRoutev4Res); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_route_ipv4_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLRoutev4MsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_route_ipv4_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLRoutev4GetMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_route_ipv4_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLRoutev4GetMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_route_ipv4_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLRoutev4NotifRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_route_ipv4_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLRoutev4Notif); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sl_route_ipv4_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*SLRoutev4Notif_ErrStatus)(nil),
		(*SLRoutev4Notif_NotifStatus)(nil),
		(*SLRoutev4Notif_Route)(nil),
		(*SLRoutev4Notif_Marker)(nil),
		(*SLRoutev4Notif_Vrf)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sl_route_ipv4_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sl_route_ipv4_proto_goTypes,
		DependencyIndexes: file_sl_route_ipv4_proto_depIdxs,
		MessageInfos:      file_sl_route_ipv4_proto_msgTypes,
	}.Build()
	File_sl_route_ipv4_proto = out.File
	file_sl_route_ipv4_proto_rawDesc = nil
	file_sl_route_ipv4_proto_goTypes = nil
	file_sl_route_ipv4_proto_depIdxs = nil
}
