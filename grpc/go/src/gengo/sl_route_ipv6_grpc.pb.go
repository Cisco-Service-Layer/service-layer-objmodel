// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: sl_route_ipv6.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SLRoutev6OperClient is the client API for SLRoutev6Oper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SLRoutev6OperClient interface {
	// Used to retrieve Global Route information
	SLRoutev6GlobalsGet(ctx context.Context, in *SLRouteGlobalsGetMsg, opts ...grpc.CallOption) (*SLRouteGlobalsGetMsgRsp, error)
	// Used to retrieve Global Route Stats
	SLRoutev6GlobalStatsGet(ctx context.Context, in *SLRouteGlobalStatsGetMsg, opts ...grpc.CallOption) (*SLRouteGlobalStatsGetMsgRsp, error)
	// SLVrfRegMsg.Oper = SL_REGOP_REGISTER:
	//
	//	 VRF registration: Sends a list of VRF registration messages
	//	 and expects a list of registration responses.
	//	 A client Must Register a VRF BEFORE routes can be added/modified in
	//	the associated VRF.
	//
	// SLVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
	//
	//	VRF Un-registeration: Sends a list of VRF un-registration messages
	//	and expects a list of un-registration responses.
	//	This can be used to convey that the client is no longer interested
	//	in this VRF. All previously installed routes would be lost.
	//
	// SLVrfRegMsg.Oper = SL_REGOP_EOF:
	//
	//	VRF End Of File message.
	//	After Registration, the client is expected to send an EOF
	//	message to convey the end of replay of the client's known objects.
	//	This is especially useful under certain restart scenarios when the
	//	client and the server are trying to synchronize their Routes.
	SLRoutev6VrfRegOp(ctx context.Context, in *SLVrfRegMsg, opts ...grpc.CallOption) (*SLVrfRegMsgRsp, error)
	// VRF get. Used to retrieve VRF attributes from the server.
	SLRoutev6VrfRegGet(ctx context.Context, in *SLVrfRegGetMsg, opts ...grpc.CallOption) (*SLVrfRegGetMsgRsp, error)
	// Used to retrieve VRF Stats from the server.
	SLRoutev6VrfGetStats(ctx context.Context, in *SLVrfRegGetMsg, opts ...grpc.CallOption) (*SLVRFGetStatsMsgRsp, error)
	// SLRoutev6Msg.Oper = SL_OBJOP_ADD:
	//
	//	Route add. Fails if the route already exists.
	//
	// SLRoutev6Msg.Oper = SL_OBJOP_UPDATE:
	//
	//	Route update. Creates or updates the route.
	//
	// SLRoutev6Msg.Oper = SL_OBJOP_DELETE:
	//
	//	Route delete. The route path is not necessary to delete the route.
	SLRoutev6Op(ctx context.Context, in *SLRoutev6Msg, opts ...grpc.CallOption) (*SLRoutev6MsgRsp, error)
	// Retrieves route attributes.
	SLRoutev6Get(ctx context.Context, in *SLRoutev6GetMsg, opts ...grpc.CallOption) (*SLRoutev6GetMsgRsp, error)
	// SLRoutev6Msg.Oper = SL_OBJOP_ADD:
	//
	//	Route add. Fails if the route already exists.
	//
	// SLRoutev6Msg.Oper = SL_OBJOP_UPDATE:
	//
	//	Route update. Creates or updates the route.
	//
	// SLRoutev6Msg.Oper = SL_OBJOP_DELETE:
	//
	//	Route delete. The route path is not necessary to delete the route.
	SLRoutev6OpStream(ctx context.Context, opts ...grpc.CallOption) (SLRoutev6Oper_SLRoutev6OpStreamClient, error)
	// Retrieves route attributes.
	SLRoutev6GetStream(ctx context.Context, opts ...grpc.CallOption) (SLRoutev6Oper_SLRoutev6GetStreamClient, error)
	// This call is used to get a stream of route notifications.
	// It can be used to get "push" notifications for route
	// adds/updates/deletes.
	// The caller must maintain the GRPC channel as long as there is
	// interest in route notifications.
	//
	// The call takes a stream of per-VRF notification requests.
	// The success/failure of the notification request is relayed in the
	// SLRouteNotifStatus followed by a Start marker, any routes if present,
	// and an End Marker.
	SLRoutev6GetNotifStream(ctx context.Context, opts ...grpc.CallOption) (SLRoutev6Oper_SLRoutev6GetNotifStreamClient, error)
}

type sLRoutev6OperClient struct {
	cc grpc.ClientConnInterface
}

func NewSLRoutev6OperClient(cc grpc.ClientConnInterface) SLRoutev6OperClient {
	return &sLRoutev6OperClient{cc}
}

func (c *sLRoutev6OperClient) SLRoutev6GlobalsGet(ctx context.Context, in *SLRouteGlobalsGetMsg, opts ...grpc.CallOption) (*SLRouteGlobalsGetMsgRsp, error) {
	out := new(SLRouteGlobalsGetMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLRoutev6Oper/SLRoutev6GlobalsGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLRoutev6OperClient) SLRoutev6GlobalStatsGet(ctx context.Context, in *SLRouteGlobalStatsGetMsg, opts ...grpc.CallOption) (*SLRouteGlobalStatsGetMsgRsp, error) {
	out := new(SLRouteGlobalStatsGetMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLRoutev6Oper/SLRoutev6GlobalStatsGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLRoutev6OperClient) SLRoutev6VrfRegOp(ctx context.Context, in *SLVrfRegMsg, opts ...grpc.CallOption) (*SLVrfRegMsgRsp, error) {
	out := new(SLVrfRegMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLRoutev6Oper/SLRoutev6VrfRegOp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLRoutev6OperClient) SLRoutev6VrfRegGet(ctx context.Context, in *SLVrfRegGetMsg, opts ...grpc.CallOption) (*SLVrfRegGetMsgRsp, error) {
	out := new(SLVrfRegGetMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLRoutev6Oper/SLRoutev6VrfRegGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLRoutev6OperClient) SLRoutev6VrfGetStats(ctx context.Context, in *SLVrfRegGetMsg, opts ...grpc.CallOption) (*SLVRFGetStatsMsgRsp, error) {
	out := new(SLVRFGetStatsMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLRoutev6Oper/SLRoutev6VrfGetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLRoutev6OperClient) SLRoutev6Op(ctx context.Context, in *SLRoutev6Msg, opts ...grpc.CallOption) (*SLRoutev6MsgRsp, error) {
	out := new(SLRoutev6MsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLRoutev6Oper/SLRoutev6Op", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLRoutev6OperClient) SLRoutev6Get(ctx context.Context, in *SLRoutev6GetMsg, opts ...grpc.CallOption) (*SLRoutev6GetMsgRsp, error) {
	out := new(SLRoutev6GetMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLRoutev6Oper/SLRoutev6Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLRoutev6OperClient) SLRoutev6OpStream(ctx context.Context, opts ...grpc.CallOption) (SLRoutev6Oper_SLRoutev6OpStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SLRoutev6Oper_ServiceDesc.Streams[0], "/service_layer.SLRoutev6Oper/SLRoutev6OpStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sLRoutev6OperSLRoutev6OpStreamClient{stream}
	return x, nil
}

type SLRoutev6Oper_SLRoutev6OpStreamClient interface {
	Send(*SLRoutev6Msg) error
	Recv() (*SLRoutev6MsgRsp, error)
	grpc.ClientStream
}

type sLRoutev6OperSLRoutev6OpStreamClient struct {
	grpc.ClientStream
}

func (x *sLRoutev6OperSLRoutev6OpStreamClient) Send(m *SLRoutev6Msg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sLRoutev6OperSLRoutev6OpStreamClient) Recv() (*SLRoutev6MsgRsp, error) {
	m := new(SLRoutev6MsgRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sLRoutev6OperClient) SLRoutev6GetStream(ctx context.Context, opts ...grpc.CallOption) (SLRoutev6Oper_SLRoutev6GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SLRoutev6Oper_ServiceDesc.Streams[1], "/service_layer.SLRoutev6Oper/SLRoutev6GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sLRoutev6OperSLRoutev6GetStreamClient{stream}
	return x, nil
}

type SLRoutev6Oper_SLRoutev6GetStreamClient interface {
	Send(*SLRoutev6GetMsg) error
	Recv() (*SLRoutev6GetMsgRsp, error)
	grpc.ClientStream
}

type sLRoutev6OperSLRoutev6GetStreamClient struct {
	grpc.ClientStream
}

func (x *sLRoutev6OperSLRoutev6GetStreamClient) Send(m *SLRoutev6GetMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sLRoutev6OperSLRoutev6GetStreamClient) Recv() (*SLRoutev6GetMsgRsp, error) {
	m := new(SLRoutev6GetMsgRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sLRoutev6OperClient) SLRoutev6GetNotifStream(ctx context.Context, opts ...grpc.CallOption) (SLRoutev6Oper_SLRoutev6GetNotifStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SLRoutev6Oper_ServiceDesc.Streams[2], "/service_layer.SLRoutev6Oper/SLRoutev6GetNotifStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sLRoutev6OperSLRoutev6GetNotifStreamClient{stream}
	return x, nil
}

type SLRoutev6Oper_SLRoutev6GetNotifStreamClient interface {
	Send(*SLRouteGetNotifMsg) error
	Recv() (*SLRoutev6Notif, error)
	grpc.ClientStream
}

type sLRoutev6OperSLRoutev6GetNotifStreamClient struct {
	grpc.ClientStream
}

func (x *sLRoutev6OperSLRoutev6GetNotifStreamClient) Send(m *SLRouteGetNotifMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sLRoutev6OperSLRoutev6GetNotifStreamClient) Recv() (*SLRoutev6Notif, error) {
	m := new(SLRoutev6Notif)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SLRoutev6OperServer is the server API for SLRoutev6Oper service.
// All implementations must embed UnimplementedSLRoutev6OperServer
// for forward compatibility
type SLRoutev6OperServer interface {
	// Used to retrieve Global Route information
	SLRoutev6GlobalsGet(context.Context, *SLRouteGlobalsGetMsg) (*SLRouteGlobalsGetMsgRsp, error)
	// Used to retrieve Global Route Stats
	SLRoutev6GlobalStatsGet(context.Context, *SLRouteGlobalStatsGetMsg) (*SLRouteGlobalStatsGetMsgRsp, error)
	// SLVrfRegMsg.Oper = SL_REGOP_REGISTER:
	//
	//	 VRF registration: Sends a list of VRF registration messages
	//	 and expects a list of registration responses.
	//	 A client Must Register a VRF BEFORE routes can be added/modified in
	//	the associated VRF.
	//
	// SLVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
	//
	//	VRF Un-registeration: Sends a list of VRF un-registration messages
	//	and expects a list of un-registration responses.
	//	This can be used to convey that the client is no longer interested
	//	in this VRF. All previously installed routes would be lost.
	//
	// SLVrfRegMsg.Oper = SL_REGOP_EOF:
	//
	//	VRF End Of File message.
	//	After Registration, the client is expected to send an EOF
	//	message to convey the end of replay of the client's known objects.
	//	This is especially useful under certain restart scenarios when the
	//	client and the server are trying to synchronize their Routes.
	SLRoutev6VrfRegOp(context.Context, *SLVrfRegMsg) (*SLVrfRegMsgRsp, error)
	// VRF get. Used to retrieve VRF attributes from the server.
	SLRoutev6VrfRegGet(context.Context, *SLVrfRegGetMsg) (*SLVrfRegGetMsgRsp, error)
	// Used to retrieve VRF Stats from the server.
	SLRoutev6VrfGetStats(context.Context, *SLVrfRegGetMsg) (*SLVRFGetStatsMsgRsp, error)
	// SLRoutev6Msg.Oper = SL_OBJOP_ADD:
	//
	//	Route add. Fails if the route already exists.
	//
	// SLRoutev6Msg.Oper = SL_OBJOP_UPDATE:
	//
	//	Route update. Creates or updates the route.
	//
	// SLRoutev6Msg.Oper = SL_OBJOP_DELETE:
	//
	//	Route delete. The route path is not necessary to delete the route.
	SLRoutev6Op(context.Context, *SLRoutev6Msg) (*SLRoutev6MsgRsp, error)
	// Retrieves route attributes.
	SLRoutev6Get(context.Context, *SLRoutev6GetMsg) (*SLRoutev6GetMsgRsp, error)
	// SLRoutev6Msg.Oper = SL_OBJOP_ADD:
	//
	//	Route add. Fails if the route already exists.
	//
	// SLRoutev6Msg.Oper = SL_OBJOP_UPDATE:
	//
	//	Route update. Creates or updates the route.
	//
	// SLRoutev6Msg.Oper = SL_OBJOP_DELETE:
	//
	//	Route delete. The route path is not necessary to delete the route.
	SLRoutev6OpStream(SLRoutev6Oper_SLRoutev6OpStreamServer) error
	// Retrieves route attributes.
	SLRoutev6GetStream(SLRoutev6Oper_SLRoutev6GetStreamServer) error
	// This call is used to get a stream of route notifications.
	// It can be used to get "push" notifications for route
	// adds/updates/deletes.
	// The caller must maintain the GRPC channel as long as there is
	// interest in route notifications.
	//
	// The call takes a stream of per-VRF notification requests.
	// The success/failure of the notification request is relayed in the
	// SLRouteNotifStatus followed by a Start marker, any routes if present,
	// and an End Marker.
	SLRoutev6GetNotifStream(SLRoutev6Oper_SLRoutev6GetNotifStreamServer) error
	mustEmbedUnimplementedSLRoutev6OperServer()
}

// UnimplementedSLRoutev6OperServer must be embedded to have forward compatible implementations.
type UnimplementedSLRoutev6OperServer struct {
}

func (UnimplementedSLRoutev6OperServer) SLRoutev6GlobalsGet(context.Context, *SLRouteGlobalsGetMsg) (*SLRouteGlobalsGetMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLRoutev6GlobalsGet not implemented")
}
func (UnimplementedSLRoutev6OperServer) SLRoutev6GlobalStatsGet(context.Context, *SLRouteGlobalStatsGetMsg) (*SLRouteGlobalStatsGetMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLRoutev6GlobalStatsGet not implemented")
}
func (UnimplementedSLRoutev6OperServer) SLRoutev6VrfRegOp(context.Context, *SLVrfRegMsg) (*SLVrfRegMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLRoutev6VrfRegOp not implemented")
}
func (UnimplementedSLRoutev6OperServer) SLRoutev6VrfRegGet(context.Context, *SLVrfRegGetMsg) (*SLVrfRegGetMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLRoutev6VrfRegGet not implemented")
}
func (UnimplementedSLRoutev6OperServer) SLRoutev6VrfGetStats(context.Context, *SLVrfRegGetMsg) (*SLVRFGetStatsMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLRoutev6VrfGetStats not implemented")
}
func (UnimplementedSLRoutev6OperServer) SLRoutev6Op(context.Context, *SLRoutev6Msg) (*SLRoutev6MsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLRoutev6Op not implemented")
}
func (UnimplementedSLRoutev6OperServer) SLRoutev6Get(context.Context, *SLRoutev6GetMsg) (*SLRoutev6GetMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLRoutev6Get not implemented")
}
func (UnimplementedSLRoutev6OperServer) SLRoutev6OpStream(SLRoutev6Oper_SLRoutev6OpStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SLRoutev6OpStream not implemented")
}
func (UnimplementedSLRoutev6OperServer) SLRoutev6GetStream(SLRoutev6Oper_SLRoutev6GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SLRoutev6GetStream not implemented")
}
func (UnimplementedSLRoutev6OperServer) SLRoutev6GetNotifStream(SLRoutev6Oper_SLRoutev6GetNotifStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SLRoutev6GetNotifStream not implemented")
}
func (UnimplementedSLRoutev6OperServer) mustEmbedUnimplementedSLRoutev6OperServer() {}

// UnsafeSLRoutev6OperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SLRoutev6OperServer will
// result in compilation errors.
type UnsafeSLRoutev6OperServer interface {
	mustEmbedUnimplementedSLRoutev6OperServer()
}

func RegisterSLRoutev6OperServer(s grpc.ServiceRegistrar, srv SLRoutev6OperServer) {
	s.RegisterService(&SLRoutev6Oper_ServiceDesc, srv)
}

func _SLRoutev6Oper_SLRoutev6GlobalsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLRouteGlobalsGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLRoutev6OperServer).SLRoutev6GlobalsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLRoutev6Oper/SLRoutev6GlobalsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLRoutev6OperServer).SLRoutev6GlobalsGet(ctx, req.(*SLRouteGlobalsGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLRoutev6Oper_SLRoutev6GlobalStatsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLRouteGlobalStatsGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLRoutev6OperServer).SLRoutev6GlobalStatsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLRoutev6Oper/SLRoutev6GlobalStatsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLRoutev6OperServer).SLRoutev6GlobalStatsGet(ctx, req.(*SLRouteGlobalStatsGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLRoutev6Oper_SLRoutev6VrfRegOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLVrfRegMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLRoutev6OperServer).SLRoutev6VrfRegOp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLRoutev6Oper/SLRoutev6VrfRegOp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLRoutev6OperServer).SLRoutev6VrfRegOp(ctx, req.(*SLVrfRegMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLRoutev6Oper_SLRoutev6VrfRegGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLVrfRegGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLRoutev6OperServer).SLRoutev6VrfRegGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLRoutev6Oper/SLRoutev6VrfRegGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLRoutev6OperServer).SLRoutev6VrfRegGet(ctx, req.(*SLVrfRegGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLRoutev6Oper_SLRoutev6VrfGetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLVrfRegGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLRoutev6OperServer).SLRoutev6VrfGetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLRoutev6Oper/SLRoutev6VrfGetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLRoutev6OperServer).SLRoutev6VrfGetStats(ctx, req.(*SLVrfRegGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLRoutev6Oper_SLRoutev6Op_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLRoutev6Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLRoutev6OperServer).SLRoutev6Op(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLRoutev6Oper/SLRoutev6Op",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLRoutev6OperServer).SLRoutev6Op(ctx, req.(*SLRoutev6Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLRoutev6Oper_SLRoutev6Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLRoutev6GetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLRoutev6OperServer).SLRoutev6Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLRoutev6Oper/SLRoutev6Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLRoutev6OperServer).SLRoutev6Get(ctx, req.(*SLRoutev6GetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLRoutev6Oper_SLRoutev6OpStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SLRoutev6OperServer).SLRoutev6OpStream(&sLRoutev6OperSLRoutev6OpStreamServer{stream})
}

type SLRoutev6Oper_SLRoutev6OpStreamServer interface {
	Send(*SLRoutev6MsgRsp) error
	Recv() (*SLRoutev6Msg, error)
	grpc.ServerStream
}

type sLRoutev6OperSLRoutev6OpStreamServer struct {
	grpc.ServerStream
}

func (x *sLRoutev6OperSLRoutev6OpStreamServer) Send(m *SLRoutev6MsgRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sLRoutev6OperSLRoutev6OpStreamServer) Recv() (*SLRoutev6Msg, error) {
	m := new(SLRoutev6Msg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SLRoutev6Oper_SLRoutev6GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SLRoutev6OperServer).SLRoutev6GetStream(&sLRoutev6OperSLRoutev6GetStreamServer{stream})
}

type SLRoutev6Oper_SLRoutev6GetStreamServer interface {
	Send(*SLRoutev6GetMsgRsp) error
	Recv() (*SLRoutev6GetMsg, error)
	grpc.ServerStream
}

type sLRoutev6OperSLRoutev6GetStreamServer struct {
	grpc.ServerStream
}

func (x *sLRoutev6OperSLRoutev6GetStreamServer) Send(m *SLRoutev6GetMsgRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sLRoutev6OperSLRoutev6GetStreamServer) Recv() (*SLRoutev6GetMsg, error) {
	m := new(SLRoutev6GetMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SLRoutev6Oper_SLRoutev6GetNotifStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SLRoutev6OperServer).SLRoutev6GetNotifStream(&sLRoutev6OperSLRoutev6GetNotifStreamServer{stream})
}

type SLRoutev6Oper_SLRoutev6GetNotifStreamServer interface {
	Send(*SLRoutev6Notif) error
	Recv() (*SLRouteGetNotifMsg, error)
	grpc.ServerStream
}

type sLRoutev6OperSLRoutev6GetNotifStreamServer struct {
	grpc.ServerStream
}

func (x *sLRoutev6OperSLRoutev6GetNotifStreamServer) Send(m *SLRoutev6Notif) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sLRoutev6OperSLRoutev6GetNotifStreamServer) Recv() (*SLRouteGetNotifMsg, error) {
	m := new(SLRouteGetNotifMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SLRoutev6Oper_ServiceDesc is the grpc.ServiceDesc for SLRoutev6Oper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SLRoutev6Oper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service_layer.SLRoutev6Oper",
	HandlerType: (*SLRoutev6OperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SLRoutev6GlobalsGet",
			Handler:    _SLRoutev6Oper_SLRoutev6GlobalsGet_Handler,
		},
		{
			MethodName: "SLRoutev6GlobalStatsGet",
			Handler:    _SLRoutev6Oper_SLRoutev6GlobalStatsGet_Handler,
		},
		{
			MethodName: "SLRoutev6VrfRegOp",
			Handler:    _SLRoutev6Oper_SLRoutev6VrfRegOp_Handler,
		},
		{
			MethodName: "SLRoutev6VrfRegGet",
			Handler:    _SLRoutev6Oper_SLRoutev6VrfRegGet_Handler,
		},
		{
			MethodName: "SLRoutev6VrfGetStats",
			Handler:    _SLRoutev6Oper_SLRoutev6VrfGetStats_Handler,
		},
		{
			MethodName: "SLRoutev6Op",
			Handler:    _SLRoutev6Oper_SLRoutev6Op_Handler,
		},
		{
			MethodName: "SLRoutev6Get",
			Handler:    _SLRoutev6Oper_SLRoutev6Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SLRoutev6OpStream",
			Handler:       _SLRoutev6Oper_SLRoutev6OpStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SLRoutev6GetStream",
			Handler:       _SLRoutev6Oper_SLRoutev6GetStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SLRoutev6GetNotifStream",
			Handler:       _SLRoutev6Oper_SLRoutev6GetNotifStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sl_route_ipv6.proto",
}
