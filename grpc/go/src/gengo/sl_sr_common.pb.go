// @file
// @brief SR Common definitions for all of the service layer proto files.
//
//---------------------------------------------------------------------
// Copyright (c) 2019, 2024 by Cisco Systems, Inc.
// All rights reserved.
//---------------------------------------------------------------------
//
//

//@defgroup SrCommon
//@brief SR Common service definitions and Global initializations.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.3
// source: sl_sr_common.proto

package service_layer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Protocol Originating SR Policy
// Section 8.4 of [draft-ietf-idr-bgp-ls-sr-policy]
type SLSrPolicyProtocolOrigin int32

const (
	SLSrPolicyProtocolOrigin_SL_SR_POLICY_PROTOCOL_ORIGIN_RESERVED              SLSrPolicyProtocolOrigin = 0
	SLSrPolicyProtocolOrigin_SL_SR_POLICY_PROTOCOL_ORIGIN_PCEP                  SLSrPolicyProtocolOrigin = 1
	SLSrPolicyProtocolOrigin_SL_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY         SLSrPolicyProtocolOrigin = 2
	SLSrPolicyProtocolOrigin_SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG                SLSrPolicyProtocolOrigin = 3
	SLSrPolicyProtocolOrigin_SL_SR_POLICY_PROTOCOL_ORIGIN_PCEP_VIA_PCE          SLSrPolicyProtocolOrigin = 10
	SLSrPolicyProtocolOrigin_SL_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY_VIA_PCE SLSrPolicyProtocolOrigin = 20
	SLSrPolicyProtocolOrigin_SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_PCE        SLSrPolicyProtocolOrigin = 30
	SLSrPolicyProtocolOrigin_SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_GRPC       SLSrPolicyProtocolOrigin = 251
)

// Enum value maps for SLSrPolicyProtocolOrigin.
var (
	SLSrPolicyProtocolOrigin_name = map[int32]string{
		0:   "SL_SR_POLICY_PROTOCOL_ORIGIN_RESERVED",
		1:   "SL_SR_POLICY_PROTOCOL_ORIGIN_PCEP",
		2:   "SL_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY",
		3:   "SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG",
		10:  "SL_SR_POLICY_PROTOCOL_ORIGIN_PCEP_VIA_PCE",
		20:  "SL_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY_VIA_PCE",
		30:  "SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_PCE",
		251: "SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_GRPC",
	}
	SLSrPolicyProtocolOrigin_value = map[string]int32{
		"SL_SR_POLICY_PROTOCOL_ORIGIN_RESERVED":              0,
		"SL_SR_POLICY_PROTOCOL_ORIGIN_PCEP":                  1,
		"SL_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY":         2,
		"SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG":                3,
		"SL_SR_POLICY_PROTOCOL_ORIGIN_PCEP_VIA_PCE":          10,
		"SL_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY_VIA_PCE": 20,
		"SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_PCE":        30,
		"SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_GRPC":       251,
	}
)

func (x SLSrPolicyProtocolOrigin) Enum() *SLSrPolicyProtocolOrigin {
	p := new(SLSrPolicyProtocolOrigin)
	*p = x
	return p
}

func (x SLSrPolicyProtocolOrigin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLSrPolicyProtocolOrigin) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_sr_common_proto_enumTypes[0].Descriptor()
}

func (SLSrPolicyProtocolOrigin) Type() protoreflect.EnumType {
	return &file_sl_sr_common_proto_enumTypes[0]
}

func (x SLSrPolicyProtocolOrigin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLSrPolicyProtocolOrigin.Descriptor instead.
func (SLSrPolicyProtocolOrigin) EnumDescriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{0}
}

type SLSrPolicyFlagsDef int32

const (
	// Reserved.
	SLSrPolicyFlagsDef_SL_SR_POLICY_FLAG_RESERVED SLSrPolicyFlagsDef = 0
	// Bit-0: E-Flag: Indicates the encoding of endpoint as IPv6 address when
	// set and IPv4 address when clear
	SLSrPolicyFlagsDef_SL_SR_POLICY_FLAG_ENDPOINT_V6 SLSrPolicyFlagsDef = 128
	// Bit-1: O-Flag: Indicates the encoding of originator address as IPv6
	// address when set and IPv4 address when clear
	SLSrPolicyFlagsDef_SL_SR_POLICY_FLAG_ORIGINATOR_V6 SLSrPolicyFlagsDef = 64
)

// Enum value maps for SLSrPolicyFlagsDef.
var (
	SLSrPolicyFlagsDef_name = map[int32]string{
		0:   "SL_SR_POLICY_FLAG_RESERVED",
		128: "SL_SR_POLICY_FLAG_ENDPOINT_V6",
		64:  "SL_SR_POLICY_FLAG_ORIGINATOR_V6",
	}
	SLSrPolicyFlagsDef_value = map[string]int32{
		"SL_SR_POLICY_FLAG_RESERVED":      0,
		"SL_SR_POLICY_FLAG_ENDPOINT_V6":   128,
		"SL_SR_POLICY_FLAG_ORIGINATOR_V6": 64,
	}
)

func (x SLSrPolicyFlagsDef) Enum() *SLSrPolicyFlagsDef {
	p := new(SLSrPolicyFlagsDef)
	*p = x
	return p
}

func (x SLSrPolicyFlagsDef) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLSrPolicyFlagsDef) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_sr_common_proto_enumTypes[1].Descriptor()
}

func (SLSrPolicyFlagsDef) Type() protoreflect.EnumType {
	return &file_sl_sr_common_proto_enumTypes[1]
}

func (x SLSrPolicyFlagsDef) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLSrPolicyFlagsDef.Descriptor instead.
func (SLSrPolicyFlagsDef) EnumDescriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{1}
}

// SR Segment Type
// Section 8.5 of [draft-ietf-idr-bgp-ls-sr-policy]
type SLSrSegmentType int32

const (
	// Reserved. 0
	SLSrSegmentType_SL_SR_SEG_TYPE_RESERVED SLSrSegmentType = 0
	// (Type A) SR-MPLS Label. 1
	SLSrSegmentType_SL_SR_SEG_TYPE_MPLS_LABEL SLSrSegmentType = 1
	// (Type B) SRv6 SID as IPv6 address. 2
	SLSrSegmentType_SL_SR_SEG_TYPE_SRV6_SID_V6 SLSrSegmentType = 2
	// (Type C) SR-MPLS Prefix SID as IPv4 Node Address. 3
	SLSrSegmentType_SL_SR_SEG_TYPE_MPLS_PFX_SID_V4 SLSrSegmentType = 3
	// (Type D) SR-MPLS Prefix SID as IPv6 Node Global Address. 4
	SLSrSegmentType_SL_SR_SEG_TYPE_MPLS_PFX_SID_V6 SLSrSegmentType = 4
	// (Type E) SR-MPLS Adjacency SID as IPv4 Node Address
	// & Local Interface ID. 5
	SLSrSegmentType_SL_SR_SEG_TYPE_MPLS_ADJ_SID_V4_NODE_ADDR_LOC_ID SLSrSegmentType = 5
	// (Type F) SR-MPLS Adjacency SID as IPv4 Local
	// & Remote Interface Addresses. 6
	SLSrSegmentType_SL_SR_SEG_TYPE_MPLS_ADJ_SID_V4_LOC_REM_ADDR SLSrSegmentType = 6
	// (Type G) SR-MPLS Adjacency SID as pair of IPv6 Global Address
	// & Interface ID for Local & Remote nodes. 7
	SLSrSegmentType_SL_SR_SEG_TYPE_MPLS_ADJ_SID_V6_LOC_REM_ADDR_AND_ID SLSrSegmentType = 7
	// (Type H) SR-MPLS Adjacency SID as pair of IPv6 Global Addresses
	// for the Local & Remote Interface. 8
	SLSrSegmentType_SL_SR_SEG_TYPE_MPLS_ADJ_SID_V6_LOC_REM_ADDR SLSrSegmentType = 8
	// (Type I) SRv6 END SID as IPv6 Node Global Address. 9
	SLSrSegmentType_SL_SR_SEG_TYPE_SRV6_END_SID_V6_NODE_ADDR SLSrSegmentType = 9
	// (Type J) SRv6 END.X SID as pair of IPv6 Global Address
	// & Interface ID for Local & Remote nodes. 10
	SLSrSegmentType_SL_SR_SEG_TYPE_SRV6_END_SID_V6_LOC_REM_ADDR_AND_ID SLSrSegmentType = 10
	// (Type K) SRv6 END.X SID as pair of IPv6 Global Addresses for
	// the Local & Remote Interface. 11
	SLSrSegmentType_SL_SR_SEG_TYPE_SRV6_END_SID_V6_LOC_REM_ADDR SLSrSegmentType = 11
)

// Enum value maps for SLSrSegmentType.
var (
	SLSrSegmentType_name = map[int32]string{
		0:  "SL_SR_SEG_TYPE_RESERVED",
		1:  "SL_SR_SEG_TYPE_MPLS_LABEL",
		2:  "SL_SR_SEG_TYPE_SRV6_SID_V6",
		3:  "SL_SR_SEG_TYPE_MPLS_PFX_SID_V4",
		4:  "SL_SR_SEG_TYPE_MPLS_PFX_SID_V6",
		5:  "SL_SR_SEG_TYPE_MPLS_ADJ_SID_V4_NODE_ADDR_LOC_ID",
		6:  "SL_SR_SEG_TYPE_MPLS_ADJ_SID_V4_LOC_REM_ADDR",
		7:  "SL_SR_SEG_TYPE_MPLS_ADJ_SID_V6_LOC_REM_ADDR_AND_ID",
		8:  "SL_SR_SEG_TYPE_MPLS_ADJ_SID_V6_LOC_REM_ADDR",
		9:  "SL_SR_SEG_TYPE_SRV6_END_SID_V6_NODE_ADDR",
		10: "SL_SR_SEG_TYPE_SRV6_END_SID_V6_LOC_REM_ADDR_AND_ID",
		11: "SL_SR_SEG_TYPE_SRV6_END_SID_V6_LOC_REM_ADDR",
	}
	SLSrSegmentType_value = map[string]int32{
		"SL_SR_SEG_TYPE_RESERVED":                            0,
		"SL_SR_SEG_TYPE_MPLS_LABEL":                          1,
		"SL_SR_SEG_TYPE_SRV6_SID_V6":                         2,
		"SL_SR_SEG_TYPE_MPLS_PFX_SID_V4":                     3,
		"SL_SR_SEG_TYPE_MPLS_PFX_SID_V6":                     4,
		"SL_SR_SEG_TYPE_MPLS_ADJ_SID_V4_NODE_ADDR_LOC_ID":    5,
		"SL_SR_SEG_TYPE_MPLS_ADJ_SID_V4_LOC_REM_ADDR":        6,
		"SL_SR_SEG_TYPE_MPLS_ADJ_SID_V6_LOC_REM_ADDR_AND_ID": 7,
		"SL_SR_SEG_TYPE_MPLS_ADJ_SID_V6_LOC_REM_ADDR":        8,
		"SL_SR_SEG_TYPE_SRV6_END_SID_V6_NODE_ADDR":           9,
		"SL_SR_SEG_TYPE_SRV6_END_SID_V6_LOC_REM_ADDR_AND_ID": 10,
		"SL_SR_SEG_TYPE_SRV6_END_SID_V6_LOC_REM_ADDR":        11,
	}
)

func (x SLSrSegmentType) Enum() *SLSrSegmentType {
	p := new(SLSrSegmentType)
	*p = x
	return p
}

func (x SLSrSegmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLSrSegmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_sr_common_proto_enumTypes[2].Descriptor()
}

func (SLSrSegmentType) Type() protoreflect.EnumType {
	return &file_sl_sr_common_proto_enumTypes[2]
}

func (x SLSrSegmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLSrSegmentType.Descriptor instead.
func (SLSrSegmentType) EnumDescriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{2}
}

type SLSrSegmentFlags int32

const (
	// Reserved.
	SLSrSegmentFlags_SL_SR_SEGMENT_FLAG_RESERVED SLSrSegmentFlags = 0
	// Bit-0: S-Flag: Indicates the presence of SID value in the SID field
	// when set and that no value is indicated when clear.
	SLSrSegmentFlags_SL_SR_SEGMENT_FLAG_SID_PRESENT SLSrSegmentFlags = 32768
	// Bit-1: E-Flag: Indicates the SID value is explicitly provisioned value
	// (locally on headend or via controller/PCE) when set and is a
	// dynamically resolved value by headend when clear.
	SLSrSegmentFlags_SL_SR_SEGMENT_FLAG_SID_EXPLICIT_PROVISIONED SLSrSegmentFlags = 16384
	// Bit-2: V-Flag: Indicates the SID has passed verification or did not
	// require verification when set and failed verification when
	// clear.
	SLSrSegmentFlags_SL_SR_SEGMENT_FLAG_SID_VERIFIED SLSrSegmentFlags = 8192
	// Bit-3: R-Flag: Indicates the SID has been resolved or did not require
	// resolution (e.g. because it is not the first SID) when set and
	// failed resolution when clear.
	SLSrSegmentFlags_SL_SR_SEGMENT_FLAG_SID_RESOLVED SLSrSegmentFlags = 4096
	// Bit-4: A-Flag: Indicates that the Algorithm indicated in the Segment
	// descriptor is valid when set.  When clear, it indicates that
	// the headend is unable to determine the algorithm of the SID.
	SLSrSegmentFlags_SL_SR_SEGMENT_FLAG_SID_ALGO_VALID SLSrSegmentFlags = 2048
)

// Enum value maps for SLSrSegmentFlags.
var (
	SLSrSegmentFlags_name = map[int32]string{
		0:     "SL_SR_SEGMENT_FLAG_RESERVED",
		32768: "SL_SR_SEGMENT_FLAG_SID_PRESENT",
		16384: "SL_SR_SEGMENT_FLAG_SID_EXPLICIT_PROVISIONED",
		8192:  "SL_SR_SEGMENT_FLAG_SID_VERIFIED",
		4096:  "SL_SR_SEGMENT_FLAG_SID_RESOLVED",
		2048:  "SL_SR_SEGMENT_FLAG_SID_ALGO_VALID",
	}
	SLSrSegmentFlags_value = map[string]int32{
		"SL_SR_SEGMENT_FLAG_RESERVED":                 0,
		"SL_SR_SEGMENT_FLAG_SID_PRESENT":              32768,
		"SL_SR_SEGMENT_FLAG_SID_EXPLICIT_PROVISIONED": 16384,
		"SL_SR_SEGMENT_FLAG_SID_VERIFIED":             8192,
		"SL_SR_SEGMENT_FLAG_SID_RESOLVED":             4096,
		"SL_SR_SEGMENT_FLAG_SID_ALGO_VALID":           2048,
	}
)

func (x SLSrSegmentFlags) Enum() *SLSrSegmentFlags {
	p := new(SLSrSegmentFlags)
	*p = x
	return p
}

func (x SLSrSegmentFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLSrSegmentFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_sr_common_proto_enumTypes[3].Descriptor()
}

func (SLSrSegmentFlags) Type() protoreflect.EnumType {
	return &file_sl_sr_common_proto_enumTypes[3]
}

func (x SLSrSegmentFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLSrSegmentFlags.Descriptor instead.
func (SLSrSegmentFlags) EnumDescriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{3}
}

type SLSrv6BindingSidFlags int32

const (
	// Reserved.
	SLSrv6BindingSidFlags_SL_SRV6_BSID_FLAG_RESERVED SLSrv6BindingSidFlags = 0
	// Bit-0: B-Flag: Indicates the allocation of the value in the BSID field
	// when set and indicates that BSID is not allocated when clear.
	SLSrv6BindingSidFlags_SL_SRV6_BSID_FLAG_ALLOCATED SLSrv6BindingSidFlags = 32768
	// Bit-1: U-Flag: Indicates the specified BSID value is unavailable when set.
	SLSrv6BindingSidFlags_SL_SRV6_BSID_FLAG_UNAVAIL SLSrv6BindingSidFlags = 16384
	// Bit-2: F-Flag: Indicates the BSID value is one allocated from dynamic
	// label pool due to fallback (e.g. when specified BSID is
	// unavailable) when set.
	SLSrv6BindingSidFlags_SL_SRV6_BSID_FLAG_DYNAMIC SLSrv6BindingSidFlags = 8192
)

// Enum value maps for SLSrv6BindingSidFlags.
var (
	SLSrv6BindingSidFlags_name = map[int32]string{
		0:     "SL_SRV6_BSID_FLAG_RESERVED",
		32768: "SL_SRV6_BSID_FLAG_ALLOCATED",
		16384: "SL_SRV6_BSID_FLAG_UNAVAIL",
		8192:  "SL_SRV6_BSID_FLAG_DYNAMIC",
	}
	SLSrv6BindingSidFlags_value = map[string]int32{
		"SL_SRV6_BSID_FLAG_RESERVED":  0,
		"SL_SRV6_BSID_FLAG_ALLOCATED": 32768,
		"SL_SRV6_BSID_FLAG_UNAVAIL":   16384,
		"SL_SRV6_BSID_FLAG_DYNAMIC":   8192,
	}
)

func (x SLSrv6BindingSidFlags) Enum() *SLSrv6BindingSidFlags {
	p := new(SLSrv6BindingSidFlags)
	*p = x
	return p
}

func (x SLSrv6BindingSidFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLSrv6BindingSidFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_sr_common_proto_enumTypes[4].Descriptor()
}

func (SLSrv6BindingSidFlags) Type() protoreflect.EnumType {
	return &file_sl_sr_common_proto_enumTypes[4]
}

func (x SLSrv6BindingSidFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLSrv6BindingSidFlags.Descriptor instead.
func (SLSrv6BindingSidFlags) EnumDescriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{4}
}

// SR dataplane.
type SLSrDataplane int32

const (
	// Unspecified dataplane (invalid).
	SLSrDataplane_SL_SR_DATAPLANE_UNSPECIFIED SLSrDataplane = 0
	// MPLS dataplane.
	SLSrDataplane_SL_SR_DATAPLANE_MPLS SLSrDataplane = 1
	// SRv6 dataplane.
	SLSrDataplane_SL_SR_DATAPLANE_SRV6 SLSrDataplane = 2
)

// Enum value maps for SLSrDataplane.
var (
	SLSrDataplane_name = map[int32]string{
		0: "SL_SR_DATAPLANE_UNSPECIFIED",
		1: "SL_SR_DATAPLANE_MPLS",
		2: "SL_SR_DATAPLANE_SRV6",
	}
	SLSrDataplane_value = map[string]int32{
		"SL_SR_DATAPLANE_UNSPECIFIED": 0,
		"SL_SR_DATAPLANE_MPLS":        1,
		"SL_SR_DATAPLANE_SRV6":        2,
	}
)

func (x SLSrDataplane) Enum() *SLSrDataplane {
	p := new(SLSrDataplane)
	*p = x
	return p
}

func (x SLSrDataplane) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLSrDataplane) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_sr_common_proto_enumTypes[5].Descriptor()
}

func (SLSrDataplane) Type() protoreflect.EnumType {
	return &file_sl_sr_common_proto_enumTypes[5]
}

func (x SLSrDataplane) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLSrDataplane.Descriptor instead.
func (SLSrDataplane) EnumDescriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{5}
}

// Metric type.
//
// Mapped from the [IANA IGP Metric-Type registry]
// (https://www.ietf.org/archive/id/draft-ietf-idr-bgp-ls-sr-policy-05.html#name-bgp-ls-sr-policy-metric-typ).
type SLSrMetricType int32

const (
	// Unspecified metric type, defaults to IGP metric.
	SLSrMetricType_SL_METRIC_TYPE_UNSPECIFIED SLSrMetricType = 0
	// IGP metric type.
	SLSrMetricType_SL_METRIC_TYPE_IGP SLSrMetricType = 0
	// Minimum unidirectional link delay metric type [RFC7471].
	SLSrMetricType_SL_METRIC_TYPE_DELAY SLSrMetricType = 1
	// Traffic engineering default metric type [RFC3630].
	SLSrMetricType_SL_METRIC_TYPE_TE SLSrMetricType = 2
	// Hop count metric type [RFC5440].
	SLSrMetricType_SL_METRIC_TYPE_HOP SLSrMetricType = 3
	// SID List Length
	SLSrMetricType_SL_METRIC_TYPE_SID_LIST_LENGTH SLSrMetricType = 4
	// Bandwidth Metric [I-D.ietf-lsr-flex-algo-bw-con]
	SLSrMetricType_SL_METRIC_TYPE_BANDWIDTH SLSrMetricType = 5
)

// Enum value maps for SLSrMetricType.
var (
	SLSrMetricType_name = map[int32]string{
		0: "SL_METRIC_TYPE_UNSPECIFIED",
		// Duplicate value: 0: "SL_METRIC_TYPE_IGP",
		1: "SL_METRIC_TYPE_DELAY",
		2: "SL_METRIC_TYPE_TE",
		3: "SL_METRIC_TYPE_HOP",
		4: "SL_METRIC_TYPE_SID_LIST_LENGTH",
		5: "SL_METRIC_TYPE_BANDWIDTH",
	}
	SLSrMetricType_value = map[string]int32{
		"SL_METRIC_TYPE_UNSPECIFIED":     0,
		"SL_METRIC_TYPE_IGP":             0,
		"SL_METRIC_TYPE_DELAY":           1,
		"SL_METRIC_TYPE_TE":              2,
		"SL_METRIC_TYPE_HOP":             3,
		"SL_METRIC_TYPE_SID_LIST_LENGTH": 4,
		"SL_METRIC_TYPE_BANDWIDTH":       5,
	}
)

func (x SLSrMetricType) Enum() *SLSrMetricType {
	p := new(SLSrMetricType)
	*p = x
	return p
}

func (x SLSrMetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLSrMetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_sr_common_proto_enumTypes[6].Descriptor()
}

func (SLSrMetricType) Type() protoreflect.EnumType {
	return &file_sl_sr_common_proto_enumTypes[6]
}

func (x SLSrMetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLSrMetricType.Descriptor instead.
func (SLSrMetricType) EnumDescriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{6}
}

// Diversity level.
type SLSrDiversityLevel int32

const (
	SLSrDiversityLevel_SL_DIVERSITY_LEVEL_NONE      SLSrDiversityLevel = 0
	SLSrDiversityLevel_SL_DIVERSITY_LEVEL_LINK      SLSrDiversityLevel = 1
	SLSrDiversityLevel_SL_DIVERSITY_LEVEL_NODE      SLSrDiversityLevel = 2
	SLSrDiversityLevel_SL_DIVERSITY_LEVEL_SRLG      SLSrDiversityLevel = 3
	SLSrDiversityLevel_SL_DIVERSITY_LEVEL_SRLG_NODE SLSrDiversityLevel = 4
)

// Enum value maps for SLSrDiversityLevel.
var (
	SLSrDiversityLevel_name = map[int32]string{
		0: "SL_DIVERSITY_LEVEL_NONE",
		1: "SL_DIVERSITY_LEVEL_LINK",
		2: "SL_DIVERSITY_LEVEL_NODE",
		3: "SL_DIVERSITY_LEVEL_SRLG",
		4: "SL_DIVERSITY_LEVEL_SRLG_NODE",
	}
	SLSrDiversityLevel_value = map[string]int32{
		"SL_DIVERSITY_LEVEL_NONE":      0,
		"SL_DIVERSITY_LEVEL_LINK":      1,
		"SL_DIVERSITY_LEVEL_NODE":      2,
		"SL_DIVERSITY_LEVEL_SRLG":      3,
		"SL_DIVERSITY_LEVEL_SRLG_NODE": 4,
	}
)

func (x SLSrDiversityLevel) Enum() *SLSrDiversityLevel {
	p := new(SLSrDiversityLevel)
	*p = x
	return p
}

func (x SLSrDiversityLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLSrDiversityLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_sr_common_proto_enumTypes[7].Descriptor()
}

func (SLSrDiversityLevel) Type() protoreflect.EnumType {
	return &file_sl_sr_common_proto_enumTypes[7]
}

func (x SLSrDiversityLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLSrDiversityLevel.Descriptor instead.
func (SLSrDiversityLevel) EnumDescriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{7}
}

type SLSrMetricMargin_MarginType int32

const (
	// Indicates that the metric margin is specified as percentage of
	// minimum metric
	SLSrMetricMargin_SL_RELATIVE SLSrMetricMargin_MarginType = 0
	// Indicates that the metric margin is specified as an absolute value
	SLSrMetricMargin_SL_ABSOLUTE SLSrMetricMargin_MarginType = 1
)

// Enum value maps for SLSrMetricMargin_MarginType.
var (
	SLSrMetricMargin_MarginType_name = map[int32]string{
		0: "SL_RELATIVE",
		1: "SL_ABSOLUTE",
	}
	SLSrMetricMargin_MarginType_value = map[string]int32{
		"SL_RELATIVE": 0,
		"SL_ABSOLUTE": 1,
	}
)

func (x SLSrMetricMargin_MarginType) Enum() *SLSrMetricMargin_MarginType {
	p := new(SLSrMetricMargin_MarginType)
	*p = x
	return p
}

func (x SLSrMetricMargin_MarginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLSrMetricMargin_MarginType) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_sr_common_proto_enumTypes[8].Descriptor()
}

func (SLSrMetricMargin_MarginType) Type() protoreflect.EnumType {
	return &file_sl_sr_common_proto_enumTypes[8]
}

func (x SLSrMetricMargin_MarginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLSrMetricMargin_MarginType.Descriptor instead.
func (SLSrMetricMargin_MarginType) EnumDescriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{9, 0}
}

// SR Policy flags
type SLSrPolicyFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SL Policy Flags
	// Flags associated with the SR policy
	// Section 4 of [draft-ietf-idr-bgp-ls-sr-policy]
	// Each flag is indicated as a bit field.
	// See SLSrPolicyFlagsDef for flag enumerations.
	// Supported values are:
	//
	// SL_SR_POLICY_FLAG_ENDPOINT_V6
	// E-Flag: Indicates the encoding of endpoint as IPv6 address when
	// set and IPv4 address when clear
	//
	// SL_SR_POLICY_FLAG_ORIGINATOR_V6
	// O-Flag: Indicates the encoding of originator address as IPv6
	// address when set and IPv4 address when clear
	//
	// All others are reserved.
	Flags uint32 `protobuf:"varint,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *SLSrPolicyFlags) Reset() {
	*x = SLSrPolicyFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrPolicyFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrPolicyFlags) ProtoMessage() {}

func (x *SLSrPolicyFlags) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrPolicyFlags.ProtoReflect.Descriptor instead.
func (*SLSrPolicyFlags) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{0}
}

func (x *SLSrPolicyFlags) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

// SR Binding SID. TLV 1201
// Section 5.1 of [draft-ietf-idr-bgp-ls-sr-policy]
type SLSrBsid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to BindingSid:
	//
	//	*SLSrBsid_MplsBsid
	//	*SLSrBsid_Srv6Bsid
	BindingSid isSLSrBsid_BindingSid `protobuf_oneof:"BindingSid"`
}

func (x *SLSrBsid) Reset() {
	*x = SLSrBsid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrBsid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrBsid) ProtoMessage() {}

func (x *SLSrBsid) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrBsid.ProtoReflect.Descriptor instead.
func (*SLSrBsid) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{1}
}

func (m *SLSrBsid) GetBindingSid() isSLSrBsid_BindingSid {
	if m != nil {
		return m.BindingSid
	}
	return nil
}

func (x *SLSrBsid) GetMplsBsid() uint32 {
	if x, ok := x.GetBindingSid().(*SLSrBsid_MplsBsid); ok {
		return x.MplsBsid
	}
	return 0
}

func (x *SLSrBsid) GetSrv6Bsid() []byte {
	if x, ok := x.GetBindingSid().(*SLSrBsid_Srv6Bsid); ok {
		return x.Srv6Bsid
	}
	return nil
}

type isSLSrBsid_BindingSid interface {
	isSLSrBsid_BindingSid()
}

type SLSrBsid_MplsBsid struct {
	// This field carries info about an MPLS binding SID.
	MplsBsid uint32 `protobuf:"varint,1,opt,name=MplsBsid,proto3,oneof"`
}

type SLSrBsid_Srv6Bsid struct {
	// This field carries info about an SRv6 binding SID.
	// SRv6 binding SID takes an IPv6 Address and must be
	// enforced for 16 bytes.
	Srv6Bsid []byte `protobuf:"bytes,2,opt,name=Srv6Bsid,proto3,oneof"`
}

func (*SLSrBsid_MplsBsid) isSLSrBsid_BindingSid() {}

func (*SLSrBsid_Srv6Bsid) isSLSrBsid_BindingSid() {}

// SR Candidate Path Name. TLV 1203
// Section 5.5 of [draft-ietf-idr-bgp-ls-sr-policy]
type SLSrCpName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Symbolic name for the SR Policy candidate path without a NULL
	// terminator. It must be enforced that the size of the symbolic name
	// be limited to 255 characters.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *SLSrCpName) Reset() {
	*x = SLSrCpName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrCpName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrCpName) ProtoMessage() {}

func (x *SLSrCpName) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrCpName.ProtoReflect.Descriptor instead.
func (*SLSrCpName) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{2}
}

func (x *SLSrCpName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// SR Segment Descriptors
type SLSrSegmentDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algorithm uint32 `protobuf:"varint,1,opt,name=Algorithm,proto3" json:"Algorithm,omitempty"`
	// Carries info about local node address.
	//
	// Types that are assignable to LocalNode:
	//
	//	*SLSrSegmentDesc_Ipv4LocalAddr
	//	*SLSrSegmentDesc_Ipv6LocalAddr
	LocalNode isSLSrSegmentDesc_LocalNode `protobuf_oneof:"LocalNode"`
	// Carries info about remote node address.
	//
	// Types that are assignable to RemoteNode:
	//
	//	*SLSrSegmentDesc_Ipv4RemoteAddr
	//	*SLSrSegmentDesc_Ipv6RemoteAddr
	RemoteNode isSLSrSegmentDesc_RemoteNode `protobuf_oneof:"RemoteNode"`
	// Carries the interface ID of the local node identified by the
	// local node address.
	// Section 5.8.1 of [draft-ietf-idr-bgp-ls-sr-policy]
	LocalNodeIntfId uint32 `protobuf:"varint,6,opt,name=LocalNodeIntfId,proto3" json:"LocalNodeIntfId,omitempty"`
	// Carries the interface ID of the remote node identified by
	// the remote node address.
	// Section 5.8.1 of [draft-ietf-idr-bgp-ls-sr-policy]
	RemoteNodeIntfId uint32 `protobuf:"varint,7,opt,name=RemoteNodeIntfId,proto3" json:"RemoteNodeIntfId,omitempty"`
}

func (x *SLSrSegmentDesc) Reset() {
	*x = SLSrSegmentDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrSegmentDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrSegmentDesc) ProtoMessage() {}

func (x *SLSrSegmentDesc) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrSegmentDesc.ProtoReflect.Descriptor instead.
func (*SLSrSegmentDesc) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{3}
}

func (x *SLSrSegmentDesc) GetAlgorithm() uint32 {
	if x != nil {
		return x.Algorithm
	}
	return 0
}

func (m *SLSrSegmentDesc) GetLocalNode() isSLSrSegmentDesc_LocalNode {
	if m != nil {
		return m.LocalNode
	}
	return nil
}

func (x *SLSrSegmentDesc) GetIpv4LocalAddr() []byte {
	if x, ok := x.GetLocalNode().(*SLSrSegmentDesc_Ipv4LocalAddr); ok {
		return x.Ipv4LocalAddr
	}
	return nil
}

func (x *SLSrSegmentDesc) GetIpv6LocalAddr() []byte {
	if x, ok := x.GetLocalNode().(*SLSrSegmentDesc_Ipv6LocalAddr); ok {
		return x.Ipv6LocalAddr
	}
	return nil
}

func (m *SLSrSegmentDesc) GetRemoteNode() isSLSrSegmentDesc_RemoteNode {
	if m != nil {
		return m.RemoteNode
	}
	return nil
}

func (x *SLSrSegmentDesc) GetIpv4RemoteAddr() []byte {
	if x, ok := x.GetRemoteNode().(*SLSrSegmentDesc_Ipv4RemoteAddr); ok {
		return x.Ipv4RemoteAddr
	}
	return nil
}

func (x *SLSrSegmentDesc) GetIpv6RemoteAddr() []byte {
	if x, ok := x.GetRemoteNode().(*SLSrSegmentDesc_Ipv6RemoteAddr); ok {
		return x.Ipv6RemoteAddr
	}
	return nil
}

func (x *SLSrSegmentDesc) GetLocalNodeIntfId() uint32 {
	if x != nil {
		return x.LocalNodeIntfId
	}
	return 0
}

func (x *SLSrSegmentDesc) GetRemoteNodeIntfId() uint32 {
	if x != nil {
		return x.RemoteNodeIntfId
	}
	return 0
}

type isSLSrSegmentDesc_LocalNode interface {
	isSLSrSegmentDesc_LocalNode()
}

type SLSrSegmentDesc_Ipv4LocalAddr struct {
	// This field carries info about an IPv4 local node address.
	Ipv4LocalAddr []byte `protobuf:"bytes,2,opt,name=Ipv4LocalAddr,proto3,oneof"`
}

type SLSrSegmentDesc_Ipv6LocalAddr struct {
	// This field carries info about an IPv6 local node address.
	Ipv6LocalAddr []byte `protobuf:"bytes,3,opt,name=Ipv6LocalAddr,proto3,oneof"`
}

func (*SLSrSegmentDesc_Ipv4LocalAddr) isSLSrSegmentDesc_LocalNode() {}

func (*SLSrSegmentDesc_Ipv6LocalAddr) isSLSrSegmentDesc_LocalNode() {}

type isSLSrSegmentDesc_RemoteNode interface {
	isSLSrSegmentDesc_RemoteNode()
}

type SLSrSegmentDesc_Ipv4RemoteAddr struct {
	// This field carries info about an IPv4 remote node address.
	Ipv4RemoteAddr []byte `protobuf:"bytes,4,opt,name=Ipv4RemoteAddr,proto3,oneof"`
}

type SLSrSegmentDesc_Ipv6RemoteAddr struct {
	// This field carries info about an IPv6 remote node address.
	Ipv6RemoteAddr []byte `protobuf:"bytes,5,opt,name=Ipv6RemoteAddr,proto3,oneof"`
}

func (*SLSrSegmentDesc_Ipv4RemoteAddr) isSLSrSegmentDesc_RemoteNode() {}

func (*SLSrSegmentDesc_Ipv6RemoteAddr) isSLSrSegmentDesc_RemoteNode() {}

// SR Segment. TLV 1206
// Section 5.8 of [draft-ietf-idr-bgp-ls-sr-policy]
type SLSrSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type SLSrSegmentType `protobuf:"varint,1,opt,name=Type,proto3,enum=service_layer.SLSrSegmentType" json:"Type,omitempty"`
	// SR Segment Flags
	// Flags associated with the SR Segment
	// Section 5.8 of [draft-ietf-idr-bgp-ls-sr-policy]
	// Each flag is indicated as a bit field. Supported values are:
	//
	// SL_SR_SEGMENT_FLAG_SID_PRESENT
	// Bit-0: S-Flag: Indicates the presence of SID value in the SID field
	// when set and that no value is indicated when clear.
	//
	// SL_SR_SEGMENT_FLAG_SID_EXPLICIT_PROVISIONED
	// Bit-1: E-Flag: Indicates the SID value is explicitly provisioned value
	// (locally on headend or via controller/PCE) when set and is a
	// dynamically resolved value by headend when clear.
	//
	// SL_SR_SEGMENT_FLAG_SID_VERIFIED
	// Bit-2: V-Flag: Indicates the SID has passed verification or did not
	// require verification when set and failed verification when
	// clear.
	//
	// SL_SR_SEGMENT_FLAG_SID_RESOLVED
	// Bit-3: R-Flag: Indicates the SID has been resolved or did not require
	// resolution (e.g. because it is not the first SID) when set and
	// failed resolution when clear.
	//
	// SL_SR_SEGMENT_FLAG_SID_ALGO_VALID
	// Bit-4: A-Flag: Indicates that the Algorithm indicated in the Segment
	// descriptor is valid when set.  When clear, it indicates that
	// the headend is unable to determine the algorithm of the SID.
	//
	// All others are reserved.
	Flags uint32 `protobuf:"varint,2,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Types that are assignable to Sid:
	//
	//	*SLSrSegment_MplsLabel
	//	*SLSrSegment_Srv6Sid
	Sid isSLSrSegment_Sid `protobuf_oneof:"Sid"`
	// Variable size Segment descriptor based on the type of segment
	SegmentDesc *SLSrSegmentDesc `protobuf:"bytes,5,opt,name=SegmentDesc,proto3" json:"SegmentDesc,omitempty"`
	// SRv6 End Point Behavior. TLV 1250
	// Section 7.1 of [RFC9514]
	EndPointBehavior *SLSrv6EndPointBehavior `protobuf:"bytes,6,opt,name=EndPointBehavior,proto3" json:"EndPointBehavior,omitempty"`
	// SRv6 SID Structure Attribute. TLV 1252
	// Section 8 of [RFC9514]
	SidStruct *SLSrv6SidStruct `protobuf:"bytes,7,opt,name=SidStruct,proto3" json:"SidStruct,omitempty"`
}

func (x *SLSrSegment) Reset() {
	*x = SLSrSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrSegment) ProtoMessage() {}

func (x *SLSrSegment) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrSegment.ProtoReflect.Descriptor instead.
func (*SLSrSegment) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{4}
}

func (x *SLSrSegment) GetType() SLSrSegmentType {
	if x != nil {
		return x.Type
	}
	return SLSrSegmentType_SL_SR_SEG_TYPE_RESERVED
}

func (x *SLSrSegment) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (m *SLSrSegment) GetSid() isSLSrSegment_Sid {
	if m != nil {
		return m.Sid
	}
	return nil
}

func (x *SLSrSegment) GetMplsLabel() uint32 {
	if x, ok := x.GetSid().(*SLSrSegment_MplsLabel); ok {
		return x.MplsLabel
	}
	return 0
}

func (x *SLSrSegment) GetSrv6Sid() []byte {
	if x, ok := x.GetSid().(*SLSrSegment_Srv6Sid); ok {
		return x.Srv6Sid
	}
	return nil
}

func (x *SLSrSegment) GetSegmentDesc() *SLSrSegmentDesc {
	if x != nil {
		return x.SegmentDesc
	}
	return nil
}

func (x *SLSrSegment) GetEndPointBehavior() *SLSrv6EndPointBehavior {
	if x != nil {
		return x.EndPointBehavior
	}
	return nil
}

func (x *SLSrSegment) GetSidStruct() *SLSrv6SidStruct {
	if x != nil {
		return x.SidStruct
	}
	return nil
}

type isSLSrSegment_Sid interface {
	isSLSrSegment_Sid()
}

type SLSrSegment_MplsLabel struct {
	// This field carries info about an MPLS SID.
	MplsLabel uint32 `protobuf:"varint,3,opt,name=MplsLabel,proto3,oneof"`
}

type SLSrSegment_Srv6Sid struct {
	// This field carries info about an SRv6 SID.
	// SRv6 SID takes an IPv6 Address and must be
	// enforced for 16 bytes.
	Srv6Sid []byte `protobuf:"bytes,4,opt,name=Srv6Sid,proto3,oneof"`
}

func (*SLSrSegment_MplsLabel) isSLSrSegment_Sid() {}

func (*SLSrSegment_Srv6Sid) isSLSrSegment_Sid() {}

// SRv6 Binding SID. TLV 1212
// Section 5.2 of [draft-ietf-idr-bgp-ls-sr-policy]
type SLSrv6BindingSid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SRv6 Binding SID Flags
	// Flags associated with the SRv6 Binding SID
	// Section 5.2 of [draft-ietf-idr-bgp-ls-sr-policy]
	// Each flag is indicated as a bit field. Supported values are:
	//
	// SL_SRV6_BSID_FLAG_ALLOCATED
	// Bit-0: B-Flag: Indicates the allocation of the value in the BSID field
	// when set and indicates that BSID is not allocated when clear.
	//
	// SL_SRV6_BSID_FLAG_UNAVAIL
	// Bit-1: U-Flag: Indicates the specified BSID value is unavailable when set.
	//
	// SL_SRV6_BSID_FLAG_DYNAMIC
	// Bit-2: F-Flag: Indicates the BSID value is one allocated from dynamic
	// label pool due to fallback (e.g. when specified BSID is
	// unavailable) when set.
	//
	// All others are reserved.
	Flags uint32 `protobuf:"varint,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// The operational or allocated BSID value based on the status flags.
	// SRv6 binding SID takes an IPv6 Address and must be
	// enforced for 16 bytes.
	Bsid []byte `protobuf:"bytes,2,opt,name=Bsid,proto3" json:"Bsid,omitempty"`
	// The explicitly specified BSID whether it is allocated or not.
	// SRv6 binding SID takes an IPv6 Address and must be
	// enforced for 16 bytes.
	SpecifiedBsid []byte `protobuf:"bytes,3,opt,name=SpecifiedBsid,proto3" json:"SpecifiedBsid,omitempty"`
	// SRv6 End Point Behavior. TLV 1250
	// Section 7.1 of [RFC9514]
	EndPointBehavior *SLSrv6EndPointBehavior `protobuf:"bytes,4,opt,name=EndPointBehavior,proto3" json:"EndPointBehavior,omitempty"`
	// SRv6 SID Structure Attribute. TLV 1252
	// Section 8 of [RFC9514]
	SidStruct *SLSrv6SidStruct `protobuf:"bytes,5,opt,name=SidStruct,proto3" json:"SidStruct,omitempty"`
}

func (x *SLSrv6BindingSid) Reset() {
	*x = SLSrv6BindingSid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrv6BindingSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrv6BindingSid) ProtoMessage() {}

func (x *SLSrv6BindingSid) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrv6BindingSid.ProtoReflect.Descriptor instead.
func (*SLSrv6BindingSid) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{5}
}

func (x *SLSrv6BindingSid) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SLSrv6BindingSid) GetBsid() []byte {
	if x != nil {
		return x.Bsid
	}
	return nil
}

func (x *SLSrv6BindingSid) GetSpecifiedBsid() []byte {
	if x != nil {
		return x.SpecifiedBsid
	}
	return nil
}

func (x *SLSrv6BindingSid) GetEndPointBehavior() *SLSrv6EndPointBehavior {
	if x != nil {
		return x.EndPointBehavior
	}
	return nil
}

func (x *SLSrv6BindingSid) GetSidStruct() *SLSrv6SidStruct {
	if x != nil {
		return x.SidStruct
	}
	return nil
}

// SRv6 End Point Behavior. TLV 1250
// Section 7.1 of [RFC9514]
type SLSrv6EndPointBehavior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Endpoint behavior of the SID
	EndPointBehavior uint32 `protobuf:"varint,1,opt,name=EndPointBehavior,proto3" json:"EndPointBehavior,omitempty"`
	// Flags associated with the SID. Section 8 of [RFC9513]
	// for OSPFv3, and Section 7.2 of [RFC9352] for IS-IS.
	Flags uint32 `protobuf:"varint,2,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Algorithm associated with the SID
	Algorithm uint32 `protobuf:"varint,3,opt,name=Algorithm,proto3" json:"Algorithm,omitempty"`
}

func (x *SLSrv6EndPointBehavior) Reset() {
	*x = SLSrv6EndPointBehavior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrv6EndPointBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrv6EndPointBehavior) ProtoMessage() {}

func (x *SLSrv6EndPointBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrv6EndPointBehavior.ProtoReflect.Descriptor instead.
func (*SLSrv6EndPointBehavior) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{6}
}

func (x *SLSrv6EndPointBehavior) GetEndPointBehavior() uint32 {
	if x != nil {
		return x.EndPointBehavior
	}
	return 0
}

func (x *SLSrv6EndPointBehavior) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SLSrv6EndPointBehavior) GetAlgorithm() uint32 {
	if x != nil {
		return x.Algorithm
	}
	return 0
}

// SRv6 SID Structure Attribute. TLV 1252
// Section 8 of [RFC9514]
type SLSrv6SidStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Locator block length in bits
	LocatorBlockLen uint32 `protobuf:"varint,1,opt,name=locator_block_len,json=locatorBlockLen,proto3" json:"locator_block_len,omitempty"`
	// Locator node length in bits
	LocatorNodeLen uint32 `protobuf:"varint,2,opt,name=locator_node_len,json=locatorNodeLen,proto3" json:"locator_node_len,omitempty"`
	// Function length in bits
	FunctionLen uint32 `protobuf:"varint,3,opt,name=function_len,json=functionLen,proto3" json:"function_len,omitempty"`
	// Argument length in bits
	ArgLen uint32 `protobuf:"varint,4,opt,name=arg_len,json=argLen,proto3" json:"arg_len,omitempty"`
}

func (x *SLSrv6SidStruct) Reset() {
	*x = SLSrv6SidStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrv6SidStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrv6SidStruct) ProtoMessage() {}

func (x *SLSrv6SidStruct) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrv6SidStruct.ProtoReflect.Descriptor instead.
func (*SLSrv6SidStruct) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{7}
}

func (x *SLSrv6SidStruct) GetLocatorBlockLen() uint32 {
	if x != nil {
		return x.LocatorBlockLen
	}
	return 0
}

func (x *SLSrv6SidStruct) GetLocatorNodeLen() uint32 {
	if x != nil {
		return x.LocatorNodeLen
	}
	return 0
}

func (x *SLSrv6SidStruct) GetFunctionLen() uint32 {
	if x != nil {
		return x.FunctionLen
	}
	return 0
}

func (x *SLSrv6SidStruct) GetArgLen() uint32 {
	if x != nil {
		return x.ArgLen
	}
	return 0
}

// Maximum metric that is allowed for given metric type
type SLSrMetricBounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Igp     uint32 `protobuf:"varint,1,opt,name=igp,proto3" json:"igp,omitempty"`
	Te      uint32 `protobuf:"varint,2,opt,name=te,proto3" json:"te,omitempty"`
	Latency uint32 `protobuf:"varint,3,opt,name=latency,proto3" json:"latency,omitempty"`
}

func (x *SLSrMetricBounds) Reset() {
	*x = SLSrMetricBounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrMetricBounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrMetricBounds) ProtoMessage() {}

func (x *SLSrMetricBounds) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrMetricBounds.ProtoReflect.Descriptor instead.
func (*SLSrMetricBounds) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{8}
}

func (x *SLSrMetricBounds) GetIgp() uint32 {
	if x != nil {
		return x.Igp
	}
	return 0
}

func (x *SLSrMetricBounds) GetTe() uint32 {
	if x != nil {
		return x.Te
	}
	return 0
}

func (x *SLSrMetricBounds) GetLatency() uint32 {
	if x != nil {
		return x.Latency
	}
	return 0
}

type SLSrMetricMargin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  SLSrMetricMargin_MarginType `protobuf:"varint,1,opt,name=type,proto3,enum=service_layer.SLSrMetricMargin_MarginType" json:"type,omitempty"`
	Value uint32                      `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SLSrMetricMargin) Reset() {
	*x = SLSrMetricMargin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrMetricMargin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrMetricMargin) ProtoMessage() {}

func (x *SLSrMetricMargin) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrMetricMargin.ProtoReflect.Descriptor instead.
func (*SLSrMetricMargin) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{9}
}

func (x *SLSrMetricMargin) GetType() SLSrMetricMargin_MarginType {
	if x != nil {
		return x.Type
	}
	return SLSrMetricMargin_SL_RELATIVE
}

func (x *SLSrMetricMargin) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Extended Administrative Group.
// Bit mask of administrative groups assigned by the
// network administrator. Each set bit corresponds to one
// administrative group assigned to the interface. By convention, the
// least significant bit is referred to as group 0, and the
// most significant bit is referred to as group 31. Each EAG bitmask
// is represented in multiple of 4 bytes.
type SLSrAffinities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Affinity include any.
	//
	// Mapped from [section 6.2 of RFC 9350]
	// (https://www.rfc-editor.org/rfc/rfc9350.html#section-6.2).
	IncludeAny []uint32 `protobuf:"varint,1,rep,packed,name=includeAny,proto3" json:"includeAny,omitempty"`
	// Affinity include all.
	//
	// Mapped from [section 6.3 of RFC 9350]
	// (https://www.rfc-editor.org/rfc/rfc9350.html#section-6.3).
	IncludeAll []uint32 `protobuf:"varint,2,rep,packed,name=includeAll,proto3" json:"includeAll,omitempty"`
	// Affinity exclude.
	//
	// Mapped from [section 6.1 of RFC 9350]
	// (https://www.rfc-editor.org/rfc/rfc9350.html#section-6.1).
	ExcludeAny []uint32 `protobuf:"varint,3,rep,packed,name=excludeAny,proto3" json:"excludeAny,omitempty"`
}

func (x *SLSrAffinities) Reset() {
	*x = SLSrAffinities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrAffinities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrAffinities) ProtoMessage() {}

func (x *SLSrAffinities) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrAffinities.ProtoReflect.Descriptor instead.
func (*SLSrAffinities) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{10}
}

func (x *SLSrAffinities) GetIncludeAny() []uint32 {
	if x != nil {
		return x.IncludeAny
	}
	return nil
}

func (x *SLSrAffinities) GetIncludeAll() []uint32 {
	if x != nil {
		return x.IncludeAll
	}
	return nil
}

func (x *SLSrAffinities) GetExcludeAny() []uint32 {
	if x != nil {
		return x.ExcludeAny
	}
	return nil
}

// A segment descriptor.
//
// Segment descriptor types are defined in [section 4 of RFC
// 9256](https://www.rfc-editor.org/rfc/rfc9256.html#section-4).
type SLSrteSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Segment:
	//
	//	*SLSrteSegment_TypeA_
	//	*SLSrteSegment_TypeB_
	Segment isSLSrteSegment_Segment `protobuf_oneof:"segment"`
}

func (x *SLSrteSegment) Reset() {
	*x = SLSrteSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrteSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrteSegment) ProtoMessage() {}

func (x *SLSrteSegment) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrteSegment.ProtoReflect.Descriptor instead.
func (*SLSrteSegment) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{11}
}

func (m *SLSrteSegment) GetSegment() isSLSrteSegment_Segment {
	if m != nil {
		return m.Segment
	}
	return nil
}

func (x *SLSrteSegment) GetTypeA() *SLSrteSegment_TypeA {
	if x, ok := x.GetSegment().(*SLSrteSegment_TypeA_); ok {
		return x.TypeA
	}
	return nil
}

func (x *SLSrteSegment) GetTypeB() *SLSrteSegment_TypeB {
	if x, ok := x.GetSegment().(*SLSrteSegment_TypeB_); ok {
		return x.TypeB
	}
	return nil
}

type isSLSrteSegment_Segment interface {
	isSLSrteSegment_Segment()
}

type SLSrteSegment_TypeA_ struct {
	TypeA *SLSrteSegment_TypeA `protobuf:"bytes,1,opt,name=type_a,json=typeA,proto3,oneof"` // A segment descriptor of type A.
}

type SLSrteSegment_TypeB_ struct {
	TypeB *SLSrteSegment_TypeB `protobuf:"bytes,2,opt,name=type_b,json=typeB,proto3,oneof"` // A segment descriptor of type B.
}

func (*SLSrteSegment_TypeA_) isSLSrteSegment_Segment() {}

func (*SLSrteSegment_TypeB_) isSLSrteSegment_Segment() {}

// A (weighted) segment list.
type SLSrSegmentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ordered list of segments.
	Segments []*SLSrteSegment `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
	// Load balancing weight factor.
	//
	// As per [RFC 9256](https://www.rfc-editor.org/rfc/rfc9256.html):
	//
	// - the default weight is 1; and
	// - a segment list with a weight of 0 is invalid.
	Weight *uint32 `protobuf:"varint,2,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	// Total path *cost*, i.e., the accumulated o-metric values along the path.
	PathCost uint32 `protobuf:"varint,3,opt,name=path_cost,json=pathCost,proto3" json:"path_cost,omitempty"`
}

func (x *SLSrSegmentList) Reset() {
	*x = SLSrSegmentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrSegmentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrSegmentList) ProtoMessage() {}

func (x *SLSrSegmentList) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrSegmentList.ProtoReflect.Descriptor instead.
func (*SLSrSegmentList) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{12}
}

func (x *SLSrSegmentList) GetSegments() []*SLSrteSegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *SLSrSegmentList) GetWeight() uint32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *SLSrSegmentList) GetPathCost() uint32 {
	if x != nil {
		return x.PathCost
	}
	return 0
}

// Identifier of an SR Policy as defined in [section 2.1 of RFC
// 9256](https://www.rfc-editor.org/rfc/rfc9256.html#section-2.1).
type SLSrPolicyKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv4 or IPv6 Router-ID of the headend node.
	//
	// The Router-ID of a node is advertised in BGP-LS TLV 1028 (IPv4) or 1029
	// (IPv6) (see [section 5.3.1 of
	// draft-ietf-idr-rfc7752bis]
	// (https://datatracker.ietf.org/doc/html/draft-ietf-idr-rfc7752bis-16#section-5.3.1))
	Headend *SLIpAddress `protobuf:"bytes,1,opt,name=headend,proto3" json:"headend,omitempty"`
	// Color is an unsigned non-zero 32-bit integer value.
	Color uint32 `protobuf:"varint,2,opt,name=color,proto3" json:"color,omitempty"`
	// IPv4 or IPv6 address of the policy endpoint.
	Endpoint *SLIpAddress `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *SLSrPolicyKey) Reset() {
	*x = SLSrPolicyKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrPolicyKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrPolicyKey) ProtoMessage() {}

func (x *SLSrPolicyKey) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrPolicyKey.ProtoReflect.Descriptor instead.
func (*SLSrPolicyKey) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{13}
}

func (x *SLSrPolicyKey) GetHeadend() *SLIpAddress {
	if x != nil {
		return x.Headend
	}
	return nil
}

func (x *SLSrPolicyKey) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *SLSrPolicyKey) GetEndpoint() *SLIpAddress {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

// Identifier of an SR Candidate Path in the context of an SR Policy, as
// defined in [section 2.6 of RFC
// 9256](https://www.rfc-editor.org/rfc/rfc9256.html#section-2.6).
type SLSrCandidatePathKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Originator *SLSrCandidatePathKey_Originator `protobuf:"bytes,1,opt,name=originator,proto3" json:"originator,omitempty"`
	// Discriminator of the candidate path, as defined in [section 2.5 of RFC
	// 9256](https://www.rfc-editor.org/rfc/rfc9256.html#section-2.5).
	Discriminator uint32 `protobuf:"varint,3,opt,name=discriminator,proto3" json:"discriminator,omitempty"`
}

func (x *SLSrCandidatePathKey) Reset() {
	*x = SLSrCandidatePathKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrCandidatePathKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrCandidatePathKey) ProtoMessage() {}

func (x *SLSrCandidatePathKey) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrCandidatePathKey.ProtoReflect.Descriptor instead.
func (*SLSrCandidatePathKey) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{14}
}

func (x *SLSrCandidatePathKey) GetOriginator() *SLSrCandidatePathKey_Originator {
	if x != nil {
		return x.Originator
	}
	return nil
}

func (x *SLSrCandidatePathKey) GetDiscriminator() uint32 {
	if x != nil {
		return x.Discriminator
	}
	return 0
}

// Type A: SR-MPLS Label.
type SLSrteSegment_TypeA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label uint32 `protobuf:"varint,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *SLSrteSegment_TypeA) Reset() {
	*x = SLSrteSegment_TypeA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrteSegment_TypeA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrteSegment_TypeA) ProtoMessage() {}

func (x *SLSrteSegment_TypeA) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrteSegment_TypeA.ProtoReflect.Descriptor instead.
func (*SLSrteSegment_TypeA) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{11, 0}
}

func (x *SLSrteSegment_TypeA) GetLabel() uint32 {
	if x != nil {
		return x.Label
	}
	return 0
}

// Type B: SRv6 SID.
type SLSrteSegment_TypeB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv6SidAddress *SLIpv6Address   `protobuf:"bytes,1,opt,name=ipv6_sid_address,json=ipv6SidAddress,proto3" json:"ipv6_sid_address,omitempty"`
	Behavior       uint32           `protobuf:"varint,2,opt,name=behavior,proto3" json:"behavior,omitempty"`
	Structure      *SLSrv6SidStruct `protobuf:"bytes,3,opt,name=structure,proto3" json:"structure,omitempty"`
}

func (x *SLSrteSegment_TypeB) Reset() {
	*x = SLSrteSegment_TypeB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrteSegment_TypeB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrteSegment_TypeB) ProtoMessage() {}

func (x *SLSrteSegment_TypeB) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrteSegment_TypeB.ProtoReflect.Descriptor instead.
func (*SLSrteSegment_TypeB) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{11, 1}
}

func (x *SLSrteSegment_TypeB) GetIpv6SidAddress() *SLIpv6Address {
	if x != nil {
		return x.Ipv6SidAddress
	}
	return nil
}

func (x *SLSrteSegment_TypeB) GetBehavior() uint32 {
	if x != nil {
		return x.Behavior
	}
	return 0
}

func (x *SLSrteSegment_TypeB) GetStructure() *SLSrv6SidStruct {
	if x != nil {
		return x.Structure
	}
	return nil
}

// Originator of the candidate path, as defined in [section 2.4 of RFC
// 9256](https://www.rfc-editor.org/rfc/rfc9256.html#section-2.4).
type SLSrCandidatePathKey_Originator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Autonomous System Number (ASN)
	// If 2-byte ASNs are in use, the low-order 16 bits MUST be used,
	// and the high-order bits MUST be set to 0.
	Asn uint32 `protobuf:"varint,1,opt,name=asn,proto3" json:"asn,omitempty"`
	// Originator Node Address
	NodeID *SLIpAddress `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
}

func (x *SLSrCandidatePathKey_Originator) Reset() {
	*x = SLSrCandidatePathKey_Originator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrCandidatePathKey_Originator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrCandidatePathKey_Originator) ProtoMessage() {}

func (x *SLSrCandidatePathKey_Originator) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrCandidatePathKey_Originator.ProtoReflect.Descriptor instead.
func (*SLSrCandidatePathKey_Originator) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{14, 0}
}

func (x *SLSrCandidatePathKey_Originator) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *SLSrCandidatePathKey_Originator) GetNodeID() *SLIpAddress {
	if x != nil {
		return x.NodeID
	}
	return nil
}

var File_sl_sr_common_proto protoreflect.FileDescriptor

var file_sl_sr_common_proto_rawDesc = []byte{
	0x0a, 0x12, 0x73, 0x6c, 0x5f, 0x73, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x1a, 0x15, 0x73, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x27, 0x0a, 0x0f, 0x53, 0x4c,
	0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x22, 0x54, 0x0a, 0x08, 0x53, 0x4c, 0x53, 0x72, 0x42, 0x73, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x08, 0x4d, 0x70, 0x6c, 0x73, 0x42, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x08, 0x4d, 0x70, 0x6c, 0x73, 0x42, 0x73, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x08, 0x53, 0x72, 0x76, 0x36, 0x42, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x08, 0x53, 0x72, 0x76, 0x36, 0x42, 0x73, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x22, 0x20, 0x0a, 0x0a, 0x53, 0x4c, 0x53,
	0x72, 0x43, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc4, 0x02, 0x0a, 0x0f,
	0x53, 0x4c, 0x53, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x26, 0x0a,
	0x0d, 0x49, 0x70, 0x76, 0x34, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0d, 0x49, 0x70, 0x76, 0x34, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x26, 0x0a, 0x0d, 0x49, 0x70, 0x76, 0x36, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0d,
	0x49, 0x70, 0x76, 0x36, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x28, 0x0a,
	0x0e, 0x49, 0x70, 0x76, 0x34, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0e, 0x49, 0x70, 0x76, 0x34, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x28, 0x0a, 0x0e, 0x49, 0x70, 0x76, 0x36, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x01, 0x52, 0x0e, 0x49, 0x70, 0x76, 0x36, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x74, 0x66, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x22, 0xed, 0x02, 0x0a, 0x0b, 0x53, 0x4c, 0x53, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x53, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x09,
	0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x09, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x07,
	0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x07, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x53, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x52, 0x0b, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x51, 0x0a, 0x10, 0x45, 0x6e,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x76, 0x36, 0x45, 0x6e, 0x64, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x10, 0x45, 0x6e, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x3c, 0x0a,
	0x09, 0x53, 0x69, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x09, 0x53, 0x69, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x53,
	0x69, 0x64, 0x22, 0xf3, 0x01, 0x0a, 0x10, 0x53, 0x4c, 0x53, 0x72, 0x76, 0x36, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x42, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x42, 0x73, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x73,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x42, 0x73, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x10, 0x45, 0x6e, 0x64, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x76, 0x36, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x10, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x53, 0x69,
	0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x53,
	0x69, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x78, 0x0a, 0x16, 0x53, 0x4c, 0x53, 0x72,
	0x76, 0x36, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x45, 0x6e,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x22, 0xa3, 0x01, 0x0a, 0x0f, 0x53, 0x4c, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c,
	0x65, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x61, 0x72, 0x67, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x61, 0x72, 0x67, 0x4c, 0x65, 0x6e, 0x22, 0x4e, 0x0a, 0x10, 0x53, 0x4c, 0x53, 0x72,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x67, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x67, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x53, 0x4c, 0x53,
	0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x3e, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2e, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x2e, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4c, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4c, 0x5f, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54,
	0x45, 0x10, 0x01, 0x22, 0x70, 0x0a, 0x0e, 0x53, 0x4c, 0x53, 0x72, 0x41, 0x66, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x41, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x41, 0x6e, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x41, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x41, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x41, 0x6e, 0x79, 0x22, 0xdf, 0x02, 0x0a, 0x0d, 0x53, 0x4c, 0x53, 0x72, 0x74, 0x65,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x74, 0x65, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x48, 0x00, 0x52, 0x05, 0x74,
	0x79, 0x70, 0x65, 0x41, 0x12, 0x3b, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x48, 0x00, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x1a, 0x1d, 0x0a, 0x05, 0x54, 0x79, 0x70, 0x65, 0x41, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x1a, 0xa9, 0x01, 0x0a, 0x05, 0x54, 0x79, 0x70, 0x65, 0x42, 0x12, 0x46, 0x0a, 0x10, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x53, 0x69, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x3c,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x09, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x0f, 0x53, 0x4c, 0x53, 0x72,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x53, 0x72, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x73, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x0d, 0x53,
	0x4c, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x22, 0xe0, 0x01, 0x0a, 0x14, 0x53, 0x4c, 0x53, 0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x4e, 0x0a, 0x0a, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x53, 0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x4b,
	0x65, 0x79, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73,
	0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x1a,
	0x52, 0x0a, 0x0a, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12,
	0x32, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x44, 0x2a, 0x90, 0x03, 0x0a, 0x18, 0x53, 0x4c, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x29, 0x0a, 0x25, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e,
	0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x53,
	0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x50, 0x43, 0x45, 0x50,
	0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47,
	0x49, 0x4e, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47,
	0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x53,
	0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x50, 0x43, 0x45, 0x50,
	0x5f, 0x56, 0x49, 0x41, 0x5f, 0x50, 0x43, 0x45, 0x10, 0x0a, 0x12, 0x36, 0x0a, 0x32, 0x53, 0x4c,
	0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x53,
	0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x56, 0x49, 0x41, 0x5f, 0x50, 0x43, 0x45,
	0x10, 0x14, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47,
	0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x56, 0x49, 0x41, 0x5f, 0x50, 0x43,
	0x45, 0x10, 0x1e, 0x12, 0x31, 0x0a, 0x2c, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x49,
	0x47, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x56, 0x49, 0x41, 0x5f, 0x47,
	0x52, 0x50, 0x43, 0x10, 0xfb, 0x01, 0x2a, 0x7d, 0x0a, 0x12, 0x53, 0x4c, 0x53, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x44, 0x65, 0x66, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x46, 0x4c, 0x41,
	0x47, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1d,
	0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x46, 0x4c, 0x41,
	0x47, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x56, 0x36, 0x10, 0x80, 0x01,
	0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x56, 0x36, 0x10, 0x40, 0x2a, 0x9b, 0x04, 0x0a, 0x0f, 0x53, 0x4c, 0x53, 0x72, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4c, 0x5f,
	0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f,
	0x53, 0x45, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x53,
	0x45, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x52, 0x56, 0x36, 0x5f, 0x53, 0x49, 0x44,
	0x5f, 0x56, 0x36, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x53,
	0x45, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x50, 0x46, 0x58,
	0x5f, 0x53, 0x49, 0x44, 0x5f, 0x56, 0x34, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4c, 0x5f,
	0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53,
	0x5f, 0x50, 0x46, 0x58, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x56, 0x36, 0x10, 0x04, 0x12, 0x33, 0x0a,
	0x2f, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x56, 0x34, 0x5f,
	0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x5f, 0x49, 0x44,
	0x10, 0x05, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x53, 0x49,
	0x44, 0x5f, 0x56, 0x34, 0x5f, 0x4c, 0x4f, 0x43, 0x5f, 0x52, 0x45, 0x4d, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x10, 0x06, 0x12, 0x36, 0x0a, 0x32, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x53,
	0x49, 0x44, 0x5f, 0x56, 0x36, 0x5f, 0x4c, 0x4f, 0x43, 0x5f, 0x52, 0x45, 0x4d, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x07, 0x12, 0x2f, 0x0a, 0x2b, 0x53,
	0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50,
	0x4c, 0x53, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x56, 0x36, 0x5f, 0x4c, 0x4f,
	0x43, 0x5f, 0x52, 0x45, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x08, 0x12, 0x2c, 0x0a, 0x28,
	0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x52, 0x56, 0x36, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x56, 0x36, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x09, 0x12, 0x36, 0x0a, 0x32, 0x53, 0x4c,
	0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x52, 0x56,
	0x36, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x56, 0x36, 0x5f, 0x4c, 0x4f, 0x43,
	0x5f, 0x52, 0x45, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x44,
	0x10, 0x0a, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x52, 0x56, 0x36, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x49,
	0x44, 0x5f, 0x56, 0x36, 0x5f, 0x4c, 0x4f, 0x43, 0x5f, 0x52, 0x45, 0x4d, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x10, 0x0b, 0x2a, 0x80, 0x02, 0x0a, 0x10, 0x53, 0x4c, 0x53, 0x72, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x4c, 0x5f, 0x53,
	0x52, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x52,
	0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x1e, 0x53, 0x4c, 0x5f,
	0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f,
	0x53, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x80, 0x80, 0x02, 0x12,
	0x31, 0x0a, 0x2b, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43,
	0x49, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x80,
	0x80, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x80, 0x40, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x4c, 0x5f, 0x53,
	0x52, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x53,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x80, 0x20, 0x12, 0x26,
	0x0a, 0x21, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x46, 0x4c, 0x41, 0x47, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x5f, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x80, 0x10, 0x2a, 0x9b, 0x01, 0x0a, 0x15, 0x53, 0x4c, 0x53, 0x72, 0x76,
	0x36, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x56, 0x36, 0x5f, 0x42, 0x53, 0x49, 0x44,
	0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x21, 0x0a, 0x1b, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x56, 0x36, 0x5f, 0x42, 0x53, 0x49, 0x44,
	0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x80, 0x80, 0x02, 0x12, 0x1f, 0x0a, 0x19, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x56, 0x36, 0x5f, 0x42,
	0x53, 0x49, 0x44, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c,
	0x10, 0x80, 0x80, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x56, 0x36, 0x5f,
	0x42, 0x53, 0x49, 0x44, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49,
	0x43, 0x10, 0x80, 0x40, 0x2a, 0x64, 0x0a, 0x0d, 0x53, 0x4c, 0x53, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x50, 0x4c,
	0x41, 0x4e, 0x45, 0x5f, 0x53, 0x52, 0x56, 0x36, 0x10, 0x02, 0x2a, 0xd7, 0x01, 0x0a, 0x0e, 0x53,
	0x4c, 0x53, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x47, 0x50, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4c, 0x5f, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x22,
	0x0a, 0x1e, 0x53, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x49, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48,
	0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0x05,
	0x1a, 0x02, 0x10, 0x01, 0x2a, 0xaa, 0x01, 0x0a, 0x12, 0x53, 0x4c, 0x53, 0x72, 0x44, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x17, 0x53,
	0x4c, 0x5f, 0x44, 0x49, 0x56, 0x45, 0x52, 0x53, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4c, 0x5f, 0x44,
	0x49, 0x56, 0x45, 0x52, 0x53, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4c, 0x5f, 0x44, 0x49, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x44, 0x45,
	0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4c, 0x5f, 0x44, 0x49, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x53, 0x52, 0x4c, 0x47, 0x10, 0x03, 0x12,
	0x20, 0x0a, 0x1c, 0x53, 0x4c, 0x5f, 0x44, 0x49, 0x56, 0x45, 0x52, 0x53, 0x49, 0x54, 0x59, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x53, 0x52, 0x4c, 0x47, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10,
	0x04, 0x42, 0x51, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x43, 0x69, 0x73, 0x63, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2d, 0x6f, 0x62, 0x6a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sl_sr_common_proto_rawDescOnce sync.Once
	file_sl_sr_common_proto_rawDescData = file_sl_sr_common_proto_rawDesc
)

func file_sl_sr_common_proto_rawDescGZIP() []byte {
	file_sl_sr_common_proto_rawDescOnce.Do(func() {
		file_sl_sr_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_sl_sr_common_proto_rawDescData)
	})
	return file_sl_sr_common_proto_rawDescData
}

var file_sl_sr_common_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_sl_sr_common_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_sl_sr_common_proto_goTypes = []interface{}{
	(SLSrPolicyProtocolOrigin)(0),           // 0: service_layer.SLSrPolicyProtocolOrigin
	(SLSrPolicyFlagsDef)(0),                 // 1: service_layer.SLSrPolicyFlagsDef
	(SLSrSegmentType)(0),                    // 2: service_layer.SLSrSegmentType
	(SLSrSegmentFlags)(0),                   // 3: service_layer.SLSrSegmentFlags
	(SLSrv6BindingSidFlags)(0),              // 4: service_layer.SLSrv6BindingSidFlags
	(SLSrDataplane)(0),                      // 5: service_layer.SLSrDataplane
	(SLSrMetricType)(0),                     // 6: service_layer.SLSrMetricType
	(SLSrDiversityLevel)(0),                 // 7: service_layer.SLSrDiversityLevel
	(SLSrMetricMargin_MarginType)(0),        // 8: service_layer.SLSrMetricMargin.MarginType
	(*SLSrPolicyFlags)(nil),                 // 9: service_layer.SLSrPolicyFlags
	(*SLSrBsid)(nil),                        // 10: service_layer.SLSrBsid
	(*SLSrCpName)(nil),                      // 11: service_layer.SLSrCpName
	(*SLSrSegmentDesc)(nil),                 // 12: service_layer.SLSrSegmentDesc
	(*SLSrSegment)(nil),                     // 13: service_layer.SLSrSegment
	(*SLSrv6BindingSid)(nil),                // 14: service_layer.SLSrv6BindingSid
	(*SLSrv6EndPointBehavior)(nil),          // 15: service_layer.SLSrv6EndPointBehavior
	(*SLSrv6SidStruct)(nil),                 // 16: service_layer.SLSrv6SidStruct
	(*SLSrMetricBounds)(nil),                // 17: service_layer.SLSrMetricBounds
	(*SLSrMetricMargin)(nil),                // 18: service_layer.SLSrMetricMargin
	(*SLSrAffinities)(nil),                  // 19: service_layer.SLSrAffinities
	(*SLSrteSegment)(nil),                   // 20: service_layer.SLSrteSegment
	(*SLSrSegmentList)(nil),                 // 21: service_layer.SLSrSegmentList
	(*SLSrPolicyKey)(nil),                   // 22: service_layer.SLSrPolicyKey
	(*SLSrCandidatePathKey)(nil),            // 23: service_layer.SLSrCandidatePathKey
	(*SLSrteSegment_TypeA)(nil),             // 24: service_layer.SLSrteSegment.TypeA
	(*SLSrteSegment_TypeB)(nil),             // 25: service_layer.SLSrteSegment.TypeB
	(*SLSrCandidatePathKey_Originator)(nil), // 26: service_layer.SLSrCandidatePathKey.Originator
	(*SLIpAddress)(nil),                     // 27: service_layer.SLIpAddress
	(*SLIpv6Address)(nil),                   // 28: service_layer.SLIpv6Address
}
var file_sl_sr_common_proto_depIdxs = []int32{
	2,  // 0: service_layer.SLSrSegment.Type:type_name -> service_layer.SLSrSegmentType
	12, // 1: service_layer.SLSrSegment.SegmentDesc:type_name -> service_layer.SLSrSegmentDesc
	15, // 2: service_layer.SLSrSegment.EndPointBehavior:type_name -> service_layer.SLSrv6EndPointBehavior
	16, // 3: service_layer.SLSrSegment.SidStruct:type_name -> service_layer.SLSrv6SidStruct
	15, // 4: service_layer.SLSrv6BindingSid.EndPointBehavior:type_name -> service_layer.SLSrv6EndPointBehavior
	16, // 5: service_layer.SLSrv6BindingSid.SidStruct:type_name -> service_layer.SLSrv6SidStruct
	8,  // 6: service_layer.SLSrMetricMargin.type:type_name -> service_layer.SLSrMetricMargin.MarginType
	24, // 7: service_layer.SLSrteSegment.type_a:type_name -> service_layer.SLSrteSegment.TypeA
	25, // 8: service_layer.SLSrteSegment.type_b:type_name -> service_layer.SLSrteSegment.TypeB
	20, // 9: service_layer.SLSrSegmentList.segments:type_name -> service_layer.SLSrteSegment
	27, // 10: service_layer.SLSrPolicyKey.headend:type_name -> service_layer.SLIpAddress
	27, // 11: service_layer.SLSrPolicyKey.endpoint:type_name -> service_layer.SLIpAddress
	26, // 12: service_layer.SLSrCandidatePathKey.originator:type_name -> service_layer.SLSrCandidatePathKey.Originator
	28, // 13: service_layer.SLSrteSegment.TypeB.ipv6_sid_address:type_name -> service_layer.SLIpv6Address
	16, // 14: service_layer.SLSrteSegment.TypeB.structure:type_name -> service_layer.SLSrv6SidStruct
	27, // 15: service_layer.SLSrCandidatePathKey.Originator.nodeID:type_name -> service_layer.SLIpAddress
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_sl_sr_common_proto_init() }
func file_sl_sr_common_proto_init() {
	if File_sl_sr_common_proto != nil {
		return
	}
	file_sl_common_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sl_sr_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrPolicyFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrBsid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrCpName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrSegmentDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrv6BindingSid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrv6EndPointBehavior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrv6SidStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrMetricBounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrMetricMargin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrAffinities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrteSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrSegmentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrPolicyKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrCandidatePathKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrteSegment_TypeA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrteSegment_TypeB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrCandidatePathKey_Originator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sl_sr_common_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SLSrBsid_MplsBsid)(nil),
		(*SLSrBsid_Srv6Bsid)(nil),
	}
	file_sl_sr_common_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*SLSrSegmentDesc_Ipv4LocalAddr)(nil),
		(*SLSrSegmentDesc_Ipv6LocalAddr)(nil),
		(*SLSrSegmentDesc_Ipv4RemoteAddr)(nil),
		(*SLSrSegmentDesc_Ipv6RemoteAddr)(nil),
	}
	file_sl_sr_common_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*SLSrSegment_MplsLabel)(nil),
		(*SLSrSegment_Srv6Sid)(nil),
	}
	file_sl_sr_common_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*SLSrteSegment_TypeA_)(nil),
		(*SLSrteSegment_TypeB_)(nil),
	}
	file_sl_sr_common_proto_msgTypes[12].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sl_sr_common_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sl_sr_common_proto_goTypes,
		DependencyIndexes: file_sl_sr_common_proto_depIdxs,
		EnumInfos:         file_sl_sr_common_proto_enumTypes,
		MessageInfos:      file_sl_sr_common_proto_msgTypes,
	}.Build()
	File_sl_sr_common_proto = out.File
	file_sl_sr_common_proto_rawDesc = nil
	file_sl_sr_common_proto_goTypes = nil
	file_sl_sr_common_proto_depIdxs = nil
}
