// @file
// @brief SR Common definitions for all of the service layer proto files.
//
//---------------------------------------------------------------------
// Copyright (c) 2019, 2024 by Cisco Systems, Inc.
// All rights reserved.
//---------------------------------------------------------------------
//
//

//@defgroup SrCommon
//@brief SR Common service definitions and Global initializations.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.3
// source: sl_sr_common.proto

package service_layer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Protocol Originating SR Policy
type SLSrPolicyProtocolOrigin int32

const (
	SLSrPolicyProtocolOrigin_SL_SR_POLICY_PROTOCOL_ORIGIN_RESERVED              SLSrPolicyProtocolOrigin = 0
	SLSrPolicyProtocolOrigin_SL_SR_POLICY_PROTOCOL_ORIGIN_PCEP                  SLSrPolicyProtocolOrigin = 1
	SLSrPolicyProtocolOrigin_SL_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY         SLSrPolicyProtocolOrigin = 2
	SLSrPolicyProtocolOrigin_SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG                SLSrPolicyProtocolOrigin = 3
	SLSrPolicyProtocolOrigin_SL_SR_POLICY_PROTOCOL_ORIGIN_PCEP_VIA_PCE          SLSrPolicyProtocolOrigin = 10
	SLSrPolicyProtocolOrigin_SL_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY_VIA_PCE SLSrPolicyProtocolOrigin = 20
	SLSrPolicyProtocolOrigin_SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_PCE        SLSrPolicyProtocolOrigin = 30
	SLSrPolicyProtocolOrigin_SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_GRPC       SLSrPolicyProtocolOrigin = 40
)

// Enum value maps for SLSrPolicyProtocolOrigin.
var (
	SLSrPolicyProtocolOrigin_name = map[int32]string{
		0:  "SL_SR_POLICY_PROTOCOL_ORIGIN_RESERVED",
		1:  "SL_SR_POLICY_PROTOCOL_ORIGIN_PCEP",
		2:  "SL_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY",
		3:  "SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG",
		10: "SL_SR_POLICY_PROTOCOL_ORIGIN_PCEP_VIA_PCE",
		20: "SL_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY_VIA_PCE",
		30: "SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_PCE",
		40: "SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_GRPC",
	}
	SLSrPolicyProtocolOrigin_value = map[string]int32{
		"SL_SR_POLICY_PROTOCOL_ORIGIN_RESERVED":              0,
		"SL_SR_POLICY_PROTOCOL_ORIGIN_PCEP":                  1,
		"SL_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY":         2,
		"SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG":                3,
		"SL_SR_POLICY_PROTOCOL_ORIGIN_PCEP_VIA_PCE":          10,
		"SL_SR_POLICY_PROTOCOL_ORIGIN_BGP_SR_POLICY_VIA_PCE": 20,
		"SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_PCE":        30,
		"SL_SR_POLICY_PROTOCOL_ORIGIN_CONFIG_VIA_GRPC":       40,
	}
)

func (x SLSrPolicyProtocolOrigin) Enum() *SLSrPolicyProtocolOrigin {
	p := new(SLSrPolicyProtocolOrigin)
	*p = x
	return p
}

func (x SLSrPolicyProtocolOrigin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLSrPolicyProtocolOrigin) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_sr_common_proto_enumTypes[0].Descriptor()
}

func (SLSrPolicyProtocolOrigin) Type() protoreflect.EnumType {
	return &file_sl_sr_common_proto_enumTypes[0]
}

func (x SLSrPolicyProtocolOrigin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLSrPolicyProtocolOrigin.Descriptor instead.
func (SLSrPolicyProtocolOrigin) EnumDescriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{0}
}

// SR Segment Type
type SLSrSegmentType int32

const (
	// Reserved. 0
	SLSrSegmentType_SL_SR_SEG_TYPE_RESERVED SLSrSegmentType = 0
	// (Type A) SR-MPLS Label. 1
	SLSrSegmentType_SL_SR_SEG_TYPE_MPLS_LABEL SLSrSegmentType = 1
	// (Type B) SRv6 SID as IPv6 address. 2
	SLSrSegmentType_SL_SR_SEG_TYPE_SRV6_SID_V6 SLSrSegmentType = 2
	// (Type C) SR-MPLS Prefix SID as IPv4 Node Address. 3
	SLSrSegmentType_SL_SR_SEG_TYPE_MPLS_PFX_SID_V4 SLSrSegmentType = 3
	// (Type D) SR-MPLS Prefix SID as IPv6 Node Global Address. 4
	SLSrSegmentType_SL_SR_SEG_TYPE_MPLS_PFX_SID_V6 SLSrSegmentType = 4
	// (Type E) SR-MPLS Adjacency SID as IPv4 Node Address
	// & Local Interface ID. 5
	SLSrSegmentType_SL_SR_SEG_TYPE_MPLS_ADJ_SID_V4_NODE_ADDR_LOC_ID SLSrSegmentType = 5
	// (Type F) SR-MPLS Adjacency SID as IPv4 Local
	// & Remote Interface Addresses. 6
	SLSrSegmentType_SL_SR_SEG_TYPE_MPLS_ADJ_SID_V4_LOC_REM_ADDR SLSrSegmentType = 6
	// (Type G) SR-MPLS Adjacency SID as pair of IPv6 Global Address
	// & Interface ID for Local & Remote nodes. 7
	SLSrSegmentType_SL_SR_SEG_TYPE_MPLS_ADJ_SID_V6_LOC_REM_ADDR_AND_ID SLSrSegmentType = 7
	// (Type H) SR-MPLS Adjacency SID as pair of IPv6 Global Addresses
	// for the Local & Remote Interface. 8
	SLSrSegmentType_SL_SR_SEG_TYPE_MPLS_ADJ_SID_V6_LOC_REM_ADDR SLSrSegmentType = 8
	// (Type I) SRv6 END SID as IPv6 Node Global Address. 9
	SLSrSegmentType_SL_SR_SEG_TYPE_SRV6_END_SID_V6_NODE_ADDR SLSrSegmentType = 9
	// (Type J) SRv6 END.X SID as pair of IPv6 Global Address
	// & Interface ID for Local & Remote nodes. 10
	SLSrSegmentType_SL_SR_SEG_TYPE_SRV6_END_SID_V6_LOC_REM_ADDR_AND_ID SLSrSegmentType = 10
	// (Type K) SRv6 END.X SID as pair of IPv6 Global Addresses for
	// the Local & Remote Interface. 11
	SLSrSegmentType_SL_SR_SEG_TYPE_SRV6_END_SID_V6_LOC_REM_ADDR SLSrSegmentType = 11
)

// Enum value maps for SLSrSegmentType.
var (
	SLSrSegmentType_name = map[int32]string{
		0:  "SL_SR_SEG_TYPE_RESERVED",
		1:  "SL_SR_SEG_TYPE_MPLS_LABEL",
		2:  "SL_SR_SEG_TYPE_SRV6_SID_V6",
		3:  "SL_SR_SEG_TYPE_MPLS_PFX_SID_V4",
		4:  "SL_SR_SEG_TYPE_MPLS_PFX_SID_V6",
		5:  "SL_SR_SEG_TYPE_MPLS_ADJ_SID_V4_NODE_ADDR_LOC_ID",
		6:  "SL_SR_SEG_TYPE_MPLS_ADJ_SID_V4_LOC_REM_ADDR",
		7:  "SL_SR_SEG_TYPE_MPLS_ADJ_SID_V6_LOC_REM_ADDR_AND_ID",
		8:  "SL_SR_SEG_TYPE_MPLS_ADJ_SID_V6_LOC_REM_ADDR",
		9:  "SL_SR_SEG_TYPE_SRV6_END_SID_V6_NODE_ADDR",
		10: "SL_SR_SEG_TYPE_SRV6_END_SID_V6_LOC_REM_ADDR_AND_ID",
		11: "SL_SR_SEG_TYPE_SRV6_END_SID_V6_LOC_REM_ADDR",
	}
	SLSrSegmentType_value = map[string]int32{
		"SL_SR_SEG_TYPE_RESERVED":                            0,
		"SL_SR_SEG_TYPE_MPLS_LABEL":                          1,
		"SL_SR_SEG_TYPE_SRV6_SID_V6":                         2,
		"SL_SR_SEG_TYPE_MPLS_PFX_SID_V4":                     3,
		"SL_SR_SEG_TYPE_MPLS_PFX_SID_V6":                     4,
		"SL_SR_SEG_TYPE_MPLS_ADJ_SID_V4_NODE_ADDR_LOC_ID":    5,
		"SL_SR_SEG_TYPE_MPLS_ADJ_SID_V4_LOC_REM_ADDR":        6,
		"SL_SR_SEG_TYPE_MPLS_ADJ_SID_V6_LOC_REM_ADDR_AND_ID": 7,
		"SL_SR_SEG_TYPE_MPLS_ADJ_SID_V6_LOC_REM_ADDR":        8,
		"SL_SR_SEG_TYPE_SRV6_END_SID_V6_NODE_ADDR":           9,
		"SL_SR_SEG_TYPE_SRV6_END_SID_V6_LOC_REM_ADDR_AND_ID": 10,
		"SL_SR_SEG_TYPE_SRV6_END_SID_V6_LOC_REM_ADDR":        11,
	}
)

func (x SLSrSegmentType) Enum() *SLSrSegmentType {
	p := new(SLSrSegmentType)
	*p = x
	return p
}

func (x SLSrSegmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLSrSegmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_sr_common_proto_enumTypes[1].Descriptor()
}

func (SLSrSegmentType) Type() protoreflect.EnumType {
	return &file_sl_sr_common_proto_enumTypes[1]
}

func (x SLSrSegmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLSrSegmentType.Descriptor instead.
func (SLSrSegmentType) EnumDescriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{1}
}

// SR Policy flags
type SLSrPolicyFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bit-0: E-Flag: Indicates the encoding of endpoint as IPv6 address when
	// set and IPv4 address when clear
	//
	// Bit-1: O-Flag: Indicates the encoding of originator address as IPv6
	// address when set and IPv4 address when clear
	Flags []byte `protobuf:"bytes,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *SLSrPolicyFlags) Reset() {
	*x = SLSrPolicyFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrPolicyFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrPolicyFlags) ProtoMessage() {}

func (x *SLSrPolicyFlags) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrPolicyFlags.ProtoReflect.Descriptor instead.
func (*SLSrPolicyFlags) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{0}
}

func (x *SLSrPolicyFlags) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

// SR Binding SID. TLV 1201
// Section 5.1 of [draft-ietf-idr-bgp-ls-sr-policy]
type SlSrBsid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to BindingSid:
	//
	//	*SlSrBsid_MplsBsid
	//	*SlSrBsid_Srv6Bsid
	BindingSid isSlSrBsid_BindingSid `protobuf_oneof:"BindingSid"`
}

func (x *SlSrBsid) Reset() {
	*x = SlSrBsid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlSrBsid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlSrBsid) ProtoMessage() {}

func (x *SlSrBsid) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlSrBsid.ProtoReflect.Descriptor instead.
func (*SlSrBsid) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{1}
}

func (m *SlSrBsid) GetBindingSid() isSlSrBsid_BindingSid {
	if m != nil {
		return m.BindingSid
	}
	return nil
}

func (x *SlSrBsid) GetMplsBsid() uint32 {
	if x, ok := x.GetBindingSid().(*SlSrBsid_MplsBsid); ok {
		return x.MplsBsid
	}
	return 0
}

func (x *SlSrBsid) GetSrv6Bsid() []byte {
	if x, ok := x.GetBindingSid().(*SlSrBsid_Srv6Bsid); ok {
		return x.Srv6Bsid
	}
	return nil
}

type isSlSrBsid_BindingSid interface {
	isSlSrBsid_BindingSid()
}

type SlSrBsid_MplsBsid struct {
	// This field carries info about an MPLS binding SID.
	MplsBsid uint32 `protobuf:"varint,1,opt,name=MplsBsid,proto3,oneof"`
}

type SlSrBsid_Srv6Bsid struct {
	// This field carries info about an SRv6 binding SID.
	Srv6Bsid []byte `protobuf:"bytes,2,opt,name=Srv6Bsid,proto3,oneof"`
}

func (*SlSrBsid_MplsBsid) isSlSrBsid_BindingSid() {}

func (*SlSrBsid_Srv6Bsid) isSlSrBsid_BindingSid() {}

// SR Candidate Path Name. TLV 1203
// Section 5.5 of [draft-ietf-idr-bgp-ls-sr-policy]
type SLSrCpName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Symbolic name for the SR Policy candidate path without a NULL
	// terminator. It is RECOMMENDED that the size of the symbolic name
	// be limited to 255 characters.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *SLSrCpName) Reset() {
	*x = SLSrCpName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrCpName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrCpName) ProtoMessage() {}

func (x *SLSrCpName) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrCpName.ProtoReflect.Descriptor instead.
func (*SLSrCpName) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{2}
}

func (x *SLSrCpName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// SR Segment Descriptors
type SLSrSegmentDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algorithm []byte `protobuf:"bytes,1,opt,name=Algorithm,proto3" json:"Algorithm,omitempty"`
	// Types that are assignable to LocalNodeAddr:
	//
	//	*SLSrSegmentDesc_Ipv4LocAddr
	//	*SLSrSegmentDesc_Ipv6LocAddr
	LocalNodeAddr isSLSrSegmentDesc_LocalNodeAddr `protobuf_oneof:"LocalNodeAddr"`
	// Types that are assignable to RemoteNodeAddr:
	//
	//	*SLSrSegmentDesc_Ipv4RemAddr
	//	*SLSrSegmentDesc_Ipv6RemAddr
	RemoteNodeAddr isSLSrSegmentDesc_RemoteNodeAddr `protobuf_oneof:"RemoteNodeAddr"`
	// Carries info about IPv6 local node global address.
	Ipv6LocalNodeGlobalAddr []byte `protobuf:"bytes,6,opt,name=Ipv6LocalNodeGlobalAddr,proto3" json:"Ipv6LocalNodeGlobalAddr,omitempty"`
	// Carries info about IPv6 remote node global address.
	Ipv6RemoteNodeGlobalAddr []byte `protobuf:"bytes,7,opt,name=Ipv6RemoteNodeGlobalAddr,proto3" json:"Ipv6RemoteNodeGlobalAddr,omitempty"`
	// Carries the interface ID of the local node identified by the local node
	// address.
	LocalNodeIntfId uint32 `protobuf:"varint,8,opt,name=LocalNodeIntfId,proto3" json:"LocalNodeIntfId,omitempty"`
	// Carries the interface ID of the remote node identified by the remote
	// node address.
	RemoteNodeIntfId uint32 `protobuf:"varint,9,opt,name=RemoteNodeIntfId,proto3" json:"RemoteNodeIntfId,omitempty"`
}

func (x *SLSrSegmentDesc) Reset() {
	*x = SLSrSegmentDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrSegmentDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrSegmentDesc) ProtoMessage() {}

func (x *SLSrSegmentDesc) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrSegmentDesc.ProtoReflect.Descriptor instead.
func (*SLSrSegmentDesc) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{3}
}

func (x *SLSrSegmentDesc) GetAlgorithm() []byte {
	if x != nil {
		return x.Algorithm
	}
	return nil
}

func (m *SLSrSegmentDesc) GetLocalNodeAddr() isSLSrSegmentDesc_LocalNodeAddr {
	if m != nil {
		return m.LocalNodeAddr
	}
	return nil
}

func (x *SLSrSegmentDesc) GetIpv4LocAddr() []byte {
	if x, ok := x.GetLocalNodeAddr().(*SLSrSegmentDesc_Ipv4LocAddr); ok {
		return x.Ipv4LocAddr
	}
	return nil
}

func (x *SLSrSegmentDesc) GetIpv6LocAddr() []byte {
	if x, ok := x.GetLocalNodeAddr().(*SLSrSegmentDesc_Ipv6LocAddr); ok {
		return x.Ipv6LocAddr
	}
	return nil
}

func (m *SLSrSegmentDesc) GetRemoteNodeAddr() isSLSrSegmentDesc_RemoteNodeAddr {
	if m != nil {
		return m.RemoteNodeAddr
	}
	return nil
}

func (x *SLSrSegmentDesc) GetIpv4RemAddr() []byte {
	if x, ok := x.GetRemoteNodeAddr().(*SLSrSegmentDesc_Ipv4RemAddr); ok {
		return x.Ipv4RemAddr
	}
	return nil
}

func (x *SLSrSegmentDesc) GetIpv6RemAddr() []byte {
	if x, ok := x.GetRemoteNodeAddr().(*SLSrSegmentDesc_Ipv6RemAddr); ok {
		return x.Ipv6RemAddr
	}
	return nil
}

func (x *SLSrSegmentDesc) GetIpv6LocalNodeGlobalAddr() []byte {
	if x != nil {
		return x.Ipv6LocalNodeGlobalAddr
	}
	return nil
}

func (x *SLSrSegmentDesc) GetIpv6RemoteNodeGlobalAddr() []byte {
	if x != nil {
		return x.Ipv6RemoteNodeGlobalAddr
	}
	return nil
}

func (x *SLSrSegmentDesc) GetLocalNodeIntfId() uint32 {
	if x != nil {
		return x.LocalNodeIntfId
	}
	return 0
}

func (x *SLSrSegmentDesc) GetRemoteNodeIntfId() uint32 {
	if x != nil {
		return x.RemoteNodeIntfId
	}
	return 0
}

type isSLSrSegmentDesc_LocalNodeAddr interface {
	isSLSrSegmentDesc_LocalNodeAddr()
}

type SLSrSegmentDesc_Ipv4LocAddr struct {
	// This field carries info about an IPv4 local node address.
	Ipv4LocAddr []byte `protobuf:"bytes,2,opt,name=Ipv4LocAddr,proto3,oneof"`
}

type SLSrSegmentDesc_Ipv6LocAddr struct {
	// This field carries info about an IPv6 local node address.
	Ipv6LocAddr []byte `protobuf:"bytes,3,opt,name=Ipv6LocAddr,proto3,oneof"`
}

func (*SLSrSegmentDesc_Ipv4LocAddr) isSLSrSegmentDesc_LocalNodeAddr() {}

func (*SLSrSegmentDesc_Ipv6LocAddr) isSLSrSegmentDesc_LocalNodeAddr() {}

type isSLSrSegmentDesc_RemoteNodeAddr interface {
	isSLSrSegmentDesc_RemoteNodeAddr()
}

type SLSrSegmentDesc_Ipv4RemAddr struct {
	// This field carries info about an IPv4 remote node address.
	Ipv4RemAddr []byte `protobuf:"bytes,4,opt,name=Ipv4RemAddr,proto3,oneof"`
}

type SLSrSegmentDesc_Ipv6RemAddr struct {
	// This field carries info about an IPv6 remote node address.
	Ipv6RemAddr []byte `protobuf:"bytes,5,opt,name=Ipv6RemAddr,proto3,oneof"`
}

func (*SLSrSegmentDesc_Ipv4RemAddr) isSLSrSegmentDesc_RemoteNodeAddr() {}

func (*SLSrSegmentDesc_Ipv6RemAddr) isSLSrSegmentDesc_RemoteNodeAddr() {}

// SR Segment. TLV 1206
// Section 5.8 of [draft-ietf-idr-bgp-ls-sr-policy]
type SLSrSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type SLSrSegmentType `protobuf:"varint,1,opt,name=Type,proto3,enum=service_layer.SLSrSegmentType" json:"Type,omitempty"`
	// Bit-0: S-Flag: Indicates the presence of SID value in the SID field
	// when set and that no value is indicated when clear.
	//
	// Bit-1: E-Flag: Indicates the SID value is explicitly provisioned value
	// (locally on headend or via controller/PCE) when set and is a
	// dynamically resolved value by headend when clear.
	//
	// Bit-2: V-Flag: Indicates the SID has passed verification or did not
	// require verification when set and failed verification when
	// clear.
	//
	// Bit-3: R-Flag: Indicates the SID has been resolved or did not require
	// resolution (e.g. because it is not the first SID) when set and
	// failed resolution when clear.
	//
	// Bit-4: A-Flag: Indicates that the Algorithm indicated in the Segment
	// descriptor is valid when set.  When clear, it indicates that
	// the headend is unable to determine the algorithm of the SID.
	Flags []byte `protobuf:"bytes,2,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Types that are assignable to Sid:
	//
	//	*SLSrSegment_MplsLabel
	//	*SLSrSegment_Srv6Sid
	Sid isSLSrSegment_Sid `protobuf_oneof:"Sid"`
	// Variable size Segment descriptor based on the type of segment
	SegmentDesc *SLSrSegmentDesc `protobuf:"bytes,5,opt,name=SegmentDesc,proto3" json:"SegmentDesc,omitempty"`
	// SRv6 End Point Behavior. TLV 1250
	// Section 7.1 of [RFC9514]
	EndPointBehaviour *SLSrv6EndPointBehavior `protobuf:"bytes,6,opt,name=EndPointBehaviour,proto3" json:"EndPointBehaviour,omitempty"`
	// SRv6 SID Structure Attribute. TLV 1252
	// Section 8 of [RFC9514]
	SidStruct *SLSrv6SidStruct `protobuf:"bytes,7,opt,name=SidStruct,proto3" json:"SidStruct,omitempty"`
}

func (x *SLSrSegment) Reset() {
	*x = SLSrSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrSegment) ProtoMessage() {}

func (x *SLSrSegment) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrSegment.ProtoReflect.Descriptor instead.
func (*SLSrSegment) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{4}
}

func (x *SLSrSegment) GetType() SLSrSegmentType {
	if x != nil {
		return x.Type
	}
	return SLSrSegmentType_SL_SR_SEG_TYPE_RESERVED
}

func (x *SLSrSegment) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (m *SLSrSegment) GetSid() isSLSrSegment_Sid {
	if m != nil {
		return m.Sid
	}
	return nil
}

func (x *SLSrSegment) GetMplsLabel() uint32 {
	if x, ok := x.GetSid().(*SLSrSegment_MplsLabel); ok {
		return x.MplsLabel
	}
	return 0
}

func (x *SLSrSegment) GetSrv6Sid() []byte {
	if x, ok := x.GetSid().(*SLSrSegment_Srv6Sid); ok {
		return x.Srv6Sid
	}
	return nil
}

func (x *SLSrSegment) GetSegmentDesc() *SLSrSegmentDesc {
	if x != nil {
		return x.SegmentDesc
	}
	return nil
}

func (x *SLSrSegment) GetEndPointBehaviour() *SLSrv6EndPointBehavior {
	if x != nil {
		return x.EndPointBehaviour
	}
	return nil
}

func (x *SLSrSegment) GetSidStruct() *SLSrv6SidStruct {
	if x != nil {
		return x.SidStruct
	}
	return nil
}

type isSLSrSegment_Sid interface {
	isSLSrSegment_Sid()
}

type SLSrSegment_MplsLabel struct {
	// This field carries info about an MPLS SID.
	MplsLabel uint32 `protobuf:"varint,3,opt,name=MplsLabel,proto3,oneof"`
}

type SLSrSegment_Srv6Sid struct {
	// This field carries info about an SRv6 SID.
	Srv6Sid []byte `protobuf:"bytes,4,opt,name=Srv6Sid,proto3,oneof"`
}

func (*SLSrSegment_MplsLabel) isSLSrSegment_Sid() {}

func (*SLSrSegment_Srv6Sid) isSLSrSegment_Sid() {}

// SRv6 Binding SID. TLV 1212
// Section 5.2 of [draft-ietf-idr-bgp-ls-sr-policy]
type SLSrv6BindingSid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bit-0: B-Flag: Indicates the allocation of the value in the BSID field
	// when set and indicates that BSID is not allocated when clear.
	//
	// Bit-1: U-Flag: Indicates the specified BSID value is unavailable when set.
	//
	// Bit-2: F-Flag: Indicates the BSID value is one allocated from dynamic
	// label pool due to fallback (e.g. when specified BSID is
	// unavailable) when set.
	Flags []byte `protobuf:"bytes,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// The operational or allocated BSID value based on the status flags.
	Bsid []byte `protobuf:"bytes,2,opt,name=Bsid,proto3" json:"Bsid,omitempty"`
	// The explicitly specified BSID whether it is allocated or not.
	SpecifiedBsid []byte `protobuf:"bytes,3,opt,name=SpecifiedBsid,proto3" json:"SpecifiedBsid,omitempty"`
	// SRv6 End Point Behavior. TLV 1250
	// Section 7.1 of [RFC9514]
	EndPointBehaviour *SLSrv6EndPointBehavior `protobuf:"bytes,4,opt,name=EndPointBehaviour,proto3" json:"EndPointBehaviour,omitempty"`
	// SRv6 SID Structure Attribute. TLV 1252
	// Section 8 of [RFC9514]
	SidStruct *SLSrv6SidStruct `protobuf:"bytes,5,opt,name=SidStruct,proto3" json:"SidStruct,omitempty"`
}

func (x *SLSrv6BindingSid) Reset() {
	*x = SLSrv6BindingSid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrv6BindingSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrv6BindingSid) ProtoMessage() {}

func (x *SLSrv6BindingSid) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrv6BindingSid.ProtoReflect.Descriptor instead.
func (*SLSrv6BindingSid) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{5}
}

func (x *SLSrv6BindingSid) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *SLSrv6BindingSid) GetBsid() []byte {
	if x != nil {
		return x.Bsid
	}
	return nil
}

func (x *SLSrv6BindingSid) GetSpecifiedBsid() []byte {
	if x != nil {
		return x.SpecifiedBsid
	}
	return nil
}

func (x *SLSrv6BindingSid) GetEndPointBehaviour() *SLSrv6EndPointBehavior {
	if x != nil {
		return x.EndPointBehaviour
	}
	return nil
}

func (x *SLSrv6BindingSid) GetSidStruct() *SLSrv6SidStruct {
	if x != nil {
		return x.SidStruct
	}
	return nil
}

// SRv6 End Point Behavior. TLV 1250
// Section 7.1 of [RFC9514]
type SLSrv6EndPointBehavior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Endpoint behavior of the SID
	EndPointBehavior uint32 `protobuf:"varint,1,opt,name=EndPointBehavior,proto3" json:"EndPointBehavior,omitempty"`
	// Flags associated with the SID. Section 8 of [RFC9513]
	// for OSPFv3, and Section 7.2 of [RFC9352] for IS-IS.
	Flags []byte `protobuf:"bytes,2,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// Algorithm associated with the SID
	Algorithm []byte `protobuf:"bytes,3,opt,name=Algorithm,proto3" json:"Algorithm,omitempty"`
}

func (x *SLSrv6EndPointBehavior) Reset() {
	*x = SLSrv6EndPointBehavior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrv6EndPointBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrv6EndPointBehavior) ProtoMessage() {}

func (x *SLSrv6EndPointBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrv6EndPointBehavior.ProtoReflect.Descriptor instead.
func (*SLSrv6EndPointBehavior) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{6}
}

func (x *SLSrv6EndPointBehavior) GetEndPointBehavior() uint32 {
	if x != nil {
		return x.EndPointBehavior
	}
	return 0
}

func (x *SLSrv6EndPointBehavior) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *SLSrv6EndPointBehavior) GetAlgorithm() []byte {
	if x != nil {
		return x.Algorithm
	}
	return nil
}

// SRv6 SID Structure Attribute. TLV 1252
// Section 8 of [RFC9514]
type SLSrv6SidStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Locator block length in bits
	LocatorBlockLen uint32 `protobuf:"varint,1,opt,name=LocatorBlockLen,proto3" json:"LocatorBlockLen,omitempty"`
	// Locator node length in bits
	LocatorNodeLen uint32 `protobuf:"varint,2,opt,name=LocatorNodeLen,proto3" json:"LocatorNodeLen,omitempty"`
	// Function length in bits
	FunctionLen uint32 `protobuf:"varint,3,opt,name=FunctionLen,proto3" json:"FunctionLen,omitempty"`
	// Argument length in bits
	ArgLen uint32 `protobuf:"varint,4,opt,name=ArgLen,proto3" json:"ArgLen,omitempty"`
}

func (x *SLSrv6SidStruct) Reset() {
	*x = SLSrv6SidStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_sr_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrv6SidStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrv6SidStruct) ProtoMessage() {}

func (x *SLSrv6SidStruct) ProtoReflect() protoreflect.Message {
	mi := &file_sl_sr_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrv6SidStruct.ProtoReflect.Descriptor instead.
func (*SLSrv6SidStruct) Descriptor() ([]byte, []int) {
	return file_sl_sr_common_proto_rawDescGZIP(), []int{7}
}

func (x *SLSrv6SidStruct) GetLocatorBlockLen() uint32 {
	if x != nil {
		return x.LocatorBlockLen
	}
	return 0
}

func (x *SLSrv6SidStruct) GetLocatorNodeLen() uint32 {
	if x != nil {
		return x.LocatorNodeLen
	}
	return 0
}

func (x *SLSrv6SidStruct) GetFunctionLen() uint32 {
	if x != nil {
		return x.FunctionLen
	}
	return 0
}

func (x *SLSrv6SidStruct) GetArgLen() uint32 {
	if x != nil {
		return x.ArgLen
	}
	return 0
}

var File_sl_sr_common_proto protoreflect.FileDescriptor

var file_sl_sr_common_proto_rawDesc = []byte{
	0x0a, 0x12, 0x73, 0x6c, 0x5f, 0x73, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x22, 0x27, 0x0a, 0x0f, 0x53, 0x4c, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x54, 0x0a, 0x08,
	0x53, 0x6c, 0x53, 0x72, 0x42, 0x73, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x4d, 0x70, 0x6c, 0x73,
	0x42, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x4d, 0x70,
	0x6c, 0x73, 0x42, 0x73, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x53, 0x72, 0x76, 0x36, 0x42, 0x73,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x53, 0x72, 0x76, 0x36,
	0x42, 0x73, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x69, 0x64, 0x22, 0x20, 0x0a, 0x0a, 0x53, 0x4c, 0x53, 0x72, 0x43, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xae, 0x03, 0x0a, 0x0f, 0x53, 0x4c, 0x53, 0x72, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x22, 0x0a, 0x0b, 0x49, 0x70, 0x76, 0x34, 0x4c, 0x6f,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x49,
	0x70, 0x76, 0x34, 0x4c, 0x6f, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x22, 0x0a, 0x0b, 0x49, 0x70,
	0x76, 0x36, 0x4c, 0x6f, 0x63, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x0b, 0x49, 0x70, 0x76, 0x36, 0x4c, 0x6f, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x22,
	0x0a, 0x0b, 0x49, 0x70, 0x76, 0x34, 0x52, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0b, 0x49, 0x70, 0x76, 0x34, 0x52, 0x65, 0x6d, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x22, 0x0a, 0x0b, 0x49, 0x70, 0x76, 0x36, 0x52, 0x65, 0x6d, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0b, 0x49, 0x70, 0x76, 0x36, 0x52,
	0x65, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x49, 0x70, 0x76, 0x36, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x49, 0x70, 0x76, 0x36, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x3a, 0x0a, 0x18, 0x49, 0x70, 0x76, 0x36, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x18, 0x49, 0x70, 0x76, 0x36, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x28, 0x0a, 0x0f,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x74, 0x66,
	0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x22, 0xef, 0x02, 0x0a, 0x0b, 0x53, 0x4c, 0x53, 0x72, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x1e, 0x0a, 0x09, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x1a, 0x0a, 0x07, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x07, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x53, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x52, 0x0b, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x53, 0x0a,
	0x11, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x75, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x76, 0x36, 0x45,
	0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52,
	0x11, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x75, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x53, 0x69, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x53, 0x69, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x42, 0x05, 0x0a, 0x03, 0x53, 0x69, 0x64, 0x22, 0xf5, 0x01, 0x0a, 0x10, 0x53, 0x4c, 0x53, 0x72,
	0x76, 0x36, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x42, 0x73, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x42, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x73, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x11,
	0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x76, 0x36, 0x45, 0x6e,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x11,
	0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75,
	0x72, 0x12, 0x3c, 0x0a, 0x09, 0x53, 0x69, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x53, 0x69, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22,
	0x78, 0x0a, 0x16, 0x53, 0x4c, 0x53, 0x72, 0x76, 0x36, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6e, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0x9d, 0x01, 0x0a, 0x0f, 0x53, 0x4c,
	0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x72, 0x67, 0x4c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x41, 0x72, 0x67, 0x4c, 0x65, 0x6e, 0x2a, 0x8f, 0x03, 0x0a, 0x18, 0x53, 0x4c,
	0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49,
	0x4e, 0x5f, 0x50, 0x43, 0x45, 0x50, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x4c, 0x5f, 0x53,
	0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x53, 0x52, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4c, 0x5f, 0x53,
	0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10,
	0x03, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49,
	0x4e, 0x5f, 0x50, 0x43, 0x45, 0x50, 0x5f, 0x56, 0x49, 0x41, 0x5f, 0x50, 0x43, 0x45, 0x10, 0x0a,
	0x12, 0x36, 0x0a, 0x32, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e,
	0x5f, 0x42, 0x47, 0x50, 0x5f, 0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x56,
	0x49, 0x41, 0x5f, 0x50, 0x43, 0x45, 0x10, 0x14, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x4c, 0x5f, 0x53,
	0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x56, 0x49, 0x41, 0x5f, 0x50, 0x43, 0x45, 0x10, 0x1e, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x4c, 0x5f,
	0x53, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x56, 0x49, 0x41, 0x5f, 0x47, 0x52, 0x50, 0x43, 0x10, 0x28, 0x2a, 0x9b, 0x04, 0x0a, 0x0f,
	0x53, 0x4c, 0x53, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x17, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53,
	0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x52,
	0x56, 0x36, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x56, 0x36, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x53,
	0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50,
	0x4c, 0x53, 0x5f, 0x50, 0x46, 0x58, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x56, 0x34, 0x10, 0x03, 0x12,
	0x22, 0x0a, 0x1e, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x50, 0x46, 0x58, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x56,
	0x36, 0x10, 0x04, 0x12, 0x33, 0x0a, 0x2f, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x53,
	0x49, 0x44, 0x5f, 0x56, 0x34, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f,
	0x4c, 0x4f, 0x43, 0x5f, 0x49, 0x44, 0x10, 0x05, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x4c, 0x5f, 0x53,
	0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f,
	0x41, 0x44, 0x4a, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x56, 0x34, 0x5f, 0x4c, 0x4f, 0x43, 0x5f, 0x52,
	0x45, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x06, 0x12, 0x36, 0x0a, 0x32, 0x53, 0x4c, 0x5f,
	0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53,
	0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x56, 0x36, 0x5f, 0x4c, 0x4f, 0x43, 0x5f,
	0x52, 0x45, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x44, 0x10,
	0x07, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x53, 0x49, 0x44,
	0x5f, 0x56, 0x36, 0x5f, 0x4c, 0x4f, 0x43, 0x5f, 0x52, 0x45, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x10, 0x08, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x52, 0x56, 0x36, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x49,
	0x44, 0x5f, 0x56, 0x36, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x09,
	0x12, 0x36, 0x0a, 0x32, 0x53, 0x4c, 0x5f, 0x53, 0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x52, 0x56, 0x36, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x49, 0x44, 0x5f,
	0x56, 0x36, 0x5f, 0x4c, 0x4f, 0x43, 0x5f, 0x52, 0x45, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x0a, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x4c, 0x5f, 0x53,
	0x52, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x52, 0x56, 0x36, 0x5f,
	0x45, 0x4e, 0x44, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x56, 0x36, 0x5f, 0x4c, 0x4f, 0x43, 0x5f, 0x52,
	0x45, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x0b, 0x42, 0x51, 0x5a, 0x4f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x69, 0x73, 0x63, 0x6f, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x6f, 0x62, 0x6a, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x3b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sl_sr_common_proto_rawDescOnce sync.Once
	file_sl_sr_common_proto_rawDescData = file_sl_sr_common_proto_rawDesc
)

func file_sl_sr_common_proto_rawDescGZIP() []byte {
	file_sl_sr_common_proto_rawDescOnce.Do(func() {
		file_sl_sr_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_sl_sr_common_proto_rawDescData)
	})
	return file_sl_sr_common_proto_rawDescData
}

var file_sl_sr_common_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_sl_sr_common_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_sl_sr_common_proto_goTypes = []interface{}{
	(SLSrPolicyProtocolOrigin)(0),  // 0: service_layer.SLSrPolicyProtocolOrigin
	(SLSrSegmentType)(0),           // 1: service_layer.SLSrSegmentType
	(*SLSrPolicyFlags)(nil),        // 2: service_layer.SLSrPolicyFlags
	(*SlSrBsid)(nil),               // 3: service_layer.SlSrBsid
	(*SLSrCpName)(nil),             // 4: service_layer.SLSrCpName
	(*SLSrSegmentDesc)(nil),        // 5: service_layer.SLSrSegmentDesc
	(*SLSrSegment)(nil),            // 6: service_layer.SLSrSegment
	(*SLSrv6BindingSid)(nil),       // 7: service_layer.SLSrv6BindingSid
	(*SLSrv6EndPointBehavior)(nil), // 8: service_layer.SLSrv6EndPointBehavior
	(*SLSrv6SidStruct)(nil),        // 9: service_layer.SLSrv6SidStruct
}
var file_sl_sr_common_proto_depIdxs = []int32{
	1, // 0: service_layer.SLSrSegment.Type:type_name -> service_layer.SLSrSegmentType
	5, // 1: service_layer.SLSrSegment.SegmentDesc:type_name -> service_layer.SLSrSegmentDesc
	8, // 2: service_layer.SLSrSegment.EndPointBehaviour:type_name -> service_layer.SLSrv6EndPointBehavior
	9, // 3: service_layer.SLSrSegment.SidStruct:type_name -> service_layer.SLSrv6SidStruct
	8, // 4: service_layer.SLSrv6BindingSid.EndPointBehaviour:type_name -> service_layer.SLSrv6EndPointBehavior
	9, // 5: service_layer.SLSrv6BindingSid.SidStruct:type_name -> service_layer.SLSrv6SidStruct
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_sl_sr_common_proto_init() }
func file_sl_sr_common_proto_init() {
	if File_sl_sr_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sl_sr_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrPolicyFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlSrBsid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrCpName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrSegmentDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrv6BindingSid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrv6EndPointBehavior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_sr_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrv6SidStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sl_sr_common_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SlSrBsid_MplsBsid)(nil),
		(*SlSrBsid_Srv6Bsid)(nil),
	}
	file_sl_sr_common_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*SLSrSegmentDesc_Ipv4LocAddr)(nil),
		(*SLSrSegmentDesc_Ipv6LocAddr)(nil),
		(*SLSrSegmentDesc_Ipv4RemAddr)(nil),
		(*SLSrSegmentDesc_Ipv6RemAddr)(nil),
	}
	file_sl_sr_common_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*SLSrSegment_MplsLabel)(nil),
		(*SLSrSegment_Srv6Sid)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sl_sr_common_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sl_sr_common_proto_goTypes,
		DependencyIndexes: file_sl_sr_common_proto_depIdxs,
		EnumInfos:         file_sl_sr_common_proto_enumTypes,
		MessageInfos:      file_sl_sr_common_proto_msgTypes,
	}.Build()
	File_sl_sr_common_proto = out.File
	file_sl_sr_common_proto_rawDesc = nil
	file_sl_sr_common_proto_goTypes = nil
	file_sl_sr_common_proto_depIdxs = nil
}
