// SR-TE Stateful Path Calculation API
// @file
// @brief Proto file for Segment-routing traffic-eng (SRTE) PathCompute RPCs.
// Declares calls for delegating path compute of SRTE policies to a compute server.
// The GPB data model should reflect the model from the SRTE policy
// RFC https://datatracker.ietf.org/doc/rfc9256/.
//
// ----------------------------------------------------------------
//  Copyright (c) 2024 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.3
// source: sl_srte_pcalc_stateful.proto

package service_layer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enables client-side batching.
type SLSrtePathComputeReqs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*SLSrtePathComputeReq `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"` // A batch of request messages.
}

func (x *SLSrtePathComputeReqs) Reset() {
	*x = SLSrtePathComputeReqs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrtePathComputeReqs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrtePathComputeReqs) ProtoMessage() {}

func (x *SLSrtePathComputeReqs) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrtePathComputeReqs.ProtoReflect.Descriptor instead.
func (*SLSrtePathComputeReqs) Descriptor() ([]byte, []int) {
	return file_sl_srte_pcalc_stateful_proto_rawDescGZIP(), []int{0}
}

func (x *SLSrtePathComputeReqs) GetRequests() []*SLSrtePathComputeReq {
	if x != nil {
		return x.Requests
	}
	return nil
}

// Enables server-side batching.
type SLSrtePathComputeRsps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responses []*SLSrtePathComputeRes `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"` // A batch of response messages.
}

func (x *SLSrtePathComputeRsps) Reset() {
	*x = SLSrtePathComputeRsps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrtePathComputeRsps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrtePathComputeRsps) ProtoMessage() {}

func (x *SLSrtePathComputeRsps) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrtePathComputeRsps.ProtoReflect.Descriptor instead.
func (*SLSrtePathComputeRsps) Descriptor() ([]byte, []int) {
	return file_sl_srte_pcalc_stateful_proto_rawDescGZIP(), []int{1}
}

func (x *SLSrtePathComputeRsps) GetResponses() []*SLSrtePathComputeRes {
	if x != nil {
		return x.Responses
	}
	return nil
}

// Initiate a new path request or manage an active one that was initiated or
// claimed in this channel.
type SLSrtePathComputeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique SR policy identifier.
	PolicyKey *SLSrPolicyKey `protobuf:"bytes,1,opt,name=policy_key,json=policyKey,proto3" json:"policy_key,omitempty"`
	// Unique candidate path identifier in the context of an SR policy.
	//
	// The tuple (`policy_key`, `candidate_path_key`) is a globally unique
	// identifier of the candidate path.
	CandidatePathKey *SLSrCandidatePathKey `protobuf:"bytes,2,opt,name=candidate_path_key,json=candidatePathKey,proto3" json:"candidate_path_key,omitempty"`
	// Sequence number.
	//
	// This sequence number is reproduced in any path response related to this
	// request and can be used by the client to verify that the server is
	// replying to the most up-to-date request for a given candidate path.
	//
	// The sequence number **must** be strictly increasing in path request
	// messages relative to a particular candidate path (i.e., same `policy_key`
	// and `candidate_path_key`).
	// Server is expected to ignore the request if sequence number in the request
	// is lower than the last received request for a given policy key,
	// candidate_path key
	SeqNum uint64 `protobuf:"varint,3,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	// Type of request message.
	//
	// Types that are assignable to RequestType:
	//
	//	*SLSrtePathComputeReq_Init
	//	*SLSrtePathComputeReq_Update
	//	*SLSrtePathComputeReq_Withdraw
	RequestType isSLSrtePathComputeReq_RequestType `protobuf_oneof:"request_type"`
}

func (x *SLSrtePathComputeReq) Reset() {
	*x = SLSrtePathComputeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrtePathComputeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrtePathComputeReq) ProtoMessage() {}

func (x *SLSrtePathComputeReq) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrtePathComputeReq.ProtoReflect.Descriptor instead.
func (*SLSrtePathComputeReq) Descriptor() ([]byte, []int) {
	return file_sl_srte_pcalc_stateful_proto_rawDescGZIP(), []int{2}
}

func (x *SLSrtePathComputeReq) GetPolicyKey() *SLSrPolicyKey {
	if x != nil {
		return x.PolicyKey
	}
	return nil
}

func (x *SLSrtePathComputeReq) GetCandidatePathKey() *SLSrCandidatePathKey {
	if x != nil {
		return x.CandidatePathKey
	}
	return nil
}

func (x *SLSrtePathComputeReq) GetSeqNum() uint64 {
	if x != nil {
		return x.SeqNum
	}
	return 0
}

func (m *SLSrtePathComputeReq) GetRequestType() isSLSrtePathComputeReq_RequestType {
	if m != nil {
		return m.RequestType
	}
	return nil
}

func (x *SLSrtePathComputeReq) GetInit() *SLSrtePathComputeReq_SLSrtePathInit {
	if x, ok := x.GetRequestType().(*SLSrtePathComputeReq_Init); ok {
		return x.Init
	}
	return nil
}

func (x *SLSrtePathComputeReq) GetUpdate() *SLSrtePathComputeReq_SLSrtePathUpdate {
	if x, ok := x.GetRequestType().(*SLSrtePathComputeReq_Update); ok {
		return x.Update
	}
	return nil
}

func (x *SLSrtePathComputeReq) GetWithdraw() *SLSrtePathComputeReq_SLSrtePathWithdraw {
	if x, ok := x.GetRequestType().(*SLSrtePathComputeReq_Withdraw); ok {
		return x.Withdraw
	}
	return nil
}

type isSLSrtePathComputeReq_RequestType interface {
	isSLSrtePathComputeReq_RequestType()
}

type SLSrtePathComputeReq_Init struct {
	Init *SLSrtePathComputeReq_SLSrtePathInit `protobuf:"bytes,4,opt,name=init,proto3,oneof"`
}

type SLSrtePathComputeReq_Update struct {
	Update *SLSrtePathComputeReq_SLSrtePathUpdate `protobuf:"bytes,5,opt,name=update,proto3,oneof"`
}

type SLSrtePathComputeReq_Withdraw struct {
	Withdraw *SLSrtePathComputeReq_SLSrtePathWithdraw `protobuf:"bytes,6,opt,name=withdraw,proto3,oneof"`
}

func (*SLSrtePathComputeReq_Init) isSLSrtePathComputeReq_RequestType() {}

func (*SLSrtePathComputeReq_Update) isSLSrtePathComputeReq_RequestType() {}

func (*SLSrtePathComputeReq_Withdraw) isSLSrtePathComputeReq_RequestType() {}

type SLSrtePathComputeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique SR policy identifier.
	PolicyKey *SLSrPolicyKey `protobuf:"bytes,1,opt,name=policy_key,json=policyKey,proto3" json:"policy_key,omitempty"`
	// Unique candidate path identifier in the context of an SR policy.
	CandidatePathKey *SLSrCandidatePathKey `protobuf:"bytes,2,opt,name=candidate_path_key,json=candidatePathKey,proto3" json:"candidate_path_key,omitempty"`
	// Request sequence number.
	//
	// This attribute indicates to the client to which request (in the context of
	// a candidate path) the server is replying.
	ReqSeqNum uint64 `protobuf:"varint,3,opt,name=req_seq_num,json=reqSeqNum,proto3" json:"req_seq_num,omitempty"`
	// The type of response message.
	//
	// Types that are assignable to ResponseType:
	//
	//	*SLSrtePathComputeRes_PathResult
	//	*SLSrtePathComputeRes_Error
	ResponseType isSLSrtePathComputeRes_ResponseType `protobuf_oneof:"response_type"`
}

func (x *SLSrtePathComputeRes) Reset() {
	*x = SLSrtePathComputeRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrtePathComputeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrtePathComputeRes) ProtoMessage() {}

func (x *SLSrtePathComputeRes) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrtePathComputeRes.ProtoReflect.Descriptor instead.
func (*SLSrtePathComputeRes) Descriptor() ([]byte, []int) {
	return file_sl_srte_pcalc_stateful_proto_rawDescGZIP(), []int{3}
}

func (x *SLSrtePathComputeRes) GetPolicyKey() *SLSrPolicyKey {
	if x != nil {
		return x.PolicyKey
	}
	return nil
}

func (x *SLSrtePathComputeRes) GetCandidatePathKey() *SLSrCandidatePathKey {
	if x != nil {
		return x.CandidatePathKey
	}
	return nil
}

func (x *SLSrtePathComputeRes) GetReqSeqNum() uint64 {
	if x != nil {
		return x.ReqSeqNum
	}
	return 0
}

func (m *SLSrtePathComputeRes) GetResponseType() isSLSrtePathComputeRes_ResponseType {
	if m != nil {
		return m.ResponseType
	}
	return nil
}

func (x *SLSrtePathComputeRes) GetPathResult() *SLSrtePathComputeRes_SLSrteDynamicPathResult {
	if x, ok := x.GetResponseType().(*SLSrtePathComputeRes_PathResult); ok {
		return x.PathResult
	}
	return nil
}

func (x *SLSrtePathComputeRes) GetError() *SLSrtePathComputeRes_SLSrtePathError {
	if x, ok := x.GetResponseType().(*SLSrtePathComputeRes_Error); ok {
		return x.Error
	}
	return nil
}

type isSLSrtePathComputeRes_ResponseType interface {
	isSLSrtePathComputeRes_ResponseType()
}

type SLSrtePathComputeRes_PathResult struct {
	// The result of a dynamic candidate path calculation.
	PathResult *SLSrtePathComputeRes_SLSrteDynamicPathResult `protobuf:"bytes,4,opt,name=path_result,json=pathResult,proto3,oneof"`
}

type SLSrtePathComputeRes_Error struct {
	// An error message.
	Error *SLSrtePathComputeRes_SLSrtePathError `protobuf:"bytes,6,opt,name=error,proto3,oneof"`
}

func (*SLSrtePathComputeRes_PathResult) isSLSrtePathComputeRes_ResponseType() {}

func (*SLSrtePathComputeRes_Error) isSLSrtePathComputeRes_ResponseType() {}

// The specific attributes for dynamic path request.
type SLSrtePathAttrDynamic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The optimization metric of the dynamic candidate path.
	//
	// The objective function of the optimization problem is to minimize the
	// accumulated value of this additive link metric along the path.
	OMetric SLSrMetricType `protobuf:"varint,1,opt,name=o_metric,json=oMetric,proto3,enum=service_layer.SLSrMetricType" json:"o_metric,omitempty"`
	// The set of constraints that the candidate path must satisfy.
	Constraints *ConstraintSet `protobuf:"bytes,2,opt,name=constraints,proto3" json:"constraints,omitempty"`
}

func (x *SLSrtePathAttrDynamic) Reset() {
	*x = SLSrtePathAttrDynamic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrtePathAttrDynamic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrtePathAttrDynamic) ProtoMessage() {}

func (x *SLSrtePathAttrDynamic) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrtePathAttrDynamic.ProtoReflect.Descriptor instead.
func (*SLSrtePathAttrDynamic) Descriptor() ([]byte, []int) {
	return file_sl_srte_pcalc_stateful_proto_rawDescGZIP(), []int{4}
}

func (x *SLSrtePathAttrDynamic) GetOMetric() SLSrMetricType {
	if x != nil {
		return x.OMetric
	}
	return SLSrMetricType_SL_METRIC_TYPE_UNSPECIFIED
}

func (x *SLSrtePathAttrDynamic) GetConstraints() *ConstraintSet {
	if x != nil {
		return x.Constraints
	}
	return nil
}

// The specific attributes for initializing an explicit path request.
type SLSrtePathAttrExplicit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of weighted segment lists in the explicit candidate path.
	SegmentLists []*SLSrSegmentList `protobuf:"bytes,1,rep,name=segment_lists,json=segmentLists,proto3" json:"segment_lists,omitempty"`
	// The set of constraints that the candidate path must satisfy.
	Constraints *ConstraintSet `protobuf:"bytes,2,opt,name=constraints,proto3" json:"constraints,omitempty"`
}

func (x *SLSrtePathAttrExplicit) Reset() {
	*x = SLSrtePathAttrExplicit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrtePathAttrExplicit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrtePathAttrExplicit) ProtoMessage() {}

func (x *SLSrtePathAttrExplicit) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrtePathAttrExplicit.ProtoReflect.Descriptor instead.
func (*SLSrtePathAttrExplicit) Descriptor() ([]byte, []int) {
	return file_sl_srte_pcalc_stateful_proto_rawDescGZIP(), []int{5}
}

func (x *SLSrtePathAttrExplicit) GetSegmentLists() []*SLSrSegmentList {
	if x != nil {
		return x.SegmentLists
	}
	return nil
}

func (x *SLSrtePathAttrExplicit) GetConstraints() *ConstraintSet {
	if x != nil {
		return x.Constraints
	}
	return nil
}

// A set of constraints for an SR path.
type ConstraintSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Extended Administrative Groups.
	Affinities *SLSrAffinities `protobuf:"bytes,1,opt,name=affinities,proto3" json:"affinities,omitempty"`
	// SRLG exclude.
	//
	// Mapped from [section 6.5 of RFC 9350](https://www.rfc-editor.org/rfc/rfc9350.html#section-6.5).
	SrlgExclude []uint32 `protobuf:"varint,4,rep,packed,name=srlg_exclude,json=srlgExclude,proto3" json:"srlg_exclude,omitempty"`
	// IP address exclude.
	IpExclude []*SLIpAddress `protobuf:"bytes,5,rep,name=ip_exclude,json=ipExclude,proto3" json:"ip_exclude,omitempty"`
	// Path diversity (disjoint paths) constraint.
	PathDiversity *ConstraintSet_PathDiversity `protobuf:"bytes,101,opt,name=path_diversity,json=pathDiversity,proto3,oneof" json:"path_diversity,omitempty"`
	// Bidirectional corouted association.
	CoroutedAssociation *AssociationGroup `protobuf:"bytes,102,opt,name=corouted_association,json=coroutedAssociation,proto3,oneof" json:"corouted_association,omitempty"`
	// Guaranteed bandwidth.
	//
	// When set to the default value (0), this attribute is ignored.
	GuaranteedBandwidth uint32 `protobuf:"varint,103,opt,name=guaranteed_bandwidth,json=guaranteedBandwidth,proto3" json:"guaranteed_bandwidth,omitempty"`
	// Segment list is made only of adjacency or binding segments to transit
	// policies made only of adjacency segments.
	StrictPathSegments bool `protobuf:"varint,201,opt,name=strict_path_segments,json=strictPathSegments,proto3" json:"strict_path_segments,omitempty"`
	// Segment list is made only of unprotected (i.e., non FRR-protected)
	// segments or binding segments to transit policies made only of unprotected
	// segments.
	//
	// When `false`, protected segments are preferred over unprotected ones.
	//
	// Note: Setting this constraint to true also implicitly enables
	// `strict_path_segments`, since only adjacency segments can be unprotected.
	UnprotectedSegments bool `protobuf:"varint,202,opt,name=unprotected_segments,json=unprotectedSegments,proto3" json:"unprotected_segments,omitempty"`
	// Segment list is made only of persistently allocated segments (i.e., whose
	// value remains the same across router restart or interface flap) or binding
	// segments to transit policies made only of persistent segments.
	//
	// When `false`, the segment list may comprise both persistent and
	// non-persistent segments. Persistent segments are preferred when available.
	PersistentSegments bool `protobuf:"varint,203,opt,name=persistent_segments,json=persistentSegments,proto3" json:"persistent_segments,omitempty"`
	// Maximum number of segments in any of the candidate path segment lists.
	//
	// When set to a non-zero value, this attribute replaces the headend MSD
	// obtained from the link-state topology. When set to the default value (0),
	// this attribute is ignored.
	//
	// Note: If the first segment in the segment list can be enforced by setting
	// the outgoing interface on the headend node, it does not count towards this
	// limit.
	MaximumSidDepth uint32 `protobuf:"varint,204,opt,name=maximum_sid_depth,json=maximumSidDepth,proto3" json:"maximum_sid_depth,omitempty"`
}

func (x *ConstraintSet) Reset() {
	*x = ConstraintSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstraintSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintSet) ProtoMessage() {}

func (x *ConstraintSet) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintSet.ProtoReflect.Descriptor instead.
func (*ConstraintSet) Descriptor() ([]byte, []int) {
	return file_sl_srte_pcalc_stateful_proto_rawDescGZIP(), []int{6}
}

func (x *ConstraintSet) GetAffinities() *SLSrAffinities {
	if x != nil {
		return x.Affinities
	}
	return nil
}

func (x *ConstraintSet) GetSrlgExclude() []uint32 {
	if x != nil {
		return x.SrlgExclude
	}
	return nil
}

func (x *ConstraintSet) GetIpExclude() []*SLIpAddress {
	if x != nil {
		return x.IpExclude
	}
	return nil
}

func (x *ConstraintSet) GetPathDiversity() *ConstraintSet_PathDiversity {
	if x != nil {
		return x.PathDiversity
	}
	return nil
}

func (x *ConstraintSet) GetCoroutedAssociation() *AssociationGroup {
	if x != nil {
		return x.CoroutedAssociation
	}
	return nil
}

func (x *ConstraintSet) GetGuaranteedBandwidth() uint32 {
	if x != nil {
		return x.GuaranteedBandwidth
	}
	return 0
}

func (x *ConstraintSet) GetStrictPathSegments() bool {
	if x != nil {
		return x.StrictPathSegments
	}
	return false
}

func (x *ConstraintSet) GetUnprotectedSegments() bool {
	if x != nil {
		return x.UnprotectedSegments
	}
	return false
}

func (x *ConstraintSet) GetPersistentSegments() bool {
	if x != nil {
		return x.PersistentSegments
	}
	return false
}

func (x *ConstraintSet) GetMaximumSidDepth() uint32 {
	if x != nil {
		return x.MaximumSidDepth
	}
	return 0
}

type AssociationGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Association group ID
	// The values 0xffff and 0x0 are reserved.
	// The value 0xffff is used to indicate all association groups.
	AssociationId uint32 `protobuf:"varint,1,opt,name=association_id,json=associationId,proto3" json:"association_id,omitempty"`
}

func (x *AssociationGroup) Reset() {
	*x = AssociationGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociationGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociationGroup) ProtoMessage() {}

func (x *AssociationGroup) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociationGroup.ProtoReflect.Descriptor instead.
func (*AssociationGroup) Descriptor() ([]byte, []int) {
	return file_sl_srte_pcalc_stateful_proto_rawDescGZIP(), []int{7}
}

func (x *AssociationGroup) GetAssociationId() uint32 {
	if x != nil {
		return x.AssociationId
	}
	return 0
}

// Initiate a new request for the server to maintain an SR candidate path.
//
// - For a dynamic candidate path, this means computing and updating a set of
// SID-lists in order to continuously comply with the path specifications.
// - For an explicit candidate path, this means continuously validating the
// set of SID-lists with respect to the path specification and reporting
// the validity of SID-list.
type SLSrtePathComputeReq_SLSrtePathInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The segment routing dataplane.
	//
	// The dataplane of a candidate path is an **immutable path attribute**. It
	// cannot be modified after the initial path request.
	Dataplane SLSrDataplane `protobuf:"varint,1,opt,name=dataplane,proto3,enum=service_layer.SLSrDataplane" json:"dataplane,omitempty"`
	// Types that are assignable to PathInitType:
	//
	//	*SLSrtePathComputeReq_SLSrtePathInit_Dynamic
	//	*SLSrtePathComputeReq_SLSrtePathInit_Explicit
	PathInitType isSLSrtePathComputeReq_SLSrtePathInit_PathInitType `protobuf_oneof:"path_init_type"`
}

func (x *SLSrtePathComputeReq_SLSrtePathInit) Reset() {
	*x = SLSrtePathComputeReq_SLSrtePathInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrtePathComputeReq_SLSrtePathInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrtePathComputeReq_SLSrtePathInit) ProtoMessage() {}

func (x *SLSrtePathComputeReq_SLSrtePathInit) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrtePathComputeReq_SLSrtePathInit.ProtoReflect.Descriptor instead.
func (*SLSrtePathComputeReq_SLSrtePathInit) Descriptor() ([]byte, []int) {
	return file_sl_srte_pcalc_stateful_proto_rawDescGZIP(), []int{2, 0}
}

func (x *SLSrtePathComputeReq_SLSrtePathInit) GetDataplane() SLSrDataplane {
	if x != nil {
		return x.Dataplane
	}
	return SLSrDataplane_SL_SR_DATAPLANE_UNSPECIFIED
}

func (m *SLSrtePathComputeReq_SLSrtePathInit) GetPathInitType() isSLSrtePathComputeReq_SLSrtePathInit_PathInitType {
	if m != nil {
		return m.PathInitType
	}
	return nil
}

func (x *SLSrtePathComputeReq_SLSrtePathInit) GetDynamic() *SLSrtePathAttrDynamic {
	if x, ok := x.GetPathInitType().(*SLSrtePathComputeReq_SLSrtePathInit_Dynamic); ok {
		return x.Dynamic
	}
	return nil
}

func (x *SLSrtePathComputeReq_SLSrtePathInit) GetExplicit() *SLSrtePathAttrExplicit {
	if x, ok := x.GetPathInitType().(*SLSrtePathComputeReq_SLSrtePathInit_Explicit); ok {
		return x.Explicit
	}
	return nil
}

type isSLSrtePathComputeReq_SLSrtePathInit_PathInitType interface {
	isSLSrtePathComputeReq_SLSrtePathInit_PathInitType()
}

type SLSrtePathComputeReq_SLSrtePathInit_Dynamic struct {
	Dynamic *SLSrtePathAttrDynamic `protobuf:"bytes,2,opt,name=dynamic,proto3,oneof"`
}

type SLSrtePathComputeReq_SLSrtePathInit_Explicit struct {
	Explicit *SLSrtePathAttrExplicit `protobuf:"bytes,3,opt,name=explicit,proto3,oneof"`
}

func (*SLSrtePathComputeReq_SLSrtePathInit_Dynamic) isSLSrtePathComputeReq_SLSrtePathInit_PathInitType() {
}

func (*SLSrtePathComputeReq_SLSrtePathInit_Explicit) isSLSrtePathComputeReq_SLSrtePathInit_PathInitType() {
}

// Modify the specification of an existing path (e.g., change constraints).
//
// PathUpdate cannot alter any element of the candidate path identifier
// (e.g., endpoint) nor any unmutable path attributes (e.g., dataplane).
type SLSrtePathComputeReq_SLSrtePathUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PathUpdateType:
	//
	//	*SLSrtePathComputeReq_SLSrtePathUpdate_Dynamic
	//	*SLSrtePathComputeReq_SLSrtePathUpdate_Explicit
	PathUpdateType isSLSrtePathComputeReq_SLSrtePathUpdate_PathUpdateType `protobuf_oneof:"path_update_type"`
}

func (x *SLSrtePathComputeReq_SLSrtePathUpdate) Reset() {
	*x = SLSrtePathComputeReq_SLSrtePathUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrtePathComputeReq_SLSrtePathUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrtePathComputeReq_SLSrtePathUpdate) ProtoMessage() {}

func (x *SLSrtePathComputeReq_SLSrtePathUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrtePathComputeReq_SLSrtePathUpdate.ProtoReflect.Descriptor instead.
func (*SLSrtePathComputeReq_SLSrtePathUpdate) Descriptor() ([]byte, []int) {
	return file_sl_srte_pcalc_stateful_proto_rawDescGZIP(), []int{2, 1}
}

func (m *SLSrtePathComputeReq_SLSrtePathUpdate) GetPathUpdateType() isSLSrtePathComputeReq_SLSrtePathUpdate_PathUpdateType {
	if m != nil {
		return m.PathUpdateType
	}
	return nil
}

func (x *SLSrtePathComputeReq_SLSrtePathUpdate) GetDynamic() *SLSrtePathAttrDynamic {
	if x, ok := x.GetPathUpdateType().(*SLSrtePathComputeReq_SLSrtePathUpdate_Dynamic); ok {
		return x.Dynamic
	}
	return nil
}

func (x *SLSrtePathComputeReq_SLSrtePathUpdate) GetExplicit() *SLSrtePathAttrExplicit {
	if x, ok := x.GetPathUpdateType().(*SLSrtePathComputeReq_SLSrtePathUpdate_Explicit); ok {
		return x.Explicit
	}
	return nil
}

type isSLSrtePathComputeReq_SLSrtePathUpdate_PathUpdateType interface {
	isSLSrtePathComputeReq_SLSrtePathUpdate_PathUpdateType()
}

type SLSrtePathComputeReq_SLSrtePathUpdate_Dynamic struct {
	Dynamic *SLSrtePathAttrDynamic `protobuf:"bytes,1,opt,name=dynamic,proto3,oneof"`
}

type SLSrtePathComputeReq_SLSrtePathUpdate_Explicit struct {
	Explicit *SLSrtePathAttrExplicit `protobuf:"bytes,2,opt,name=explicit,proto3,oneof"`
}

func (*SLSrtePathComputeReq_SLSrtePathUpdate_Dynamic) isSLSrtePathComputeReq_SLSrtePathUpdate_PathUpdateType() {
}

func (*SLSrtePathComputeReq_SLSrtePathUpdate_Explicit) isSLSrtePathComputeReq_SLSrtePathUpdate_PathUpdateType() {
}

// Withdraw a path request.
//
// Upon receiving this message, the server immediately deletes the path from
// its path request database and frees any resource allocated for this
// path. If the candidate path was using any transit policies, the server
// unregisters this path from the list of parents of those transit policies,
// which may lead to unprovisioning of some transit policies.
type SLSrtePathComputeReq_SLSrtePathWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SLSrtePathComputeReq_SLSrtePathWithdraw) Reset() {
	*x = SLSrtePathComputeReq_SLSrtePathWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrtePathComputeReq_SLSrtePathWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrtePathComputeReq_SLSrtePathWithdraw) ProtoMessage() {}

func (x *SLSrtePathComputeReq_SLSrtePathWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrtePathComputeReq_SLSrtePathWithdraw.ProtoReflect.Descriptor instead.
func (*SLSrtePathComputeReq_SLSrtePathWithdraw) Descriptor() ([]byte, []int) {
	return file_sl_srte_pcalc_stateful_proto_rawDescGZIP(), []int{2, 2}
}

// The result of a dynamic candidate path calculation.
type SLSrtePathComputeRes_SLSrteDynamicPathResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of weighted segment lists.
	SegmentLists []*SLSrSegmentList `protobuf:"bytes,1,rep,name=segment_lists,json=segmentLists,proto3" json:"segment_lists,omitempty"`
	// Effective level of diversity achieved in the response paths.
	//
	// If the `min_diversity_level` field was set in the request, then the
	// effective diversity level is between the requested `min_diversity_level`
	// and `diversity_level`.
	//
	// Otherwise, the effective diversity level is equal to the requested
	// `diversity_level`.
	EffectiveDiversityLevel *SLSrDiversityLevel `protobuf:"varint,3,opt,name=effective_diversity_level,json=effectiveDiversityLevel,proto3,enum=service_layer.SLSrDiversityLevel,oneof" json:"effective_diversity_level,omitempty"`
}

func (x *SLSrtePathComputeRes_SLSrteDynamicPathResult) Reset() {
	*x = SLSrtePathComputeRes_SLSrteDynamicPathResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrtePathComputeRes_SLSrteDynamicPathResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrtePathComputeRes_SLSrteDynamicPathResult) ProtoMessage() {}

func (x *SLSrtePathComputeRes_SLSrteDynamicPathResult) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrtePathComputeRes_SLSrteDynamicPathResult.ProtoReflect.Descriptor instead.
func (*SLSrtePathComputeRes_SLSrteDynamicPathResult) Descriptor() ([]byte, []int) {
	return file_sl_srte_pcalc_stateful_proto_rawDescGZIP(), []int{3, 0}
}

func (x *SLSrtePathComputeRes_SLSrteDynamicPathResult) GetSegmentLists() []*SLSrSegmentList {
	if x != nil {
		return x.SegmentLists
	}
	return nil
}

func (x *SLSrtePathComputeRes_SLSrteDynamicPathResult) GetEffectiveDiversityLevel() SLSrDiversityLevel {
	if x != nil && x.EffectiveDiversityLevel != nil {
		return *x.EffectiveDiversityLevel
	}
	return SLSrDiversityLevel_SL_DIVERSITY_LEVEL_NONE
}

// An error message.
type SLSrtePathComputeRes_SLSrtePathError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        *SLErrorStatus `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`               // Type of error.
	Description string         `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"` // Text description of the error.
}

func (x *SLSrtePathComputeRes_SLSrtePathError) Reset() {
	*x = SLSrtePathComputeRes_SLSrtePathError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrtePathComputeRes_SLSrtePathError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrtePathComputeRes_SLSrtePathError) ProtoMessage() {}

func (x *SLSrtePathComputeRes_SLSrtePathError) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrtePathComputeRes_SLSrtePathError.ProtoReflect.Descriptor instead.
func (*SLSrtePathComputeRes_SLSrtePathError) Descriptor() ([]byte, []int) {
	return file_sl_srte_pcalc_stateful_proto_rawDescGZIP(), []int{3, 1}
}

func (x *SLSrtePathComputeRes_SLSrtePathError) GetType() *SLErrorStatus {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SLSrtePathComputeRes_SLSrtePathError) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ConstraintSet_PathDiversity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Association group identifier.
	Association *AssociationGroup `protobuf:"bytes,1,opt,name=association,proto3" json:"association,omitempty"`
	// Required level of diversity for the disjoint paths (e.g., link- or
	// node-disjoint)
	//
	// Values `DIVERSITY_LEVEL_UNSPECIFIED` and `DIVERSITY_LEVEL_NONE` are
	// **invalid** for this field.
	DiversityLevel SLSrDiversityLevel `protobuf:"varint,2,opt,name=diversity_level,json=diversityLevel,proto3,enum=service_layer.SLSrDiversityLevel" json:"diversity_level,omitempty"`
	// Minimum fallback level of diversity for the disjoint paths
	//
	// If this field set and the path calculation service is unable to find a
	// full set of disjoint paths meeting the `diversity_level`, it will
	// attempt to find a set of paths with a lower level of diversity. It will
	// continue to fallback to lower levels until a full set of disjoint paths
	// is found or the minimum fallback level is reached, whichever comes
	// first.
	//
	// The service attempts the diversity levels in the following order from
	// the `diversity_level` to the `min_diversity_level`:
	//
	// SRLG + Node > SRLG > Node > Link > None
	//
	// If this field is unset, or if it is set to an equal or higher level than
	// `diversity_level`, the diversity level is considered strict and no
	// fallback is performed.
	MinDiversityLevel *SLSrDiversityLevel `protobuf:"varint,3,opt,name=min_diversity_level,json=minDiversityLevel,proto3,enum=service_layer.SLSrDiversityLevel,oneof" json:"min_diversity_level,omitempty"`
	// Pin this path to the shortest path.
	ShortestPath bool `protobuf:"varint,4,opt,name=shortest_path,json=shortestPath,proto3" json:"shortest_path,omitempty"`
}

func (x *ConstraintSet_PathDiversity) Reset() {
	*x = ConstraintSet_PathDiversity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstraintSet_PathDiversity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintSet_PathDiversity) ProtoMessage() {}

func (x *ConstraintSet_PathDiversity) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_pcalc_stateful_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintSet_PathDiversity.ProtoReflect.Descriptor instead.
func (*ConstraintSet_PathDiversity) Descriptor() ([]byte, []int) {
	return file_sl_srte_pcalc_stateful_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ConstraintSet_PathDiversity) GetAssociation() *AssociationGroup {
	if x != nil {
		return x.Association
	}
	return nil
}

func (x *ConstraintSet_PathDiversity) GetDiversityLevel() SLSrDiversityLevel {
	if x != nil {
		return x.DiversityLevel
	}
	return SLSrDiversityLevel_SL_DIVERSITY_LEVEL_NONE
}

func (x *ConstraintSet_PathDiversity) GetMinDiversityLevel() SLSrDiversityLevel {
	if x != nil && x.MinDiversityLevel != nil {
		return *x.MinDiversityLevel
	}
	return SLSrDiversityLevel_SL_DIVERSITY_LEVEL_NONE
}

func (x *ConstraintSet_PathDiversity) GetShortestPath() bool {
	if x != nil {
		return x.ShortestPath
	}
	return false
}

var File_sl_srte_pcalc_stateful_proto protoreflect.FileDescriptor

var file_sl_srte_pcalc_stateful_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x6c, 0x5f, 0x73, 0x72, 0x74, 0x65, 0x5f, 0x70, 0x63, 0x61, 0x6c, 0x63, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x1a, 0x15, 0x73,
	0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x73, 0x6c, 0x5f, 0x73, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a, 0x15, 0x53, 0x4c, 0x53, 0x72,
	0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x73, 0x12, 0x3f, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x22, 0x5a, 0x0a, 0x15, 0x53, 0x4c, 0x53, 0x72, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x73, 0x70, 0x73, 0x12, 0x41, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x53, 0x72, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0xed,
	0x06, 0x0a, 0x14, 0x53, 0x4c, 0x53, 0x72, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x53, 0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x71, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d,
	0x12, 0x48, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x53, 0x72, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x74,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e,
	0x53, 0x4c, 0x53, 0x72, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x08, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53,
	0x72, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x1a, 0xe5, 0x01, 0x0a, 0x0e, 0x53, 0x4c, 0x53, 0x72, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x49,
	0x6e, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x44, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x12,
	0x40, 0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x53, 0x72, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x41, 0x74, 0x74, 0x72, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x48, 0x00, 0x52, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x12, 0x43, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x41, 0x74,
	0x74, 0x72, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xad, 0x01, 0x0a, 0x10, 0x53, 0x4c, 0x53,
	0x72, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a,
	0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x4c, 0x53, 0x72, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x41, 0x74, 0x74, 0x72, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x48, 0x00, 0x52, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12,
	0x43, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x41, 0x74, 0x74, 0x72,
	0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x14, 0x0a, 0x12, 0x53, 0x4c, 0x53, 0x72,
	0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x0e,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xce,
	0x05, 0x0a, 0x14, 0x53, 0x4c, 0x53, 0x72, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x53, 0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x5f, 0x73,
	0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x5e, 0x0a, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53,
	0x72, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x74, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x74, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x2e, 0x53, 0x4c, 0x53, 0x72,
	0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x1a, 0xe0, 0x01, 0x0a, 0x17, 0x53, 0x4c, 0x53, 0x72, 0x74, 0x65, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x43, 0x0a, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x62, 0x0a, 0x19, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x44, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x17, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x65, 0x0a, 0x0f, 0x53, 0x4c, 0x53, 0x72, 0x74,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x91, 0x01, 0x0a, 0x15, 0x53, 0x4c, 0x53, 0x72, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x41, 0x74,
	0x74, 0x72, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x08, 0x6f, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x16, 0x53, 0x4c, 0x53, 0x72, 0x74, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x41, 0x74, 0x74, 0x72, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x43,
	0x0a, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x22, 0xb8, 0x07, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x53, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x41, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x72, 0x6c, 0x67, 0x5f, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x72, 0x6c, 0x67,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x69, 0x70, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x12, 0x56, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x74, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x44, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x44, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x14, 0x63, 0x6f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x64, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x14, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65,
	0x64, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x67, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xc9,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a,
	0x13, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x53, 0x69, 0x64, 0x44, 0x65, 0x70, 0x74, 0x68, 0x1a, 0xb3, 0x02, 0x0a,
	0x0d, 0x50, 0x61, 0x74, 0x68, 0x44, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x12, 0x41,
	0x0a, 0x0b, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4a, 0x0a, 0x0f, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x44,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0e, 0x64,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x56, 0x0a,
	0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x44,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x00, 0x52,
	0x11, 0x6d, 0x69, 0x6e, 0x44, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x74, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x39,
	0x0a, 0x10, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x32, 0x79, 0x0a, 0x12, 0x53, 0x4c, 0x53,
	0x72, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x12,
	0x63, 0x0a, 0x11, 0x53, 0x4c, 0x53, 0x72, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x73, 0x1a, 0x24, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x74,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x73, 0x70, 0x73,
	0x28, 0x01, 0x30, 0x01, 0x42, 0x51, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x43, 0x69, 0x73, 0x63, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2d, 0x6f, 0x62, 0x6a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sl_srte_pcalc_stateful_proto_rawDescOnce sync.Once
	file_sl_srte_pcalc_stateful_proto_rawDescData = file_sl_srte_pcalc_stateful_proto_rawDesc
)

func file_sl_srte_pcalc_stateful_proto_rawDescGZIP() []byte {
	file_sl_srte_pcalc_stateful_proto_rawDescOnce.Do(func() {
		file_sl_srte_pcalc_stateful_proto_rawDescData = protoimpl.X.CompressGZIP(file_sl_srte_pcalc_stateful_proto_rawDescData)
	})
	return file_sl_srte_pcalc_stateful_proto_rawDescData
}

var file_sl_srte_pcalc_stateful_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_sl_srte_pcalc_stateful_proto_goTypes = []interface{}{
	(*SLSrtePathComputeReqs)(nil),                        // 0: service_layer.SLSrtePathComputeReqs
	(*SLSrtePathComputeRsps)(nil),                        // 1: service_layer.SLSrtePathComputeRsps
	(*SLSrtePathComputeReq)(nil),                         // 2: service_layer.SLSrtePathComputeReq
	(*SLSrtePathComputeRes)(nil),                         // 3: service_layer.SLSrtePathComputeRes
	(*SLSrtePathAttrDynamic)(nil),                        // 4: service_layer.SLSrtePathAttrDynamic
	(*SLSrtePathAttrExplicit)(nil),                       // 5: service_layer.SLSrtePathAttrExplicit
	(*ConstraintSet)(nil),                                // 6: service_layer.ConstraintSet
	(*AssociationGroup)(nil),                             // 7: service_layer.AssociationGroup
	(*SLSrtePathComputeReq_SLSrtePathInit)(nil),          // 8: service_layer.SLSrtePathComputeReq.SLSrtePathInit
	(*SLSrtePathComputeReq_SLSrtePathUpdate)(nil),        // 9: service_layer.SLSrtePathComputeReq.SLSrtePathUpdate
	(*SLSrtePathComputeReq_SLSrtePathWithdraw)(nil),      // 10: service_layer.SLSrtePathComputeReq.SLSrtePathWithdraw
	(*SLSrtePathComputeRes_SLSrteDynamicPathResult)(nil), // 11: service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult
	(*SLSrtePathComputeRes_SLSrtePathError)(nil),         // 12: service_layer.SLSrtePathComputeRes.SLSrtePathError
	(*ConstraintSet_PathDiversity)(nil),                  // 13: service_layer.ConstraintSet.PathDiversity
	(*SLSrPolicyKey)(nil),                                // 14: service_layer.SLSrPolicyKey
	(*SLSrCandidatePathKey)(nil),                         // 15: service_layer.SLSrCandidatePathKey
	(SLSrMetricType)(0),                                  // 16: service_layer.SLSrMetricType
	(*SLSrSegmentList)(nil),                              // 17: service_layer.SLSrSegmentList
	(*SLSrAffinities)(nil),                               // 18: service_layer.SLSrAffinities
	(*SLIpAddress)(nil),                                  // 19: service_layer.SLIpAddress
	(SLSrDataplane)(0),                                   // 20: service_layer.SLSrDataplane
	(SLSrDiversityLevel)(0),                              // 21: service_layer.SLSrDiversityLevel
	(*SLErrorStatus)(nil),                                // 22: service_layer.SLErrorStatus
}
var file_sl_srte_pcalc_stateful_proto_depIdxs = []int32{
	2,  // 0: service_layer.SLSrtePathComputeReqs.requests:type_name -> service_layer.SLSrtePathComputeReq
	3,  // 1: service_layer.SLSrtePathComputeRsps.responses:type_name -> service_layer.SLSrtePathComputeRes
	14, // 2: service_layer.SLSrtePathComputeReq.policy_key:type_name -> service_layer.SLSrPolicyKey
	15, // 3: service_layer.SLSrtePathComputeReq.candidate_path_key:type_name -> service_layer.SLSrCandidatePathKey
	8,  // 4: service_layer.SLSrtePathComputeReq.init:type_name -> service_layer.SLSrtePathComputeReq.SLSrtePathInit
	9,  // 5: service_layer.SLSrtePathComputeReq.update:type_name -> service_layer.SLSrtePathComputeReq.SLSrtePathUpdate
	10, // 6: service_layer.SLSrtePathComputeReq.withdraw:type_name -> service_layer.SLSrtePathComputeReq.SLSrtePathWithdraw
	14, // 7: service_layer.SLSrtePathComputeRes.policy_key:type_name -> service_layer.SLSrPolicyKey
	15, // 8: service_layer.SLSrtePathComputeRes.candidate_path_key:type_name -> service_layer.SLSrCandidatePathKey
	11, // 9: service_layer.SLSrtePathComputeRes.path_result:type_name -> service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult
	12, // 10: service_layer.SLSrtePathComputeRes.error:type_name -> service_layer.SLSrtePathComputeRes.SLSrtePathError
	16, // 11: service_layer.SLSrtePathAttrDynamic.o_metric:type_name -> service_layer.SLSrMetricType
	6,  // 12: service_layer.SLSrtePathAttrDynamic.constraints:type_name -> service_layer.ConstraintSet
	17, // 13: service_layer.SLSrtePathAttrExplicit.segment_lists:type_name -> service_layer.SLSrSegmentList
	6,  // 14: service_layer.SLSrtePathAttrExplicit.constraints:type_name -> service_layer.ConstraintSet
	18, // 15: service_layer.ConstraintSet.affinities:type_name -> service_layer.SLSrAffinities
	19, // 16: service_layer.ConstraintSet.ip_exclude:type_name -> service_layer.SLIpAddress
	13, // 17: service_layer.ConstraintSet.path_diversity:type_name -> service_layer.ConstraintSet.PathDiversity
	7,  // 18: service_layer.ConstraintSet.corouted_association:type_name -> service_layer.AssociationGroup
	20, // 19: service_layer.SLSrtePathComputeReq.SLSrtePathInit.dataplane:type_name -> service_layer.SLSrDataplane
	4,  // 20: service_layer.SLSrtePathComputeReq.SLSrtePathInit.dynamic:type_name -> service_layer.SLSrtePathAttrDynamic
	5,  // 21: service_layer.SLSrtePathComputeReq.SLSrtePathInit.explicit:type_name -> service_layer.SLSrtePathAttrExplicit
	4,  // 22: service_layer.SLSrtePathComputeReq.SLSrtePathUpdate.dynamic:type_name -> service_layer.SLSrtePathAttrDynamic
	5,  // 23: service_layer.SLSrtePathComputeReq.SLSrtePathUpdate.explicit:type_name -> service_layer.SLSrtePathAttrExplicit
	17, // 24: service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult.segment_lists:type_name -> service_layer.SLSrSegmentList
	21, // 25: service_layer.SLSrtePathComputeRes.SLSrteDynamicPathResult.effective_diversity_level:type_name -> service_layer.SLSrDiversityLevel
	22, // 26: service_layer.SLSrtePathComputeRes.SLSrtePathError.type:type_name -> service_layer.SLErrorStatus
	7,  // 27: service_layer.ConstraintSet.PathDiversity.association:type_name -> service_layer.AssociationGroup
	21, // 28: service_layer.ConstraintSet.PathDiversity.diversity_level:type_name -> service_layer.SLSrDiversityLevel
	21, // 29: service_layer.ConstraintSet.PathDiversity.min_diversity_level:type_name -> service_layer.SLSrDiversityLevel
	0,  // 30: service_layer.SLSrteCalcStateful.SLSrtePathCompute:input_type -> service_layer.SLSrtePathComputeReqs
	1,  // 31: service_layer.SLSrteCalcStateful.SLSrtePathCompute:output_type -> service_layer.SLSrtePathComputeRsps
	31, // [31:32] is the sub-list for method output_type
	30, // [30:31] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_sl_srte_pcalc_stateful_proto_init() }
func file_sl_srte_pcalc_stateful_proto_init() {
	if File_sl_srte_pcalc_stateful_proto != nil {
		return
	}
	file_sl_common_types_proto_init()
	file_sl_sr_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sl_srte_pcalc_stateful_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrtePathComputeReqs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_srte_pcalc_stateful_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrtePathComputeRsps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_srte_pcalc_stateful_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrtePathComputeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_srte_pcalc_stateful_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrtePathComputeRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_srte_pcalc_stateful_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrtePathAttrDynamic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_srte_pcalc_stateful_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrtePathAttrExplicit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_srte_pcalc_stateful_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstraintSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_srte_pcalc_stateful_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssociationGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_srte_pcalc_stateful_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrtePathComputeReq_SLSrtePathInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_srte_pcalc_stateful_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrtePathComputeReq_SLSrtePathUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_srte_pcalc_stateful_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrtePathComputeReq_SLSrtePathWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_srte_pcalc_stateful_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrtePathComputeRes_SLSrteDynamicPathResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_srte_pcalc_stateful_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrtePathComputeRes_SLSrtePathError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_srte_pcalc_stateful_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstraintSet_PathDiversity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sl_srte_pcalc_stateful_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SLSrtePathComputeReq_Init)(nil),
		(*SLSrtePathComputeReq_Update)(nil),
		(*SLSrtePathComputeReq_Withdraw)(nil),
	}
	file_sl_srte_pcalc_stateful_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*SLSrtePathComputeRes_PathResult)(nil),
		(*SLSrtePathComputeRes_Error)(nil),
	}
	file_sl_srte_pcalc_stateful_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_sl_srte_pcalc_stateful_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*SLSrtePathComputeReq_SLSrtePathInit_Dynamic)(nil),
		(*SLSrtePathComputeReq_SLSrtePathInit_Explicit)(nil),
	}
	file_sl_srte_pcalc_stateful_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*SLSrtePathComputeReq_SLSrtePathUpdate_Dynamic)(nil),
		(*SLSrtePathComputeReq_SLSrtePathUpdate_Explicit)(nil),
	}
	file_sl_srte_pcalc_stateful_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_sl_srte_pcalc_stateful_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sl_srte_pcalc_stateful_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sl_srte_pcalc_stateful_proto_goTypes,
		DependencyIndexes: file_sl_srte_pcalc_stateful_proto_depIdxs,
		MessageInfos:      file_sl_srte_pcalc_stateful_proto_msgTypes,
	}.Build()
	File_sl_srte_pcalc_stateful_proto = out.File
	file_sl_srte_pcalc_stateful_proto_rawDesc = nil
	file_sl_srte_pcalc_stateful_proto_goTypes = nil
	file_sl_srte_pcalc_stateful_proto_depIdxs = nil
}
