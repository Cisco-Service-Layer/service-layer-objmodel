// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.3
// source: sl_srte_pcalc_stateful.proto

package service_layer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SLSrteCalcStatefulClient is the client API for SLSrteCalcStateful service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SLSrteCalcStatefulClient interface {
	// Opens a bidirectional streaming channel to initiate, manage, and serve
	// stateful path calculation requests.<br><br>
	//
	// A single `PathCompute` channel can support any number of path requests and
	// it is recommended that a client maintains only one channel per server that
	// it is connected to.<br><br>
	//
	// The client uses this channel to initiate new path calculation requests,
	// update the attributes (e.g., optimization metric or constraints) of an
	// active request, and withdraw obsolete ones. The client must maintain the
	// channel open as long as it requires stateful path calculation service from
	// the server.<br><br>
	//
	// The server uses this channel to respond to the active path calculation
	// requests of the client. The server sends a path response after receiving a
	// new path calculation request from the client, an update to an existing
	// request, or after a routing event in the network required a modification
	// of the path. The server is responsible for monitoring the network topology
	// and providing updated responses to the active path requests such that the
	// response continuously meets the requirements of the path request.<br><br>
	//
	// When the channel is closed, the server marks any active path request (that
	// was managed through this channel) as *stale* and starts a timer. Another
	// client may claim ownership of a stale path request in a new or existing
	// channel. When the timer expires, any stale path request that was not
	// claimed by another client is deleted.
	SLSrtePathCompute(ctx context.Context, opts ...grpc.CallOption) (SLSrteCalcStateful_SLSrtePathComputeClient, error)
}

type sLSrteCalcStatefulClient struct {
	cc grpc.ClientConnInterface
}

func NewSLSrteCalcStatefulClient(cc grpc.ClientConnInterface) SLSrteCalcStatefulClient {
	return &sLSrteCalcStatefulClient{cc}
}

func (c *sLSrteCalcStatefulClient) SLSrtePathCompute(ctx context.Context, opts ...grpc.CallOption) (SLSrteCalcStateful_SLSrtePathComputeClient, error) {
	stream, err := c.cc.NewStream(ctx, &SLSrteCalcStateful_ServiceDesc.Streams[0], "/service_layer.SLSrteCalcStateful/SLSrtePathCompute", opts...)
	if err != nil {
		return nil, err
	}
	x := &sLSrteCalcStatefulSLSrtePathComputeClient{stream}
	return x, nil
}

type SLSrteCalcStateful_SLSrtePathComputeClient interface {
	Send(*SLSrtePathComputeRequests) error
	Recv() (*SLSrtePathComputeResponses, error)
	grpc.ClientStream
}

type sLSrteCalcStatefulSLSrtePathComputeClient struct {
	grpc.ClientStream
}

func (x *sLSrteCalcStatefulSLSrtePathComputeClient) Send(m *SLSrtePathComputeRequests) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sLSrteCalcStatefulSLSrtePathComputeClient) Recv() (*SLSrtePathComputeResponses, error) {
	m := new(SLSrtePathComputeResponses)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SLSrteCalcStatefulServer is the server API for SLSrteCalcStateful service.
// All implementations must embed UnimplementedSLSrteCalcStatefulServer
// for forward compatibility
type SLSrteCalcStatefulServer interface {
	// Opens a bidirectional streaming channel to initiate, manage, and serve
	// stateful path calculation requests.<br><br>
	//
	// A single `PathCompute` channel can support any number of path requests and
	// it is recommended that a client maintains only one channel per server that
	// it is connected to.<br><br>
	//
	// The client uses this channel to initiate new path calculation requests,
	// update the attributes (e.g., optimization metric or constraints) of an
	// active request, and withdraw obsolete ones. The client must maintain the
	// channel open as long as it requires stateful path calculation service from
	// the server.<br><br>
	//
	// The server uses this channel to respond to the active path calculation
	// requests of the client. The server sends a path response after receiving a
	// new path calculation request from the client, an update to an existing
	// request, or after a routing event in the network required a modification
	// of the path. The server is responsible for monitoring the network topology
	// and providing updated responses to the active path requests such that the
	// response continuously meets the requirements of the path request.<br><br>
	//
	// When the channel is closed, the server marks any active path request (that
	// was managed through this channel) as *stale* and starts a timer. Another
	// client may claim ownership of a stale path request in a new or existing
	// channel. When the timer expires, any stale path request that was not
	// claimed by another client is deleted.
	SLSrtePathCompute(SLSrteCalcStateful_SLSrtePathComputeServer) error
	mustEmbedUnimplementedSLSrteCalcStatefulServer()
}

// UnimplementedSLSrteCalcStatefulServer must be embedded to have forward compatible implementations.
type UnimplementedSLSrteCalcStatefulServer struct {
}

func (UnimplementedSLSrteCalcStatefulServer) SLSrtePathCompute(SLSrteCalcStateful_SLSrtePathComputeServer) error {
	return status.Errorf(codes.Unimplemented, "method SLSrtePathCompute not implemented")
}
func (UnimplementedSLSrteCalcStatefulServer) mustEmbedUnimplementedSLSrteCalcStatefulServer() {}

// UnsafeSLSrteCalcStatefulServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SLSrteCalcStatefulServer will
// result in compilation errors.
type UnsafeSLSrteCalcStatefulServer interface {
	mustEmbedUnimplementedSLSrteCalcStatefulServer()
}

func RegisterSLSrteCalcStatefulServer(s grpc.ServiceRegistrar, srv SLSrteCalcStatefulServer) {
	s.RegisterService(&SLSrteCalcStateful_ServiceDesc, srv)
}

func _SLSrteCalcStateful_SLSrtePathCompute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SLSrteCalcStatefulServer).SLSrtePathCompute(&sLSrteCalcStatefulSLSrtePathComputeServer{stream})
}

type SLSrteCalcStateful_SLSrtePathComputeServer interface {
	Send(*SLSrtePathComputeResponses) error
	Recv() (*SLSrtePathComputeRequests, error)
	grpc.ServerStream
}

type sLSrteCalcStatefulSLSrtePathComputeServer struct {
	grpc.ServerStream
}

func (x *sLSrteCalcStatefulSLSrtePathComputeServer) Send(m *SLSrtePathComputeResponses) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sLSrteCalcStatefulSLSrtePathComputeServer) Recv() (*SLSrtePathComputeRequests, error) {
	m := new(SLSrtePathComputeRequests)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SLSrteCalcStateful_ServiceDesc is the grpc.ServiceDesc for SLSrteCalcStateful service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SLSrteCalcStateful_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service_layer.SLSrteCalcStateful",
	HandlerType: (*SLSrteCalcStatefulServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SLSrtePathCompute",
			Handler:       _SLSrteCalcStateful_SLSrtePathCompute_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sl_srte_pcalc_stateful.proto",
}
