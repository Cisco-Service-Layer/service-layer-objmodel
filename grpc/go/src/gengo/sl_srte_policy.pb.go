// @file
// @brief Proto file for Segment-routing traffic-eng (SRTE) Policy RPCs.
// Declares calls for adding, deleting, updating the SRTE policies.
// The GPB data model should reflect the model from the SRTE policy
// RFC https://datatracker.ietf.org/doc/rfc9256/.
//
// ----------------------------------------------------------------
//  Copyright (c) 2024 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.3
// source: sl_srte_policy.proto

package service_layer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Binding SID allocation mode
type SLSrBindingSIDAllocationMode int32

const (
	// Explicitly specified BSID
	SLSrBindingSIDAllocationMode_BSID_EXPLICIT SLSrBindingSIDAllocationMode = 0
	// Dynamically allocated BSID
	SLSrBindingSIDAllocationMode_BSID_DYNAMIC SLSrBindingSIDAllocationMode = 1
)

// Enum value maps for SLSrBindingSIDAllocationMode.
var (
	SLSrBindingSIDAllocationMode_name = map[int32]string{
		0: "BSID_EXPLICIT",
		1: "BSID_DYNAMIC",
	}
	SLSrBindingSIDAllocationMode_value = map[string]int32{
		"BSID_EXPLICIT": 0,
		"BSID_DYNAMIC":  1,
	}
)

func (x SLSrBindingSIDAllocationMode) Enum() *SLSrBindingSIDAllocationMode {
	p := new(SLSrBindingSIDAllocationMode)
	*p = x
	return p
}

func (x SLSrBindingSIDAllocationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLSrBindingSIDAllocationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_srte_policy_proto_enumTypes[0].Descriptor()
}

func (SLSrBindingSIDAllocationMode) Type() protoreflect.EnumType {
	return &file_sl_srte_policy_proto_enumTypes[0]
}

func (x SLSrBindingSIDAllocationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLSrBindingSIDAllocationMode.Descriptor instead.
func (SLSrBindingSIDAllocationMode) EnumDescriptor() ([]byte, []int) {
	return file_sl_srte_policy_proto_rawDescGZIP(), []int{0}
}

type SLSrConstraints_SegmentConstraints_ProtectionType int32

const (
	// Protected segments are preferred over unprotected ones.
	SLSrConstraints_SegmentConstraints_PROTECTED_PREFERRED SLSrConstraints_SegmentConstraints_ProtectionType = 0
	// Segment list is made only of protected (i.e., FRR-protected) segments
	SLSrConstraints_SegmentConstraints_PROTECTED_ONLY SLSrConstraints_SegmentConstraints_ProtectionType = 1
	// Unprotected segments are preferred over protected ones.
	SLSrConstraints_SegmentConstraints_UNPROTECTED_PREFERRED SLSrConstraints_SegmentConstraints_ProtectionType = 2
	// Segment list is made only of unprotected (i.e., non FRR-protected) segments
	SLSrConstraints_SegmentConstraints_UNPROTECTED_ONLY SLSrConstraints_SegmentConstraints_ProtectionType = 3
)

// Enum value maps for SLSrConstraints_SegmentConstraints_ProtectionType.
var (
	SLSrConstraints_SegmentConstraints_ProtectionType_name = map[int32]string{
		0: "PROTECTED_PREFERRED",
		1: "PROTECTED_ONLY",
		2: "UNPROTECTED_PREFERRED",
		3: "UNPROTECTED_ONLY",
	}
	SLSrConstraints_SegmentConstraints_ProtectionType_value = map[string]int32{
		"PROTECTED_PREFERRED":   0,
		"PROTECTED_ONLY":        1,
		"UNPROTECTED_PREFERRED": 2,
		"UNPROTECTED_ONLY":      3,
	}
)

func (x SLSrConstraints_SegmentConstraints_ProtectionType) Enum() *SLSrConstraints_SegmentConstraints_ProtectionType {
	p := new(SLSrConstraints_SegmentConstraints_ProtectionType)
	*p = x
	return p
}

func (x SLSrConstraints_SegmentConstraints_ProtectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SLSrConstraints_SegmentConstraints_ProtectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_sl_srte_policy_proto_enumTypes[1].Descriptor()
}

func (SLSrConstraints_SegmentConstraints_ProtectionType) Type() protoreflect.EnumType {
	return &file_sl_srte_policy_proto_enumTypes[1]
}

func (x SLSrConstraints_SegmentConstraints_ProtectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SLSrConstraints_SegmentConstraints_ProtectionType.Descriptor instead.
func (SLSrConstraints_SegmentConstraints_ProtectionType) EnumDescriptor() ([]byte, []int) {
	return file_sl_srte_policy_proto_rawDescGZIP(), []int{1, 0, 0}
}

// Candidate path with explicitly defined set/s of segment-lists
type SLSrExplicitCP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of weighted segment lists in the explicit candidate path.
	SegmentList []*SLSrSegmentList `protobuf:"bytes,1,rep,name=segmentList,proto3" json:"segmentList,omitempty"`
}

func (x *SLSrExplicitCP) Reset() {
	*x = SLSrExplicitCP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrExplicitCP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrExplicitCP) ProtoMessage() {}

func (x *SLSrExplicitCP) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrExplicitCP.ProtoReflect.Descriptor instead.
func (*SLSrExplicitCP) Descriptor() ([]byte, []int) {
	return file_sl_srte_policy_proto_rawDescGZIP(), []int{0}
}

func (x *SLSrExplicitCP) GetSegmentList() []*SLSrSegmentList {
	if x != nil {
		return x.SegmentList
	}
	return nil
}

// A set of constraints for an SR path.
type SLSrConstraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Extended Administrative Groups.
	Affinities *SLSrAffinities `protobuf:"bytes,1,opt,name=affinities,proto3" json:"affinities,omitempty"`
	// Maximum metric that is allowed for given metric type
	MetricBounds       *SLSrMetricBounds                   `protobuf:"bytes,2,opt,name=metricBounds,proto3" json:"metricBounds,omitempty"`
	SegmentConstraints *SLSrConstraints_SegmentConstraints `protobuf:"bytes,3,opt,name=segment_constraints,json=segmentConstraints,proto3" json:"segment_constraints,omitempty"`
}

func (x *SLSrConstraints) Reset() {
	*x = SLSrConstraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrConstraints) ProtoMessage() {}

func (x *SLSrConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrConstraints.ProtoReflect.Descriptor instead.
func (*SLSrConstraints) Descriptor() ([]byte, []int) {
	return file_sl_srte_policy_proto_rawDescGZIP(), []int{1}
}

func (x *SLSrConstraints) GetAffinities() *SLSrAffinities {
	if x != nil {
		return x.Affinities
	}
	return nil
}

func (x *SLSrConstraints) GetMetricBounds() *SLSrMetricBounds {
	if x != nil {
		return x.MetricBounds
	}
	return nil
}

func (x *SLSrConstraints) GetSegmentConstraints() *SLSrConstraints_SegmentConstraints {
	if x != nil {
		return x.SegmentConstraints
	}
	return nil
}

// The specific attributes for instantiating a dynamic path request.
type SLSrDynamicCP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The optimization metric of the dynamic candidate path.
	//
	// The objective function of the optimization problem is to minimize the
	// accumulated value of this additive link metric along the path.
	Ometric SLSrMetricType `protobuf:"varint,1,opt,name=ometric,proto3,enum=service_layer.SLSrMetricType" json:"ometric,omitempty"`
	// The set of constraints that the candidate path must satisfy.
	Constraints *SLSrConstraints `protobuf:"bytes,2,opt,name=constraints,proto3" json:"constraints,omitempty"`
	// The margin by which two paths with similar metric-type
	// would be considered equal
	MetricMargin *SLSrMetricMargin `protobuf:"bytes,3,opt,name=metricMargin,proto3" json:"metricMargin,omitempty"`
	// This flag is to turn on path computation delegation.
	// When this flag is set, the router delegates to whatever
	// path computer that is configured/used by the router.
	Delegate bool `protobuf:"varint,4,opt,name=delegate,proto3" json:"delegate,omitempty"`
}

func (x *SLSrDynamicCP) Reset() {
	*x = SLSrDynamicCP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrDynamicCP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrDynamicCP) ProtoMessage() {}

func (x *SLSrDynamicCP) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrDynamicCP.ProtoReflect.Descriptor instead.
func (*SLSrDynamicCP) Descriptor() ([]byte, []int) {
	return file_sl_srte_policy_proto_rawDescGZIP(), []int{2}
}

func (x *SLSrDynamicCP) GetOmetric() SLSrMetricType {
	if x != nil {
		return x.Ometric
	}
	return SLSrMetricType_METRIC_TYPE_UNSPECIFIED
}

func (x *SLSrDynamicCP) GetConstraints() *SLSrConstraints {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *SLSrDynamicCP) GetMetricMargin() *SLSrMetricMargin {
	if x != nil {
		return x.MetricMargin
	}
	return nil
}

func (x *SLSrDynamicCP) GetDelegate() bool {
	if x != nil {
		return x.Delegate
	}
	return false
}

// SR Candidate Path in the context of an SR Policy, as
// defined in [section 2.2 of RFC 9256]
// (https://www.rfc-editor.org/rfc/rfc9256.html#section-2.2).
type SLSrCandidatePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique candidate path identifier in the context of an SR policy.
	//
	// The tuple (`policy_key`, `candidate_path_key`) is a globally unique
	// identifier of the candidate path.
	Key *SLSrCandidatePathKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Candidate path name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The Preference of the candidate path is used to select the
	// best candidate path for an SR Policy
	Preference uint32 `protobuf:"varint,3,opt,name=preference,proto3" json:"preference,omitempty"`
	// The segment routing dataplane.
	Dataplane SLSrDataplane `protobuf:"varint,4,opt,name=dataplane,proto3,enum=service_layer.SLSrDataplane" json:"dataplane,omitempty"`
	// Types that are assignable to CP:
	//
	//	*SLSrCandidatePath_Dynamic
	//	*SLSrCandidatePath_Explicit
	CP isSLSrCandidatePath_CP `protobuf_oneof:"CP"`
}

func (x *SLSrCandidatePath) Reset() {
	*x = SLSrCandidatePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrCandidatePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrCandidatePath) ProtoMessage() {}

func (x *SLSrCandidatePath) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrCandidatePath.ProtoReflect.Descriptor instead.
func (*SLSrCandidatePath) Descriptor() ([]byte, []int) {
	return file_sl_srte_policy_proto_rawDescGZIP(), []int{3}
}

func (x *SLSrCandidatePath) GetKey() *SLSrCandidatePathKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SLSrCandidatePath) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SLSrCandidatePath) GetPreference() uint32 {
	if x != nil {
		return x.Preference
	}
	return 0
}

func (x *SLSrCandidatePath) GetDataplane() SLSrDataplane {
	if x != nil {
		return x.Dataplane
	}
	return SLSrDataplane_SR_DATAPLANE_UNSPECIFIED
}

func (m *SLSrCandidatePath) GetCP() isSLSrCandidatePath_CP {
	if m != nil {
		return m.CP
	}
	return nil
}

func (x *SLSrCandidatePath) GetDynamic() *SLSrDynamicCP {
	if x, ok := x.GetCP().(*SLSrCandidatePath_Dynamic); ok {
		return x.Dynamic
	}
	return nil
}

func (x *SLSrCandidatePath) GetExplicit() *SLSrExplicitCP {
	if x, ok := x.GetCP().(*SLSrCandidatePath_Explicit); ok {
		return x.Explicit
	}
	return nil
}

type isSLSrCandidatePath_CP interface {
	isSLSrCandidatePath_CP()
}

type SLSrCandidatePath_Dynamic struct {
	// (https://www.rfc-editor.org/rfc/rfc9256.html#section-5.2).
	Dynamic *SLSrDynamicCP `protobuf:"bytes,5,opt,name=dynamic,proto3,oneof"`
}

type SLSrCandidatePath_Explicit struct {
	// (https://www.rfc-editor.org/rfc/rfc9256.html#section-5.1).
	Explicit *SLSrExplicitCP `protobuf:"bytes,6,opt,name=explicit,proto3,oneof"`
}

func (*SLSrCandidatePath_Dynamic) isSLSrCandidatePath_CP() {}

func (*SLSrCandidatePath_Explicit) isSLSrCandidatePath_CP() {}

// SRv6 Binding SID properties
type SLSrv6BindingSID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Locator name used to allocate SRv6 binding SID
	LocatorName string `protobuf:"bytes,1,opt,name=locatorName,proto3" json:"locatorName,omitempty"`
	Behavior    uint32 `protobuf:"varint,2,opt,name=behavior,proto3" json:"behavior,omitempty"`
}

func (x *SLSrv6BindingSID) Reset() {
	*x = SLSrv6BindingSID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrv6BindingSID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrv6BindingSID) ProtoMessage() {}

func (x *SLSrv6BindingSID) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrv6BindingSID.ProtoReflect.Descriptor instead.
func (*SLSrv6BindingSID) Descriptor() ([]byte, []int) {
	return file_sl_srte_policy_proto_rawDescGZIP(), []int{4}
}

func (x *SLSrv6BindingSID) GetLocatorName() string {
	if x != nil {
		return x.LocatorName
	}
	return ""
}

func (x *SLSrv6BindingSID) GetBehavior() uint32 {
	if x != nil {
		return x.Behavior
	}
	return 0
}

// (https://www.rfc-editor.org/rfc/rfc9256.html#section-6.1).
type SLSrBindingSID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Binding SID allocation mode, explicit or dynamic
	BindingSIDAllocation SLSrBindingSIDAllocationMode `protobuf:"varint,1,opt,name=bindingSIDAllocation,proto3,enum=service_layer.SLSrBindingSIDAllocationMode" json:"bindingSIDAllocation,omitempty"`
	// Expected to be filled when mode is explicit and dataplane is MPLS
	MplsBindingSID uint32 `protobuf:"varint,2,opt,name=mplsBindingSID,proto3" json:"mplsBindingSID,omitempty"`
	// SRv6 binding SID, expected when dataplane is SRv6
	Srv6BindingSID *SLSrv6BindingSID `protobuf:"bytes,3,opt,name=srv6BindingSID,proto3" json:"srv6BindingSID,omitempty"`
}

func (x *SLSrBindingSID) Reset() {
	*x = SLSrBindingSID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrBindingSID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrBindingSID) ProtoMessage() {}

func (x *SLSrBindingSID) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrBindingSID.ProtoReflect.Descriptor instead.
func (*SLSrBindingSID) Descriptor() ([]byte, []int) {
	return file_sl_srte_policy_proto_rawDescGZIP(), []int{5}
}

func (x *SLSrBindingSID) GetBindingSIDAllocation() SLSrBindingSIDAllocationMode {
	if x != nil {
		return x.BindingSIDAllocation
	}
	return SLSrBindingSIDAllocationMode_BSID_EXPLICIT
}

func (x *SLSrBindingSID) GetMplsBindingSID() uint32 {
	if x != nil {
		return x.MplsBindingSID
	}
	return 0
}

func (x *SLSrBindingSID) GetSrv6BindingSID() *SLSrv6BindingSID {
	if x != nil {
		return x.Srv6BindingSID
	}
	return nil
}

// (https://www.rfc-editor.org/rfc/rfc9256.html#section-2).
type SLSrPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique SR policy identifier.
	Key             *SLSrPolicyKey       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	TransitEligible bool                 `protobuf:"varint,2,opt,name=transitEligible,proto3" json:"transitEligible,omitempty"`
	CPs             []*SLSrCandidatePath `protobuf:"bytes,3,rep,name=CPs,proto3" json:"CPs,omitempty"`
	Bsid            *SLSrBindingSID      `protobuf:"bytes,4,opt,name=bsid,proto3" json:"bsid,omitempty"`
	// ID of the profile with which policy can be assiciated with,
	// a non-zero value.
	ProfileID uint32 `protobuf:"varint,5,opt,name=profileID,proto3" json:"profileID,omitempty"`
}

func (x *SLSrPolicy) Reset() {
	*x = SLSrPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrPolicy) ProtoMessage() {}

func (x *SLSrPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrPolicy.ProtoReflect.Descriptor instead.
func (*SLSrPolicy) Descriptor() ([]byte, []int) {
	return file_sl_srte_policy_proto_rawDescGZIP(), []int{6}
}

func (x *SLSrPolicy) GetKey() *SLSrPolicyKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SLSrPolicy) GetTransitEligible() bool {
	if x != nil {
		return x.TransitEligible
	}
	return false
}

func (x *SLSrPolicy) GetCPs() []*SLSrCandidatePath {
	if x != nil {
		return x.CPs
	}
	return nil
}

func (x *SLSrPolicy) GetBsid() *SLSrBindingSID {
	if x != nil {
		return x.Bsid
	}
	return nil
}

func (x *SLSrPolicy) GetProfileID() uint32 {
	if x != nil {
		return x.ProfileID
	}
	return 0
}

// Set of Policies to acted on
type SLSrPolicyMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies []*SLSrPolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *SLSrPolicyMsg) Reset() {
	*x = SLSrPolicyMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrPolicyMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrPolicyMsg) ProtoMessage() {}

func (x *SLSrPolicyMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrPolicyMsg.ProtoReflect.Descriptor instead.
func (*SLSrPolicyMsg) Descriptor() ([]byte, []int) {
	return file_sl_srte_policy_proto_rawDescGZIP(), []int{7}
}

func (x *SLSrPolicyMsg) GetPolicies() []*SLSrPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

// RPC response
// Indicates receipt of the request successfully on the server. To check the state of
// the instantiated policy, controller is expected to subscribe to SLBgplsTopo service.
type SLSrPolicyOpRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of responses corresponding to the policies in the request
	Responses []*SLSrPolicyOpRsp_PolicyRsp `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *SLSrPolicyOpRsp) Reset() {
	*x = SLSrPolicyOpRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrPolicyOpRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrPolicyOpRsp) ProtoMessage() {}

func (x *SLSrPolicyOpRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrPolicyOpRsp.ProtoReflect.Descriptor instead.
func (*SLSrPolicyOpRsp) Descriptor() ([]byte, []int) {
	return file_sl_srte_policy_proto_rawDescGZIP(), []int{8}
}

func (x *SLSrPolicyOpRsp) GetResponses() []*SLSrPolicyOpRsp_PolicyRsp {
	if x != nil {
		return x.Responses
	}
	return nil
}

// ======================== Segment-List Constraints ========================
// Constraints that determine the set of segments available to enforce the
// path.
type SLSrConstraints_SegmentConstraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protection SLSrConstraints_SegmentConstraints_ProtectionType `protobuf:"varint,1,opt,name=protection,proto3,enum=service_layer.SLSrConstraints_SegmentConstraints_ProtectionType" json:"protection,omitempty"`
	Sidalgo    uint32                                            `protobuf:"varint,2,opt,name=sidalgo,proto3" json:"sidalgo,omitempty"`
	// Maximum number of segments in any of the candidate path segment lists.
	//
	// When set to a non-zero value, this attribute replaces the headend MSD
	// obtained from the link-state topology. When set to the default value (0),
	// this attribute is ignored.
	//
	// Note: If the first segment in the segment list can be enforced by setting
	// the outgoing interface on the headend node, it does not count towards this
	// limit.
	MaximumSidDepth uint32 `protobuf:"varint,3,opt,name=maximum_sid_depth,json=maximumSidDepth,proto3" json:"maximum_sid_depth,omitempty"`
}

func (x *SLSrConstraints_SegmentConstraints) Reset() {
	*x = SLSrConstraints_SegmentConstraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_policy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrConstraints_SegmentConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrConstraints_SegmentConstraints) ProtoMessage() {}

func (x *SLSrConstraints_SegmentConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_policy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrConstraints_SegmentConstraints.ProtoReflect.Descriptor instead.
func (*SLSrConstraints_SegmentConstraints) Descriptor() ([]byte, []int) {
	return file_sl_srte_policy_proto_rawDescGZIP(), []int{1, 0}
}

func (x *SLSrConstraints_SegmentConstraints) GetProtection() SLSrConstraints_SegmentConstraints_ProtectionType {
	if x != nil {
		return x.Protection
	}
	return SLSrConstraints_SegmentConstraints_PROTECTED_PREFERRED
}

func (x *SLSrConstraints_SegmentConstraints) GetSidalgo() uint32 {
	if x != nil {
		return x.Sidalgo
	}
	return 0
}

func (x *SLSrConstraints_SegmentConstraints) GetMaximumSidDepth() uint32 {
	if x != nil {
		return x.MaximumSidDepth
	}
	return 0
}

type SLSrPolicyOpRsp_PolicyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// return code for the request.
	ReturnCode *SLErrorStatus `protobuf:"bytes,1,opt,name=returnCode,proto3" json:"returnCode,omitempty"`
	// SR policy identifier from the request.
	Key *SLSrPolicyKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SLSrPolicyOpRsp_PolicyRsp) Reset() {
	*x = SLSrPolicyOpRsp_PolicyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sl_srte_policy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLSrPolicyOpRsp_PolicyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLSrPolicyOpRsp_PolicyRsp) ProtoMessage() {}

func (x *SLSrPolicyOpRsp_PolicyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_sl_srte_policy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLSrPolicyOpRsp_PolicyRsp.ProtoReflect.Descriptor instead.
func (*SLSrPolicyOpRsp_PolicyRsp) Descriptor() ([]byte, []int) {
	return file_sl_srte_policy_proto_rawDescGZIP(), []int{8, 0}
}

func (x *SLSrPolicyOpRsp_PolicyRsp) GetReturnCode() *SLErrorStatus {
	if x != nil {
		return x.ReturnCode
	}
	return nil
}

func (x *SLSrPolicyOpRsp_PolicyRsp) GetKey() *SLSrPolicyKey {
	if x != nil {
		return x.Key
	}
	return nil
}

var File_sl_srte_policy_proto protoreflect.FileDescriptor

var file_sl_srte_policy_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x6c, 0x5f, 0x73, 0x72, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x1a, 0x15, 0x73, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x73, 0x6c,
	0x5f, 0x73, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x52, 0x0a, 0x0e, 0x53, 0x4c, 0x53, 0x72, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x43, 0x50, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xa8, 0x04, 0x0a, 0x0f, 0x53, 0x4c, 0x53, 0x72, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x61, 0x66, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53,
	0x72, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x66, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x53, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x0c,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x62, 0x0a, 0x13,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x12, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x1a, 0xac, 0x02, 0x0a, 0x12, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x64,
	0x61, 0x6c, 0x67, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x69, 0x64, 0x61,
	0x6c, 0x67, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73,
	0x69, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x69, 0x64, 0x44, 0x65, 0x70, 0x74, 0x68, 0x22,
	0x6e, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x50,
	0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52,
	0x4f, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x55, 0x4e, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x52,
	0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x50,
	0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x22,
	0xeb, 0x01, 0x0a, 0x0d, 0x53, 0x4c, 0x53, 0x72, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43,
	0x50, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x53, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0c,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x22, 0xb7, 0x02,
	0x0a, 0x11, 0x53, 0x4c, 0x53, 0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x53, 0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3a,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x50, 0x48, 0x00, 0x52, 0x07, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x12, 0x3b, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x45, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x43, 0x50, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x42, 0x04, 0x0a, 0x02, 0x43, 0x50, 0x22, 0x50, 0x0a, 0x10, 0x53, 0x4c, 0x53, 0x72, 0x76,
	0x36, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0xe2, 0x01, 0x0a, 0x0e, 0x53, 0x4c,
	0x53, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x49, 0x44, 0x12, 0x5f, 0x0a, 0x14,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x49, 0x44, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x49, 0x44, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x14, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x49, 0x44, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x6d, 0x70, 0x6c, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x70, 0x6c, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x49, 0x44, 0x12, 0x47, 0x0a, 0x0e, 0x73, 0x72, 0x76, 0x36, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x53, 0x72, 0x76, 0x36, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x49, 0x44, 0x52, 0x0e,
	0x73, 0x72, 0x76, 0x36, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x49, 0x44, 0x22, 0xeb,
	0x01, 0x0a, 0x0a, 0x53, 0x4c, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2e, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x45,
	0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x43, 0x50, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x03, 0x43, 0x50, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x62,
	0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x49, 0x44, 0x52, 0x04, 0x62, 0x73, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x22, 0x46, 0x0a, 0x0d,
	0x53, 0x4c, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x35, 0x0a,
	0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x4c, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x0f, 0x53, 0x4c, 0x53, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4f, 0x70, 0x52, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x70, 0x52, 0x73, 0x70, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x73, 0x70, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x1a, 0x79, 0x0a, 0x09, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x73, 0x70, 0x12, 0x3c, 0x0a,
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x2a, 0x43, 0x0a, 0x1c, 0x53,
	0x4c, 0x53, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x49, 0x44, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x42,
	0x53, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x42, 0x53, 0x49, 0x44, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x01,
	0x32, 0xaf, 0x01, 0x0a, 0x0c, 0x53, 0x4c, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x4d, 0x0a, 0x0d, 0x53, 0x4c, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41,
	0x64, 0x64, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x73, 0x67,
	0x1a, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x70, 0x52, 0x73, 0x70,
	0x12, 0x50, 0x0a, 0x10, 0x53, 0x4c, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d,
	0x73, 0x67, 0x1a, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x53, 0x4c, 0x53, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x70, 0x52,
	0x73, 0x70, 0x42, 0x51, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x43, 0x69, 0x73, 0x63, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2d, 0x6f, 0x62, 0x6a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sl_srte_policy_proto_rawDescOnce sync.Once
	file_sl_srte_policy_proto_rawDescData = file_sl_srte_policy_proto_rawDesc
)

func file_sl_srte_policy_proto_rawDescGZIP() []byte {
	file_sl_srte_policy_proto_rawDescOnce.Do(func() {
		file_sl_srte_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_sl_srte_policy_proto_rawDescData)
	})
	return file_sl_srte_policy_proto_rawDescData
}

var file_sl_srte_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_sl_srte_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_sl_srte_policy_proto_goTypes = []interface{}{
	(SLSrBindingSIDAllocationMode)(0),                      // 0: service_layer.SLSrBindingSIDAllocationMode
	(SLSrConstraints_SegmentConstraints_ProtectionType)(0), // 1: service_layer.SLSrConstraints.SegmentConstraints.ProtectionType
	(*SLSrExplicitCP)(nil),                                 // 2: service_layer.SLSrExplicitCP
	(*SLSrConstraints)(nil),                                // 3: service_layer.SLSrConstraints
	(*SLSrDynamicCP)(nil),                                  // 4: service_layer.SLSrDynamicCP
	(*SLSrCandidatePath)(nil),                              // 5: service_layer.SLSrCandidatePath
	(*SLSrv6BindingSID)(nil),                               // 6: service_layer.SLSrv6BindingSID
	(*SLSrBindingSID)(nil),                                 // 7: service_layer.SLSrBindingSID
	(*SLSrPolicy)(nil),                                     // 8: service_layer.SLSrPolicy
	(*SLSrPolicyMsg)(nil),                                  // 9: service_layer.SLSrPolicyMsg
	(*SLSrPolicyOpRsp)(nil),                                // 10: service_layer.SLSrPolicyOpRsp
	(*SLSrConstraints_SegmentConstraints)(nil),             // 11: service_layer.SLSrConstraints.SegmentConstraints
	(*SLSrPolicyOpRsp_PolicyRsp)(nil),                      // 12: service_layer.SLSrPolicyOpRsp.PolicyRsp
	(*SLSrSegmentList)(nil),                                // 13: service_layer.SLSrSegmentList
	(*SLSrAffinities)(nil),                                 // 14: service_layer.SLSrAffinities
	(*SLSrMetricBounds)(nil),                               // 15: service_layer.SLSrMetricBounds
	(SLSrMetricType)(0),                                    // 16: service_layer.SLSrMetricType
	(*SLSrMetricMargin)(nil),                               // 17: service_layer.SLSrMetricMargin
	(*SLSrCandidatePathKey)(nil),                           // 18: service_layer.SLSrCandidatePathKey
	(SLSrDataplane)(0),                                     // 19: service_layer.SLSrDataplane
	(*SLSrPolicyKey)(nil),                                  // 20: service_layer.SLSrPolicyKey
	(*SLErrorStatus)(nil),                                  // 21: service_layer.SLErrorStatus
}
var file_sl_srte_policy_proto_depIdxs = []int32{
	13, // 0: service_layer.SLSrExplicitCP.segmentList:type_name -> service_layer.SLSrSegmentList
	14, // 1: service_layer.SLSrConstraints.affinities:type_name -> service_layer.SLSrAffinities
	15, // 2: service_layer.SLSrConstraints.metricBounds:type_name -> service_layer.SLSrMetricBounds
	11, // 3: service_layer.SLSrConstraints.segment_constraints:type_name -> service_layer.SLSrConstraints.SegmentConstraints
	16, // 4: service_layer.SLSrDynamicCP.ometric:type_name -> service_layer.SLSrMetricType
	3,  // 5: service_layer.SLSrDynamicCP.constraints:type_name -> service_layer.SLSrConstraints
	17, // 6: service_layer.SLSrDynamicCP.metricMargin:type_name -> service_layer.SLSrMetricMargin
	18, // 7: service_layer.SLSrCandidatePath.key:type_name -> service_layer.SLSrCandidatePathKey
	19, // 8: service_layer.SLSrCandidatePath.dataplane:type_name -> service_layer.SLSrDataplane
	4,  // 9: service_layer.SLSrCandidatePath.dynamic:type_name -> service_layer.SLSrDynamicCP
	2,  // 10: service_layer.SLSrCandidatePath.explicit:type_name -> service_layer.SLSrExplicitCP
	0,  // 11: service_layer.SLSrBindingSID.bindingSIDAllocation:type_name -> service_layer.SLSrBindingSIDAllocationMode
	6,  // 12: service_layer.SLSrBindingSID.srv6BindingSID:type_name -> service_layer.SLSrv6BindingSID
	20, // 13: service_layer.SLSrPolicy.key:type_name -> service_layer.SLSrPolicyKey
	5,  // 14: service_layer.SLSrPolicy.CPs:type_name -> service_layer.SLSrCandidatePath
	7,  // 15: service_layer.SLSrPolicy.bsid:type_name -> service_layer.SLSrBindingSID
	8,  // 16: service_layer.SLSrPolicyMsg.policies:type_name -> service_layer.SLSrPolicy
	12, // 17: service_layer.SLSrPolicyOpRsp.responses:type_name -> service_layer.SLSrPolicyOpRsp.PolicyRsp
	1,  // 18: service_layer.SLSrConstraints.SegmentConstraints.protection:type_name -> service_layer.SLSrConstraints.SegmentConstraints.ProtectionType
	21, // 19: service_layer.SLSrPolicyOpRsp.PolicyRsp.returnCode:type_name -> service_layer.SLErrorStatus
	20, // 20: service_layer.SLSrPolicyOpRsp.PolicyRsp.key:type_name -> service_layer.SLSrPolicyKey
	9,  // 21: service_layer.SLSrtePolicy.SLSrPolicyAdd:input_type -> service_layer.SLSrPolicyMsg
	9,  // 22: service_layer.SLSrtePolicy.SLSrPolicyDelete:input_type -> service_layer.SLSrPolicyMsg
	10, // 23: service_layer.SLSrtePolicy.SLSrPolicyAdd:output_type -> service_layer.SLSrPolicyOpRsp
	10, // 24: service_layer.SLSrtePolicy.SLSrPolicyDelete:output_type -> service_layer.SLSrPolicyOpRsp
	23, // [23:25] is the sub-list for method output_type
	21, // [21:23] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_sl_srte_policy_proto_init() }
func file_sl_srte_policy_proto_init() {
	if File_sl_srte_policy_proto != nil {
		return
	}
	file_sl_common_types_proto_init()
	file_sl_sr_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sl_srte_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrExplicitCP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_srte_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrConstraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_srte_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrDynamicCP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_srte_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrCandidatePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_srte_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrv6BindingSID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_srte_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrBindingSID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_srte_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_srte_policy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrPolicyMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_srte_policy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrPolicyOpRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_srte_policy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrConstraints_SegmentConstraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sl_srte_policy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLSrPolicyOpRsp_PolicyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sl_srte_policy_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*SLSrCandidatePath_Dynamic)(nil),
		(*SLSrCandidatePath_Explicit)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sl_srte_policy_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sl_srte_policy_proto_goTypes,
		DependencyIndexes: file_sl_srte_policy_proto_depIdxs,
		EnumInfos:         file_sl_srte_policy_proto_enumTypes,
		MessageInfos:      file_sl_srte_policy_proto_msgTypes,
	}.Build()
	File_sl_srte_policy_proto = out.File
	file_sl_srte_policy_proto_rawDesc = nil
	file_sl_srte_policy_proto_goTypes = nil
	file_sl_srte_policy_proto_depIdxs = nil
}
