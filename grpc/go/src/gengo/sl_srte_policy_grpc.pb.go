// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.3
// source: sl_srte_policy.proto

package service_layer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SLSrtePolicyClient is the client API for SLSrtePolicy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SLSrtePolicyClient interface {
	// The SLSrPolicyOp RPC is used to create/update/delete an SR-TE policy based on the
	// specified parameters.
	SLSrPolicyOp(ctx context.Context, opts ...grpc.CallOption) (SLSrtePolicy_SLSrPolicyOpClient, error)
}

type sLSrtePolicyClient struct {
	cc grpc.ClientConnInterface
}

func NewSLSrtePolicyClient(cc grpc.ClientConnInterface) SLSrtePolicyClient {
	return &sLSrtePolicyClient{cc}
}

func (c *sLSrtePolicyClient) SLSrPolicyOp(ctx context.Context, opts ...grpc.CallOption) (SLSrtePolicy_SLSrPolicyOpClient, error) {
	stream, err := c.cc.NewStream(ctx, &SLSrtePolicy_ServiceDesc.Streams[0], "/service_layer.SLSrtePolicy/SLSrPolicyOp", opts...)
	if err != nil {
		return nil, err
	}
	x := &sLSrtePolicySLSrPolicyOpClient{stream}
	return x, nil
}

type SLSrtePolicy_SLSrPolicyOpClient interface {
	Send(*SLSrPolicyMsg) error
	Recv() (*SLSrPolicyRsp, error)
	grpc.ClientStream
}

type sLSrtePolicySLSrPolicyOpClient struct {
	grpc.ClientStream
}

func (x *sLSrtePolicySLSrPolicyOpClient) Send(m *SLSrPolicyMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sLSrtePolicySLSrPolicyOpClient) Recv() (*SLSrPolicyRsp, error) {
	m := new(SLSrPolicyRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SLSrtePolicyServer is the server API for SLSrtePolicy service.
// All implementations must embed UnimplementedSLSrtePolicyServer
// for forward compatibility
type SLSrtePolicyServer interface {
	// The SLSrPolicyOp RPC is used to create/update/delete an SR-TE policy based on the
	// specified parameters.
	SLSrPolicyOp(SLSrtePolicy_SLSrPolicyOpServer) error
	mustEmbedUnimplementedSLSrtePolicyServer()
}

// UnimplementedSLSrtePolicyServer must be embedded to have forward compatible implementations.
type UnimplementedSLSrtePolicyServer struct {
}

func (UnimplementedSLSrtePolicyServer) SLSrPolicyOp(SLSrtePolicy_SLSrPolicyOpServer) error {
	return status.Errorf(codes.Unimplemented, "method SLSrPolicyOp not implemented")
}
func (UnimplementedSLSrtePolicyServer) mustEmbedUnimplementedSLSrtePolicyServer() {}

// UnsafeSLSrtePolicyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SLSrtePolicyServer will
// result in compilation errors.
type UnsafeSLSrtePolicyServer interface {
	mustEmbedUnimplementedSLSrtePolicyServer()
}

func RegisterSLSrtePolicyServer(s grpc.ServiceRegistrar, srv SLSrtePolicyServer) {
	s.RegisterService(&SLSrtePolicy_ServiceDesc, srv)
}

func _SLSrtePolicy_SLSrPolicyOp_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SLSrtePolicyServer).SLSrPolicyOp(&sLSrtePolicySLSrPolicyOpServer{stream})
}

type SLSrtePolicy_SLSrPolicyOpServer interface {
	Send(*SLSrPolicyRsp) error
	Recv() (*SLSrPolicyMsg, error)
	grpc.ServerStream
}

type sLSrtePolicySLSrPolicyOpServer struct {
	grpc.ServerStream
}

func (x *sLSrtePolicySLSrPolicyOpServer) Send(m *SLSrPolicyRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sLSrtePolicySLSrPolicyOpServer) Recv() (*SLSrPolicyMsg, error) {
	m := new(SLSrPolicyMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SLSrtePolicy_ServiceDesc is the grpc.ServiceDesc for SLSrtePolicy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SLSrtePolicy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service_layer.SLSrtePolicy",
	HandlerType: (*SLSrtePolicyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SLSrPolicyOp",
			Handler:       _SLSrtePolicy_SLSrPolicyOp_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sl_srte_policy.proto",
}
