// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.3
// source: sl_srte_policy.proto

package service_layer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SLSrtePolicyClient is the client API for SLSrtePolicy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SLSrtePolicyClient interface {
	// The SLSrPolicyAdd RPC is used to create/update a policy based on the
	// passed parameters.
	SLSrPolicyAdd(ctx context.Context, in *SLSrPolicyMsg, opts ...grpc.CallOption) (*SLSrPolicyOpRsp, error)
	// The SLSrPolicyDelete RPC is used to delete a policy/candidate-paths.
	// If the message only contains the key of the policy, then all the CPs with gRPC
	// originator-protocol are deleted. The policy is also deleted if it has no more CPs.
	// If the message contains the keys of one or more CPs, then only these CPs are
	// deleted and they have to be gRPC CPs.
	// There is no requirement/enforcement for the client to delete the policy/CPs
	// it created.
	SLSrPolicyDelete(ctx context.Context, in *SLSrPolicyMsg, opts ...grpc.CallOption) (*SLSrPolicyOpRsp, error)
}

type sLSrtePolicyClient struct {
	cc grpc.ClientConnInterface
}

func NewSLSrtePolicyClient(cc grpc.ClientConnInterface) SLSrtePolicyClient {
	return &sLSrtePolicyClient{cc}
}

func (c *sLSrtePolicyClient) SLSrPolicyAdd(ctx context.Context, in *SLSrPolicyMsg, opts ...grpc.CallOption) (*SLSrPolicyOpRsp, error) {
	out := new(SLSrPolicyOpRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLSrtePolicy/SLSrPolicyAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLSrtePolicyClient) SLSrPolicyDelete(ctx context.Context, in *SLSrPolicyMsg, opts ...grpc.CallOption) (*SLSrPolicyOpRsp, error) {
	out := new(SLSrPolicyOpRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLSrtePolicy/SLSrPolicyDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SLSrtePolicyServer is the server API for SLSrtePolicy service.
// All implementations must embed UnimplementedSLSrtePolicyServer
// for forward compatibility
type SLSrtePolicyServer interface {
	// The SLSrPolicyAdd RPC is used to create/update a policy based on the
	// passed parameters.
	SLSrPolicyAdd(context.Context, *SLSrPolicyMsg) (*SLSrPolicyOpRsp, error)
	// The SLSrPolicyDelete RPC is used to delete a policy/candidate-paths.
	// If the message only contains the key of the policy, then all the CPs with gRPC
	// originator-protocol are deleted. The policy is also deleted if it has no more CPs.
	// If the message contains the keys of one or more CPs, then only these CPs are
	// deleted and they have to be gRPC CPs.
	// There is no requirement/enforcement for the client to delete the policy/CPs
	// it created.
	SLSrPolicyDelete(context.Context, *SLSrPolicyMsg) (*SLSrPolicyOpRsp, error)
	mustEmbedUnimplementedSLSrtePolicyServer()
}

// UnimplementedSLSrtePolicyServer must be embedded to have forward compatible implementations.
type UnimplementedSLSrtePolicyServer struct {
}

func (UnimplementedSLSrtePolicyServer) SLSrPolicyAdd(context.Context, *SLSrPolicyMsg) (*SLSrPolicyOpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLSrPolicyAdd not implemented")
}
func (UnimplementedSLSrtePolicyServer) SLSrPolicyDelete(context.Context, *SLSrPolicyMsg) (*SLSrPolicyOpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SLSrPolicyDelete not implemented")
}
func (UnimplementedSLSrtePolicyServer) mustEmbedUnimplementedSLSrtePolicyServer() {}

// UnsafeSLSrtePolicyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SLSrtePolicyServer will
// result in compilation errors.
type UnsafeSLSrtePolicyServer interface {
	mustEmbedUnimplementedSLSrtePolicyServer()
}

func RegisterSLSrtePolicyServer(s grpc.ServiceRegistrar, srv SLSrtePolicyServer) {
	s.RegisterService(&SLSrtePolicy_ServiceDesc, srv)
}

func _SLSrtePolicy_SLSrPolicyAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLSrPolicyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLSrtePolicyServer).SLSrPolicyAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLSrtePolicy/SLSrPolicyAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLSrtePolicyServer).SLSrPolicyAdd(ctx, req.(*SLSrPolicyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLSrtePolicy_SLSrPolicyDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLSrPolicyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLSrtePolicyServer).SLSrPolicyDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLSrtePolicy/SLSrPolicyDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLSrtePolicyServer).SLSrPolicyDelete(ctx, req.(*SLSrPolicyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// SLSrtePolicy_ServiceDesc is the grpc.ServiceDesc for SLSrtePolicy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SLSrtePolicy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service_layer.SLSrtePolicy",
	HandlerType: (*SLSrtePolicyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SLSrPolicyAdd",
			Handler:    _SLSrtePolicy_SLSrPolicyAdd_Handler,
		},
		{
			MethodName: "SLSrPolicyDelete",
			Handler:    _SLSrtePolicy_SLSrPolicyDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sl_srte_policy.proto",
}
