// @file
// @brief Client RPC proto file for operations on objects in a address family.
// This file defines SL-API service and messages for operations
// on IP routes, MPLS objects and Path Groups objects.
//
// The RPCs and messages defined here are experimental and subject to
// change without notice and such changes can break backwards compatibility.
//
// ----------------------------------------------------------------
//  Copyright (c) 2023 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//

//@defgroup AF
//@brief Address family service definitions.

syntax = "proto3";
package service_layer;

import "sl_common_types.proto";
import "sl_route_common.proto";
import "sl_route_ipv4.proto";
import "sl_route_ipv6.proto";

option go_package="github.com/Cisco-service-layer/service-layer-objmodel/grpc/protos;service_layer";

// @defgroup SLAF
// @ingroup Common
// SL-API messages for a address family.
// Defines SL-API operations service.
// @{
//;

// This API supports programming the device by multiple clients.
//
// If there are multiple clients intending to program the network
// element using this API, the clients initiating a programming or get
// RPC MUST pass a gRPC-context metadata identifying itself.
// The client application MUST set the gRPC metadata key
// named "iosxr-slapi-clientid" with a numeric string holding a
// number between 0 and 65535.
//
// Each client application MUST use a unique client ID identifying itself
// that is separate from other clients programming the server. If there
// are multiple instances of the client application, then each such
// instance MUST be uniquely idenified.
//
// If "iosxr-slapi-clientid" gRPC metadata is missing, server assumes
// a default client id of 0 for that RPC invocation and associates
// objects programmed by that RPC with the default client id of 0.
//
// The co-ordination of the ClientId amongst these instances is outside
// the scope of this specification.
//
// Clients MUST not change their identity for their lifetime - such as
// RPC disconnects, process restarts or software update.
//
// SL-API stores the objects programmed by clients and preserves them across
// RPC disconnects, client restarts and server gRPC process restarts. As such
// if a client application or instance is no longer needed, the client
// MUST remove all its programming from the server before it is disabled
// or removed.
//
// The route redistribution and notifications are scoped to the RPC
// and as such do not require a client ID.

service SLAF {
    //@addtogroup SLAF
    //@{
    //;

    //
    // RPCs for object programming and access. Supported objects are
    // IP Routes, MPLS Labels, and Path Group objects.
    //
    // A Path Group object created by one client can be referenced by
    // any other object (e.g. IP Route and MPLS label object) created by
    // ANY other client.
    //
    // Only the client that created the object (IP/MPLS and Path Group included) 
    // can manipulate that object.

    //
    // VRF registration operations. By default, The client must register with
    // the corresponding VRF table before programming objects in that table.
    //
    // SLAFVrfRegMsg.Oper = SL_REGOP_REGISTER:
    //     VRF table registration: Sends a list of VRF table registration
    //     messages and expects a list of registration responses.
    //     A client Must Register a VRF table BEFORE objects can be
    //     added/modified in the associated VRF table.
    //
    // SLAFVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
    //     VRF table Un-registration: Sends a list of VRF table un-registration
    //     messages and expects a list of un-registration responses.
    //     This can be used to convey that the client is no longer interested
    //     in these VRF tables. All previously installed objects would be
    //     remove.
    //
    // SLAFVrfRegMsg.Oper = SL_REGOP_EOF:
    //     VRF table End Of File message.
    //     After Registration, the client is expected to send an EOF
    //     message to convey the end of replay of the client's known objects.
    //     This is especially useful under certain restart scenarios when the
    //     client and the server are trying to synchronize their objects.
    //
    // The VRF table registration operations can be used by the client to
    // synchronize objects with the device. When the client re-registers the
    // VRF table with the server using SL_REGOP_REGISTER, server marks
    // objects in that table as stale.
    // Client then MUST reprogram objects it is interested in.
    // When client sends SL_REGOP_EOF, any objects not reprogrammed
    // are removed from the device.
    //
    // The client MUST perform all operations (VRF registration, objects)
    // from a single execution context.
    //
    // The VRF registration requirement and recovery using mark and
    // sweep can be disabled by configuring
    // "grpc service-layer auto-register" on the device. In presence
    // of this configuration, on client restart or RPC disconnects,
    // the client has the responsibility to reconcile its new state
    // with the state on the device by replaying the difference.
    //
    rpc SLAFVrfRegOp(SLAFVrfRegMsg) returns (SLAFVrfRegMsgRsp);

    // VRF get. Used to retrieve VRF attributes from the server.
    rpc SLAFVrfRegGet(SLAFVrfRegGetMsg) returns (stream SLAFVrfRegGetMsgRsp);

    //
    // Route, MPLS label and Path operations.
    //

    // SLAFMsg.Oper = SL_OBJOP_ADD:
    //     Object add. Fails if the object already exists and is not stale.
    //     First ADD operation on a stale object is treated as implicit update
    //     and the object is no longer considered stale.
    //
    // SLAFMsg.Oper = SL_OBJOP_UPDATE:
    //     Object update. Create or update the object. The RPC implements
    //     replacement semantics, wherein if the object exists, all its
    //     attributes are replaced with values from the new message.
    //
    // SLAFMsg.Oper = SL_OBJOP_DELETE:
    //     Object delete. The object's key is enough to delete the object;
    //     other attributes if present are ignored.
    //     Delete of a non-existant object is returned as success.
    rpc SLAFOp(SLAFMsg) returns (SLAFMsgRsp);

    //
    // Stream object operations
    //

    // SLAFMsg.Oper = SL_OBJOP_ADD:
    //     Object add. Fails if the objects already exists and is not stale.
    //     First ADD operation on a stale object is allowed and the object
    //     is no longer considered stale.
    //
    // SLAFMsg.Oper = SL_OBJOP_UPDATE:
    //     Object update. Creates or updates the object.
    //
    // SLAFMsg.Oper = SL_OBJOP_DELETE:
    //     Object delete. The object's key is enough to delete the object.
    //     Delete of a non-existant object is returned as success.
    rpc SLAFOpStream(stream SLAFMsg) returns (stream SLAFMsgRsp);

    // Retrieves object attributes.
    rpc SLAFGet(SLAFGetMsg) returns (stream SLAFGetMsgRsp);

    // The notification request registrations and corresponding
    // notifications are scoped to the RPC. On a RPC disconnection,
    // the client should re-establish the RPC and re-program
    // the notification requests.
    // The caller MUST keep the RPC up as long as there is
    // interest in the notifications.
    //
    // For route redistribution, this call is used to get a stream
    // of route notifications. It can be used to get "push"
    // notifications for route adds/updates/deletes.
    //
    // For next hop change notifications, this call can be used to get
    // "push" notifications for nexthop adds/updates/deletes.
    //
    // The call takes a stream of per-VRF table notification requests.
    // Each notification request is first responded to with the result
    // of the registration operation itself, followed by any redistributed
    // routes if requested and present, and any next hops if requested and present.
    // From then on, any updates are notified as long as RPC is up.

    rpc SLAFNotifStream(stream SLAFNotifReq) returns (stream SLAFNotifMsg);

    //
    //@}
}
// AF VRF Registration message.
message SLAFVrfReg {
    // Registration message is applied on VRF's identified table.
    SLTableType Table = 1;

    // VRF registration attibutes.
    SLVrfReg VrfReg = 2;
}

// AF VRF Registration messages.
message SLAFVrfRegMsg {
    // Registration Operation
    SLRegOp Oper = 1;

    // List of VRF registrations
    repeated SLAFVrfReg VrfRegMsgs = 2;
}

// AF VRF Registration message Result
message SLAFVrfRegMsgRes {
    // Corresponding error code
    SLErrorStatus ErrStatus = 1;

    // VRF Name
    string VrfName = 2;

    // Table type
    SLTableType Table = 3;
}

// VRF Registration message Response.
message SLAFVrfRegMsgRsp {
    // Summary result of the bulk operation (refer to enum SLErrorStatus)
    // In general, the StatusSummary implies one of 3 things:
    // 1. SL_SUCCESS: signifies that the entire bulk operation was successful.
    //         In this case, the Results list is empty.
    // 2. SL_SOME_ERR: signifies that the operation failed for one or more
    //         entries. In this case, Results holds the result for
    //         each individual entry in the bulk.
    // 3. SL_RPC_XXX: signifies that the entire bulk operation failed.
    //         In this case, the Results list is empty.
    SLErrorStatus StatusSummary = 1;

    // In case of errors, this field indicates which entry in the bulk was
    // erroneous.
    repeated SLAFVrfRegMsgRes Results = 2;
}

// VRF Reg Get Request Message.
// Returns the VRF registrations done for all table types
message SLAFVrfRegGetMsg {
    // If true,  returns VRF registrations for all clients.
    // If false, returns VRF registrations for this client as identified by the gRPC metadata
    bool GetAll = 1;
}

// VRF Reg Get Message Response
message SLAFVrfRegGetMsgRsp {
    // Status of the Get operation
    SLErrorStatus ErrStatus = 1;

    // Client that performed this registration
    uint64 ClientID = 2;

    // if ErrStatus is SL_SUCCESS, Table and Entries
    // contain the table in which the VRF registration
    // operation was previously applied.
    SLTableType Table = 3;

    // VRF registration operation
    repeated SLVrfReg Entries = 4;
}

// Path Group definition.
message SLPathGroup {
    message SLPath {
        // Primary path.
        SLRoutePath Path = 1;

    }

    // A list of SLPathList
    message SLPathList {
        repeated SLPath Paths = 1;
    }

    // Path Group ID
    SLObjectId PathGroupId = 1;

    // Adminstrative distance of the Path Group. [0-255].
    // RIB uses this field to break the tie when multiple
    // sources install the same Path Group.
    // Lower distance is preferred over higher distance.
    // The per path group object admin distance overrides the default's admin
    // distance set at VRF registration. see SLVrfReg
    uint32 AdminDistance = 2;

    // Description of paths in the PathGroup.
    // Oneof is used here for future extensibility.
    oneof entry {
        // Path List
        SLPathList PathList = 3;
    }

    // Flags to control programming of the PathGroup to Routing
    // Information Base. Each flag is indicated as a bit field.
    // See SLRouteFlags for flag enumerations.
    uint32 Flags = 4;
}

// MPLS entry.
// This message defines an entry in the MPLS forwarding table.
message SLMplsEntry {
    // Local Label.
    uint32 LocalLabel = 1;

    // Administrative distance of the MPLS label. [0-255]. RIB uses this field
    // to break the tie when multiple sources install the same incoming MPLS
    // label. Lower distance is preferred over higher distance. The per MPLS
    // label object admin distance overrides the default's admin distance set
    // at VRF registration. see SLVrfReg
    uint32 AdminDistance = 2;

    // For ADD or UPDATE operation, only one of PathList or
    // SLPathGroupRefKey must be specified. For DELETE, neither
    // are required.

    // List of paths for this MPLS label entry.
    // Specifying more than one path is allowed for ECMP/UCMP cases
    repeated SLRoutePath PathList = 3;

    // Reference to the Path Group for this MPLS label entry.
    // The attribute is oneof to allow for future extension.
    oneof entry {
        // Path group reference key
        SLPathGroupRefKey PathGroupKey = 4;
    }

    // Flags to control programming of the MPLS Entry to Routing
    // Information Base. Each flag is indicated as a bit field.
    // See SLRouteFlags for flag enumerations.
    uint32 Flags = 5;
}

// One of AF objects
message SLAFObject {
    oneof entry {
        SLRoutev4 IPv4Route = 1;
        SLRoutev6 IPv6Route = 2;
        SLMplsEntry MplsLabel = 3;
        SLPathGroup PathGroup = 4;
    }
}

// Operation on a forwarding table object
message SLAFOp {
    SLAFObject AFObject = 1;

    // Unique operationID sent by the client to corelate the responses.
    // The responses from network element can be out of order, and client can
    // use operation ID to correlate the response for the operation on the object.
    // Operation Id should be monotonically increasing for the life of the client.
    uint64 OperationID = 2;

    // The type of Acknowledgment that the controller or agent expects from
    // the network element.
    SLRspACKType AckType = 3;
}

// Used to retrieve objects in a VRF table.
// Only objects produced by this client (as indicated in the RPC's metadata)
// are returned unless the GetAllClients is set to true. In that case, all
// the objects produced by all the clients is returned.
message SLAFGetMsg {
    // VRF name. If VRF name is not specified or is nil, get objects from
    // all VRFs.
    string VrfName = 1;

    // If Table is set to SL_TABLE_TYPE_RESERVED, or is unset, objects from
    // all tables for selected VRFs are returned.
    SLTableType Table = 2;

    // Get objects programmed by all clients, ignoring any RPC ClientID
    // metadata.
    bool GetAllClients = 3;

}

message SLAFFibStatus {
    //Error code associated with hardware programming
    SLErrorStatus ErrorCode = 1;

    // Operation ID associated with hardware programming.
    uint64 OperationID = 2;

    // Version associated with hardware programming. A valid version is
    // a non-zero positive number
    uint64 Version = 3;

    // Descriptive string describing error if any, on the hardware programming
    string ErrorString = 4;

    // DepResult is the result of any operation that this operation depends on.
    // For example: if this OperationID is about programming an ipv4 or ipv6
    // route that is pointing to a Path Group, then DepResult will carry
    // the Result of operation that programmed that Path Group.
    // *NOTE*: DepResult is not supported on Get Operations
    repeated SLAFFibStatus DepResult = 5;
}

// Object and its programming status returned on Get.
message SLAFGetMsgRspEntry {
    // Object
    SLAFOp AFOp = 1;

    // if the operation was programmed with ACK type set to RIB_AND_FIB_ACK,
    // then FIBStatus indicates status of hardware programming of the
    // operation
    SLAFFibStatus FIBStatus = 2;
}

// Get AF message response. The objects can be returned in
// any order.
message SLAFGetMsgRsp {
    // Status of the Get Stats operation
    SLErrorStatus ErrStatus = 1;

    // VRF name.
    string VrfName = 2;

    // Client ID. If the client requested read of all clients' objects,
    // the Client ID field can be used by the client to determine
    // if the object was previously programmed by this client or some
    // other client.
    uint64 ClientID = 3;

    // Returned entries as requested in the Get operation.
    // if ErrStatus is SL_SUCCESS, entry contains the list
    // of objects from the specified Table.
    repeated SLAFGetMsgRspEntry AFList = 4;
}

// Operation on the address family. The objects are programmed
// in the given VRF's corresponding table.
message SLAFMsg {
    // Route Object Operations
    SLObjectOp Oper = 1;

    // VRF name. VRF name is ignored for MPLS ILM operations.
    string VrfName = 2;

    // List of operations.
    repeated SLAFOp OpList = 3;

}

// Result of an operation on the object.
message SLAFRes {
    // Error code
    SLErrorStatus ErrStatus = 1;

    // The operation, expected to carry only the part that is considered
    // the key to uniquely identify the object that is programmed
    SLAFOp Operation = 2;

    // if the operation was programmed with ACK type set to RIB_AND_FIB_ACK,
    // then FIBStatus indicates status of hardware programming of the
    // operation
    SLAFFibStatus FIBStatus = 3;
}

// Route operations result status
message SLAFMsgRsp {
    // VRF name.
    string VrfName = 1;

    // In case of errors, this field indicates which entry in the bulk was
    // erroneous.
    repeated SLAFRes Results = 2;
}

//
//
// Messages for route redistribution and next hop change requests
// and responses.
//
//

// Request message for route redistribution registration.
message SLAFRedistRegMsg {
    // Source Protocol.
    // Only routes with specified source protocol and protocol tag will be
    // notified.
    // Contact Cisco for supported protocol string names.
    // This field is mandatory.
    string SrcProto = 1;

    // Source Protocol Tag. This can be empty if N/A.
    // Contact Cisco for supported protocol tags.
    // This field is optional.
    string SrcProtoTag = 2;

    // Table type the client is interested in.
    // This field is mandatory.
    SLTableType Table = 3;
}

// Next hop registration request key.
message SLAFNextHopRegKey {
    message SLNextHopKey {
        // Next Hop IP to resolve
        SLIpAddress NextHop = 1;

        // Length of Next Hop IP address to use for resolution
        uint32 NextHopLen = 2;

        // Chose exact vs. best match
        bool ExactMatch = 3;

        // Allow default route to be returned
        bool AllowDefault = 4;

        // If this flag is not set or set to False, only the immediate
        // viable path list is returned. If set to True, recursively resolve
        // the next hop’s paths and return the flattened path list.
        // If the list exceeds MaxPathsInNexthopNotif, then only the
        // first MaxPathsInNexthopNotif will be returned.
        bool Recurse = 5;
    }

    // Notification request key.
    oneof nexthopkey {
        // A next hop IP address.
        SLNextHopKey NextHop = 1;
    }
}

// Next hop registration message.
message SLAFNextHopRegMsg {
    // Next hop registration key.
    SLAFNextHopRegKey NextHopKey = 1;
}

// Notification request message for a single item.
message SLAFNotifRegReq {
    oneof request {
        // Route redistribution request.
        SLAFRedistRegMsg RedistReq = 1;

        // Next hop notification request.
        SLAFNextHopRegMsg NextHopReq = 2;
    }

    // Unique OperationID sent by the client to correlate the
    // registration request with the response.
    // When this change registration request is applied
    // in the server, the result of this registration operation is returned
    // to the client along with Operation ID to allow the client correlate
    // responses with the requests. Note, server reflects the OperationID
    // only in registration responses, and not in the corresponding
    // notifications.
    uint64 OperationID = 3;
}

// RPC Notification request - either a route redistribution
// request or a next hop change notification request.
message SLAFNotifReq {
    // Oper = SL_NOTIFOP_ENABLE
    //   This is to enable route notifications in a VRF or
    //    the next hop change notification.
    // Oper = SL_NOTIFOP_DISABLE
    //   This is to disable route notifications in a VRF or
    //   the next hop change notification.
    SLNotifOp Oper = 1;

    // Vrf that the client is interested in.
    string VrfName = 2;

    // Notification request.
    repeated SLAFNotifRegReq NotifReq = 3;
}

// Notification response message for a single item.
message SLAFNotifRsp {
    // Corresponding request.
    SLAFNotifRegReq NotifReq = 1;

    // The NotifStatus implies one of 2 things:
    // SL_SUCCESS: signifies that the notification request was successful
    // SL_XXX: signifies an error in setting up a notification for the Vrf.
    SLErrorStatus NotifStatus = 2;
}

// Next hop Notification
message SLNextHop {
    // Next hop registration key.
    SLAFNextHopRegKey NextHopKey = 1;

    // Prefix of the route resolving the nexthop
    SLIpAddress ResolvingRoute = 2;

    // Resolving route's prefix length
    uint32 ResolvingRouteLen = 3;

    // Source Protocol.
    // Contact Cisco for supported protocol string names.
    string SrcProto = 4;

    // Nexthop route distance
    uint32 admin_distance = 5;

    // Nexthop route metric
    uint32 metric = 6;

    // Nexthop's path list. Paths indicate paths available
    // for the next hop. In case of recursive next hop resolution,
    // the returned path list consists of flattened directly connected
    // paths.
    //
    // If this field is not present,
    // then no viable path to the next hop exist.
    repeated SLRoutePath Paths = 7;
}

// AF Notification message.
message SLAFNotif {
    oneof Event {
        // This field carries the status of the SLAFNotifReq message.
        SLAFNotifRsp NotifStatus = 1;

        // Route redistribution notification.
        SLAFObject RedistObject = 4;

        // Next hop change notification.
        SLNextHop NextHop = 5;
    }
}

// RPC Notification message.
message SLAFNotifMsg {
    // VRF name.
    string VrfName = 1;

    // Notifications.
    repeated SLAFNotif AFNotifs = 3;
}

// @}
