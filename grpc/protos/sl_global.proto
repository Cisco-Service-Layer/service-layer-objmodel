// @file
// @brief Server RPC proto file. Client invokes to init the session
// on server.
//
// ----------------------------------------------------------------
//  Copyright (c) 2016 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//

syntax = "proto3";
package service_layer;

import "sl_common_types.proto";

// @defgroup SLGlobal
// @ingroup Common
// Global Initialization and Notifications.
// The following RPCs are used in global initialization and capability queries.
// @{
service SLGlobal {
    //@addtogroup SLGlobal
    //@{
    ///;

    // Initialize the connection, and setup a notification channel.
    // This MUST be the first call to setup the Service Layer connection.
    //
    // The caller MUST maintain the notification channel to be able to
    // communicate with the server.
    // If this channel is not properly established and maintained, all other
    // RPC requests are rejected.
    //
    // The caller must send its version information as part of the SLInitMsg
    // message. The server will reply with SL_GLOBAL_EVENT_TYPE_VERSION
    // that tells the caller whether he can proceed or not.
    // Refer to message SLGlobalNotif below for further details.
    //
    // After the version handshake, the notification channel is used for
    // "push" event notifications, such as:
    //    - SLGlobalNotif.EventType = SL_GLOBAL_EVENT_TYPE_HEARTBEAT
    //        heartbeat notification messages are sent to the client on
    //        a periodic basis.
    //    Refer to SLGlobalNotif definition for further info.
    rpc SLGlobalInitNotif(SLInitMsg) returns (stream SLGlobalNotif);

    // Get platform specific globals
    rpc SLGlobalsGet(SLGlobalsGetMsg) returns (SLGlobalsGetMsgRsp);
    //@}
}

// Initialization message sent to the server.
// If the client and server are running compatible version numbers, a
// connection will be made and the server response will be received
// with a successful status code.
message SLInitMsg {
    // Client's Major version of service-layer API (refer to sl_version.proto)
    uint32 MajorVer = 1;

    // Minor Version
    uint32 MinorVer = 2;

    // Sub-Version
    uint32 SubVer = 3;
}

// Server's response to the SLInitMsg.
// On Success (ErrStatus), the session with the server is established
// and the client is allowed to proceed.
message SLInitMsgRsp {
    // Server's version of service-layer API (refer to sl_version.proto)
    // Major-number revisions are NOT backwards compatible,
    // unless otherwise specified. The Server may reject a session if there
    // is a version number mismatch or non-backwards compatibility.
    uint32 MajorVer = 1;

    // Minor Version
    uint32 MinorVer = 2;

    // Sub-Version
    uint32 SubVer = 3;
}


// Global Event Notification types.
enum SLGlobalNotifType {
    // Reserved. 0x0
    SL_GLOBAL_EVENT_TYPE_RESERVED = 0x0;

    // Error. ErrStatus field elaborates on the message. 0x1
    SL_GLOBAL_EVENT_TYPE_ERROR = 0x1;

    // HeartBeat. 0x2
    SL_GLOBAL_EVENT_TYPE_HEARTBEAT = 0x2;

    // Version. SLInitMsgRsp field elaborates on the server version. 0x3
    SL_GLOBAL_EVENT_TYPE_VERSION = 0x3;
}


// Globals query message.
message SLGlobalNotif {
    // Event Type.
    SLGlobalNotifType EventType = 1;

    // Status code, interpreted based on the Event Type.
    //
    //   case EventType == SL_GLOBAL_EVENT_TYPE_ERROR:
    //       case ErrStatus == SL_NOTIF_TERM:
    //          => Another client is attempting to take over the session.
    //             This session will be closed.
    //       case ErrStatus == (some error from SLErrorStatus)
    //          => Client must look into the specific error message returned.
    //
    //   case EventType == SL_GLOBAL_EVENT_TYPE_HEARTBEAT:
    //       case ErrStatus == SL_SUCCESS
    //          => Client can safely ignore this heartbeat message.
    //
    //   case EventType == SL_GLOBAL_EVENT_TYPE_VERSION:
    //       case ErrStatus == SL_SUCCESS
    //          => Client version accepted.
    //       case ErrStatus == SL_INIT_STATE_READY
    //          => Client version accepted.
    //             Any previous state was sucessfully recovered.
    //       case ErrStatus == SL_INIT_STATE_CLEAR
    //          => Client version accepted. Any previous state was lost.
    //             Client must replay all previous objects to server.
    //       case ErrStatus == SL_UNSUPPORTED_VER
    //          => Client and Server version mismatch. The client is not
    //             allowed to proceed, and the channel will be closed.
    //       case ErrStatus == (some error from SLErrorStatus)
    //          => Client must either try again, or look into the specific
    //             error message returned.
    SLErrorStatus ErrStatus = 2;

    // Further info based on EventType.
    oneof Event {
        // case EventType == SL_GLOBAL_EVENT_TYPE_VERSION:
        //     => this field carries the Server version number.
        SLInitMsgRsp InitRspMsg = 3;
    }
}

// Globals query message.
message SLGlobalsGetMsg {

}

// Platform specific globals Response.
message SLGlobalsGetMsgRsp {
    // Corresponding error code
    SLErrorStatus ErrStatus = 1;

    // Maximum vrf name length.
    uint32 MaxVrfNameLength = 2;

    // Maximum interface name length.
    uint32 MaxInterfaceNameLength = 3;

    // Maximum paths per Route/ILM Entry.
    uint32 MaxPathsPerEntry = 4;

    // Maximum primary paths per Route/ILM Entry.
    uint32 MaxPrimaryPathPerEntry = 5;

    // Maximum backup paths per Route/ILM Entry.
    uint32 MaxBackupPathPerEntry = 6;

    // Maximum MPLS labels per Route/ILM Entry.
    uint32 MaxMplsLabelsPerPath = 7;

    // Minimum Primary path id number.
    uint32 MinPrimaryPathIdNum = 8;

    // Maximum Primary path id number.
    uint32 MaxPrimaryPathIdNum = 9;

    // Minimum Pure Backup path id number.
    uint32 MinBackupPathIdNum = 10;

    // Maximum Pure Backup path id number.
    uint32 MaxBackupPathIdNum = 11;

    // Maximum number of remote addresses
    uint32 MaxRemoteAddressNum = 12;
}

// @}
