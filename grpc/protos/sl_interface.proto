// @file
// @brief Server RPC proto file for Interface handles.
// Declares an RPC that gets interface details.
// ----------------------------------------------------------------
//  Copyright (c) 2016 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//

syntax = "proto3";
package service_layer;

import "sl_common_types.proto";

//@defgroup Interfaces
//@brief Interface service definitions.
//Defines the RPC for getting interface status(es).
//@{
service SLInterfaceOper {
    //@addtogroup Interfaces
    //@{
    //;
    // Interface Registration Operations.
    //

    // SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_REGISTER:
    //     Global Interface registration.
    //     A client Must Register BEFORE interfaces can be modified/queried.
    //
    // SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_UNREGISTER:
    //     Global Interface un-registration.
    //     This call is used to end all interface notifications.
    //     This call cleans up all interface notifications previously requested.
    //
    // SLInterfaceGlobalsRegMsg.Oper = SL_REGOP_EOF:
    //     Interface End Of File.
    //     After Registration, the client is expected to send an EOF
    //     message to convey the end of replay of the client's known objects.
    //     This is especially useful under certain restart scenarios when the
    //     client and the server are trying to synchronize their interfaces.
    rpc SLInterfaceGlobalsRegOp(SLInterfaceGlobalsRegMsg) returns (SLInterfaceGlobalsRegMsgRsp);

    // Used to retrieve global Interface info from the server.
    rpc SLInterfaceGlobalsGet(SLInterfaceGlobalsGetMsg) returns (SLInterfaceGlobalsGetMsgRsp);

    // Used to retrieve global Interface stats from the server.
    rpc SLInterfaceGlobalsGetStats(SLInterfaceGlobalsGetMsg) returns (SLInterfaceGlobalsGetStatsMsgRsp);

    // Retrieve interface attributes and state.
    // This call can be used to "poll" the current state of interfaces.
    rpc SLInterfaceGet(SLInterfaceGetMsg) returns (SLInterfaceGetMsgRsp);

    // This call is used to get a stream of interface notifications.
    // The caller must maintain the GRPC channel as long as
    // there is interest in interface notifications.
    // This call can be used to get "push" notifications for interface info.
    // It is advised that the caller register for notifications before any
    // interfaces are used to avoid any loss of notifications.
    rpc SLInterfaceGetNotifStream(SLInterfaceGetNotifMsg) returns (stream SLInterfaceNotif);

    // Used to enable/disable event notifications for a certain interface.
    // By default, all interface events are disabled. The user must enable
    // notifications for the interested interfaces.
    rpc SLInterfaceNotifOp(SLInterfaceNotifMsg) returns (SLInterfaceNotifMsgRsp);

    //@}
}

// Global Interface Registration Message.
// This message is used for interface global registration.
// Clients must register before using any interface service.
message SLInterfaceGlobalsRegMsg {
    // Registration Operation.
    SLRegOp Oper = 1;
}

// interface registration response message.
// This message is used to convey the result of the interface registration.
message SLInterfaceGlobalsRegMsgRsp {
    // Error code.
    SLErrorStatus ErrStatus = 1;
}

// Global Interface Get message.
// This message is used to query interface global capabilities.
message SLInterfaceGlobalsGetMsg {

}

// Global interface Get response message.
// This message is used to convey the response to the global capabilities query.
message SLInterfaceGlobalsGetMsgRsp {
    // Error code
    SLErrorStatus ErrStatus = 1;

    // Max interface objects within a single batch.
    uint32 MaxInterfacesPerBatch = 2;
}

// Global Interface Get stats message.
// This message is used to convey the response to the interface statistics 
// query.
message SLInterfaceGlobalsGetStatsMsgRsp {
    // Error code
    SLErrorStatus ErrStatus = 1;

    // Global Interface event sequence number.
    // The sequence number is equivalent to a timestamp
    uint64 SeqNum = 2;

    // Num Interface notification requests added through the service layer.
    uint32 InterfaceNotifCount = 3;
}

// Interface Get message
message SLInterfaceGetMsg {
    // Interface key attributes.
    // If the Key is not specified, then request up to the first 
    // 'EntriesCount' entries.
    SLInterface Key = 1;

    // Number of entries requested
    uint32 EntriesCount = 2;

    // if GetNext is FALSE:
    //     request up to 'EntriesCount' entries starting from the key
    // If GetNext is TRUE, or if the key exact match is not found:
    //     request up to 'EntriesCount' entries starting from the key's next
    bool GetNext = 3;
}

// The current state of the interface.
enum SLInterfaceState {
    // State unknown.
    SL_IF_STATE_UNKNOWN = 0;

    // State Operationally down.
    SL_IF_STATE_DOWN = 1;

    // State Operationally up.
    SL_IF_STATE_UP = 2;
}

// Interface Get Message result.
message SLInterfaceInfoMsg {
    // Interface info
    SLInterface SLIfInfo = 1;

    // Interface state
    SLInterfaceState IfState = 2;

    // Global Interface event sequence number.
    // The sequence number is equivalent to a timestamp
    uint64 SeqNum = 3;
}

// Interface Get Message Response.
message SLInterfaceGetMsgRsp {
    // End Of File.
    // When set to True, it indicates that the server has returned M, where 
    // M < N, of the original N requested Entries.
    bool Eof = 1;

    // Status of the Get operation
    SLErrorStatus ErrStatus = 2;

    // Returned entries as requested in the Get operation.
    // if ErrStatus is SL_SUCCESS, Entries contains the info requested
    repeated SLInterfaceInfoMsg Entries = 3;
}

// Interface Get Notification message.
message SLInterfaceGetNotifMsg {

}

// Interface Event Notification types
enum SLInterfaceNotifType {
    // Reserved. 0x0
    SL_INTERFACE_EVENT_TYPE_RESERVED = 0x0;

    // Error - ErrStatus field elaborates on the error. 0x1
    SL_INTERFACE_EVENT_TYPE_ERROR = 0x1;

    // Interface attributes and state event. 0x2
    SL_INTERFACE_EVENT_TYPE_INTERFACE_INFO = 0x2;
}

// Interface Notification Event.
message SLInterfaceNotif {
    // Interface Event Notification type
    SLInterfaceNotifType EventType = 1;

    // Further info based on EventType
    oneof Event {
        // case EventType == SL_INTERFACE_EVENT_TYPE_ERROR:
        //    => This field carries error info, if any error occurs during 
        //       notification subscription.
        SLErrorStatus ErrStatus = 2;

        // case EventType == SL_INTERFACE_EVENT_TYPE_INTERFACE_INFO:
        //     => this field carries the session state info
        SLInterfaceInfoMsg Info = 3;
    }
}

// Interface Notification message.
message SLInterfaceNotifMsg {
    // Notification Operation.
    SLNotifOp Oper = 1;

    // Interface key attributes.
    repeated SLInterface Entries = 2;
}

// Interface Notification message result.
message SLInterfaceNotifMsgRes {
    // Corresponding error code
    SLErrorStatus ErrStatus = 1;

    // Interface key attributes.
    SLInterface Key = 2;
}

// Interface Notification message response.
message SLInterfaceNotifMsgRsp {
    // Summary result of the bulk operation (refer to enum SLErrorStatus)
    // In general, the StatusSummary implies one of 3 things:
    // 1. SL_SUCCESS: signifies that the entire bulk operation was successful.
    //         In this case, the Results list is empty.
    // 2. SL_SOME_ERR: signifies that the operation failed for one or more
    //         entries. In this case, Results holds the result for
    //         each individual entry in the bulk.
    // 3. SL_RPC_XXX: signifies that the entire bulk operation failed.
    //         In this case, the Results list is empty.
    SLErrorStatus StatusSummary = 1;

    // In case of errors, this field indicates which entry in the bulk was
    // erroneous.
    repeated SLInterfaceNotifMsgRes Results = 2;
}

//@}
