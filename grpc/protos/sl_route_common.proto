// @file
// @brief Client RPC proto file for common route types.
// This file defines common route features, including the Prefix, 
// VRF information, path information, administrative distance, and 
// default route status for a route object.
//
// ----------------------------------------------------------------
//  Copyright (c) 2016 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//

//@defgroup Route
//@brief Route service definitions.

syntax = "proto3";
package service_layer;

import "sl_common_types.proto";

// @defgroup SLRouteCommon
// @ingroup Route
// Common IPv4, IPv6 Route messages.
// The following messages are used in both IPv4 and IPv6 Route operations.
// @{
//;

// Route Globals Get Message
message SLRouteGlobalsGetMsg {

}

// Route Globals Get Message Response
message SLRouteGlobalsGetMsgRsp {
    // Corresponding error code
    SLErrorStatus ErrStatus = 1;

    // Max VrfReg objects within a single VrfRegMsg message.
    uint32 MaxVrfregPerVrfregmsg = 2;

    // Max Route objects within a single RouteMsg message.
    uint32 MaxRoutePerRoutemsg = 3;
}

// Route Global Stats Get Message
message SLRouteGlobalStatsGetMsg {

}

// Route Global Stats Get Message Response
message SLRouteGlobalStatsGetMsgRsp {
    // Corresponding error code
    SLErrorStatus ErrStatus = 1;

    // Num VRFs registered through the service layer.
    uint32 VrfCount = 2;

    // Num Routes added through the service layer.
    uint32 RouteCount = 3;
}


// VRF Registration message
message SLVrfReg {
    // VRF Name.
    string VrfName = 1;

    // Default Admin distance for routes programmed by this application
    // Range [0-255]
    // This default value is used if route objects' AdminDistance is 0.
    // Refer to SLRouteCommon
    uint32 AdminDistance = 2;

    // In case the Service Layer -> RIB connection is lost, this specifies the
    // timeout period after which RIB will automatically purge the installed
    // routes, unless the service layer:
    //    1. Re-registers (VRF)
    //    2. Replay all routes
    //    3. And send EOF, before the purge timeout
    uint32 VrfPurgeIntervalSeconds = 3;
}

// VRF Registration messages.
message SLVrfRegMsg {
    // Registration Operation
    SLRegOp Oper = 1;

    // List of VRF registrations
    repeated SLVrfReg VrfRegMsgs = 2;
}

// VRF Registration message Result
message SLVrfRegMsgRes {
    // Corresponding error code
    SLErrorStatus ErrStatus = 1;

    // VRF Name
    string VrfName = 2;
}

// VRF Registration message Response.
message SLVrfRegMsgRsp {
    // Summary result of the bulk operation (refer to enum SLErrorStatus)
    // In general, the StatusSummary implies one of 3 things:
    // 1. SL_SUCCESS: signifies that the entire bulk operation was successful.
    //         In this case, the Results list is empty.
    // 2. SL_SOME_ERR: signifies that the operation failed for one or more
    //         entries. In this case, Results holds the result for
    //         each individual entry in the bulk.
    // 3. SL_RPC_XXX: signifies that the entire bulk operation failed.
    //         In this case, the Results list is empty.
    SLErrorStatus StatusSummary = 1;

    // In case of errors, this field indicates which entry in the bulk was
    // erroneous.
    repeated SLVrfRegMsgRes Results = 2;
}

// VRF Get Message
message SLVrfRegGetMsg {
    // VRF name (key).
    // If the Key is not specified, then request up to the first 
    // 'EntriesCount' entries.
    string VrfName = 1;

    // Number of entries requested
    uint32 EntriesCount = 2;

    // if GetNext is FALSE:
    //     request up to 'EntriesCount' entries starting from the key
    // If GetNext is TRUE, or if the key exact match is not found:
    //     request up to 'EntriesCount' entries starting from the key's next
    bool GetNext = 3;
}

// VRF Get Message Response
message SLVrfRegGetMsgRsp {
    // End Of File.
    // When set to True, it indicates that the server has returned M, where 
    // M < N, of the original N requested Entries.
    bool Eof = 1;

    // Status of the Get operation
    SLErrorStatus ErrStatus = 2;

    // Returned entries as requested in the Get operation.
    // if ErrStatus is SL_SUCCESS, Entries contains the info requested
    repeated SLVrfReg Entries = 3;
}

// VRF Get Stats Message Response
message SLVRFGetStatsMsgRes {
    // VRF name as key
    string VrfName = 1;
    
    // Num VRF Routes added through the service layer.
    uint32 RouteCount = 2;
}

// VRF Get Stats Message Response
message SLVRFGetStatsMsgRsp {
    // End Of File.
    // When set to True, it indicates that the server has returned M, where 
    // M < N, of the original N requested Entries.
    bool Eof = 1;

    // Status of the Get Stats operation
    SLErrorStatus ErrStatus = 2;

    // Returned entries as requested in the Get Stats operation.
    // if ErrStatus is SL_SUCCESS, Entries contains the info requested
    repeated SLVRFGetStatsMsgRes Entries = 3;
}

// Common IPv4/IPv6 route attributes.
message SLRouteCommon {
    // Adminstrative distance of the route. [0-255].
    // RIB uses this field to break the tie when multiple
    // sources install the same route.
    // Lower distance is preferred over higher distance.
    // The per route object admin distance overrides the default's admin
    // distance set at VRF registration. see SLVrfReg
    uint32 AdminDistance = 1;

    // Local label associated with this route.
    // This is an optional field that can be used to simulatenously setup an 
    // ILM entry (e.g. head end of an MPLS LSP) for the same route.
    // This is especially useful when setting up an MPLS LSP (a /32-route 
    // towards the remote LSP peer e.g. 2.2.2.2/32) which is required for MPLS
    // VPN labeled routes.
    //
    // Note: MPLS VPN labeled routes can resolve only on:
    //    - /32-routes with valid LocalLabel and a valid egress MPLS path label
    uint32 LocalLabel = 2;

    // Route Tag.
    // Routes are usually tagged to prevent loops during redistribution between
    // protocols.
    uint32 Tag = 3;
}

// Route Path attributes.
//
// FRR Note:
// Failover from primary to backup is based on the trigger used (e.g.
// link down, BFD, etc.). Revertion is mainly timeout based. The timeout
// value is platform specific and is not configurable.
message SLRoutePath {
    // One of IPv4 or IPv6 address
    SLIpAddress NexthopAddress = 1;

    // Outgoing interface name for the path.
    SLInterface NexthopInterface = 2;

    // Load metric for this path.
    // Used for equal/unequal cost load balancing of traffic distribution.
    uint32 LoadMetric = 3;

    // Path VRF name. This field is used ONLY if the path is in a different
    // VRF than the route (e.g. VPN cases)
    string VrfName = 4;

    // Route Metric.
    // The metric is typically based on information like load, hop count,
    // MTU, reliability of the path, etc.
    uint32 Metric = 5;

    // Path identifier.
    // Path-id is used to uniquely identify a path when it comes to
    // protection (Fast Re-Route - FRR). It is not used otherwise.
    //
    // In general, for FRR, There are 3 main path attributes:
    //    1. Primary. The path is the main path to carry traffic.
    //    2. Protected. A primary path with a configured backup path.
    //    3. Backup. The path is protecting a primary path.
    //
    // NOTE1: a primary path (A) can be simultaneously protected (by B), and
    // acting as a backup for another path (C).
    // In this example, the primary path C is protected by A (which happens to
    // be primary). So the primary path (A) is Primary, Protected, and Backup.
    //
    // The following are various path types based on combinations of attributes:
    //    1. Pure Primary i.e. Not Protected and is not a Backup.
    //       => PathId is optional. ProtectedPathBitmap = 0x0
    //    2. Primary and Protected. Path is not a Backup.
    //       => PathId is mandatory. ProtectedPathBitmap = 0x0
    //    3. Primary and Not Protected. Path is also a Backup.
    //       => PathId is mandatory. ProtectedPathBitmap = 0xYYYY
    //    4. Primary and Protected. Path is also a Backup.
    //       => PathId is mandatory. ProtectedPathBitmap = 0xYYYY
    //    5. Pure Backup. Protection is not allowed for backup paths.
    //       => PathId is mandatory. ProtectedPathBitmap = 0xYYYY
    //
    // NOTE2: Pure backup path-id uses a different range than primary path-ids.
    // The valid range of primary path IDs, and pure backup path IDS are
    // platform dependent and can be retrieved through the client init message.
    uint32 PathId = 6;

    // Path protection bitmap.
    // The bitmap of paths this Backup path is protecting.
    // Example: If this path is protecting paths with IDs 4, 5 and 6, then
    // set bitmap to:
    // 0x38 ==> 0011 1000
    //            || |-- path 4
    //            ||-- path 5
    //            |-- path 6
    // (1 << (pathId_1 - 1))  | (1 << (pathId_2 - 1)) | (1 << (pathId_3 - 1))
    repeated uint64 ProtectedPathBitmap = 7;

    // MPLS label stack.
    // Stack of labels that is pushed when the packet is switched out.
    // Label size is LSB 20 bits. Forwarding will set EXP, TTL and BOS.
    // For primary path, typically only 1 label is used.
    // For backup paths, more than 1 label can be used. If more than one label
    // is used, remote backup addresses must be specified.
    // The maximum number of labels pushed for primary and backup are
    // platform dependent.
    repeated uint32 LabelStack = 8;

    // MPLS Remote router backup address.
    // This field is used only for backup MPLS path with more than one label
    // For N+1 backup labels, N remote backup addresses must be specified.
    repeated SLIpAddress RemoteAddress = 9;
}

// @}
