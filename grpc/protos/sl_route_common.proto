// @file
// @brief Client RPC proto file for common route types.
// This file defines common route features, including the Prefix, 
// VRF information, path information, administrative distance, and 
// default route status for a route object.
//
// ----------------------------------------------------------------
//  Copyright (c) 2016, 2023 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//

//@defgroup Route
//@brief Route service definitions.

syntax = "proto3";
package service_layer;

import "sl_common_types.proto";
option go_package="github.com/Cisco-service-layer/service-layer-objmodel/grpc/protos;service_layer";

// @defgroup SLRouteCommon
// @ingroup Route
// The following messages are used in IPv4, IPv6 Route, MPLS and PathGroup operations.
// @{
//;

// Route Globals Get Message
message SLRouteGlobalsGetMsg {

}

// Route Globals Get Message Response
message SLRouteGlobalsGetMsgRsp {
    // Corresponding error code
    SLErrorStatus ErrStatus = 1;

    // Max VrfReg objects within a single VrfRegMsg message.
    uint32 MaxVrfregPerVrfregmsg = 2;

    // Max Route objects within a single RouteMsg message.
    uint32 MaxRoutePerRoutemsg = 3;
}

// Route Global Stats Get Message
message SLRouteGlobalStatsGetMsg {

}

// Route Global Stats Get Message Response
message SLRouteGlobalStatsGetMsgRsp {
    // Corresponding error code
    SLErrorStatus ErrStatus = 1;

    // Num VRFs registered through the service layer for the requested client
    uint32 VrfCount = 2;

    // Num Routes added through the service layer for the requested client
    uint32 RouteCount = 3;
}


// VRF Registration message
message SLVrfReg {
    // VRF Name.
    string VrfName = 1;

    // Default Admin distance for routes programmed by this application
    // Range [0-255]
    // This default value is used if route objects' AdminDistance is 0.
    // Refer to SLRouteCommon
    uint32 AdminDistance = 2;

    // In case the Service Layer -> RIB connection is lost, this specifies the
    // timeout period after which RIB will automatically purge the installed
    // routes, unless the service layer:
    //    1. Re-registers (VRF)
    //    2. Replay all routes
    //    3. And send EOF, before the purge timeout
    //
    // AdminDistance and VrfPurgeIntervalSeconds values are ignored
    // for SL_PATH_GROUP_TABLE type registration
    uint32 VrfPurgeIntervalSeconds = 3;
}

// VRF Registration messages.
message SLVrfRegMsg {
    // Registration Operation
    SLRegOp Oper = 1;

    // List of VRF registrations
    repeated SLVrfReg VrfRegMsgs = 2;
}

// VRF Registration message Result
message SLVrfRegMsgRes {
    // Corresponding error code
    SLErrorStatus ErrStatus = 1;

    // VRF Name
    string VrfName = 2;
}

// VRF Registration message Response.
message SLVrfRegMsgRsp {
    // Summary result of the bulk operation (refer to enum SLErrorStatus)
    // In general, the StatusSummary implies one of 3 things:
    // 1. SL_SUCCESS: signifies that the entire bulk operation was successful.
    //         In this case, the Results list is empty.
    // 2. SL_SOME_ERR: signifies that the operation failed for one or more
    //         entries. In this case, Results holds the result for
    //         each individual entry in the bulk.
    // 3. SL_RPC_XXX: signifies that the entire bulk operation failed.
    //         In this case, the Results list is empty.
    SLErrorStatus StatusSummary = 1;

    // In case of errors, this field indicates which entry in the bulk was
    // erroneous.
    repeated SLVrfRegMsgRes Results = 2;
}

// VRF Get Message
message SLVrfRegGetMsg {
    // VRF name (key).
    // If the Key is not specified, then request up to the first
    // 'EntriesCount' entries.
    string VrfName = 1;

    // Number of entries requested
    uint32 EntriesCount = 2;

    // if GetNext is FALSE:
    //     request up to 'EntriesCount' entries starting from the key
    // If GetNext is TRUE, or if the key exact match is not found:
    //     request up to 'EntriesCount' entries starting from the key's next
    //     GetNext does not get the routes in the next client.
    bool GetNext = 3;
}

// VRF Get Message Response
message SLVrfRegGetMsgRsp {
    // End Of File.
    // When set to True, it indicates that the server has returned M, where
    // M < N, of the original N requested Entries.
    bool Eof = 1;

    // Status of the Get operation
    SLErrorStatus ErrStatus = 2;

    // Returned entries as requested in the Get operation.
    // if ErrStatus is SL_SUCCESS, Entries contains the info requested
    repeated SLVrfReg Entries = 3;
}

// VRF Get Stats Message Response
message SLVRFGetStatsMsgRes {
    // VRF name as key
    string VrfName = 1;
    
    // Num VRF Routes added through the service layer.
    uint32 RouteCount = 2;
}

// VRF Get Stats Message Response
message SLVRFGetStatsMsgRsp {
    // End Of File.
    // When set to True, it indicates that the server has returned M, where 
    // M < N, of the original N requested Entries.
    bool Eof = 1;

    // Status of the Get Stats operation
    SLErrorStatus ErrStatus = 2;

    // Returned entries as requested in the Get Stats operation on per client basis
    // if ErrStatus is SL_SUCCESS, Entries contains the info requested
    repeated SLVRFGetStatsMsgRes Entries = 3;
}

// L3 Event Notification types
enum SLNotifType {
    // Reserved. 0x0
    SL_EVENT_TYPE_RESERVED = 0x0;

    // Error - ErrStatus field elaborates on the error.
    // The client can decide to close the stream based on the error. 0x1
    SL_EVENT_TYPE_ERROR = 0x1;

    // Status of GetNotifMsg per VRF.
    // NotifStatus field elaborates on the result.
    // If there is an error, only the notification for the VRF in the
    // status message is not setup. 0x2
    SL_EVENT_TYPE_STATUS = 0x2;

    // Route Notification. 0x3
    SL_EVENT_TYPE_ROUTE = 0x3;

    // Start marker per VRF - sent before any ROUTE notification is sent.
    // This is an indication to stale any objects received until now. 0x4
    SL_EVENT_TYPE_START_MARKER = 0x4;

    // End marker per VRF - sent after all ROUTE notifications are sent.
    // This is an indication to sweep any stale objects, if present. 0x5
    SL_EVENT_TYPE_END_MARKER = 0x5;

    // VRF Add/Update/Delete Notification. 0x6
    SL_EVENT_TYPE_VRF = 0x6;
}

enum SLRouteFlags {
    // Flags to control programming of the route and Path Group to 
    // Routing Information Base.
    // Each flag is indicated as a bit field. Supported values are:

    // Reserved.
    SL_ROUTE_FLAG_RESERVED = 0x00;

    // This route takes precedence over a route
    // learnt by LDP.
    SL_ROUTE_FLAG_PREFER_OVER_LDP = 0x01;
  
    // If this route is preferred over any other producer of the same prefix
    // and the latter is programmed with a SR label as well, do not merge
    // that label's programming this route.
    SL_ROUTE_FLAG_DISABLE_LABEL_MERGE = 0x2; 

    // Install viable paths only. See text in SLRoutecommon/PathGroup for more details
    SL_ROUTE_FLAG_VIABLE_PATHS_ONLY = 0x04;

    // Route is considered active if there is atleast one viable path. 
    // See text in SLRoutecommon/PathGroup for more details.
    SL_ROUTE_FLAG_ACTIVE_ON_VIABLE_PATH = 0x08;
 
    // All others are reserved.
}

enum SLPathFlags {
    // Path Flags.
    // Each flag is indicated as a bit field. Supported values are:

    // Reserved.
    SL_PATH_FLAG_RESERVED = 0x00;

    // Enables hardware optimization for single path VxLAN tunnels.
    SL_PATH_FLAG_SINGLE_PATH_OPT  = 0x01;
}

// Common Get Notifications message
message SLRouteGetNotifMsg {
    // Oper = SL_NOTIFOP_ENABLE
    //   This is to enable route notifications in a VRF
    // Oper = SL_NOTIFOP_DISABLE
    //   This is to disable route notifications in a VRF
    SLNotifOp Oper = 1;

    // Correlator. This is used to correlate SLRouteGetNotifMsg with
    // SLRouteNotifStatus. The server reflects this field in the reply.
    // A client can send a SLRouteGetNotifMsg with the Correlator only.
    // Once accepted and reply is sent, VRF notifications are sent.
    // This is useful if a client wants to receive VRF notifications
    // (SLVrfNotif) only and is not interested in receiving route
    // notifications (SLRoutev4NotifRoute/SLRoutev6NotifRoute) from any VRF.
    uint64 Correlator = 2;

    // Vrf that the client is interested in.
    string VrfName = 3;

    // Source Protocol.
    // Only routes with specified source protocol and protocol tag will be
    // notified.
    // Contact Cisco for supported protocol string names.
    string SrcProto = 4;

    // Source Protocol Tag. This can be empty if N/A.
    // Contact Cisco for supported protocol tags.
    string SrcProtoTag = 5;
}

// Common Route Notification Status message
message SLRouteNotifStatus {
    // Correlator in the request.
    uint64 Correlator = 1;

    // Vrf in the request.
    string VrfName = 2;

    // The NotifStatus implies one of 2 things:
    // SL_SUCCESS: signifies that the notification request was successful
    // SL_XXX: signifies an error in setting up a notification for the Vrf.
    //  Implies that notifications for this VRF will not be sent.
    SLErrorStatus NotifStatus = 3;
}

// Common Marker Notification message
message SLRouteNotifMarker {
    // Vrf that this notification message applies to.
    string VrfName = 1;
}

// Common Vrf Notification message
message SLVrfNotif {
    // Vrf that this notification message applies to.
    string VrfName = 1;

    // Status of this Vrf: add/update/delete.
    SLObjectOp Status = 2;
}

// Get objects whose attibutes match one of below entries.
// Specify a regular expression for PathGroup name
// or a numerical value for Vxlan VNI.
message SLRouteGetMatch {
    oneof entry {
         string PathGroupRegex = 1;
         uint32 VxlanVniId = 2;
    }
}

// Common IPv4/IPv6 route attributes.
message SLRouteCommon {
    // Adminstrative distance of the route. [0-255].
    // RIB uses this field to break the tie when multiple
    // sources install the same route.
    // Lower distance is preferred over higher distance.
    // The per route object admin distance overrides the default admin
    // distance set at VRF registration. see SLVrfReg
    uint32 AdminDistance = 1;

    // Local label associated with this route.
    // This is an optional field that can be used to simulatenously setup an 
    // ILM entry (e.g. head end of an MPLS LSP) for the same route.
    // This is especially useful when setting up an MPLS LSP (a /32-route 
    // towards the remote LSP peer e.g. 2.2.2.2/32) which is required for MPLS
    // VPN labeled routes.
    //
    // Note: MPLS VPN labeled routes can resolve only on:
    //    - /32-routes with valid LocalLabel and a valid egress MPLS path label
    uint32 LocalLabel = 2;

    // Route Tag.
    // Routes are usually tagged to prevent loops during redistribution between
    // protocols.
    uint32 Tag = 3;

    // Source Protocol.
    // For redistributed messages via notification stream only,
    // ignored otherwise.
    // Contact Cisco for supported protocol string names.
    string SrcProto = 4;

    // Source Protocol Tag. This can be empty if N/A.
    // For redistributed messages via notification stream only,
    // ignored otherwise.
    // Contact Cisco for supported protocol tags.
    string SrcProtoTag = 5;

    // Route Flags.
    // Flags to control programming of the route to Routing Information Base.
    // Each flag is indicated as a bit field. 
    // See SLRouteFlags for flag enumerations.
    // Supported values are:
    //
    // SL_ROUTE_FLAG_PREFER_OVER_LDP - This route takes precedence
    // over a route learnt by LDP.
    //
    // SL_ROUTE_FLAG_DISABLE_LABEL_MERGE
    // If this route is preferred over any other producer of the same prefix
    // and the latter is programmed with a SR label as well, do not merge
    // that label's programming this route.
    //
    // SL_ROUTE_FLAG_VIABLE_PATHS_ONLY - This flag on the route
    // is applicable only if the route contains the PathList.
    //
    // - If the flag is not set, all paths in the PathList are installed in
    //   the route’s load balance group, even if paths are unviable. The 
    //   Network element does not automatically update the route’s load balance
    //   group when path viability changes and expects the client to take
    //   corrective action.
    //
    // - If the flag is set, the network element only installs viable
    //   paths from the PathList in the route’s load balance group.
    //   The Network element also automatically updates the route’s
    //   load balance group when path viability changes.
    //
    // - This flag is ignored if the route refers to the PathGroup and the
    //   corresponding setting on the PathGroup dictates path programming.
    //
    // SL_ROUTE_FLAG_ACTIVE_ON_VIABLE_PATH - This flag is supported only for
    // routes that contain the PathList.
    //
    // - If this flag is not set, the route is active if it is preferred
    //   based on administrative distance. Viability of the paths in
    //   the PathList is not used as a criterion to determine
    //   route’s activeness.
    //   If the route is active, the PathList programming is dictated by
    //   SL_ROUTE_FLAG_VIABLE_PATHS_ONLY.
    //
    // - If this flag is set, SL_ROUTE_FLAG_VIABLE_PATHS_ONLY must also
    //   be set. The route is considered as active if it is preferred based
    //   on administrative distance AND at least one path in the PathList
    //   is viable. The Network element also automatically promotes or demotes
    //   the route when the first path becomes viable or none of the paths
    //   are no longer viable.
    //
    // - If the route refers to the PathGroup,
    //   then this flag on the route is ignored. Instead, the
    //   corresponding setting on PathGroup dictates whether this
    //   route should be considered in best route calculations.
    //
    // All others are reserved.
    uint32 Flags = 6;
}

// Attributes for constructing VxLAN encapsulation for a IP packet.
message SLVxLANPath {
    // Virtual network identifier. Client must set a valid non-zero idenifier.
    uint32 VNI = 1;

    // Source MAC address is optional.
    bytes SourceMacAddress = 2;

    // Destination MAC address is optional.
    bytes DestMacAddress = 3;

    // Tunnel Source or Local IP address is mandatory.
    SLIpAddress SrcIpAddress = 4;

    // Tunnel Destination or Remote IP address is mandatory.
    SLIpAddress DestIpAddress = 5;
}

// Route Path attributes.
//
// In the multi-path associated with a IP route, MPLS label or a Path Group,
// paths with identical keys are coalesced and cannot be used
// as a mechanism to achieve unequal cost multi-path distribution.
//
// Path key includes NextHopAdress, NextHopInterface, and VrfName.
//
// FRR Note:
// Failover from primary to backup is based on the trigger used (e.g.
// link down, BFD, etc.). Revertion is mainly timeout based. The timeout
// value is platform specific and is not configurable.
message SLRoutePath {
    // One of IPv4 or IPv6 address
    // For ENCAP_VXLAN, this field is not supported and will be ignored
    SLIpAddress NexthopAddress = 1;

    // Outgoing interface name for the path.
    // For ENCAP_VXLAN, this field is not supported and will be ignored
    SLInterface NexthopInterface = 2;

    // Load metric for this path.
    // Used for equal/unequal cost load balancing of traffic distribution.
    // For equal cost load balancing, all paths associated with the
    // route, MPLS label or PathGroup must have a value of 0. For
    // unequal cost load balancing, all paths must have non-zero value
    // otherwise system defaults to equal cost load balancing.
    uint32 LoadMetric = 3;

    // Path VRF name. This field is used ONLY if the path is in a different
    // VRF than the route (e.g. VPN cases)
    string VrfName = 4;

    // Route Metric.
    // The metric is typically based on information like load, hop count,
    // MTU, reliability of the path, etc.
    uint32 Metric = 5;

    // Path identifier.
    // Path-id is used to uniquely identify a path when it comes to
    // protection (Fast Re-Route - FRR). It is not used otherwise.
    //
    // In general, for FRR, There are 3 main path attributes:
    //    1. Primary. The path is the main path to carry traffic.
    //    2. Protected. A primary path with a configured backup path.
    //    3. Backup. The path is protecting a primary path.
    //
    // NOTE1: a primary path (A) can be simultaneously protected (by B), and
    // acting as a backup for another path (C).
    // In this example, the primary path C is protected by A (which happens to
    // be primary). So the primary path (A) is Primary, Protected, and Backup.
    //
    // The following are various path types based on combinations of attributes:
    //    1. Pure Primary i.e. Not Protected and is not a Backup.
    //       => PathId is optional. ProtectedPathBitmap = 0x0
    //    2. Primary and Protected. Path is not a Backup.
    //       => PathId is mandatory. ProtectedPathBitmap = 0x0
    //    3. Primary and Not Protected. Path is also a Backup.
    //       => PathId is mandatory. ProtectedPathBitmap = 0xYYYY
    //    4. Primary and Protected. Path is also a Backup.
    //       => PathId is mandatory. ProtectedPathBitmap = 0xYYYY
    //    5. Pure Backup. Protection is not allowed for backup paths.
    //       => PathId is mandatory. ProtectedPathBitmap = 0xYYYY
    //
    // NOTE2: Pure backup path-id uses a different range than primary path-ids.
    // The valid range of primary path IDs, and pure backup path IDS are
    // platform dependent and can be retrieved through the client init message.
    uint32 PathId = 6;

    // Path protection bitmap.
    // The bitmap of paths this Backup path is protecting.
    // Example: If this path is protecting paths with IDs 4, 5 and 6, then
    // set bitmap to:
    // 0x38 ==> 0011 1000
    //            || |-- path 4
    //            ||-- path 5
    //            |-- path 6
    // (1 << (pathId_1 - 1))  | (1 << (pathId_2 - 1)) | (1 << (pathId_3 - 1))
    repeated uint64 ProtectedPathBitmap = 7;

    // MPLS label stack.
    // Stack of labels that is pushed when the packet is switched out.
    // Label size is LSB 20 bits. Forwarding will set EXP, TTL and BOS.
    // For primary path, typically only 1 label is used.
    // For backup paths, more than 1 label can be used. If more than one label
    // is used, remote backup addresses must be specified.
    //
    // The maximum number of labels pushed for primary and backup are
    // platform dependent.
    repeated uint32 LabelStack = 8;

    // MPLS Remote router backup address.
    // This field is used only for backup MPLS path with more than one label
    // For N+1 backup labels, N remote backup addresses must be specified.
    repeated SLIpAddress RemoteAddress = 9;

    // For VxLAN, Encapsulation type must be set to SL_ENCAP_VXLAN.
    SLEncapType EncapType = 10;

    // VTEP (VxLAN tunnel end point) router MAC address.
    // A unique system MAC address that other VTEPs can use for inter-VNI
    // routing. The router MAC address is used as the inner destination MAC
    // address for routed VXLAN packet. If this attribute
    // is set, route can be only be signalled via BGP for EVPN use and
    // local tunnel endpoint is not created.
    //
    // This field and VxLANPath are mutually exclusive. This field
    // is deprecated and will eventually be removed.
    bytes VtepRouterMacAddress = 11;

    // Create L3 VxLAN tunnel endpoint. Apply VxLAN encapsulation
    // on the IP packet.
    SLVxLANPath VxLANPath = 12;
    
    // Path Flags.
    // Each flag is indicated as a bit field. Supported values are:
    // 0x00000001 = SINGLE_PATH_OPT Enables hardware optimization for single path VxLAN tunnels
    uint32 Flags = 13;

}

// @}
