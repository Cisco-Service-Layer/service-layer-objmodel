// @file
// @brief Server RPC proto file for IPv4.
//
// ----------------------------------------------------------------
//  Copyright (c) 2016 by cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//

syntax = "proto3";
package service_layer;

import "sl_common_types.proto";
import "sl_route_common.proto";

// @defgroup SLRouteIPv4Oper
// @ingroup Route
// Defines RPC calls for IPv4 route changes and VRF registration.
// This service declares both the Vrf Registration, as well as adding, deleting
// and getting IPv4 routes.
// @{
service SLRoutev4Oper {
    //@addtogroup SLRouteIPv4Oper
    //@{
    //;

    //
    // Global Route operations
    //

    // Used to retrieve Global Route information
    rpc SLRoutev4GlobalsGet(SLRouteGlobalsGetMsg) returns (SLRouteGlobalsGetMsgRsp);

    // Used to retrieve Global Route Stats
    rpc SLRoutev4GlobalStatsGet(SLRouteGlobalStatsGetMsg) returns (SLRouteGlobalStatsGetMsgRsp);

    //
    // VRF registration operations
    //

    // SLVrfRegMsg.Oper = SL_REGOP_REGISTER:
    //     VRF registration: Sends a list of VRF registration messages
    //     and expects a list of registration responses.
    //     A client Must Register a VRF BEFORE routes can be added/modified in
    //    the associated VRF.
    //
    // SLVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
    //     VRF Un-registeration: Sends a list of VRF un-registration messages
    //     and expects a list of un-registration responses.
    //     This can be used to convey that the client is no longer interested
    //     in this VRF. All previously installed routes would be lost.
    //
    // SLVrfRegMsg.Oper = SL_REGOP_EOF:
    //     VRF End Of File message.
    //     After Registration, the client is expected to send an EOF
    //     message to convey the end of replay of the client's known objects.
    //     This is especially useful under certain restart scenarios when the
    //     client and the server are trying to synchronize their Routes.
    rpc SLRoutev4VrfRegOp(SLVrfRegMsg) returns (SLVrfRegMsgRsp);

    // VRF get. Used to retrieve VRF attributes from the server.
    rpc SLRoutev4VrfRegGet(SLVrfRegGetMsg) returns (SLVrfRegGetMsgRsp);

    // Used to retrieve VRF Stats from the server.
    rpc SLRoutev4VrfGetStats(SLVrfRegGetMsg) returns (SLVRFGetStatsMsgRsp);

    //
    // Route operations
    //

    // SLRoutev4Msg.Oper = SL_OBJOP_ADD:
    //     Route add. Fails if the route already exists.
    //
    // SLRoutev4Msg.Oper = SL_OBJOP_UPDATE:
    //     Route update. Creates or updates the route.
    //
    // SLRoutev4Msg.Oper = SL_OBJOP_DELETE:
    //     Route delete. The route path is not necessary to delete the route.
    rpc SLRoutev4Op(SLRoutev4Msg) returns (SLRoutev4MsgRsp);

    // Retrieves route attributes.
    rpc SLRoutev4Get(SLRoutev4GetMsg) returns (SLRoutev4GetMsgRsp);

    //
    // Stream Route operations
    //

    // SLRoutev4Msg.Oper = SL_OBJOP_ADD:
    //     Route add. Fails if the route already exists.
    //
    // SLRoutev4Msg.Oper = SL_OBJOP_UPDATE:
    //     Route update. Creates or updates the route.
    //
    // SLRoutev4Msg.Oper = SL_OBJOP_DELETE:
    //     Route delete. The route path is not necessary to delete the route.
    rpc SLRoutev4OpStream(stream SLRoutev4Msg) returns (stream SLRoutev4MsgRsp);

    // Retrieves route attributes.
    rpc SLRoutev4GetStream(stream SLRoutev4GetMsg) returns (stream SLRoutev4GetMsgRsp);
    //@}
}

// IPv4 route
message SLRoutev4 {
    // IPv4 Prefix
    // Valid addresses:
    //     0.0.0.0
    //     1.0.0.0 - 223.255.255.255
    uint32 Prefix = 1;

    // IPv4 prefix length, [0-32]
    uint32 PrefixLen = 2;

    // Common route attributes
    SLRouteCommon RouteCommon = 3;

    // List of route paths for a particular route.
    // Specifying more than one path is allowed for ECMP/UCMP cases
    repeated SLRoutePath PathList = 4;
}

// List of routes for bulk download
message SLRoutev4Msg {
    // Route Object Operations
    SLObjectOp Oper = 1;

    // Correlator. This can be used to correlate replies with requests.
    // The Server simply reflects this field back in the reply.
    uint64 Correlator = 2;

    // VRF name.
    string VrfName = 3;

    // List of routes for the VRF specified above
    repeated SLRoutev4 Routes = 4;
}

// IPv4 route result, uniquely identified by the Prefix/PrefixLen pair
message SLRoutev4Res {
    // Corresponding error code
    SLErrorStatus ErrStatus = 1;

    // IPv4 Prefix
    uint32 Prefix = 2;

    // IPv4 prefix length, [0-32]
    uint32 PrefixLen = 3;
}

// IPv4 bulk route result status
message SLRoutev4MsgRsp {
    // Correlator. This can be used to correlate replies with requests.
    // The Server simply reflects this field back in the reply.
    uint64 Correlator = 1;

    // VRF name (matches the VRF name of the original operation)
    string VrfName = 2;

    // Summary result of the bulk operation (refer to enum SLErrorStatus)
    // In general, the StatusSummary implies one of 3 things:
    // 1. SL_SUCCESS: signifies that the entire bulk operation was successful.
    //         In this case, the Results list is empty.
    // 2. SL_SOME_ERR: signifies that the operation failed for one or more
    //         entries. In this case, Results holds the result for
    //         each individual entry in the bulk.
    // 3. SL_RPC_XXX: signifies that the entire bulk operation failed.
    //         In this case, the Results list is empty.
    SLErrorStatus StatusSummary = 3;

    // In case of errors, this field indicates which entry in the bulk was
    // erroneous.
    repeated SLRoutev4Res Results = 4;
}

// Used to retrieve route attributes
message SLRoutev4GetMsg {
    // Correlator. This can be used to correlate stream replies with requests.
    // The Server simply reflects this field back in the reply.
    uint64 Correlator = 1;

    // VRF name.
    // If the Key is not specified, then request up to the first 
    // 'EntriesCount' entries.
    string VrfName = 2;

    // IPv4 Prefix
    uint32 Prefix = 3;

    // IPv4 prefix length, [0-32]
    uint32 PrefixLen = 4;

    // Number of entries requested
    uint32 EntriesCount = 5;

    // if GetNext is FALSE:
    //     request up to 'EntriesCount' entries starting from the key
    // If GetNext is TRUE, or if the key exact match is not found:
    //     request up to 'EntriesCount' entries starting from the key's next
    bool GetNext = 6;
}

// Gt Route message response
message SLRoutev4GetMsgRsp {
    // Correlator. This can be used to correlate replies with requests.
    // The Server simply reflects this field back in the reply.
    uint64 Correlator = 1;

    // End Of File.
    // When set to True, it indicates that the server has returned M, where 
    // M < N, of the original N requested Entries.
    bool Eof = 2;

    // VRF name.
    string VrfName = 3;

    // Status of the Get operation
    SLErrorStatus ErrStatus = 4;

    // Returned entries as requested in the Get operation.
    // if ErrStatus is SL_SUCCESS, Entries contains the info requested
    repeated SLRoutev4 Entries = 5;
}

//@}
