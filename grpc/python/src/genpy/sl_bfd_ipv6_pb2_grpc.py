# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import sl_bfd_common_pb2 as sl__bfd__common__pb2
from . import sl_bfd_ipv6_pb2 as sl__bfd__ipv6__pb2


class SLBfdv6OperStub(object):
    """@defgroup SLBfdIPv6Oper
    @ingroup BFD
    Used for IPv6 BFD registrations, and BFD session operations and notifications.
    Defines the RPC for adding, deleting, updating, and retrieving BFD sessions.
    @{
    @addtogroup SLBfdIPv6Oper
    @{
    ;
    BFD Registration Operations.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SLBfdv6RegOp = channel.unary_unary(
                '/service_layer.SLBfdv6Oper/SLBfdv6RegOp',
                request_serializer=sl__bfd__common__pb2.SLBfdRegMsg.SerializeToString,
                response_deserializer=sl__bfd__common__pb2.SLBfdRegMsgRsp.FromString,
                )
        self.SLBfdv6Get = channel.unary_unary(
                '/service_layer.SLBfdv6Oper/SLBfdv6Get',
                request_serializer=sl__bfd__common__pb2.SLBfdGetMsg.SerializeToString,
                response_deserializer=sl__bfd__common__pb2.SLBfdGetMsgRsp.FromString,
                )
        self.SLBfdv6GetStats = channel.unary_unary(
                '/service_layer.SLBfdv6Oper/SLBfdv6GetStats',
                request_serializer=sl__bfd__common__pb2.SLBfdGetMsg.SerializeToString,
                response_deserializer=sl__bfd__common__pb2.SLBfdGetStatsMsgRsp.FromString,
                )
        self.SLBfdv6GetNotifStream = channel.unary_stream(
                '/service_layer.SLBfdv6Oper/SLBfdv6GetNotifStream',
                request_serializer=sl__bfd__common__pb2.SLBfdGetNotifMsg.SerializeToString,
                response_deserializer=sl__bfd__ipv6__pb2.SLBfdv6Notif.FromString,
                )
        self.SLBfdv6SessionOp = channel.unary_unary(
                '/service_layer.SLBfdv6Oper/SLBfdv6SessionOp',
                request_serializer=sl__bfd__ipv6__pb2.SLBfdv6Msg.SerializeToString,
                response_deserializer=sl__bfd__ipv6__pb2.SLBfdv6MsgRsp.FromString,
                )
        self.SLBfdv6SessionGet = channel.unary_unary(
                '/service_layer.SLBfdv6Oper/SLBfdv6SessionGet',
                request_serializer=sl__bfd__ipv6__pb2.SLBfdv6GetMsg.SerializeToString,
                response_deserializer=sl__bfd__ipv6__pb2.SLBfdv6GetMsgRsp.FromString,
                )


class SLBfdv6OperServicer(object):
    """@defgroup SLBfdIPv6Oper
    @ingroup BFD
    Used for IPv6 BFD registrations, and BFD session operations and notifications.
    Defines the RPC for adding, deleting, updating, and retrieving BFD sessions.
    @{
    @addtogroup SLBfdIPv6Oper
    @{
    ;
    BFD Registration Operations.

    """

    def SLBfdv6RegOp(self, request, context):
        """SLBfdRegMsg.Oper = SL_REGOP_REGISTER:
        Global BFD registration.
        A client Must Register BEFORE BFD sessions can be added/modified.

        SLBfdRegMsg.Oper = SL_REGOP_UNREGISTER:
        Global BFD un-registration.
        This call is used to end all BFD notifications and unregister any
        interest in BFD session configuration.
        This call cleans up all BFD sessions previously requested.

        SLBfdRegMsg.Oper = SL_REGOP_EOF:
        BFD End Of File.
        After Registration, the client is expected to send an EOF
        message to convey the end of replay of the client's known objects.
        This is especially useful under certain restart scenarios when the
        client and the server are trying to synchronize their BFD sessions.

        The BFD registration operations can be used by the client to synchronize
        BFD sessions with the server. When the client re-registers with the
        server using SL_REGOP_REGISTER, server marks all BFD sessions as stale.
        Client can then reprogram BFD sessions. When client sends
        SL_REGOP_EOF, any session not reprogrammed by the client are
        removed from the device.

        The client must perform all operations (BFD registration,
        BFD session operations) from a single execution context.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SLBfdv6Get(self, request, context):
        """Used to retrieve global BFD info from the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SLBfdv6GetStats(self, request, context):
        """Used to retrieve global BFD stats from the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SLBfdv6GetNotifStream(self, request, context):
        """
        BFD notifications


        This call is used to get a stream of session state notifications.
        The caller must maintain the GRPC channel as long as
        there is interest in BFD session notifications. Only sessions that were
        created through this API will be notified to caller.
        This call can be used to get "push" notifications for session states.
        It is advised that the caller register for notifications before any
        sessions are created to avoid any loss of notifications.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SLBfdv6SessionOp(self, request, context):
        """
        BFD session operations


        SLBfdv6Msg.Oper = SL_OBJOP_ADD:
        Add one or multiple BFD sessions.

        SLBfdv6Msg.Oper = SL_OBJOP_UPDATE:
        Update one or multiple BFD sessions.

        SLBfdv6Msg.Oper = SL_OBJOP_DELETE:
        Delete one or multiple BFD sessions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SLBfdv6SessionGet(self, request, context):
        """Retrieve BFD session attributes and state.
        This call can be used to "poll" the current state of a session.
        @}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SLBfdv6OperServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SLBfdv6RegOp': grpc.unary_unary_rpc_method_handler(
                    servicer.SLBfdv6RegOp,
                    request_deserializer=sl__bfd__common__pb2.SLBfdRegMsg.FromString,
                    response_serializer=sl__bfd__common__pb2.SLBfdRegMsgRsp.SerializeToString,
            ),
            'SLBfdv6Get': grpc.unary_unary_rpc_method_handler(
                    servicer.SLBfdv6Get,
                    request_deserializer=sl__bfd__common__pb2.SLBfdGetMsg.FromString,
                    response_serializer=sl__bfd__common__pb2.SLBfdGetMsgRsp.SerializeToString,
            ),
            'SLBfdv6GetStats': grpc.unary_unary_rpc_method_handler(
                    servicer.SLBfdv6GetStats,
                    request_deserializer=sl__bfd__common__pb2.SLBfdGetMsg.FromString,
                    response_serializer=sl__bfd__common__pb2.SLBfdGetStatsMsgRsp.SerializeToString,
            ),
            'SLBfdv6GetNotifStream': grpc.unary_stream_rpc_method_handler(
                    servicer.SLBfdv6GetNotifStream,
                    request_deserializer=sl__bfd__common__pb2.SLBfdGetNotifMsg.FromString,
                    response_serializer=sl__bfd__ipv6__pb2.SLBfdv6Notif.SerializeToString,
            ),
            'SLBfdv6SessionOp': grpc.unary_unary_rpc_method_handler(
                    servicer.SLBfdv6SessionOp,
                    request_deserializer=sl__bfd__ipv6__pb2.SLBfdv6Msg.FromString,
                    response_serializer=sl__bfd__ipv6__pb2.SLBfdv6MsgRsp.SerializeToString,
            ),
            'SLBfdv6SessionGet': grpc.unary_unary_rpc_method_handler(
                    servicer.SLBfdv6SessionGet,
                    request_deserializer=sl__bfd__ipv6__pb2.SLBfdv6GetMsg.FromString,
                    response_serializer=sl__bfd__ipv6__pb2.SLBfdv6GetMsgRsp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'service_layer.SLBfdv6Oper', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SLBfdv6Oper(object):
    """@defgroup SLBfdIPv6Oper
    @ingroup BFD
    Used for IPv6 BFD registrations, and BFD session operations and notifications.
    Defines the RPC for adding, deleting, updating, and retrieving BFD sessions.
    @{
    @addtogroup SLBfdIPv6Oper
    @{
    ;
    BFD Registration Operations.

    """

    @staticmethod
    def SLBfdv6RegOp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service_layer.SLBfdv6Oper/SLBfdv6RegOp',
            sl__bfd__common__pb2.SLBfdRegMsg.SerializeToString,
            sl__bfd__common__pb2.SLBfdRegMsgRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SLBfdv6Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service_layer.SLBfdv6Oper/SLBfdv6Get',
            sl__bfd__common__pb2.SLBfdGetMsg.SerializeToString,
            sl__bfd__common__pb2.SLBfdGetMsgRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SLBfdv6GetStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service_layer.SLBfdv6Oper/SLBfdv6GetStats',
            sl__bfd__common__pb2.SLBfdGetMsg.SerializeToString,
            sl__bfd__common__pb2.SLBfdGetStatsMsgRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SLBfdv6GetNotifStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/service_layer.SLBfdv6Oper/SLBfdv6GetNotifStream',
            sl__bfd__common__pb2.SLBfdGetNotifMsg.SerializeToString,
            sl__bfd__ipv6__pb2.SLBfdv6Notif.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SLBfdv6SessionOp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service_layer.SLBfdv6Oper/SLBfdv6SessionOp',
            sl__bfd__ipv6__pb2.SLBfdv6Msg.SerializeToString,
            sl__bfd__ipv6__pb2.SLBfdv6MsgRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SLBfdv6SessionGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service_layer.SLBfdv6Oper/SLBfdv6SessionGet',
            sl__bfd__ipv6__pb2.SLBfdv6GetMsg.SerializeToString,
            sl__bfd__ipv6__pb2.SLBfdv6GetMsgRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
