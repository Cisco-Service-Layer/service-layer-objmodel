# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import sl_interface_pb2 as sl__interface__pb2


class SLInterfaceOperStub(object):
    """@defgroup Interfaces
    @brief Interface service definitions.
    Defines the RPC for getting interface status(es).
    @{
    @addtogroup Interfaces
    @{
    ;
    This service can be used to receive interface state change notifications.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SLInterfaceNotifStream = channel.stream_stream(
                '/service_layer.SLInterfaceOper/SLInterfaceNotifStream',
                request_serializer=sl__interface__pb2.SLInterfaceNotifMsg.SerializeToString,
                response_deserializer=sl__interface__pb2.SLInterfaceNotif.FromString,
                )


class SLInterfaceOperServicer(object):
    """@defgroup Interfaces
    @brief Interface service definitions.
    Defines the RPC for getting interface status(es).
    @{
    @addtogroup Interfaces
    @{
    ;
    This service can be used to receive interface state change notifications.

    """

    def SLInterfaceNotifStream(self, request_iterator, context):
        """This call is used to get a stream of interface notifications.
        The caller must maintain the GRPC channel as long as
        there is interest in interface notifications.
        This call can be used to get "push" notifications for interface info.
        It is advised that the caller register for notifications before any
        interfaces are used to avoid any loss of notifications.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SLInterfaceOperServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SLInterfaceNotifStream': grpc.stream_stream_rpc_method_handler(
                    servicer.SLInterfaceNotifStream,
                    request_deserializer=sl__interface__pb2.SLInterfaceNotifMsg.FromString,
                    response_serializer=sl__interface__pb2.SLInterfaceNotif.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'service_layer.SLInterfaceOper', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SLInterfaceOper(object):
    """@defgroup Interfaces
    @brief Interface service definitions.
    Defines the RPC for getting interface status(es).
    @{
    @addtogroup Interfaces
    @{
    ;
    This service can be used to receive interface state change notifications.

    """

    @staticmethod
    def SLInterfaceNotifStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/service_layer.SLInterfaceOper/SLInterfaceNotifStream',
            sl__interface__pb2.SLInterfaceNotifMsg.SerializeToString,
            sl__interface__pb2.SLInterfaceNotif.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
