# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import sl_policy_pb2 as sl__policy__pb2


class SLPolicyStub(object):
    """@defgroup SLPolicy
    @ingroup Policy
    Used for policy creation and deletion, add and delete rules from policy, 
    apply and un-apply policy from interfaces. 
    Defines the RPC for operations on policy, interface and get requests.
    @{ 
    @addtogroup SLPolicy
    @{
    ;
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SLPolicyOp = channel.unary_unary(
                '/service_layer.SLPolicy/SLPolicyOp',
                request_serializer=sl__policy__pb2.SLPolicyOpMsg.SerializeToString,
                response_deserializer=sl__policy__pb2.SLPolicyOpRsp.FromString,
                )
        self.SLPolicyGet = channel.unary_stream(
                '/service_layer.SLPolicy/SLPolicyGet',
                request_serializer=sl__policy__pb2.SLPolicyGetMsg.SerializeToString,
                response_deserializer=sl__policy__pb2.SLPolicyGetMsgRsp.FromString,
                )
        self.SLPolicyGlobalGet = channel.unary_unary(
                '/service_layer.SLPolicy/SLPolicyGlobalGet',
                request_serializer=sl__policy__pb2.SLPolicyGlobalGetMsg.SerializeToString,
                response_deserializer=sl__policy__pb2.SLPolicyGlobalGetMsgRsp.FromString,
                )


class SLPolicyServicer(object):
    """@defgroup SLPolicy
    @ingroup Policy
    Used for policy creation and deletion, add and delete rules from policy, 
    apply and un-apply policy from interfaces. 
    Defines the RPC for operations on policy, interface and get requests.
    @{ 
    @addtogroup SLPolicy
    @{
    ;
    """

    def SLPolicyOp(self, request, context):
        """
        Policy-object operations


        Policy and its rules
        Example for policy p1 with 3 rules r1, r2 and r3
        ------------------------------------------------
        Policy p1  
        Rule r1    
        Priority 1
        Match dscp 1  
        Match PathGroup Silver
        Action PathGroup Bronze  

        Rule r2 
        Priority 2
        Match dscp 2
        Match PathGroup Bronze
        Action PathGroup Silver

        Rule r3
        Priority 3
        Match PathGroup xxx
        Action PathGroup Gold
        End-policy 

        SLPolicyOpMsg.Oper = SL_OBJOP_POLICY_ADD 
        Add a new Policy object with rules (if specified).
        ADD operation implements MERGE semantics if the Policy object
        already exists.
        If the incoming Policy object contains rules that are already
        present (and idempotent) in the server's Policy object, they will
        ignored, and success will be returned for each such rule object.
        Update/modification to existing rule objects are rejected and
        error returned for that rule object.
        Rule objects in the request that do not exist in the server's
        Policy object will be appended to the existing Policy object.
        Existing rule objects in the server's Policy object are not
        affected.


        SLPolicyOpMsg.Oper = SL_OBJOP_POLICY_DELETE 
        Delete the policy object. The object's key is enough to delete the 
        object. Other attributes if present are ignored. Delete of a non-
        existent object is returned as success.


        SLPolicyOpMsg.Oper = SL_OBJOP_RULE_ADD 
        Add rules to an existing Policy object. If any of the rules exist,
        return success if the new rule is the same as existing rule. Else
        error is returned as rule modification is not supported.
        Fails if the Policy object key does not exist in the system or if
        no rule is provided.


        SLPolicyOpMsg.Oper = SL_OBJOP_RULE_DELETE 
        If the policy object does not exist, "Policy not found" error
        is returned. If policy object exists, delete the list of rules
        provided. Delete of a non-existent rule within a policy object
        is returned as success. If the last rule within a policy object
        is deleted, an empty policy will continue to exist. Fails if no
        rule is provided.


        SLPolicyOpMsg.Oper = SL_OBJOP_POLICY_APPLY 
        Apply the policy on an interface. Only the policy object key
        and the interface where it needs to be applied will be verified
        and used. Other attributes are ignored.  

        SLPolicyOpMsg.Oper = SL_OBJOP_POLICY_UNAPPLY 
        Unapply the policy on an interface. Only the policy object key
        and the interface where it needs to be removed from  will be 
        verified and used, other attributes are ignored.


        The device can be programmed by only one active instance of 
        this RPC.

        On client restart or RPC disconnects, the client has the
        to reconcile its new state with the state on the device
        by replaying the difference.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SLPolicyGet(self, request, context):
        """Retrieve all Policies and its rules and the interfaces where the  
        policy is applied from the server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SLPolicyGlobalGet(self, request, context):
        """Retrieve Global Policy capabilities 
        @} 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SLPolicyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SLPolicyOp': grpc.unary_unary_rpc_method_handler(
                    servicer.SLPolicyOp,
                    request_deserializer=sl__policy__pb2.SLPolicyOpMsg.FromString,
                    response_serializer=sl__policy__pb2.SLPolicyOpRsp.SerializeToString,
            ),
            'SLPolicyGet': grpc.unary_stream_rpc_method_handler(
                    servicer.SLPolicyGet,
                    request_deserializer=sl__policy__pb2.SLPolicyGetMsg.FromString,
                    response_serializer=sl__policy__pb2.SLPolicyGetMsgRsp.SerializeToString,
            ),
            'SLPolicyGlobalGet': grpc.unary_unary_rpc_method_handler(
                    servicer.SLPolicyGlobalGet,
                    request_deserializer=sl__policy__pb2.SLPolicyGlobalGetMsg.FromString,
                    response_serializer=sl__policy__pb2.SLPolicyGlobalGetMsgRsp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'service_layer.SLPolicy', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SLPolicy(object):
    """@defgroup SLPolicy
    @ingroup Policy
    Used for policy creation and deletion, add and delete rules from policy, 
    apply and un-apply policy from interfaces. 
    Defines the RPC for operations on policy, interface and get requests.
    @{ 
    @addtogroup SLPolicy
    @{
    ;
    """

    @staticmethod
    def SLPolicyOp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service_layer.SLPolicy/SLPolicyOp',
            sl__policy__pb2.SLPolicyOpMsg.SerializeToString,
            sl__policy__pb2.SLPolicyOpRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SLPolicyGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/service_layer.SLPolicy/SLPolicyGet',
            sl__policy__pb2.SLPolicyGetMsg.SerializeToString,
            sl__policy__pb2.SLPolicyGetMsgRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SLPolicyGlobalGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service_layer.SLPolicy/SLPolicyGlobalGet',
            sl__policy__pb2.SLPolicyGlobalGetMsg.SerializeToString,
            sl__policy__pb2.SLPolicyGlobalGetMsgRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
