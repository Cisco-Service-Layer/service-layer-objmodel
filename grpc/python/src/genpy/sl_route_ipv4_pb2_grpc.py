# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import sl_route_common_pb2 as sl__route__common__pb2
from . import sl_route_ipv4_pb2 as sl__route__ipv4__pb2


class SLRoutev4OperStub(object):
  """@defgroup SLRouteIPv4Oper
  @ingroup Route
  Defines RPC calls for IPv4 route changes and VRF registration.
  This service declares both the Vrf Registration, as well as adding, deleting
  and getting IPv4 routes.
  @{
  @addtogroup SLRouteIPv4Oper
  @{
  ;
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SLRoutev4GlobalsGet = channel.unary_unary(
        '/service_layer.SLRoutev4Oper/SLRoutev4GlobalsGet',
        request_serializer=sl__route__common__pb2.SLRouteGlobalsGetMsg.SerializeToString,
        response_deserializer=sl__route__common__pb2.SLRouteGlobalsGetMsgRsp.FromString,
        )
    self.SLRoutev4GlobalStatsGet = channel.unary_unary(
        '/service_layer.SLRoutev4Oper/SLRoutev4GlobalStatsGet',
        request_serializer=sl__route__common__pb2.SLRouteGlobalStatsGetMsg.SerializeToString,
        response_deserializer=sl__route__common__pb2.SLRouteGlobalStatsGetMsgRsp.FromString,
        )
    self.SLRoutev4VrfRegOp = channel.unary_unary(
        '/service_layer.SLRoutev4Oper/SLRoutev4VrfRegOp',
        request_serializer=sl__route__common__pb2.SLVrfRegMsg.SerializeToString,
        response_deserializer=sl__route__common__pb2.SLVrfRegMsgRsp.FromString,
        )
    self.SLRoutev4VrfRegGet = channel.unary_unary(
        '/service_layer.SLRoutev4Oper/SLRoutev4VrfRegGet',
        request_serializer=sl__route__common__pb2.SLVrfRegGetMsg.SerializeToString,
        response_deserializer=sl__route__common__pb2.SLVrfRegGetMsgRsp.FromString,
        )
    self.SLRoutev4VrfGetStats = channel.unary_unary(
        '/service_layer.SLRoutev4Oper/SLRoutev4VrfGetStats',
        request_serializer=sl__route__common__pb2.SLVrfRegGetMsg.SerializeToString,
        response_deserializer=sl__route__common__pb2.SLVRFGetStatsMsgRsp.FromString,
        )
    self.SLRoutev4Op = channel.unary_unary(
        '/service_layer.SLRoutev4Oper/SLRoutev4Op',
        request_serializer=sl__route__ipv4__pb2.SLRoutev4Msg.SerializeToString,
        response_deserializer=sl__route__ipv4__pb2.SLRoutev4MsgRsp.FromString,
        )
    self.SLRoutev4Get = channel.unary_unary(
        '/service_layer.SLRoutev4Oper/SLRoutev4Get',
        request_serializer=sl__route__ipv4__pb2.SLRoutev4GetMsg.SerializeToString,
        response_deserializer=sl__route__ipv4__pb2.SLRoutev4GetMsgRsp.FromString,
        )
    self.SLRoutev4OpStream = channel.stream_stream(
        '/service_layer.SLRoutev4Oper/SLRoutev4OpStream',
        request_serializer=sl__route__ipv4__pb2.SLRoutev4Msg.SerializeToString,
        response_deserializer=sl__route__ipv4__pb2.SLRoutev4MsgRsp.FromString,
        )
    self.SLRoutev4GetStream = channel.stream_stream(
        '/service_layer.SLRoutev4Oper/SLRoutev4GetStream',
        request_serializer=sl__route__ipv4__pb2.SLRoutev4GetMsg.SerializeToString,
        response_deserializer=sl__route__ipv4__pb2.SLRoutev4GetMsgRsp.FromString,
        )
    self.SLRoutev4GetNotifStream = channel.stream_stream(
        '/service_layer.SLRoutev4Oper/SLRoutev4GetNotifStream',
        request_serializer=sl__route__common__pb2.SLRouteGetNotifMsg.SerializeToString,
        response_deserializer=sl__route__ipv4__pb2.SLRoutev4Notif.FromString,
        )


class SLRoutev4OperServicer(object):
  """@defgroup SLRouteIPv4Oper
  @ingroup Route
  Defines RPC calls for IPv4 route changes and VRF registration.
  This service declares both the Vrf Registration, as well as adding, deleting
  and getting IPv4 routes.
  @{
  @addtogroup SLRouteIPv4Oper
  @{
  ;
  """

  def SLRoutev4GlobalsGet(self, request, context):
    """
    Global Route operations


    Used to retrieve Global Route information
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SLRoutev4GlobalStatsGet(self, request, context):
    """Used to retrieve Global Route Stats
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SLRoutev4VrfRegOp(self, request, context):
    """
    VRF registration operations


    SLVrfRegMsg.Oper = SL_REGOP_REGISTER:
    VRF registration: Sends a list of VRF registration messages
    and expects a list of registration responses.
    A client Must Register a VRF BEFORE routes can be added/modified in
    the associated VRF.

    SLVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
    VRF Un-registeration: Sends a list of VRF un-registration messages
    and expects a list of un-registration responses.
    This can be used to convey that the client is no longer interested
    in this VRF. All previously installed routes would be lost.

    SLVrfRegMsg.Oper = SL_REGOP_EOF:
    VRF End Of File message.
    After Registration, the client is expected to send an EOF
    message to convey the end of replay of the client's known objects.
    This is especially useful under certain restart scenarios when the
    client and the server are trying to synchronize their Routes.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SLRoutev4VrfRegGet(self, request, context):
    """VRF get. Used to retrieve VRF attributes from the server.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SLRoutev4VrfGetStats(self, request, context):
    """Used to retrieve VRF Stats from the server.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SLRoutev4Op(self, request, context):
    """
    Route operations


    SLRoutev4Msg.Oper = SL_OBJOP_ADD:
    Route add. Fails if the route already exists.

    SLRoutev4Msg.Oper = SL_OBJOP_UPDATE:
    Route update. Creates or updates the route.

    SLRoutev4Msg.Oper = SL_OBJOP_DELETE:
    Route delete. The route path is not necessary to delete the route.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SLRoutev4Get(self, request, context):
    """Retrieves route attributes.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SLRoutev4OpStream(self, request_iterator, context):
    """
    Stream Route operations


    SLRoutev4Msg.Oper = SL_OBJOP_ADD:
    Route add. Fails if the route already exists.

    SLRoutev4Msg.Oper = SL_OBJOP_UPDATE:
    Route update. Creates or updates the route.

    SLRoutev4Msg.Oper = SL_OBJOP_DELETE:
    Route delete. The route path is not necessary to delete the route.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SLRoutev4GetStream(self, request_iterator, context):
    """Retrieves route attributes.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SLRoutev4GetNotifStream(self, request_iterator, context):
    """
    Route Redistribution Operations


    This call is used to get a stream of route notifications.
    It can be used to get "push" notifications for route
    adds/updates/deletes.
    The caller must maintain the GRPC channel as long as there is
    interest in route notifications.

    The call takes a stream of per-VRF notification requests.
    The success/failure of the notification request is relayed in the
    SLRouteNotifStatus followed by a Start marker, any routes if present,
    and an End Marker.


    @}
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SLRoutev4OperServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SLRoutev4GlobalsGet': grpc.unary_unary_rpc_method_handler(
          servicer.SLRoutev4GlobalsGet,
          request_deserializer=sl__route__common__pb2.SLRouteGlobalsGetMsg.FromString,
          response_serializer=sl__route__common__pb2.SLRouteGlobalsGetMsgRsp.SerializeToString,
      ),
      'SLRoutev4GlobalStatsGet': grpc.unary_unary_rpc_method_handler(
          servicer.SLRoutev4GlobalStatsGet,
          request_deserializer=sl__route__common__pb2.SLRouteGlobalStatsGetMsg.FromString,
          response_serializer=sl__route__common__pb2.SLRouteGlobalStatsGetMsgRsp.SerializeToString,
      ),
      'SLRoutev4VrfRegOp': grpc.unary_unary_rpc_method_handler(
          servicer.SLRoutev4VrfRegOp,
          request_deserializer=sl__route__common__pb2.SLVrfRegMsg.FromString,
          response_serializer=sl__route__common__pb2.SLVrfRegMsgRsp.SerializeToString,
      ),
      'SLRoutev4VrfRegGet': grpc.unary_unary_rpc_method_handler(
          servicer.SLRoutev4VrfRegGet,
          request_deserializer=sl__route__common__pb2.SLVrfRegGetMsg.FromString,
          response_serializer=sl__route__common__pb2.SLVrfRegGetMsgRsp.SerializeToString,
      ),
      'SLRoutev4VrfGetStats': grpc.unary_unary_rpc_method_handler(
          servicer.SLRoutev4VrfGetStats,
          request_deserializer=sl__route__common__pb2.SLVrfRegGetMsg.FromString,
          response_serializer=sl__route__common__pb2.SLVRFGetStatsMsgRsp.SerializeToString,
      ),
      'SLRoutev4Op': grpc.unary_unary_rpc_method_handler(
          servicer.SLRoutev4Op,
          request_deserializer=sl__route__ipv4__pb2.SLRoutev4Msg.FromString,
          response_serializer=sl__route__ipv4__pb2.SLRoutev4MsgRsp.SerializeToString,
      ),
      'SLRoutev4Get': grpc.unary_unary_rpc_method_handler(
          servicer.SLRoutev4Get,
          request_deserializer=sl__route__ipv4__pb2.SLRoutev4GetMsg.FromString,
          response_serializer=sl__route__ipv4__pb2.SLRoutev4GetMsgRsp.SerializeToString,
      ),
      'SLRoutev4OpStream': grpc.stream_stream_rpc_method_handler(
          servicer.SLRoutev4OpStream,
          request_deserializer=sl__route__ipv4__pb2.SLRoutev4Msg.FromString,
          response_serializer=sl__route__ipv4__pb2.SLRoutev4MsgRsp.SerializeToString,
      ),
      'SLRoutev4GetStream': grpc.stream_stream_rpc_method_handler(
          servicer.SLRoutev4GetStream,
          request_deserializer=sl__route__ipv4__pb2.SLRoutev4GetMsg.FromString,
          response_serializer=sl__route__ipv4__pb2.SLRoutev4GetMsgRsp.SerializeToString,
      ),
      'SLRoutev4GetNotifStream': grpc.stream_stream_rpc_method_handler(
          servicer.SLRoutev4GetNotifStream,
          request_deserializer=sl__route__common__pb2.SLRouteGetNotifMsg.FromString,
          response_serializer=sl__route__ipv4__pb2.SLRoutev4Notif.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'service_layer.SLRoutev4Oper', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
