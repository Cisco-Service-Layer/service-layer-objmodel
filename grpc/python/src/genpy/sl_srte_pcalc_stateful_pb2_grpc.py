# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import sl_srte_pcalc_stateful_pb2 as sl__srte__pcalc__stateful__pb2


class SLSrteCalcStatefulStub(object):
    """@defgroup SLSrteCalcStateful

    @{ 

    This service provides online, stateful SR-TE path calculation capabilities
    in accordance with the Segment Routing Policy Architecture model defined in
    [RFC 9256](https://datatracker.ietf.org/doc/rfc9256/).
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SLSrtePathCompute = channel.stream_stream(
                '/service_layer.SLSrteCalcStateful/SLSrtePathCompute',
                request_serializer=sl__srte__pcalc__stateful__pb2.SLSrtePathComputeReqs.SerializeToString,
                response_deserializer=sl__srte__pcalc__stateful__pb2.SLSrtePathComputeRsps.FromString,
                )


class SLSrteCalcStatefulServicer(object):
    """@defgroup SLSrteCalcStateful

    @{ 

    This service provides online, stateful SR-TE path calculation capabilities
    in accordance with the Segment Routing Policy Architecture model defined in
    [RFC 9256](https://datatracker.ietf.org/doc/rfc9256/).
    """

    def SLSrtePathCompute(self, request_iterator, context):
        """Opens a bidirectional streaming channel to initiate, manage, and serve
        stateful path calculation requests.

        A single `PathCompute` channel can support any number of path requests and
        it is recommended that a client maintains only one channel per server that
        it is connected to.

        The client uses this channel to initiate new path calculation requests,
        update the attributes (e.g., optimization metric or constraints) of an
        active request, and withdraw obsolete ones. The client must maintain the
        channel open as long as it requires stateful path calculation service from
        the server.

        The server uses this channel to respond to the active path calculation
        requests of the client. The server sends a path response after receiving a
        new path calculation request from the client, an update to an existing
        request, or after a routing event in the network required a modification
        of the path. The server is responsible for monitoring the network topology
        and providing updated responses to the active path requests such that the
        response continuously meets the requirements of the path request.

        When the channel is closed, the server marks any active path request (that
        was managed through this channel) as *stale* and starts a timer. Another
        client may claim ownership of a stale path request in a new or existing
        channel. When the timer expires, any stale path request that was not
        claimed by another client is deleted.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SLSrteCalcStatefulServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SLSrtePathCompute': grpc.stream_stream_rpc_method_handler(
                    servicer.SLSrtePathCompute,
                    request_deserializer=sl__srte__pcalc__stateful__pb2.SLSrtePathComputeReqs.FromString,
                    response_serializer=sl__srte__pcalc__stateful__pb2.SLSrtePathComputeRsps.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'service_layer.SLSrteCalcStateful', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SLSrteCalcStateful(object):
    """@defgroup SLSrteCalcStateful

    @{ 

    This service provides online, stateful SR-TE path calculation capabilities
    in accordance with the Segment Routing Policy Architecture model defined in
    [RFC 9256](https://datatracker.ietf.org/doc/rfc9256/).
    """

    @staticmethod
    def SLSrtePathCompute(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/service_layer.SLSrteCalcStateful/SLSrtePathCompute',
            sl__srte__pcalc__stateful__pb2.SLSrtePathComputeReqs.SerializeToString,
            sl__srte__pcalc__stateful__pb2.SLSrtePathComputeRsps.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
