# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import sl_srte_policy_pb2 as sl__srte__policy__pb2


class SLSrtePolicyStub(object):
    """@defgroup SLSrtePolicy
    Used to programmatically create/update/delete SR-TE and SRv6TE policies.
    The real-time monitoring of these policies is done via BGP-LS or telemetry.
    Defines the RPC for operations on SRTE policy.

    @{ 
    @addtogroup SLSrtePolicy
    @{
    ;
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SLSrPolicyAdd = channel.unary_unary(
                '/service_layer.SLSrtePolicy/SLSrPolicyAdd',
                request_serializer=sl__srte__policy__pb2.SLSrPolicyMsg.SerializeToString,
                response_deserializer=sl__srte__policy__pb2.SLSrPolicyOpRsp.FromString,
                )
        self.SLSrPolicyDelete = channel.unary_unary(
                '/service_layer.SLSrtePolicy/SLSrPolicyDelete',
                request_serializer=sl__srte__policy__pb2.SLSrPolicyMsg.SerializeToString,
                response_deserializer=sl__srte__policy__pb2.SLSrPolicyOpRsp.FromString,
                )


class SLSrtePolicyServicer(object):
    """@defgroup SLSrtePolicy
    Used to programmatically create/update/delete SR-TE and SRv6TE policies.
    The real-time monitoring of these policies is done via BGP-LS or telemetry.
    Defines the RPC for operations on SRTE policy.

    @{ 
    @addtogroup SLSrtePolicy
    @{
    ;
    """

    def SLSrPolicyAdd(self, request, context):
        """
        SRTE Policy operations


        The SLSrPolicyAdd RPC is used to create/update a policy based on the
        passed parameters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SLSrPolicyDelete(self, request, context):
        """The SLSrPolicyDelete RPC is used to delete a policy/candidate-paths.
        If the message only contains the key of the policy, then all the CPs with gRPC
        originator-protocol are deleted. The policy is also deleted if it has no more CPs.
        If the message contains the keys of one or more CPs, then only these CPs are
        deleted and they have to be gRPC CPs.
        There is no requirement/enforcement for the client to delete the policy/CPs
        it created.
        @} 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SLSrtePolicyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SLSrPolicyAdd': grpc.unary_unary_rpc_method_handler(
                    servicer.SLSrPolicyAdd,
                    request_deserializer=sl__srte__policy__pb2.SLSrPolicyMsg.FromString,
                    response_serializer=sl__srte__policy__pb2.SLSrPolicyOpRsp.SerializeToString,
            ),
            'SLSrPolicyDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.SLSrPolicyDelete,
                    request_deserializer=sl__srte__policy__pb2.SLSrPolicyMsg.FromString,
                    response_serializer=sl__srte__policy__pb2.SLSrPolicyOpRsp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'service_layer.SLSrtePolicy', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SLSrtePolicy(object):
    """@defgroup SLSrtePolicy
    Used to programmatically create/update/delete SR-TE and SRv6TE policies.
    The real-time monitoring of these policies is done via BGP-LS or telemetry.
    Defines the RPC for operations on SRTE policy.

    @{ 
    @addtogroup SLSrtePolicy
    @{
    ;
    """

    @staticmethod
    def SLSrPolicyAdd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service_layer.SLSrtePolicy/SLSrPolicyAdd',
            sl__srte__policy__pb2.SLSrPolicyMsg.SerializeToString,
            sl__srte__policy__pb2.SLSrPolicyOpRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SLSrPolicyDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/service_layer.SLSrtePolicy/SLSrPolicyDelete',
            sl__srte__policy__pb2.SLSrPolicyMsg.SerializeToString,
            sl__srte__policy__pb2.SLSrPolicyOpRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
