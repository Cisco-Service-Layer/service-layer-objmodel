# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import sl_srte_policy_pb2 as sl__srte__policy__pb2


class SLSrtePolicyStub(object):
    """@defgroup SLSrtePolicy
    Used to programmatically create/update/delete SR-TE policies.
    Defines the RPC for operations on SR-TE policy.

    @{ 
    @addtogroup SLSrtePolicy
    @{
    ;
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SLSrPolicyOp = channel.stream_stream(
                '/service_layer.SLSrtePolicy/SLSrPolicyOp',
                request_serializer=sl__srte__policy__pb2.SLSrPolicyMsg.SerializeToString,
                response_deserializer=sl__srte__policy__pb2.SLSrPolicyRsp.FromString,
                )


class SLSrtePolicyServicer(object):
    """@defgroup SLSrtePolicy
    Used to programmatically create/update/delete SR-TE policies.
    Defines the RPC for operations on SR-TE policy.

    @{ 
    @addtogroup SLSrtePolicy
    @{
    ;
    """

    def SLSrPolicyOp(self, request_iterator, context):
        """
        SR-TE Policy operations


        The SLSrPolicyOp RPC is used to create/update/delete an SR-TE policy based on the
        specified parameters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SLSrtePolicyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SLSrPolicyOp': grpc.stream_stream_rpc_method_handler(
                    servicer.SLSrPolicyOp,
                    request_deserializer=sl__srte__policy__pb2.SLSrPolicyMsg.FromString,
                    response_serializer=sl__srte__policy__pb2.SLSrPolicyRsp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'service_layer.SLSrtePolicy', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SLSrtePolicy(object):
    """@defgroup SLSrtePolicy
    Used to programmatically create/update/delete SR-TE policies.
    Defines the RPC for operations on SR-TE policy.

    @{ 
    @addtogroup SLSrtePolicy
    @{
    ;
    """

    @staticmethod
    def SLSrPolicyOp(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/service_layer.SLSrtePolicy/SLSrPolicyOp',
            sl__srte__policy__pb2.SLSrPolicyMsg.SerializeToString,
            sl__srte__policy__pb2.SLSrPolicyRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
